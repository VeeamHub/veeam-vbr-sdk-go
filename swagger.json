{
  "openapi": "3.0.1",
  "info": {
    "title": "Veeam Backup & Replication REST API",
    "description": "This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.",
    "version": "1.1-rev0",
    "x-veeam-prev-version": "1.0-rev2"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "security": [
    {
      "Bearer": []
    }
  ],
  "tags": [
    {
      "name": "Login",
      "description": "The authorization process involves obtaining an access token and a refresh token.<br>For details on the authorization process and security settings, see [Authorization and Security](https://helpcenter.veeam.com/docs/backup/vbr_rest/authorization_security.html?ver=120).<SecurityDefinitions />"
    },
    {
      "name": "Service",
      "description": "The Service section defines paths and operations for retrieving information about the backup server where the REST API service is running."
    },
    {
      "name": "Associated Services",
      "description": "The Associated Services section defines a path and operation for retrieving information about associated backend services. You may need to connect to these services for integration with Veeam Backup & Replication."
    },
    {
      "name": "Credentials",
      "description": "The Credentials section defines paths and operations for managing credentials records that are added to the backup server."
    },
    {
      "name": "Encryption",
      "description": "The Encryption section defines paths and operations for managing passwords that are used for data encryption."
    },
    {
      "name": "Connection",
      "description": "The Connection section defines a path and operation for retrieving a TLS certificate or SSH fingerprint used to establish a secure connection between the backup server and the specified server."
    },
    {
      "name": "Cloud Browser",
      "description": "The Cloud Browser section defines paths and operations for retrieving information about cloud resources (compute or storage). Cloud browser helps you map a cloud folder with an object storage repository."
    },
    {
      "name": "Inventory Browser",
      "description": "The Inventory Browser section defines paths and operations for retrieving VMware vSphere servers and their virtual infrastructure objects (data centers, clusters, hosts, resource pools, VMs).<br> <div class=\"note\"><strong>NOTE</strong><br>In the current version, you can browse VMware vSphere objects only.</div>"
    },
    {
      "name": "Traffic Rules",
      "description": "The Traffic Rules section defines paths and operations for retrieving and editing information about network traffic rules that are configured on the backup server."
    },
    {
      "name": "General Options",
      "description": "The General Options section defines paths and operations for retrieving and editing general settings of Veeam Backup & Replication.<br> <div class=\"note\"><strong>NOTE</strong><br>In the current version of the REST API, you can configure notification settings only.</div>"
    },
    {
      "name": "Configuration Backup",
      "description": "The Configuration Backup section defines paths and operations for managing backup of the configuration database that Veeam Backup & Replication uses."
    },
    {
      "name": "Managed Servers",
      "description": "The Managed Servers section defines paths and operations for managing servers.<br> <div class=\"note\"><strong>NOTE</strong><br>In the current version, the REST API supports the following server types&#58; *VMware vSphere*, *Linux* and *Windows*.</div>"
    },
    {
      "name": "Repositories",
      "description": "The Repositories section defines paths and operations for managing backup repositories.<br> <div class=\"note\"><strong>NOTE</strong><br>In the current version, the REST API supports the following storage types&#58; direct attached storages (Microsoft Windows and Linux servers), network attached storages (SMB and NFS shares) and object storages. For details on how to add an object storage repository, see [Adding Object Storage Repository](https://helpcenter.veeam.com/docs/backup/vbr_rest/object_storage.html?ver=120).</div>"
    },
    {
      "name": "Proxies",
      "description": "The Proxies section defines paths and operations for managing backup proxies.<br><div class=\"note\"><strong>NOTE</strong><br>In the current version, the REST API supports VMware backup proxies only.</div>"
    },
    {
      "name": "Jobs",
      "description": "The Jobs section defines paths and operations for managing jobs that are coordinated by the backup server.<br> <div class=\"note\"><strong>NOTE</strong><br>In the current version, the REST API supports only jobs of the *Backup* type that include only VMware vSphere objects of the following types&#58; *VirtualMachine*, *vCenterServer*, *Datacenter*, *Cluster*, *Host*, *ResourcePool*, *Folder*, *Template*, *Tag*, *Datastore* and *DatastoreCluster*. Objects with tags combination (or *Multitag*) are not supported.</div>"
    },
    {
      "name": "Backups",
      "description": "The Backups section defines paths and operations for managing backups that are created on or imported to the backup server."
    },
    {
      "name": "Backup Objects",
      "description": "The Backup Objects section defines paths and operations for managing backup objects — virtual infrastructure objects (VMs and VM containers) that are included in backups created by the backup server."
    },
    {
      "name": "Object Restore Points",
      "description": "The Object Restore Points section defines paths and operations for retrieving restore points created on the backup server and backed up disks from the restore points."
    },
    {
      "name": "Restore",
      "description": "The Restore section defines paths and operations for performing restore.<br> <div class=\"note\"><strong>NOTE</strong><br>In the current version, the REST API supports the following recovery operations:<ul> <li>Instant Recovery of a VMware vSphere VM to VMware vSphere</li> <li>Entire VM restore of a VMware vSphere VM to VMware vSphere</li> <li>Restore of disks that will be registered as First Class Disks (FCD) — a type of virtual disks that can be managed independent of any VM.</li></ul></div>"
    },
    {
      "name": "Sessions",
      "description": "The Sessions section defines paths and operations for managing sessions (except [automation sessions](#tag/Automation/operation/GetAllAutomationSessions)) performed on the backup server."
    },
    {
      "name": "Agents",
      "description": "The Agents section defines paths and operations for managing recovery tokens used for bare-metal recovery."
    },
    {
      "name": "Automation",
      "description": "The Automation section defines paths and operations for granular import and export of objects available in the REST API. It can be useful, for example, if you set up the backup infrastructure using JSON specification or migrate the infrastructure to another backup server. For details, see [Mass Deployment](https://helpcenter.veeam.com/docs/backup/vbr_rest/automation.html?ver=120)."
    }
  ],
  "paths": {
    "/api/v1/serverTime": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Get Backup Server Time",
        "description": "The HTTP GET request to the `/api/v1/serverTime` path allows you to get current date and time on the backup server.",
        "operationId": "GetServerTime",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerTimeModel"
                },
                "example": {
                  "serverTime": "2022-01-25T18:31:50.7300443+01:00",
                  "timeZone": "(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": []
      }
    },
    "/api/v1/serverCertificate": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Get Backup Server Certificate",
        "description": "The HTTP GET request to the `/api/v1/serverCertificate` path allows you to get a certificate of the backup server.",
        "operationId": "GetServerCertificate",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateModel"
                },
                "example": {
                  "thumbprint": "4E916B201930CD9AE44C20019F87F2A4EF227303",
                  "serialNumber": "65FFC0E36A66B2BA40EF93AF47C2EF7D",
                  "keyAlgorithm": "RSA-PKCS1-KeyEx",
                  "keySize": "2048",
                  "subject": "CN=Veeam Backup Server Certificate",
                  "issuedTo": "Veeam Backup Server Certificate",
                  "issuedBy": "Veeam Backup Server Certificate",
                  "validFrom": "2021-03-17T19:53:54+01:00",
                  "validBy": "2031-03-17T19:53:54+01:00"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": []
      }
    },
    "/api/v1/serverInfo": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "Get Backup Server Information",
        "description": "The HTTP GET request to the `/api/v1/serverInfo` path allows you to get Veeam Backup & Replication installation ID, backup server name (or IP address), build number and cumulative patches installed on the backup server.",
        "operationId": "GetServerInfo",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerInfoModel"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/services": {
      "get": {
        "tags": [
          "Associated Services"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewServices"
          ]
        },
        "summary": "Get Associated Services",
        "description": "The HTTP GET request to the `/api/v1/services` path allows you to get associated services for integration with Veeam Backup & Replication.",
        "operationId": "GetAllServices",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "skip",
            "description": "Number of services to skip.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ServicesFilters"
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of services to return.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ServicesFilters"
            }
          },
          {
            "name": "orderColumn",
            "description": "Sorts services by one of the service parameters.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EServicesFiltersOrderColumn"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ServicesFilters"
            }
          },
          {
            "name": "orderAsc",
            "description": "Sorts services in the ascending order by the `orderColumn` parameter.",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ServicesFilters"
            }
          },
          {
            "name": "nameFilter",
            "description": "Filters services by the `nameFilter` pattern. The pattern can match any service parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ServicesFilters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicesResult"
                },
                "example": {
                  "data": [
                    {
                      "name": "External Infrastructure DB Provider",
                      "port": 6172
                    },
                    {
                      "name": "VM Backup API",
                      "port": 10006
                    }
                  ],
                  "pagination": {
                    "total": 2,
                    "count": 2,
                    "skip": 0,
                    "limit": 200
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/oauth2/token": {
      "post": {
        "tags": [
          "Login"
        ],
        "summary": "Get Access Token",
        "description": "The HTTP POST request to the `/api/oauth2/token` path allows you to get an access token and a refresh token.",
        "operationId": "CreateToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TokenLoginSpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenModel"
                },
                "example": {
                  "access_token": "eyJhbGciOiJSUzUxMiIsImtpZCI6IjRFOTE2QjIwMTkzMENEOUFFNDRDMjAwMTlGODdGMkE0RUYyMjczMDMiLCJ0eXAiOiJKV1QifQ.eyJ1bmlxdWVfbmFtZSI6InNoZWlsYS5kLmNvcnkiLCJuYmYiOjE2NDMwMzA2NTgsImV4cCI6MTY0MzAzMTU1OCwiaWF0IjoxNjQzMDMwNjU4LCJhdWQiOiJhY2Nlc3MifQ.PYyLnd-AGcQDiMN6RibL_3D-IzngzGqM0Du0huiEbswyqB9JATF3PJvPPKQn1H27xYEiznDyhAnbs9qZNNXlK0E7yRZbifUat16C1XDCvKFXAkije_44xakcUf5aUeU5YVRyjHa-hTRTkwISj9lBCNf_WdpttkK2stgyRCafrj057ATgUyru6o5gZhTYIS4cioAXmhvLvB7Qrn4X080DHH0-KqYeSQwnQASi1HDuogfkEmxyu8380fbGJiyK4eKGLJ2hmq5DsMmL0BSSzIvUiifLPS5_Ei4-9EOFOv3RlLmk6eQNefaLrkRSsV7QSgGZDLc98zIBlD2yrUccx2cj9A",
                  "token_type": "bearer",
                  "refresh_token": "eyJhbGciOiJSUzUxMiIsImtpZCI6IjRFOTE2QjIwMTkzMENEOUFFNDRDMjAwMTlGODdGMkE0RUYyMjczMDMiLCJ0eXAiOiJKV1QifQ.eyJ1bmlxdWVfbmFtZSI6InNoZWlsYS5kLmNvcnkiLCJ0b2tlbl9pZCI6IjEwNTA4YWUyLTk0YzctNGRkNi04YzEyLWZjNGY1NDQ1MzM0YSIsInNob3J0X3Rlcm1fZXhwaXJhdGlvbiI6IkZhbHNlIiwibmJmIjoxNjQzMDMwNjU5LCJleHAiOjE2NDQyNDAyNTksImlhdCI6MTY0MzAzMDY1OSwiYXVkIjoicmVmcmVzaCJ9.RXx9xPlpoUuRwO7sTkBTXntpc3vixXc2kgfCPfRcpePdzOGbLqn64c1hCHTGgXPKgZ4ogEY58N2D3xUPd6spAdfbOkF_XwjEEDpxf03rl7LYMo-OXQ0PxVtUCJK3_o6Dfah0YV6IYu5yctvd-_1MKaac7vV5Zl87qhlF8w4e7LT0QPD_Vhp2JUoD3dSTvYw9WvNDqaRotYfaWj05yTB3PArVwSiPDg1oZXSLxROmDDtKf5FFqSgOdp4LxJmD6sYlv_2FQqG-tNwPqRyzKIaqiDDQXBR9MVmFHBl9iUcYOqvX9ZlCa7oPP_txjopks-NcpdyPkSH74hvoeOs3hujW8w",
                  "expires_in": 900,
                  ".issued": "2022-04-24T14:24:18+01:00",
                  ".expires": "2022-04-24T14:39:18+01:00"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": []
      }
    },
    "/api/oauth2/authorization_code": {
      "post": {
        "tags": [
          "Login"
        ],
        "summary": "Get Authorization Code",
        "description": "The HTTP POST request to the `/api/oauth2/authorization_code` path allows you to get an authorization code that is used to obtain an access token. For more information on authorization process, see [Requesting Authorization](https://helpcenter.veeam.com/docs/backup/vbr_rest/requesting_authorization.html?ver=120).",
        "operationId": "CreateAuthorizationCode",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationCodeModel"
                },
                "example": {
                  "code": "AAEAAPcbxUSe0PNKAN+ilV5d4M5Fkv9ONjwRa4hfZYoemxIDA/IHbrjldYbfu1MemydXxGR4KYe5woGq09k+URepuiwUVsg3WbXC179ECOARXmfMH9dFI5H4aiXTotwPvuXLAC2AU4nFSUI2Kr2jlg4Vm8hTEPisaEiOolaVPA5CTzSEribGVaPYwvzyEIn7qy+lLnvGN2dm46W6Q0QJ2dpw1SCI2DZRCRIz+L8Nq804hNwDQJk9TCPJ61ztwF4FM+wO2ToNvMkL6aVay7STpeTRlkFf5i5dAm2qC0a1fcDdkkxt2lwv47t52I2tyZafpdLXs1eb+y7ZnuYQGbDI3epq5GAIAAAAK1kt2wvg2Qg="
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/oauth2/logout": {
      "post": {
        "tags": [
          "Login"
        ],
        "operationId": "Logout",
        "summary": "Log Out",
        "description": "The HTTP POST request to the `/api/oauth2/logout` path allows you to perform the logout operation. After you log out, your access and refresh tokens are expired.",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptySuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/trafficRules": {
      "get": {
        "tags": [
          "Traffic Rules"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewTrafficRules"
          ]
        },
        "summary": "Get Traffic Rules",
        "description": "The HTTP GET request to the `/api/v1/trafficRules` path allows you to get network traffic rules that control traffic transferred between backup infrastructure components.",
        "operationId": "GetAllTrafficRules",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalNetworkTrafficRulesModel"
                },
                "example": {
                  "useMultipleStreamsPerJob": true,
                  "uploadStreamsCount": 5,
                  "trafficRules": [
                    {
                      "throttlingUnit": "MbitPerSpec",
                      "id": "622b0112-a972-49c2-9987-24a57ddc930a",
                      "name": "Internet",
                      "sourceIPStart": "Any",
                      "sourceIPEnd": "",
                      "targetIPStart": "Internet",
                      "targetIPEnd": "",
                      "encryptionEnabled": true,
                      "throttlingEnabled": false,
                      "throttlingValue": 1,
                      "throttlingWindowEnabled": false,
                      "throttlingWindowOptions": {
                        "days": [
                          {
                            "day": "sunday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "monday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "tuesday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "wednesday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "thursday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "friday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "saturday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          }
                        ]
                      }
                    }
                  ],
                  "preferredNetworks": {
                    "isEnabled": false,
                    "networks": []
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Traffic Rules"
        ],
        "x-veeam-authorize": {
          "claims": [
            "UpdateTrafficRules"
          ]
        },
        "summary": "Edit Traffic Rules",
        "description": "The HTTP PUT request to the `/api/v1/trafficRules` path allows you to edit network traffic rules that are configured on the backup server.",
        "operationId": "UpdateTrafficRules",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlobalNetworkTrafficRulesModel"
              },
              "example": {
                "useMultipleStreamsPerJob": true,
                "uploadStreamsCount": 5,
                "trafficRules": [
                  {
                    "throttlingUnit": "MbitPerSpec",
                    "id": "622b0112-a972-49c2-9987-24a57ddc930a",
                    "name": "Internet",
                    "sourceIPStart": "Any",
                    "sourceIPEnd": "",
                    "targetIPStart": "Internet",
                    "targetIPEnd": "",
                    "encryptionEnabled": true,
                    "throttlingEnabled": false,
                    "throttlingValue": 2,
                    "throttlingWindowEnabled": true,
                    "throttlingWindowOptions": {
                      "days": [
                        {
                          "day": "sunday",
                          "hours": "0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        },
                        {
                          "day": "monday",
                          "hours": "0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        },
                        {
                          "day": "tuesday",
                          "hours": "1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        },
                        {
                          "day": "wednesday",
                          "hours": "1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        },
                        {
                          "day": "thursday",
                          "hours": "1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        },
                        {
                          "day": "friday",
                          "hours": "1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        },
                        {
                          "day": "saturday",
                          "hours": "1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        }
                      ]
                    }
                  }
                ],
                "preferredNetworks": {
                  "isEnabled": true,
                  "networks": [
                    {
                      "ipAddress": "124.0.0.0",
                      "subnetMask": "255.0.0.0",
                      "cidrNotation": "8"
                    },
                    {
                      "ipAddress": "123.0.0.0",
                      "subnetMask": "255.0.0.0",
                      "cidrNotation": "8"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Infrastructure session has been created to edit the traffic rules. To check the progress, track the session `state`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalNetworkTrafficRulesModel"
                },
                "example": {
                  "useMultipleStreamsPerJob": true,
                  "uploadStreamsCount": 5,
                  "trafficRules": [
                    {
                      "throttlingUnit": "MbitPerSpec",
                      "id": "622b0112-a972-49c2-9987-24a57ddc930a",
                      "name": "Internet",
                      "sourceIPStart": "Any",
                      "sourceIPEnd": "",
                      "targetIPStart": "Internet",
                      "targetIPEnd": "",
                      "encryptionEnabled": true,
                      "throttlingEnabled": false,
                      "throttlingValue": 2,
                      "throttlingWindowEnabled": true,
                      "throttlingWindowOptions": {
                        "days": [
                          {
                            "day": "sunday",
                            "hours": "0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "monday",
                            "hours": "0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "tuesday",
                            "hours": "1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "wednesday",
                            "hours": "1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "thursday",
                            "hours": "1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "friday",
                            "hours": "1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "saturday",
                            "hours": "1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          }
                        ]
                      }
                    }
                  ],
                  "preferredNetworks": {
                    "isEnabled": true,
                    "networks": [
                      {
                        "ipAddress": "124.0.0.0",
                        "subnetMask": "255.0.0.0",
                        "cidrNotation": "8"
                      },
                      {
                        "ipAddress": "123.0.0.0",
                        "subnetMask": "255.0.0.0",
                        "cidrNotation": "8"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/generalOptions": {
      "get": {
        "tags": [
          "General Options"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewGeneralOptions"
          ]
        },
        "summary": "Get Notification Settings",
        "description": "The HTTP GET request to the `/api/v1/generalOptions` path allows you to get notification settings of Veeam Backup & Replication.",
        "operationId": "GetGeneralOptions",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralOptionsModel"
                },
                "example": {
                  "emailSettings": {
                    "isEnabled": false,
                    "smtpServerName": "",
                    "advancedSmtpOptions": {
                      "port": 25,
                      "timeoutMs": 100000,
                      "SSLEnabled": false,
                      "authRequred": false,
                      "credentialsId": null
                    },
                    "from": "",
                    "to": "",
                    "subject": "[%JobResult%] %JobName% (%ObjectCount% objects) %Issues%",
                    "sendDailyReportsAt": "2019-01-01T22:00:00+01:00",
                    "notifyOnSuccess": true,
                    "notifyOnWarning": true,
                    "notifyOnFailure": true,
                    "notifyOnLastRetry": true
                  },
                  "notifications": {
                    "storageSpaceThresholdEnabled": true,
                    "storageSpaceThreshold": 10,
                    "datastoreSpaceThresholdEnabled": true,
                    "datastoreSpaceThreshold": 10,
                    "skipVMSpaceThresholdEnabled": true,
                    "skipVMSpaceThreshold": 5,
                    "notifyOnSupportExpiration": true,
                    "notifyOnUpdates": true
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "General Options"
        ],
        "x-veeam-authorize": {
          "claims": [
            "UpdateGeneralOptions"
          ]
        },
        "summary": "Edit Notification Settings",
        "description": "The HTTP PUT request to the `/api/v1/generalOptions` path allows you to edit notification settings of Veeam Backup & Replication.",
        "operationId": "UpdateGeneralOptions",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneralOptionsModel"
              },
              "example": {
                "emailSettings": {
                  "isEnabled": true,
                  "smtpServerName": "",
                  "advancedSmtpOptions": {
                    "port": 2425,
                    "timeoutMs": 100000,
                    "SSLEnabled": true,
                    "authRequred": true,
                    "credentialsId": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                  },
                  "from": "",
                  "to": "",
                  "subject": "[%JobResult%] %JobName% (%ObjectCount% objects) %Issues%",
                  "sendDailyReportsAt": "2022-01-01T22:00:00",
                  "notifyOnSuccess": true,
                  "notifyOnWarning": true,
                  "notifyOnFailure": true,
                  "notifyOnLastRetry": true
                },
                "notifications": {
                  "storageSpaceThresholdEnabled": true,
                  "storageSpaceThreshold": 15,
                  "datastoreSpaceThresholdEnabled": true,
                  "datastoreSpaceThreshold": 13,
                  "skipVMSpaceTresholdEnabled": true,
                  "skipVMSpaceTreshold": 5,
                  "notifyOnSupportExpiration": true,
                  "notifyOnUpdates": true
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Notification settings have been updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralOptionsModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/configBackup": {
      "get": {
        "tags": [
          "Configuration Backup"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewConfigBackupOptions"
          ]
        },
        "summary": "Get Configuration Backup",
        "description": "The HTTP GET request to the `/api/v1/configBackup` path allows you to get configuration backup of the backup server.",
        "operationId": "GetConfigBackupOptions",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigBackupModel"
                },
                "example": {
                  "isEnabled": true,
                  "backupRepositoryId": "d4b5e196-f3ad-474c-99bc-dfef051dae07",
                  "restorePointsToKeep": 10,
                  "notifications": {
                    "SNMPEnabled": true,
                    "SMTPSettings": {
                      "settingsType": "Custom",
                      "isEnabled": false,
                      "recipients": [],
                      "subject": "[%JobResult%] %JobName% (%Time%)",
                      "notifyOnSuccess": true,
                      "notifyOnWarning": true,
                      "notifyOnError": true
                    }
                  },
                  "schedule": {
                    "isEnabled": true,
                    "daily": {
                      "dailyKind": "Everyday",
                      "isEnabled": true,
                      "localTime": "10:00 AM",
                      "days": [
                        "monday",
                        "tuesday",
                        "wednesday",
                        "thursday",
                        "friday",
                        "saturday",
                        "sunday"
                      ]
                    },
                    "monthly": {
                      "dayOfWeek": "saturday",
                      "dayNumberInMonth": "Fourth",
                      "isEnabled": false,
                      "localTime": "10:00 PM",
                      "dayOfMonth": 1,
                      "months": [
                        "January",
                        "February",
                        "March",
                        "April",
                        "May",
                        "June",
                        "July",
                        "August",
                        "September",
                        "October",
                        "November",
                        "December"
                      ]
                    }
                  },
                  "lastSuccessfulBackup": {
                    "lastSuccessfulTime": "2022-01-21T10:00:35.033+01:00",
                    "sessionId": "a8f1b5ba-a6dc-416d-9b17-95e92c0d7e76"
                  },
                  "encryption": {
                    "isEnabled": true,
                    "passwordId": "ebf6c20f-7126-4186-a1b8-24e6c541161c"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Configuration Backup"
        ],
        "x-veeam-authorize": {
          "claims": [
            "UpdateConfigBackupOptions"
          ]
        },
        "summary": "Edit Configuration Backup",
        "description": "The HTTP PUT request to the `/api/v1/configBackup` path allows you to edit configuration backup of the backup server.",
        "operationId": "UpdateConfigBackupOptions",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigBackupModel"
              },
              "example": {
                "isEnabled": true,
                "backupRepositoryId": "d4b5e196-f3ad-474c-99bc-dfef051dae07",
                "restorePointsToKeep": 10,
                "notifications": {
                  "SNMPEnabled": true,
                  "SMTPSettings": {
                    "settingsType": "Custom",
                    "isEnabled": false,
                    "recipients": [],
                    "subject": "[%JobResult%] %JobName% (%Time%)",
                    "notifyOnSuccess": true,
                    "notifyOnWarning": true,
                    "notifyOnError": true
                  }
                },
                "schedule": {
                  "isEnabled": true,
                  "daily": {
                    "dailyKind": "Everyday",
                    "isEnabled": true,
                    "localTime": "10:00 AM",
                    "days": [
                      "monday",
                      "tuesday",
                      "wednesday",
                      "thursday",
                      "friday",
                      "saturday",
                      "sunday"
                    ]
                  },
                  "monthly": {
                    "dayOfWeek": "saturday",
                    "dayNumberInMonth": "Fourth",
                    "isEnabled": false,
                    "localTime": "10:00 PM",
                    "dayOfMonth": 1,
                    "months": [
                      "January",
                      "February",
                      "March",
                      "April",
                      "May",
                      "June",
                      "July",
                      "August",
                      "September",
                      "October",
                      "November",
                      "December"
                    ]
                  }
                },
                "lastSuccessfulBackup": {
                  "lastSuccessfulTime": "2022-01-21T10:00:35.033+01:00",
                  "sessionId": "a8f1b5ba-a6dc-416d-9b17-95e92c0d7e76"
                },
                "encryption": {
                  "isEnabled": false,
                  "passwordId": "ebf6c20f-7126-4186-a1b8-24e6c541161c"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Configuration backup settings have been updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigBackupModel"
                },
                "example": {
                  "isEnabled": true,
                  "backupRepositoryId": "d4b5e196-f3ad-474c-99bc-dfef051dae07",
                  "restorePointsToKeep": 10,
                  "notifications": {
                    "SNMPEnabled": true,
                    "SMTPSettings": {
                      "settingsType": "Custom",
                      "isEnabled": false,
                      "recipients": [],
                      "subject": "[%JobResult%] %JobName% (%Time%)",
                      "notifyOnSuccess": true,
                      "notifyOnWarning": true,
                      "notifyOnError": true
                    }
                  },
                  "schedule": {
                    "isEnabled": true,
                    "daily": {
                      "dailyKind": "Everyday",
                      "isEnabled": true,
                      "localTime": "10:00 AM",
                      "days": [
                        "monday",
                        "tuesday",
                        "wednesday",
                        "thursday",
                        "friday",
                        "saturday",
                        "sunday"
                      ]
                    },
                    "monthly": {
                      "dayOfWeek": "saturday",
                      "dayNumberInMonth": "Fourth",
                      "isEnabled": false,
                      "localTime": "10:00 PM",
                      "dayOfMonth": 1,
                      "months": [
                        "January",
                        "February",
                        "March",
                        "April",
                        "May",
                        "June",
                        "July",
                        "August",
                        "September",
                        "October",
                        "November",
                        "December"
                      ]
                    }
                  },
                  "lastSuccessfulBackup": {
                    "lastSuccessfulTime": "2022-01-21T10:00:35.033+01:00",
                    "sessionId": "a8f1b5ba-a6dc-416d-9b17-95e92c0d7e76"
                  },
                  "encryption": {
                    "isEnabled": false,
                    "passwordId": "ebf6c20f-7126-4186-a1b8-24e6c541161c"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/configBackup/backup": {
      "post": {
        "tags": [
          "Configuration Backup"
        ],
        "x-veeam-authorize": {
          "claims": [
            "StartConfigBackup"
          ]
        },
        "summary": "Start Configuration Backup",
        "description": "The HTTP POST request to the `/api/v1/configBackup` path allows you to start configuration backup.",
        "operationId": "StartConfigBackup",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Configuration backup has been started.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                },
                "example": {
                  "sessionType": "ConfigurationBackup",
                  "state": "Starting",
                  "id": "d20f79d1-962d-4cb1-809b-0364c5b90696",
                  "name": "Backup Configuration Job",
                  "activityId": "99d1bf3d-e2e0-4bec-b2b3-820c0b87d212",
                  "creationTime": "2022-01-26T17:13:29.097+01:00",
                  "endTime": null,
                  "progressPercent": 0,
                  "result": null,
                  "resourceId": null,
                  "resourceReference": null,
                  "parentSessionId": null,
                  "usn": 0
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/sessions": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewSessions"
          ]
        },
        "summary": "Get All Sessions",
        "description": "The HTTP GET request to the `/api/v1/sessions` path allows you to get an array of sessions performed on the backup server.",
        "operationId": "GetAllSessions",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "skip",
            "description": "Number of sessions to skip.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of sessions to return.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          },
          {
            "name": "orderColumn",
            "description": "Sorts sessions by one of the session parameters.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ESessionsFiltersOrderColumn"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          },
          {
            "name": "orderAsc",
            "description": "Sorts sessions in the ascending order by the `orderColumn` parameter.",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          },
          {
            "name": "nameFilter",
            "description": "Filters sessions by the `nameFilter` pattern. The pattern can match any session parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          },
          {
            "name": "createdAfterFilter",
            "description": "Returns sessions that are created after the specified date and time.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          },
          {
            "name": "createdBeforeFilter",
            "description": "Returns sessions that are created before the specified date and time.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          },
          {
            "name": "endedAfterFilter",
            "description": "Returns sessions that are finished after the specified date and time.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          },
          {
            "name": "endedBeforeFilter",
            "description": "Returns sessions that are finished before the specified date and time.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          },
          {
            "name": "typeFilter",
            "description": "Filters sessions by session type.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ESessionType"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          },
          {
            "name": "stateFilter",
            "description": "Filters sessions by session state.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ESessionState"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          },
          {
            "name": "resultFilter",
            "description": "Filters sessions by session result.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ESessionResult"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          },
          {
            "name": "jobIdFilter",
            "description": "Filters sessions by job ID.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsResult"
                },
                "example": {
                  "data": [
                    {
                      "sessionType": "Job",
                      "state": "Stopped",
                      "id": "c924ee2f-1197-4b37-8de3-009c1977f347",
                      "name": "Backup Job 1",
                      "activityId": "c05dfa57-f59a-4e90-8065-b7f5d3276406",
                      "creationTime": "2021-12-04T06:13:34.983+01:00",
                      "endTime": "2021-12-04T06:15:00.617+01:00",
                      "progressPercent": 100,
                      "result": {
                        "result": "Failed",
                        "message": "Creating synthetic full backup (22% done)",
                        "isCanceled": false
                      },
                      "resourceId": "c7478158-7c99-4bab-93b1-c3efdd1062fa",
                      "resourceReference": "/api/v1/backups/c7478158-7c99-4bab-93b1-c3efdd1062fa",
                      "parentSessionId": null,
                      "usn": 0
                    }
                  ],
                  "pagination": {
                    "total": 307,
                    "count": 1,
                    "skip": 0,
                    "limit": 1
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/sessions/{id}": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewSessions"
          ]
        },
        "summary": "Get Session",
        "description": "The HTTP GET request to the `/api/v1/sessions/{id}` path allows you to get a session that has the specified `id`.",
        "operationId": "GetSession",
        "parameters": [
          {
            "name": "id",
            "description": "ID of the session.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                },
                "example": {
                  "sessionType": "ConfigurationBackup",
                  "state": "Stopped",
                  "id": "f848e90c-7f37-4ff5-9d55-04e33f8a4de3",
                  "name": "Backup Configuration Job",
                  "activityId": "99d1bf3d-e2e0-4bec-b2b3-820c0b87d212",
                  "creationTime": "2021-11-08T10:00:12.56+01:00",
                  "endTime": "2021-11-08T10:00:34.017+01:00",
                  "progressPercent": 100,
                  "result": {
                    "result": "Success",
                    "message": "Success",
                    "isCanceled": false
                  },
                  "resourceId": null,
                  "resourceReference": null,
                  "parentSessionId": null,
                  "usn": 0
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/sessions/{id}/logs": {
      "get": {
        "tags": [
          "Sessions"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewSessions"
          ]
        },
        "summary": "Get Session Logs",
        "description": "The HTTP GET request to the `/api/v1/sessions/{id}/logs` path allows you to get an array of log records of a session that has the specified `id`.",
        "operationId": "GetSessionLogs",
        "parameters": [
          {
            "name": "id",
            "description": "ID of the session.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionLogResult"
                },
                "example": {
                  "totalRecords": 11,
                  "records": [
                    {
                      "status": "Warning",
                      "id": 11,
                      "startTime": "2021-11-05T06:03:15.866256+01:00",
                      "updateTime": "2021-11-05T06:03:15.866256+01:00",
                      "title": "Job finished with warning at 11/5/2021 6:03:15 AM ",
                      "description": ""
                    },
                    {
                      "status": "Succeeded",
                      "id": 10,
                      "startTime": "2021-11-05T06:03:15.756877+01:00",
                      "updateTime": "2021-11-05T06:03:15.756877+01:00",
                      "title": "Primary bottleneck: Source",
                      "description": ""
                    },
                    {
                      "status": "Succeeded",
                      "id": 9,
                      "startTime": "2021-11-05T06:03:15.647498+01:00",
                      "updateTime": "2021-11-05T06:03:15.647498+01:00",
                      "title": "Load: Source 86% > Proxy 54% > Network 56% > Target 42%",
                      "description": ""
                    },
                    {
                      "status": "Succeeded",
                      "id": 7,
                      "startTime": "2021-11-05T06:00:24.096249+01:00",
                      "updateTime": "2021-11-05T06:03:08.2098022+01:00",
                      "title": "Processing ubuntu88",
                      "description": ""
                    },
                    {
                      "status": "Succeeded",
                      "id": 5,
                      "startTime": "2021-11-05T06:00:18.9711163+01:00",
                      "updateTime": "2021-11-05T06:02:18.5413692+01:00",
                      "title": "Processing winsrv100",
                      "description": ""
                    },
                    {
                      "status": "Succeeded",
                      "id": 6,
                      "startTime": "2021-11-05T06:00:24.0650043+01:00",
                      "updateTime": "2021-11-05T06:01:02.6441456+01:00",
                      "title": "Processing dbserver01",
                      "description": ""
                    },
                    {
                      "status": "Succeeded",
                      "id": 8,
                      "startTime": "2021-11-05T06:00:59.2378014+01:00",
                      "updateTime": "2021-11-05T06:00:59.2378014+01:00",
                      "title": "All VMs have been queued for processing",
                      "description": ""
                    },
                    {
                      "status": "Succeeded",
                      "id": 4,
                      "startTime": "2021-11-05T06:00:12.0178073+01:00",
                      "updateTime": "2021-11-05T06:00:12.0178073+01:00",
                      "title": "Changed block tracking is enabled",
                      "description": ""
                    },
                    {
                      "status": "Succeeded",
                      "id": 3,
                      "startTime": "2021-11-05T06:00:12.0021761+01:00",
                      "updateTime": "2021-11-05T06:00:12.0021761+01:00",
                      "title": "VM size: 86 GB (48 GB used)",
                      "description": ""
                    },
                    {
                      "status": "Succeeded",
                      "id": 2,
                      "startTime": "2021-11-05T06:00:07.9864525+01:00",
                      "updateTime": "2021-11-05T06:00:10.377142+01:00",
                      "title": "Building list of machines to process",
                      "description": ""
                    },
                    {
                      "status": "Succeeded",
                      "id": 1,
                      "startTime": "2021-11-05T06:00:07.7051998+01:00",
                      "updateTime": "2021-11-05T06:00:07.7051998+01:00",
                      "title": "Job started at 11/5/2021 6:00:02 AM",
                      "description": ""
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/sessions/{id}/stop": {
      "post": {
        "tags": [
          "Sessions"
        ],
        "x-veeam-authorize": {
          "claims": [
            "StopSessions"
          ]
        },
        "summary": "Stop Session",
        "description": "The HTTP POST request to the `/api/v1/sessions/{id}/stop` path allows you to stop a session that has the specified `id`.",
        "operationId": "StopSession",
        "parameters": [
          {
            "name": "id",
            "description": "ID of the session.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptySuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/connectionCertificate": {
      "post": {
        "tags": [
          "Connection"
        ],
        "x-veeam-authorize": {
          "claims": [
            "CheckCertificate"
          ]
        },
        "summary": "Request TLS Certificate or SSH Fingerprint",
        "description": "The HTTP POST request to the `/api/v1/connectionCertificate` path allows you to get a TLS certificate or SSH fingerprint of the specified host.",
        "operationId": "GetConnectionCertificate",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HostConnectionSpec"
              },
              "example": {
                "serverName": "vcenter01.tech.local",
                "credentialsId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "type": "ViHost",
                "port": 443
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionCertificateModel"
                },
                "example": {
                  "fingerprint": null,
                  "certificate": {
                    "thumbprint": "1FFB549DC6C6CFF4DA8923F3E640F88925D11704",
                    "serialNumber": "00CE2401CE350B143C",
                    "keyAlgorithm": "RSA-PKCS1-KeyEx",
                    "keySize": "2048",
                    "subject": "C=US, CN=vcenter01.tech.local",
                    "issuedTo": "vcenter01.tech.local",
                    "issuedBy": "CA",
                    "validFrom": "2015-08-21T18:28:05+02:00",
                    "validBy": "2025-08-15T18:27:45+02:00"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/inventory/vmware/hosts": {
      "get": {
        "tags": [
          "Inventory Browser"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewViHierarchy"
          ]
        },
        "summary": "Get All VMware vSphere Servers",
        "description": "The HTTP GET request to the `/api/v1/inventory/vmware/hosts` path allows you to get an array of all VMware vSphere servers added to the backup infrastructure.",
        "operationId": "GetAllInventoryVmwareHosts",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "skip",
            "description": "Number of VMware vSphere servers to skip.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ViRootFilters"
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of VMware vSphere servers to return.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ViRootFilters"
            }
          },
          {
            "name": "orderColumn",
            "description": "Sorts VMware vSphere servers by one of the VMware vSphere server parameters.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EViRootFiltersOrderColumn"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ViRootFilters"
            }
          },
          {
            "name": "orderAsc",
            "description": "Sorts VMware vSphere servers in the ascending order by the `orderColumn` parameter.",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ViRootFilters"
            }
          },
          {
            "name": "nameFilter",
            "description": "Filters VMware vSphere servers by the `nameFilter` pattern. The pattern can match any VMware vSphere server parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ViRootFilters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViRootsResult"
                },
                "example": {
                  "data": [
                    {
                      "inventoryObject": {
                        "type": "vCenterServer",
                        "hostName": "vcenter01.tech01.local",
                        "name": "vcenter01.tech01.local",
                        "objectId": "d766a026-a7a7-4d6e-add0-9599a291394f"
                      },
                      "size": "N/A"
                    },
                    {
                      "inventoryObject": {
                        "type": "vCenterServer",
                        "hostName": "vcenter02.tech02.local",
                        "name": "vcenter02.tech02.local",
                        "objectId": "bd49ae5e-d5ec-4013-8ffa-c91beadce052"
                      },
                      "size": "N/A"
                    }
                  ],
                  "pagination": {
                    "total": 2,
                    "count": 2,
                    "skip": 0,
                    "limit": 200
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/inventory/vmware/hosts/{name}": {
      "get": {
        "tags": [
          "Inventory Browser"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewViHierarchy"
          ]
        },
        "summary": "Get VMware vSphere Server Objects",
        "description": "The HTTP GET request to the `/api/v1/inventory/vmware/hosts/{name}` path allows you to get an array of virtual infrastructure objects of the VMware vSphere server that has the specified `name`.",
        "operationId": "GetVmwareHostObject",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "name",
            "description": "Name of the VMware vSphere server.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "description": "Number of objects to skip.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/VCenterInventoryFilters"
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of objects to return.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/VCenterInventoryFilters"
            }
          },
          {
            "name": "orderColumn",
            "description": "Sorts objects by one of the object parameters.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EvCentersInventoryFiltersOrderColumn"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/VCenterInventoryFilters"
            }
          },
          {
            "name": "orderAsc",
            "description": "Sorts objects in the ascending order by the `orderColumn` parameter.",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/VCenterInventoryFilters"
            }
          },
          {
            "name": "objectIdFilter",
            "description": "Filters objects by object ID.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/VCenterInventoryFilters"
            }
          },
          {
            "name": "hierarchyTypeFilter",
            "description": "Filters objects by hierarchy type.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EHierarchyType"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/VCenterInventoryFilters"
            }
          },
          {
            "name": "nameFilter",
            "description": "Filters objects by the `nameFilter` pattern. The pattern can match any object parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/VCenterInventoryFilters"
            }
          },
          {
            "name": "typeFilter",
            "description": "Filters objects by virtual infrastructure type.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EVmwareInventoryType"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/VCenterInventoryFilters"
            }
          },
          {
            "name": "parentContainerNameFilter",
            "description": "Filters objects by name of the parent container.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/VCenterInventoryFilters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VCenterInventoryResult"
                },
                "example": {
                  "data": [
                    {
                      "inventoryObject": {
                        "type": "Datacenter",
                        "hostName": "vcenter01.tech.local",
                        "name": "Prague",
                        "objectId": "datacenter-42371"
                      },
                      "size": "N/A"
                    },
                    {
                      "inventoryObject": {
                        "type": "Folder",
                        "hostName": "vcenter01.tech.local",
                        "name": "Templates",
                        "objectId": "group-h42373"
                      },
                      "size": "N/A"
                    },
                    {
                      "inventoryObject": {
                        "type": "Host",
                        "hostName": "vcenter01.tech.local",
                        "name": "esx03.tech.local",
                        "objectId": "host-42428"
                      },
                      "size": "N/A"
                    },
                    {
                      "inventoryObject": {
                        "type": "ResourcePool",
                        "hostName": "vcenter01.tech.local",
                        "name": "Services",
                        "objectId": "resgroup-65867"
                      },
                      "size": "N/A"
                    },
                    {
                      "inventoryObject": {
                        "type": "VirtualMachine",
                        "hostName": "vcenter01.tech.local",
                        "name": "winsrv01",
                        "objectId": "vm-62230"
                      },
                      "size": "220 GB"
                    }
                  ],
                  "pagination": {
                    "total": 5,
                    "count": 5,
                    "skip": 0,
                    "limit": 200
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Inventory Browser"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewViHierarchy"
          ]
        },
        "summary": "Get VMware vSphere Server Objects",
        "description": "DEBUG ONLY! REMOVE BEFORE RELEASE",
        "operationId": "TestVmwareHostObject",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "name",
            "description": "Name of the VMware vSphere server.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VmwareObjectModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptySuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/backupInfrastructure/managedServers": {
      "get": {
        "tags": [
          "Managed Servers"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewManagedServers"
          ]
        },
        "summary": "Get All Servers",
        "description": "The HTTP GET request to the `/api/v1/backupInfrastructure/managedServers` path allows you to get an array of all servers that are added to the backup infrastructure.",
        "operationId": "GetAllManagedServers",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "skip",
            "description": "Number of servers to skip.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ManagedServersFilters"
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of servers to return.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ManagedServersFilters"
            }
          },
          {
            "name": "orderColumn",
            "description": "Sorts servers by one of the server parameters.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EManagedServersFiltersOrderColumn"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ManagedServersFilters"
            }
          },
          {
            "name": "orderAsc",
            "description": "Sorts servers in the ascending order by the `orderColumn` parameter.",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ManagedServersFilters"
            }
          },
          {
            "name": "nameFilter",
            "description": "Filters servers by the `nameFilter` pattern. The pattern can match any server parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ManagedServersFilters"
            }
          },
          {
            "name": "typeFilter",
            "description": "Filters servers by server type.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EManagedServerType"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ManagedServersFilters"
            }
          },
          {
            "name": "viTypeFilter",
            "description": "Filters servers by the type of VMware vSphere server.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EViHostType"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ManagedServersFilters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagedServersResult"
                },
                "example": {
                  "data": [
                    {
                      "sshSettings": {
                        "sshTimeOutMs": 20000,
                        "portRangeStart": 2500,
                        "portRangeEnd": 3300,
                        "serverThisSide": false,
                        "managementPort": 6162
                      },
                      "type": "LinuxHost",
                      "id": "535b5414-788d-4720-a53a-ecc830d2589b",
                      "name": "172.17.53.67",
                      "description": "Created by TECH\\sheila.d.cory",
                      "credentialsId": "b860489e-490d-4e43-b20a-a91c4e7d2e76"
                    },
                    {
                      "networkSettings": {
                        "components": [
                          {
                            "componentName": "DeployerSvc",
                            "port": 6160
                          },
                          {
                            "componentName": "Transport",
                            "port": 6162
                          },
                          {
                            "componentName": "Nfs",
                            "port": 6161
                          },
                          {
                            "componentName": "RestoreProxy",
                            "port": 6170
                          },
                          {
                            "componentName": "WanAccelerator",
                            "port": 6164
                          },
                          {
                            "componentName": "Tape",
                            "port": 6166
                          },
                          {
                            "componentName": "CloudGate",
                            "port": 6168
                          },
                          {
                            "componentName": "AgentConfigureService",
                            "port": 9380
                          },
                          {
                            "componentName": "FileSystemVssIntegration",
                            "port": 6210
                          },
                          {
                            "componentName": "VssHwSnapshotProvider",
                            "port": 6211
                          }
                        ],
                        "portRangeStart": 2500,
                        "portRangeEnd": 3300,
                        "serverThisSide": false
                      },
                      "type": "WindowsHost",
                      "id": "ee50f2fb-034f-41cd-8dc8-904aeae2d0d8",
                      "name": "enterprise04.tech.local",
                      "description": "Created by TECH\\sheila.d.cory",
                      "credentialsId": "fa4769b5-6722-4968-838b-866c29bd14d4"
                    },
                    {
                      "viHostType": "VC",
                      "port": 443,
                      "type": "ViHost",
                      "id": "de28dc43-b8ee-4e17-8e63-3d38b6604033",
                      "name": "vcenter01.tech.local",
                      "description": "Created by TECH\\administrator",
                      "credentialsId": "fa4769b5-6722-4968-838b-866c29bd14d4"
                    }
                  ],
                  "pagination": {
                    "total": 3,
                    "count": 3,
                    "skip": 0,
                    "limit": 200
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Managed Servers"
        ],
        "x-veeam-authorize": {
          "claims": [
            "CreateManagedServers"
          ]
        },
        "summary": "Add Server",
        "description": "The HTTP POST request to the `/api/v1/backupInfrastructure/managedServers` path allows you to add a server to the backup infrastructure.",
        "operationId": "CreateManagedServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagedServerSpec"
              },
              "example": {
                "networkSettings": {
                  "components": [
                    {
                      "componentName": "DeployerSvc",
                      "port": 6160
                    },
                    {
                      "componentName": "Transport",
                      "port": 6162
                    },
                    {
                      "componentName": "Nfs",
                      "port": 6161
                    },
                    {
                      "componentName": "RestoreProxy",
                      "port": 6170
                    },
                    {
                      "componentName": "WanAccelerator",
                      "port": 6164
                    },
                    {
                      "componentName": "Tape",
                      "port": 6166
                    },
                    {
                      "componentName": "CloudGate",
                      "port": 6168
                    },
                    {
                      "componentName": "AgentConfigureService",
                      "port": 9380
                    },
                    {
                      "componentName": "FileSystemVssIntegration",
                      "port": 6210
                    },
                    {
                      "componentName": "VssHwSnapshotProvider",
                      "port": 6211
                    }
                  ],
                  "portRangeStart": 2517,
                  "portRangeEnd": 3313,
                  "serverThisSide": true
                },
                "type": "WindowsHost",
                "name": "enterprise01.tech.local",
                "description": "Backup Repository",
                "credentialsId": "d7af15f3-8808-454e-ba79-2c2267acb05d"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Infrastructure session has been created to add the server. To check the progress, track the session `state`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                },
                "example": {
                  "sessionType": "Infrastructure",
                  "state": "Working",
                  "id": "59f85a1e-2016-4d08-aea5-2676a03d548c",
                  "name": "Infrastructure Item Saving",
                  "activityId": "59f85a1e-2016-4d08-aea5-2676a03d548c",
                  "creationTime": "2022-01-28T19:48:43.117+01:00",
                  "endTime": null,
                  "progressPercent": 0,
                  "result": null,
                  "resourceId": null,
                  "resourceReference": null,
                  "parentSessionId": null,
                  "usn": 0
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/backupInfrastructure/managedServers/{id}": {
      "get": {
        "tags": [
          "Managed Servers"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewManagedServers"
          ]
        },
        "summary": "Get Server",
        "description": "The HTTP GET request to the `/api/v1/backupInfrastructure/managedServers/{id}` path allows you to get a managed server that has the specified `id`.",
        "operationId": "GetManagedServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the managed server.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManagedServerModel"
                },
                "example": {
                  "networkSettings": {
                    "components": [
                      {
                        "componentName": "DeployerSvc",
                        "port": 6160
                      },
                      {
                        "componentName": "Transport",
                        "port": 6162
                      },
                      {
                        "componentName": "Nfs",
                        "port": 6161
                      },
                      {
                        "componentName": "RestoreProxy",
                        "port": 6170
                      },
                      {
                        "componentName": "WanAccelerator",
                        "port": 6164
                      },
                      {
                        "componentName": "Tape",
                        "port": 6166
                      },
                      {
                        "componentName": "CloudGate",
                        "port": 6168
                      },
                      {
                        "componentName": "AgentConfigureService",
                        "port": 9380
                      },
                      {
                        "componentName": "FileSystemVssIntegration",
                        "port": 6210
                      },
                      {
                        "componentName": "VssHwSnapshotProvider",
                        "port": 6211
                      }
                    ],
                    "portRangeStart": 2500,
                    "portRangeEnd": 3300,
                    "serverThisSide": false
                  },
                  "type": "WindowsHost",
                  "id": "fc5683a4-8c25-4f8e-97cc-0a40745a5729",
                  "name": "enterprise05.tech.local",
                  "description": "Backup repository",
                  "credentialsId": "97d00492-92b7-4929-9e11-68eaa63b88e3"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Managed Servers"
        ],
        "x-veeam-authorize": {
          "claims": [
            "UpdateManagedServers"
          ]
        },
        "summary": "Edit Server",
        "description": "The HTTP PUT request to the `/api/v1/backupInfrastructure/managedServers/{id}` path allows you to edit a managed server that has the specified `id`.",
        "operationId": "UpdateManagedServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the managed server.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManagedServerModel"
              },
              "example": {
                "sshSettings": {
                  "sshTimeOutMs": 20000,
                  "portRangeStart": 2500,
                  "portRangeEnd": 3300,
                  "serverThisSide": false,
                  "managementPort": 6162
                },
                "type": "LinuxHost",
                "id": "71988b5d-e338-4c62-81e5-05ea944d233e",
                "name": "linuxsrv01.tech.local",
                "description": "Backup repository",
                "credentialsId": "76571109-fe6e-4638-ad37-2f1f30e3e9f1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Infrastructure session has been created to edit the server. To check the progress, track the session `state`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                },
                "example": {
                  "sessionType": "Infrastructure",
                  "state": "Working",
                  "id": "e81a72de-9b0a-4f4a-a451-0d0ece4c54b2",
                  "name": "Infrastructure Item Saving",
                  "activityId": "e81a72de-9b0a-4f4a-a451-0d0ece4c54b2",
                  "creationTime": "2022-01-28T20:18:47.563+01:00",
                  "endTime": null,
                  "progressPercent": 0,
                  "result": null,
                  "resourceId": null,
                  "resourceReference": null,
                  "parentSessionId": null,
                  "usn": 0
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Managed Servers"
        ],
        "x-veeam-authorize": {
          "claims": [
            "DeleteManagedServers"
          ]
        },
        "summary": "Remove Server",
        "description": "The HTTP DELETE request to the `/api/v1/backupInfrastructure/managedServers/{id}` path allows you to remove a managed server that has the specified `id` from the backup infrastructure.",
        "operationId": "DeleteManagedServer",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the managed server.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "InfrastructureItemDeletion session has been created to remove the server. To check the progress, track the session `state`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                },
                "example": {
                  "sessionType": "InfrastructureItemDeletion",
                  "state": "Working",
                  "id": "af1a6027-3845-487e-9a16-6849f4775a1e",
                  "name": "Infrastructure Item Deletion",
                  "activityId": "fc5683a4-8c25-4f8e-97cc-0a40745a5729",
                  "creationTime": "2022-01-28T20:21:08.81+01:00",
                  "endTime": null,
                  "progressPercent": 0,
                  "result": null,
                  "resourceId": null,
                  "resourceReference": null,
                  "parentSessionId": null,
                  "usn": 0
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/backupInfrastructure/managedServers/{id}/updateSingleUseCredentials": {
      "post": {
        "tags": [
          "Managed Servers"
        ],
        "x-veeam-authorize": {
          "claims": [
            "UpdateManagedServers"
          ]
        },
        "summary": "Change to Single-Use Credentials",
        "description": "The HTTP POST request to the `/api/v1/backupInfrastructure/managedServers/{id}/updateSingleUseCredentials` path allows you to change from persistent to single-use credentials used to access a Linux server that has the specified `id`. Single-use type of credentials is required if you want to use the Linux server as a hardened repository.",
        "operationId": "UpdateSingleUseCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the managed server.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinuxCredentialsSpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Infrastructure session has been created to edit the server. To check the progress, track the session `state`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                },
                "example": {
                  "sessionType": "Infrastructure",
                  "state": "Working",
                  "id": "e81a72de-9b0a-4f4a-a451-0d0ece4c54b2",
                  "name": "Infrastructure Item Saving",
                  "activityId": "e81a72de-9b0a-4f4a-a451-0d0ece4c54b2",
                  "creationTime": "2022-01-28T20:18:47.563+01:00",
                  "endTime": null,
                  "progressPercent": 0,
                  "result": null,
                  "resourceId": null,
                  "resourceReference": null,
                  "parentSessionId": null,
                  "usn": 0
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/backupInfrastructure/repositories": {
      "get": {
        "tags": [
          "Repositories"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewRepositories"
          ]
        },
        "summary": "Get All Repositories",
        "description": "The HTTP GET request to the `/api/v1/backupInfrastructure/repositories` path allows you to get an array of all backup repositories that are added to the backup infrastructure.",
        "operationId": "GetAllRepositories",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "skip",
            "description": "Number of repositories to skip.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/RepositoriesFilters"
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of repositories to return.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/RepositoriesFilters"
            }
          },
          {
            "name": "orderColumn",
            "description": "Sorts repositories by one of the repository parameters.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ERepositoryFiltersOrderColumn"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/RepositoriesFilters"
            }
          },
          {
            "name": "orderAsc",
            "description": "Sorts repositories in the ascending order by the `orderColumn` parameter.",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/RepositoriesFilters"
            }
          },
          {
            "name": "nameFilter",
            "description": "Filters repositories by the `nameFilter` pattern. The pattern can match any repository parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/RepositoriesFilters"
            }
          },
          {
            "name": "typeFilter",
            "description": "Filters repositories by repository type.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ERepositoryType"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/RepositoriesFilters"
            }
          },
          {
            "name": "hostIdFilter",
            "description": "Filters repositories by ID of the backup server.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/RepositoriesFilters"
            }
          },
          {
            "name": "pathFilter",
            "description": "Filters repositories by path to the folder where backup files are stored.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/RepositoriesFilters"
            }
          },
          {
            "name": "vmbApiFilter",
            "description": "Filters repositories by VM Backup API parameters converted to the base64 string. To obtain the string, call the `GetApiProductInfoString` method of VM Backup API.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/RepositoriesFilters"
            }
          },
          {
            "name": "vmbApiPlatform",
            "description": "Filters repositories by ID of a platform that you use to communicate with VM Backup API.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/RepositoriesFilters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoriesResult"
                },
                "example": {
                  "data": [
                    {
                      "hostId": "e22b8842-c454-4036-abd5-f468c3248aaf",
                      "repository": {
                        "path": "C:\\Backup Repository",
                        "maxTaskCount": 4,
                        "readWriteRate": 0,
                        "advancedSettings": {
                          "alignDataBlocks": true,
                          "decompressBeforeStoring": false,
                          "rotatedDrives": false,
                          "perVmBackup": false
                        }
                      },
                      "mountServer": {
                        "mountServerId": "e22b8842-c454-4036-abd5-f468c3248aaf",
                        "writeCacheFolder": "C:\\ProgramData\\Veeam\\Backup\\IRCache\\",
                        "vPowerNFSEnabled": true,
                        "vPowerNFSPortSettings": {
                          "mountPort": 1063,
                          "vPowerNFSPort": 2049
                        }
                      },
                      "type": "WinLocal",
                      "id": "d4b5e196-f3ad-474c-99bc-dfef051dae07",
                      "name": "Backup Repository 1",
                      "description": "Created by TECH\\sheila.d.cory",
                      "tag": "D4B5E196F3AD474C99BCDFEF051DAE07"
                    },
                    {
                      "hostId": "6745a759-2205-4cd2-b172-8ec8f7e60ef8",
                      "repository": {
                        "path": "C:\\Backup",
                        "maxTaskCount": 4,
                        "readWriteRate": 0,
                        "advancedSettings": {
                          "alignDataBlocks": true,
                          "decompressBeforeStoring": false,
                          "rotatedDrives": false,
                          "perVmBackup": false
                        }
                      },
                      "mountServer": {
                        "mountServerId": "6745a759-2205-4cd2-b172-8ec8f7e60ef8",
                        "writeCacheFolder": "C:\\ProgramData\\Veeam\\Backup\\IRCache\\",
                        "vPowerNFSEnabled": true,
                        "vPowerNFSPortSettings": {
                          "mountPort": 1063,
                          "vPowerNFSPort": 2049
                        }
                      },
                      "type": "WinLocal",
                      "id": "88788f9e-d8f5-4eb4-bc4f-9b3f5403bcec",
                      "name": "Default Backup Repository",
                      "description": "Created by Veeam Backup",
                      "tag": "88788F9ED8F54EB4BC4F9B3F5403BCEC"
                    }
                  ],
                  "pagination": {
                    "total": 2,
                    "count": 2,
                    "skip": 0,
                    "limit": 200
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Repositories"
        ],
        "x-veeam-authorize": {
          "claims": [
            "CreateRepositories"
          ]
        },
        "summary": "Add Repository",
        "description": "The HTTP POST request to the `/api/v1/backupInfrastructure/repositories` path allows you to add a repository to the backup infrastructure.",
        "operationId": "CreateRepository",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "overwriteOwner",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/RepositoryBehaviorFilters"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepositorySpec"
              },
              "example": {
                "kind": "Das",
                "type": "WinLocal",
                "name": "Main Backup Repository",
                "description": "Created by TECH\\sheila.d.cory",
                "tag": "big-repository",
                "hostId": "6745a759-2205-4cd2-b172-8ec8f7e60ef8",
                "repository": {
                  "path": "D:\\Backups",
                  "maxTaskCount": 8,
                  "readWriteRate": 0,
                  "useFastCloningOnXFSVolumes": false,
                  "useImmutableBackups": null,
                  "makeRecentBackupsImmutableDays": null,
                  "advancedSettings": {
                    "alignDataBlocks": false,
                    "decompressBeforeStoring": false,
                    "rotatedDrives": false,
                    "perVmBackup": false
                  }
                },
                "mountServer": {
                  "mountServerId": "6745a759-2205-4cd2-b172-8ec8f7e60ef8",
                  "writeCacheFolder": "D:\\ProgramData\\Veeam\\Backup\\",
                  "vPowerNFSEnabled": true,
                  "vPowerNFSPortSettings": {
                    "mountPort": 1058,
                    "vPowerNFSPort": 1058
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Infrastructure session has been created to add the repository. To check the progress, track the session `state`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                },
                "example": {
                  "sessionType": "Infrastructure",
                  "state": "Working",
                  "id": "e81a72de-9b0a-4f4a-a451-0d0ece4c54b2",
                  "name": "Infrastructure Item Saving",
                  "activityId": "e81a72de-9b0a-4f4a-a451-0d0ece4c54b2",
                  "creationTime": "2022-01-28T20:18:47.563+01:00",
                  "endTime": null,
                  "progressPercent": 0,
                  "result": null,
                  "resourceId": null,
                  "resourceReference": null,
                  "parentSessionId": null,
                  "usn": 0
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/backupInfrastructure/repositories/states": {
      "get": {
        "tags": [
          "Repositories"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewRepositories"
          ]
        },
        "summary": "Get All Repository States",
        "description": "The HTTP GET request to the `/api/v1/backupInfrastructure/repositories/states` path allows you to get an array of all repository states. The states include repository location and brief statistics, such as repository capacity, free and used space.",
        "operationId": "GetAllRepositoriesStates",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "skip",
            "description": "Number of repository states to skip.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/RepositoryStatesFilters"
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of repository states to return.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/RepositoryStatesFilters"
            }
          },
          {
            "name": "orderColumn",
            "description": "Sorts repository states by one of the state parameters.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ERepositoryStatesFiltersOrderColumn"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/RepositoryStatesFilters"
            }
          },
          {
            "name": "orderAsc",
            "description": "Sorts repository states in the ascending order by the `orderColumn` parameter.",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/RepositoryStatesFilters"
            }
          },
          {
            "name": "idFilter",
            "description": "Filters repository states by repository ID.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/RepositoryStatesFilters"
            }
          },
          {
            "name": "nameFilter",
            "description": "Filters repository states by the `nameFilter` pattern. The pattern can match any repository state parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/RepositoryStatesFilters"
            }
          },
          {
            "name": "typeFilter",
            "description": "Filters repository states by repository type.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ERepositoryType"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/RepositoryStatesFilters"
            }
          },
          {
            "name": "capacityFilter",
            "description": "Filters repository states by repository capacity.",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/RepositoryStatesFilters"
            }
          },
          {
            "name": "freeSpaceFilter",
            "description": "Filters repository states by repository free space.",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/RepositoryStatesFilters"
            }
          },
          {
            "name": "usedSpaceFilter",
            "description": "Filters repository states by repository used space.",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/RepositoryStatesFilters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryStatesResult"
                },
                "example": {
                  "data": [
                    {
                      "type": "WinLocal",
                      "id": "d4b5e196-f3ad-474c-99bc-dfef051dae07",
                      "name": "Backup Repository 1",
                      "description": "Created by TECH\\sheila.d.cory",
                      "hostId": "e22b8842-c454-4036-abd5-f468c3248aaf",
                      "hostName": "enterprise03.tech.local",
                      "path": "C:\\Backup Repository",
                      "capacityGB": 299.4,
                      "freeGB": 217.8,
                      "usedSpaceGB": 173.4
                    },
                    {
                      "type": "WinLocal",
                      "id": "88788f9e-d8f5-4eb4-bc4f-9b3f5403bcec",
                      "name": "Default Backup Repository",
                      "description": "Created by Veeam Backup",
                      "hostId": "6745a759-2205-4cd2-b172-8ec8f7e60ef8",
                      "hostName": "enterprise06.tech.local",
                      "path": "C:\\Backup",
                      "capacityGB": 99.4,
                      "freeGB": 16.4,
                      "usedSpaceGB": 30.4
                    }
                  ],
                  "pagination": {
                    "total": 2,
                    "count": 2,
                    "skip": 0,
                    "limit": 200
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/backupInfrastructure/repositories/{id}": {
      "get": {
        "tags": [
          "Repositories"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewRepositories"
          ]
        },
        "summary": "Get Repository",
        "description": "The HTTP GET request to the `/api/v1/backupInfrastructure/repositories/{id}` path allows you to get a backup repository that has the specified `id`.",
        "operationId": "GetRepository",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the backup repository.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryModel"
                },
                "example": {
                  "hostId": "e22b8842-c454-4036-abd5-f468c3248aaf",
                  "repository": {
                    "path": "C:\\Backup Repository",
                    "maxTaskCount": 4,
                    "readWriteRate": 0,
                    "advancedSettings": {
                      "alignDataBlocks": true,
                      "decompressBeforeStoring": false,
                      "rotatedDrives": false,
                      "perVmBackup": false
                    }
                  },
                  "mountServer": {
                    "mountServerId": "e22b8842-c454-4036-abd5-f468c3248aaf",
                    "writeCacheFolder": "C:\\ProgramData\\Veeam\\Backup\\IRCache\\",
                    "vPowerNFSEnabled": true,
                    "vPowerNFSPortSettings": {
                      "mountPort": 1063,
                      "vPowerNFSPort": 2049
                    }
                  },
                  "type": "WinLocal",
                  "id": "d4b5e196-f3ad-474c-99bc-dfef051dae07",
                  "name": "Backup Repository 1",
                  "description": "Created by TECH\\sheila.d.cory",
                  "tag": "D4B5E196F3AD474C99BCDFEF051DAE07"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Repositories"
        ],
        "x-veeam-authorize": {
          "claims": [
            "UpdateRepositories"
          ]
        },
        "summary": "Edit Repository",
        "description": "The HTTP PUT request to the `/api/v1/backupInfrastructure/repositories/{id}` path allows you to edit a backup repository that has the specified `id`.",
        "operationId": "UpdateRepository",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the backup repository.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepositoryModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Infrastructure session has been created to edit the repository. To check the progress, track the session `state`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Repositories"
        ],
        "x-veeam-authorize": {
          "claims": [
            "DeleteRepositories"
          ]
        },
        "summary": "Remove Repository",
        "description": "The HTTP DELETE request to the `/api/v1/backupInfrastructure/repositories/{id}` path allows you to remove a backup repository that has the specified `id` from the backup infrastructure.",
        "operationId": "DeleteRepository",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the backup repository.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "deleteBackups",
            "description": "If *true*, Veeam Backup & Replication will remove backup files.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/DeleteRepositoryFilters"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Repository has been removed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptySuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/backupInfrastructure/repositories/{id}/accessPermissions": {
      "get": {
        "tags": [
          "Repositories"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewRepositoryAccessPermissions"
          ]
        },
        "summary": "Get Repository Access Permissions",
        "description": "The HTTP GET request to the `/api/v1/backupInfrastructure/repositories/{id}/accessPermissions` path allows you to get access permissions of a repository that has the specified `id`.",
        "operationId": "GetRepositoryAccessPermissions",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the backup repository.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryAccessPermissionsModel"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Repositories"
        ],
        "x-veeam-authorize": {
          "claims": [
            "UpdateRepositoryAccessPermissions"
          ]
        },
        "summary": "Edit Repository Access Permissions",
        "description": "The HTTP PUT request to the `/api/v1/backupInfrastructure/repositories/{id}/accessPermissions` path allows you to edit access permissions of a repository that has the specified `id`.",
        "operationId": "UpdateRepositoryAccessPermissions",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the backup repository.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepositoryAccessPermissionsModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryAccessPermissionsModel"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/backupInfrastructure/proxies": {
      "get": {
        "tags": [
          "Proxies"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewProxies"
          ]
        },
        "summary": "Get All Proxies",
        "description": "The HTTP GET request to the `/api/v1/backupInfrastructure/proxies` path allows you to get an array of all backup proxies that are added to the backup infrastructure.",
        "operationId": "GetAllProxies",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "skip",
            "description": "Number of proxies to skip.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ProxiesFilters"
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of proxies to return.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ProxiesFilters"
            }
          },
          {
            "name": "orderColumn",
            "description": "Sorts proxies by one of the proxy parameters.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EProxiesFiltersOrderColumn"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ProxiesFilters"
            }
          },
          {
            "name": "orderAsc",
            "description": "Sorts proxies in the ascending order by the `orderColumn` parameter.",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ProxiesFilters"
            }
          },
          {
            "name": "nameFilter",
            "description": "Filters proxies by the `nameFilter` pattern. The pattern can match any proxy parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ProxiesFilters"
            }
          },
          {
            "name": "typeFilter",
            "description": "Filters proxies by proxy type.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EProxyType"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ProxiesFilters"
            }
          },
          {
            "name": "hostIdFilter",
            "description": "Filters proxies by ID of the backup server.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ProxiesFilters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxiesResult"
                },
                "example": {
                  "data": [
                    {
                      "server": {
                        "transportMode": "virtualAppliance",
                        "hostId": "535b5414-788d-4720-a53a-ecc830d2589b",
                        "failoverToNetwork": true,
                        "hostToProxyEncryption": false,
                        "connectedDatastores": {
                          "autoSelect": true,
                          "datastores": []
                        },
                        "maxTaskCount": 2
                      },
                      "type": "ViProxy",
                      "id": "0be53088-d516-4734-a956-a8093a568876",
                      "name": "172.17.53.67",
                      "description": "Created by TECH\\sheila.d.cory"
                    },
                    {
                      "server": {
                        "transportMode": "auto",
                        "hostId": "6745a759-2205-4cd2-b172-8ec8f7e60ef8",
                        "failoverToNetwork": true,
                        "hostToProxyEncryption": false,
                        "connectedDatastores": {
                          "autoSelect": true,
                          "datastores": []
                        },
                        "maxTaskCount": 2
                      },
                      "type": "ViProxy",
                      "id": "18b661c1-d9dc-4233-90a0-7e7b10dc2d09",
                      "name": "VMware Backup Proxy",
                      "description": "Created by Veeam Backup & Replication"
                    }
                  ],
                  "pagination": {
                    "total": 2,
                    "count": 2,
                    "skip": 0,
                    "limit": 200
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Proxies"
        ],
        "x-veeam-authorize": {
          "claims": [
            "CreateProxies"
          ]
        },
        "summary": "Add Proxy",
        "description": "The HTTP POST request to the `/api/v1/backupInfrastructure/proxies` path allows you to add a proxy to the backup infrastructure.",
        "operationId": "CreateProxy",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProxySpec"
              },
              "example": {
                "type": "ViProxy",
                "name": "proxy01.tech.local",
                "description": "Created by TECH\\sheila.d.cory",
                "server": {
                  "transportMode": "auto",
                  "hostId": "080b9a63-56f3-49e2-9b06-56fc252de34c",
                  "failoverToNetwork": true,
                  "hostToProxyEncryption": false,
                  "connectedDatastores": {
                    "autoSelect": false,
                    "datastores": [
                      {
                        "datastore": {
                          "type": "Datastore",
                          "hostName": "vcenter01.tech.local",
                          "name": "esx04-ds1",
                          "objectId": "datastore-78098"
                        },
                        "vmCount": 98
                      },
                      {
                        "datastore": {
                          "type": "Datastore",
                          "hostName": "vcenter01.tech.local",
                          "name": "esx04-ds2",
                          "objectId": "datastore-94394"
                        },
                        "vmCount": 93
                      }
                    ]
                  },
                  "maxTaskCount": 2
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Infrastructure session has been created to add the proxy. To check the progress, track the session `state`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                },
                "example": {
                  "sessionType": "Infrastructure",
                  "state": "Working",
                  "id": "59f85a1e-2016-4d08-aea5-2676a03d548c",
                  "name": "Infrastructure Item Saving",
                  "activityId": "59f85a1e-2016-4d08-aea5-2676a03d548c",
                  "creationTime": "2022-01-28T19:48:43.117+01:00",
                  "endTime": null,
                  "progressPercent": 0,
                  "result": null,
                  "resourceId": null,
                  "resourceReference": null,
                  "parentSessionId": null,
                  "usn": 0
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/backupInfrastructure/proxies/{id}": {
      "get": {
        "tags": [
          "Proxies"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewProxies"
          ]
        },
        "summary": "Get Proxy",
        "description": "The HTTP GET request to the `/api/v1/backupInfrastructure/proxies/{id}` path allows you to get a backup proxy that has the specified `id`.",
        "operationId": "GetProxy",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the backup proxy.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyModel"
                },
                "example": {
                  "server": {
                    "transportMode": "auto",
                    "hostId": "6745a759-2205-4cd2-b172-8ec8f7e60ef8",
                    "failoverToNetwork": true,
                    "hostToProxyEncryption": false,
                    "connectedDatastores": {
                      "autoSelect": true,
                      "datastores": []
                    },
                    "maxTaskCount": 2
                  },
                  "type": "ViProxy",
                  "id": "18b661c1-d9dc-4233-90a0-7e7b10dc2d09",
                  "name": "VMware Backup Proxy",
                  "description": "Created by Veeam Backup & Replication"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Proxies"
        ],
        "x-veeam-authorize": {
          "claims": [
            "UpdateProxies"
          ]
        },
        "summary": "Edit Proxy",
        "description": "The HTTP PUT request to the `/api/v1/backupInfrastructure/proxies/{id}` path allows you to edit a backup proxy that has the specified `id`.",
        "operationId": "UpdateProxy",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the backup proxy.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProxyModel"
              },
              "example": {
                "server": {
                  "transportMode": "network",
                  "hostId": "6745a759-2205-4cd2-b172-8ec8f7e60ef8",
                  "failoverToNetwork": false,
                  "hostToProxyEncryption": false,
                  "connectedDatastores": {
                    "autoSelect": true,
                    "datastores": []
                  },
                  "maxTaskCount": 2
                },
                "trafficRules": {
                  "rules": [
                    {
                      "timePeriod": "Anytime",
                      "name": "Internet",
                      "encryption": true,
                      "throttling": false
                    }
                  ]
                },
                "type": "ViProxy",
                "id": "18b661c1-d9dc-4233-90a0-7e7b10dc2d09",
                "name": "VMware Backup Proxy",
                "description": "Created by Veeam Backup & Replication"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Infrastructure session has been created to edit the proxy. To check the progress, track the session `state`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                },
                "example": {
                  "sessionType": "Infrastructure",
                  "state": "Working",
                  "id": "e81a72de-9b0a-4f4a-a451-0d0ece4c54b2",
                  "name": "Infrastructure Item Saving",
                  "activityId": "e81a72de-9b0a-4f4a-a451-0d0ece4c54b2",
                  "creationTime": "2022-01-28T20:18:47.563+01:00",
                  "endTime": null,
                  "progressPercent": 0,
                  "result": null,
                  "resourceId": null,
                  "resourceReference": null,
                  "parentSessionId": null,
                  "usn": 0
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Proxies"
        ],
        "x-veeam-authorize": {
          "claims": [
            "DeleteProxies"
          ]
        },
        "summary": "Remove Proxy",
        "description": "The HTTP DELETE request to the `/api/v1/backupInfrastructure/proxies/{id}` path allows you to remove a backup proxy that has the specified `id` from the backup infrastructure.",
        "operationId": "DeleteProxy",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the backup proxy.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/backupInfrastructure/scaleOutRepositories": {
      "get": {
        "tags": [
          "Repositories"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewScaleOutRepositories"
          ]
        },
        "summary": "Get All Scale-Out Backup Repositories",
        "description": "The HTTP GET request to the `/api/v1/backupInfrastructure/scaleOutRepositories` path allows you to get an array of all scale-out backup repositories that are added to the backup infrastructure.",
        "operationId": "GetAllScaleOutRepositories",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "skip",
            "description": "Number of repositories to skip.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ScaleOutRepositoriesFilters"
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of repositories to return.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ScaleOutRepositoriesFilters"
            }
          },
          {
            "name": "orderColumn",
            "description": "Sorts repositories by one of the repository parameters.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EScaleOutRepositoryFiltersOrderColumn"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ScaleOutRepositoriesFilters"
            }
          },
          {
            "name": "orderAsc",
            "description": "Sorts repositories in the ascending order by the `orderColumn` parameter.",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ScaleOutRepositoriesFilters"
            }
          },
          {
            "name": "nameFilter",
            "description": "Filters repositories by the `nameFilter` pattern. The pattern can match any repository parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ScaleOutRepositoriesFilters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScaleOutRepositoriesResult"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Repositories"
        ],
        "x-veeam-authorize": {
          "claims": [
            "CreateScaleOutRepositories"
          ]
        },
        "summary": "Add Scale-Out Backup Repository",
        "description": "The HTTP POST request to the `/api/v1/backupInfrastructure/scaleOutRepositories` path allows you to add a scale-out backup repository to the backup infrastructure.",
        "operationId": "CreateScaleOutRepository",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScaleOutRepositorySpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Infrastructure session has been created to add the repository. To check the progress, track the session `state`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/backupInfrastructure/scaleOutRepositories/{id}": {
      "get": {
        "tags": [
          "Repositories"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewScaleOutRepositories"
          ]
        },
        "summary": "Get Scale-Out Backup Repository",
        "description": "The HTTP GET request to the `/api/v1/backupInfrastructure/scaleOutRepositories/{id}` path allows you to get a scale-out backup repository that has the specified `id`.",
        "operationId": "GetScaleOutRepository",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the scale-out backup repository.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScaleOutRepositoryModel"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Repositories"
        ],
        "x-veeam-authorize": {
          "claims": [
            "UpdateScaleOutRepositories"
          ]
        },
        "summary": "Edit Scale-Out Backup Repository",
        "description": "The HTTP PUT request to the `/api/v1/backupInfrastructure/scaleOutRepositories/{id}` path allows you to edit a scale-out backup repository that has the specified `id`.",
        "operationId": "UpdateScaleOutRepository",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the scale-out backup repository.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScaleOutRepositoryModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Infrastructure session has been created to edit the scale-out backup repository. To check the progress, track the session `state`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Repositories"
        ],
        "x-veeam-authorize": {
          "claims": [
            "DeleteScaleOutRepositories"
          ]
        },
        "summary": "Remove Scale-Out Backup Repository",
        "description": "The HTTP DELETE request to the `/api/v1/backupInfrastructure/scaleOutRepositories/{id}` path allows you to remove a scale-out backup repository that has the specified `id`.",
        "operationId": "DeleteScaleOutRepository",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the scale-out backup repository.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "deleteBackups",
            "description": "If *true*, Veeam Backup & Replication will remove backup files.",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/DeleteRepositoryFilters"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Scale-out backup repository has been removed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptySuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/backupInfrastructure/scaleOutRepositories/{id}/accessPermissions": {
      "get": {
        "tags": [
          "Repositories"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewRepositoryAccessPermissions"
          ]
        },
        "summary": "Get Scale-Out Backup Repository Access Permissions",
        "description": "The HTTP GET request to the `/api/v1/backupInfrastructure/scaleOutRepositories/{id}/accessPermissions` path allows you to get access permissions of a scale-out backup repository that has the specified `id`.",
        "operationId": "GetScaleOutRepositoryAccessPermissions",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the scale-out backup repository.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryAccessPermissionsModel"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Repositories"
        ],
        "x-veeam-authorize": {
          "claims": [
            "UpdateRepositoryAccessPermissions"
          ]
        },
        "summary": "Edit Scale-Out Backup Repository Access Permissions",
        "description": "The HTTP PUT request to the `/api/v1/backupInfrastructure/scaleOutRepositories/{id}/accessPermissions` path allows you to edit access permissions of a scale-out backup repository that has the specified `id`.",
        "operationId": "UpdateScaleOutRepositoryAccessPermissions",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the scale-out backup repository.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepositoryAccessPermissionsModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryAccessPermissionsModel"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/backupInfrastructure/scaleOutRepositories/{id}/enableSealedMode": {
      "post": {
        "tags": [
          "Repositories"
        ],
        "x-veeam-authorize": {
          "claims": [
            "EnableRepositorySealedMode"
          ]
        },
        "summary": "Enable Sealed Mode",
        "description": "The HTTP POST request to the `/api/v1/backupInfrastructure/scaleOutRepositories/{id}/enableSealedMode` path allows you to enable the Sealed mode for specified extents of a scale-out backup repository that has the specified `id`.",
        "operationId": "EnableScaleOutExtentSealedMode",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the scale-out backup repository.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScaleOutExtentMaintenanceSpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "RepositoryMaintenance session has been created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/backupInfrastructure/scaleOutRepositories/{id}/disableSealedMode": {
      "post": {
        "tags": [
          "Repositories"
        ],
        "x-veeam-authorize": {
          "claims": [
            "DisableRepositorySealedMode"
          ]
        },
        "summary": "Disable Sealed Mode",
        "description": "The HTTP POST request to the `/api/v1/backupInfrastructure/scaleOutRepositories/{id}/disableSealedMode` path allows you to disable the Sealed mode for specified extents of a scale-out backup repository that has the specified `id`.",
        "operationId": "DisableScaleOutExtentSealedMode",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the scale-out backup repository.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScaleOutExtentMaintenanceSpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "RepositoryMaintenance session has been created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/backupInfrastructure/scaleOutRepositories/{id}/enableMaintenanceMode": {
      "post": {
        "tags": [
          "Repositories"
        ],
        "x-veeam-authorize": {
          "claims": [
            "EnableRepositoryMaintenanceMode"
          ]
        },
        "summary": "Enable Maintenance Mode",
        "description": "The HTTP POST request to the `/api/v1/backupInfrastructure/scaleOutRepositories/{id}/enableMaintenanceMode` path allows you to enable the Maintenance mode for specified extents of a scale-out backup repository that has the specified `id`.",
        "operationId": "EnableScaleOutExtentMaintenanceMode",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the scale-out backup repository.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScaleOutExtentMaintenanceSpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "RepositoryMaintenance session has been created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/backupInfrastructure/scaleOutRepositories/{id}/disableMaintenanceMode": {
      "post": {
        "tags": [
          "Repositories"
        ],
        "x-veeam-authorize": {
          "claims": [
            "DisableRepositoryMaintenanceMode"
          ]
        },
        "summary": "Disable Maintenance Mode",
        "description": "The HTTP POST request to the `/api/v1/backupInfrastructure/scaleOutRepositories/{id}/disableMaintenanceMode` path allows you to disable the Maintenance mode for specified extents of a scale-out backup repository that has the specified `id`.",
        "operationId": "DisableScaleOutExtentMaintenanceMode",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the scale-out backup repository.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScaleOutExtentMaintenanceSpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "RepositoryMaintenance session has been created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/backupInfrastructure/scaleOutRepositories/{id}/evacuateBackups": {
      "post": {
        "tags": [
          "Repositories"
        ],
        "x-veeam-authorize": {
          "claims": [
            "EvacuateExtentBackups"
          ]
        },
        "summary": "Evacuate Backups from Performance Extent",
        "description": "The HTTP POST request to the `/api/v1/backupInfrastructure/scaleOutRepositories/{id}/evacuateBackups` path allows you to evacuate backups from specified performance extents of a scale-out backup repository that has the specified `id`.<br>Before you evacuate backups from performance extents, you must put them into the Maintenance mode.",
        "operationId": "EvacuateBackupsFromScaleOutExtent",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the scale-out backup repository.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScaleOutExtentMaintenanceSpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "RepositoryEvacuate session has been created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/jobs": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewJobs"
          ]
        },
        "summary": "Get All Jobs",
        "description": "The HTTP GET request to the `/api/v1/jobs` path allows you to get an array of all jobs coordinated by the backup server.",
        "operationId": "GetAllJobs",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "skip",
            "description": "Number of jobs to skip.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/JobsFilters"
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of jobs to return.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/JobsFilters"
            }
          },
          {
            "name": "orderColumn",
            "description": "Sorts jobs by one of the job parameters.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EJobFiltersOrderColumn"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/JobsFilters"
            }
          },
          {
            "name": "orderAsc",
            "description": "Sorts jobs in the ascending order by the `orderColumn` parameter.",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/JobsFilters"
            }
          },
          {
            "name": "nameFilter",
            "description": "Filters jobs by the `nameFilter` pattern. The pattern can match any job parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/JobsFilters"
            }
          },
          {
            "name": "typeFilter",
            "description": "Filters jobs by job type.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EJobType"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/JobsFilters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobsResult"
                },
                "example": {
                  "data": [
                    {
                      "isHighPriority": false,
                      "virtualMachines": {
                        "includes": [
                          {
                            "inventoryObject": {
                              "type": "VirtualMachine",
                              "hostName": "vcenter01.tech.local",
                              "name": "filesrv02",
                              "objectId": "vm-45006"
                            },
                            "size": "43.5 GB"
                          }
                        ],
                        "excludes": {
                          "vms": [],
                          "disks": [
                            {
                              "disksToProcess": "AllDisks",
                              "vmObject": {
                                "type": "VirtualMachine",
                                "hostName": "vcenter01.tech.local",
                                "name": "filesrv02",
                                "objectId": "vm-45006"
                              },
                              "disks": [],
                              "removeFromVMConfiguration": true
                            }
                          ],
                          "templates": {
                            "isEnabled": true,
                            "excludeFromIncremental": true
                          }
                        }
                      },
                      "storage": {
                        "backupRepositoryId": "88101045-8755-4117-9221-bca81fbfabc4",
                        "backupProxies": {
                          "autoSelection": true,
                          "proxyIds": []
                        },
                        "retentionPolicy": {
                          "type": "Days",
                          "quantity": 7
                        },
                        "gfsPolicy": {
                          "isEnabled": false,
                          "weekly": {
                            "desiredTime": "sunday",
                            "isEnabled": false,
                            "keepForNumberOfWeeks": 1
                          },
                          "monthly": {
                            "desiredTime": "First",
                            "isEnabled": false,
                            "keepForNumberOfMonths": 1
                          },
                          "yearly": {
                            "desiredTime": "January",
                            "isEnabled": false,
                            "keepForNumberOfYears": 1
                          }
                        },
                        "advancedSettings": {
                          "backupModeType": "Incremental",
                          "synthenticFulls": {
                            "isEnabled": true,
                            "days": [
                              "saturday"
                            ]
                          },
                          "activeFulls": {
                            "isEnabled": false,
                            "weekly": {
                              "isEnabled": true,
                              "days": [
                                "saturday"
                              ]
                            },
                            "monthly": {
                              "dayOfWeek": "monday",
                              "dayNumberInMonth": "First",
                              "isEnabled": false,
                              "dayOfMonths": 1,
                              "months": [
                                "January",
                                "February",
                                "March",
                                "April",
                                "May",
                                "June",
                                "July",
                                "August",
                                "September",
                                "October",
                                "November",
                                "December"
                              ]
                            }
                          },
                          "backupHealth": {
                            "isEnabled": false,
                            "weekly": {
                              "isEnabled": false,
                              "days": [
                                "friday"
                              ]
                            },
                            "monthly": {
                              "dayOfWeek": "friday",
                              "dayNumberInMonth": "Last",
                              "isEnabled": true,
                              "dayOfMonths": 1,
                              "months": [
                                "January",
                                "February",
                                "March",
                                "April",
                                "May",
                                "June",
                                "July",
                                "August",
                                "September",
                                "October",
                                "November",
                                "December"
                              ]
                            }
                          },
                          "fullBackupMaintenance": {
                            "RemoveData": {
                              "isEnabled": false,
                              "afterDays": 14
                            },
                            "defragmentAndCompact": {
                              "isEnabled": false,
                              "weekly": {
                                "isEnabled": false,
                                "days": [
                                  "saturday"
                                ]
                              },
                              "monthly": {
                                "dayOfWeek": "saturday",
                                "dayNumberInMonth": "Last",
                                "isEnabled": true,
                                "dayOfMonths": 1,
                                "months": [
                                  "January",
                                  "February",
                                  "March",
                                  "April",
                                  "May",
                                  "June",
                                  "July",
                                  "August",
                                  "September",
                                  "October",
                                  "November",
                                  "December"
                                ]
                              }
                            }
                          },
                          "storageData": {
                            "compressionLevel": "Optimal",
                            "storageOptimization": "LocalTarget",
                            "enableInlineDataDedup": true,
                            "excludeSwapFileBlocks": true,
                            "excludeDeletedFileBlocks": true,
                            "encryption": {
                              "isEnabled": false,
                              "encryptionPasswordIdOrNull": "00000000-0000-0000-0000-000000000000",
                              "encryptionPasswordTag": null
                            }
                          },
                          "notifications": {
                            "sendSNMPNotifications": false,
                            "emailNotifications": {
                              "notificationType": null,
                              "isEnabled": false,
                              "recipients": [],
                              "customNotificationSettings": null
                            },
                            "vmAttribute": {
                              "isEnabled": false,
                              "notes": "Notes",
                              "appendToExisitingValue": true
                            }
                          },
                          "vSphere": {
                            "enableVMWareToolsQuiescence": false,
                            "changedBlockTracking": {
                              "isEnabled": true,
                              "enableCBTautomatically": true,
                              "resetCBTonActiveFull": true
                            }
                          },
                          "storageIntegration": {
                            "isEnabled": true,
                            "limitProcessedVm": false,
                            "limitProcessedVmCount": 10,
                            "failoverToStandardBackup": false
                          },
                          "scripts": {
                            "periodicityType": "BackupSessions",
                            "preCommand": {
                              "isEnabled": false,
                              "command": ""
                            },
                            "postCommand": {
                              "isEnabled": false,
                              "command": ""
                            },
                            "runScriptEvery": 1,
                            "dayOfWeek": [
                              "saturday"
                            ]
                          }
                        }
                      },
                      "guestProcessing": {
                        "appAwareProcessing": {
                          "isEnabled": false,
                          "appSettings": []
                        },
                        "guestFSIndexing": {
                          "isEnabled": true,
                          "indexingSettings": [
                            {
                              "vmObject": {
                                "type": "VirtualMachine",
                                "hostName": "vcenter01.tech.local",
                                "name": "filesrv02",
                                "objectId": "vm-45006"
                              },
                              "WindowsIndexing": {
                                "guestFSIndexingMode": "indexAllExcept",
                                "indexingList": [
                                  "%windir%",
                                  "%ProgramFiles%",
                                  "%ProgramFiles(x86)%",
                                  "%ProgramW6432%",
                                  "%TEMP%"
                                ]
                              },
                              "LinuxIndexing": {
                                "guestFSIndexingMode": "indexAllExcept",
                                "indexingList": [
                                  "/cdrom",
                                  "/dev",
                                  "/media",
                                  "/mnt",
                                  "/proc",
                                  "/tmp",
                                  "/lost+found"
                                ]
                              }
                            }
                          ]
                        },
                        "guestInteractionProxies": {
                          "autoSelection": true,
                          "proxyIds": []
                        },
                        "guestCredentials": {
                          "credsType": "Standard",
                          "credsId": "4fbeb05c-c158-4510-84f3-6744554fb350",
                          "credentialsPerMachine": []
                        }
                      },
                      "schedule": {
                        "runAutomatically": true,
                        "daily": {
                          "dailyKind": "Everyday",
                          "isEnabled": true,
                          "localTime": "10:00 PM",
                          "days": [
                            "sunday",
                            "monday",
                            "tuesday",
                            "wednesday",
                            "thursday",
                            "friday",
                            "saturday"
                          ]
                        },
                        "monthly": {
                          "dayOfWeek": "saturday",
                          "dayNumberInMonth": "Fourth",
                          "isEnabled": false,
                          "localTime": "10:00 PM",
                          "dayOfMonth": 1,
                          "months": [
                            "January",
                            "February",
                            "March",
                            "April",
                            "May",
                            "June",
                            "July",
                            "August",
                            "September",
                            "October",
                            "November",
                            "December"
                          ]
                        },
                        "periodically": {
                          "periodicallyKind": "Hours",
                          "isEnabled": false,
                          "frequency": 1,
                          "backupWindow": {
                            "days": [
                              {
                                "day": "sunday",
                                "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                              },
                              {
                                "day": "monday",
                                "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                              },
                              {
                                "day": "tuesday",
                                "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                              },
                              {
                                "day": "wednesday",
                                "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                              },
                              {
                                "day": "thursday",
                                "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                              },
                              {
                                "day": "friday",
                                "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                              },
                              {
                                "day": "saturday",
                                "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                              }
                            ]
                          },
                          "startTimeWithinAnHour": 0
                        },
                        "continuously": {
                          "isEnabled": false,
                          "backupWindow": {
                            "days": [
                              {
                                "day": "sunday",
                                "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                              },
                              {
                                "day": "monday",
                                "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                              },
                              {
                                "day": "tuesday",
                                "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                              },
                              {
                                "day": "wednesday",
                                "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                              },
                              {
                                "day": "thursday",
                                "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                              },
                              {
                                "day": "friday",
                                "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                              },
                              {
                                "day": "saturday",
                                "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                              }
                            ]
                          }
                        },
                        "afterThisJob": {
                          "isEnabled": false,
                          "jobName": null
                        },
                        "retry": {
                          "isEnabled": true,
                          "retryCount": 3,
                          "awaitMinutes": 10
                        },
                        "backupWindow": {
                          "isEnabled": false,
                          "backupWindow": {
                            "days": [
                              {
                                "day": "sunday",
                                "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                              },
                              {
                                "day": "monday",
                                "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                              },
                              {
                                "day": "tuesday",
                                "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                              },
                              {
                                "day": "wednesday",
                                "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                              },
                              {
                                "day": "thursday",
                                "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                              },
                              {
                                "day": "friday",
                                "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                              },
                              {
                                "day": "saturday",
                                "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                              }
                            ]
                          }
                        }
                      },
                      "type": "Backup",
                      "id": "ef1f0227-80e1-40f8-b2a2-5119172d2c36",
                      "name": "Backup Job 2",
                      "description": "Created by ENTERPRISE01\\Administrator",
                      "isDisabled": false
                    }
                  ],
                  "pagination": {
                    "total": 3,
                    "count": 1,
                    "skip": 0,
                    "limit": 1
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Jobs"
        ],
        "x-veeam-authorize": {
          "claims": [
            "CreateJobs"
          ]
        },
        "summary": "Create Job",
        "description": "The HTTP POST request to the `/api/v1/jobs` path allows you to create a new job that has the specified parameters.",
        "operationId": "CreateJob",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobSpec"
              },
              "example": {
                "type": "Backup",
                "name": "Backup Job 3",
                "description": "Created by ENTERPRISE01\\Administrator",
                "isHighPriority": false,
                "virtualMachines": {
                  "includes": [
                    {
                      "type": "ResourcePool",
                      "vcName": "vcenter01.tech.local",
                      "name": "ResourcePool01",
                      "objectId": "resgroup-32774"
                    }
                  ],
                  "excludes": {
                    "vms": [
                      {
                        "type": "VirtualMachine",
                        "vcName": "vcenter01.tech.local",
                        "name": "srv01",
                        "objectId": "vm-34739"
                      },
                      {
                        "type": "VirtualMachine",
                        "vcName": "vcenter01.tech.local",
                        "name": "srv02",
                        "objectId": "vm-32843"
                      }
                    ],
                    "disks": [
                      {
                        "disksToProcess": "SelectedDisks",
                        "vmObject": {
                          "type": "ResourcePool",
                          "vcName": "vcenter01.tech.local",
                          "name": "ResourcePool01",
                          "objectId": "resgroup-32774"
                        },
                        "disks": [
                          "SCSI 0:0 (2000)",
                          "IDE 0:0 (3000)"
                        ]
                      }
                    ],
                    "templates": {
                      "isEnabled": true,
                      "excludeFromIncremental": false
                    }
                  }
                },
                "storage": {
                  "backupRepositoryId": "88788f9e-d8f5-4eb4-bc4f-9b3f5403bcec",
                  "backupProxies": {
                    "autoSelection": true,
                    "proxyIds": []
                  },
                  "retentionPolicy": {
                    "type": "RestorePoints",
                    "quantity": 7
                  },
                  "gfsPolicy": {
                    "isEnabled": false,
                    "weekly": {
                      "desiredTime": "sunday",
                      "isEnabled": false,
                      "keepForNumberOfWeeks": 1
                    },
                    "monthly": {
                      "desiredTime": "First",
                      "isEnabled": false,
                      "keepForNumberOfMonths": 1
                    },
                    "yearly": {
                      "desiredTime": "January",
                      "isEnabled": false,
                      "keepForNumberOfYears": 1
                    }
                  },
                  "advancedSettings": {
                    "backupModeType": "Incremental",
                    "synthenticFulls": {
                      "isEnabled": true,
                      "days": [
                        "saturday"
                      ]
                    },
                    "activeFulls": {
                      "isEnabled": true,
                      "weekly": {
                        "isEnabled": true,
                        "days": [
                          "saturday"
                        ]
                      },
                      "monthly": {
                        "dayOfWeek": "monday",
                        "dayNumberInMonth": "First",
                        "isEnabled": false,
                        "dayOfMonths": 1,
                        "months": [
                          "January",
                          "February",
                          "March",
                          "April",
                          "May",
                          "June",
                          "July",
                          "August",
                          "September",
                          "October",
                          "November",
                          "December"
                        ]
                      }
                    },
                    "backupHealth": {
                      "isEnabled": true,
                      "weekly": {
                        "isEnabled": false,
                        "days": [
                          "friday"
                        ]
                      },
                      "monthly": {
                        "dayOfWeek": "monday",
                        "dayNumberInMonth": "First",
                        "isEnabled": true,
                        "dayOfMonths": 1,
                        "months": [
                          "January",
                          "February",
                          "March",
                          "April",
                          "May",
                          "June",
                          "July",
                          "August",
                          "September",
                          "October",
                          "November",
                          "December"
                        ]
                      }
                    },
                    "fullBackupMaintenance": {
                      "RemoveData": {
                        "isEnabled": false,
                        "afterDays": 14
                      },
                      "defragmentAndCompact": {
                        "isEnabled": false,
                        "weekly": {
                          "isEnabled": false,
                          "days": [
                            "saturday"
                          ]
                        },
                        "monthly": {
                          "dayOfWeek": "saturday",
                          "dayNumberInMonth": "Last",
                          "isEnabled": true,
                          "dayOfMonths": 1,
                          "months": [
                            "January",
                            "February",
                            "March",
                            "April",
                            "May",
                            "June",
                            "July",
                            "August",
                            "September",
                            "October",
                            "November",
                            "December"
                          ]
                        }
                      }
                    },
                    "storageData": {
                      "compressionLevel": "Optimal",
                      "storageOptimization": "LocalTarget",
                      "enableInlineDataDedup": true,
                      "excludeSwapFileBlocks": true,
                      "excludeDeletedFileBlocks": true,
                      "encryption": {
                        "isEnabled": false,
                        "passwordId": "00000000-0000-0000-0000-000000000000"
                      }
                    },
                    "notifications": {
                      "sendSNMPNotifications": true,
                      "emailNotifications": {
                        "notificationType": null,
                        "isEnabled": false,
                        "recipients": [],
                        "customNotificationSettings": null
                      },
                      "vmAttribute": {
                        "isEnabled": false,
                        "notes": "Notes",
                        "appendToExisitingValue": true
                      }
                    },
                    "vSphere": {
                      "enableVMWareToolsQuiescence": false,
                      "changedBlockTracking": {
                        "isEnabled": true,
                        "enableCBTautomatically": true,
                        "resetCBTonActiveFull": true
                      }
                    },
                    "storageIntegration": {
                      "isEnabled": true,
                      "limitProcessedVm": true,
                      "limitProcessedVmCount": 13,
                      "failoverToStandardBackup": true
                    },
                    "scripts": {
                      "preCommand": {
                        "periodicityType": "BackupSessions",
                        "isEnabled": false,
                        "command": "",
                        "runScriptEvery": 1,
                        "dayOfWeek": [
                          "saturday"
                        ]
                      },
                      "postCommand": {
                        "periodicityType": "BackupSessions",
                        "isEnabled": false,
                        "command": "",
                        "runScriptEvery": 1,
                        "dayOfWeek": [
                          "saturday"
                        ]
                      }
                    }
                  }
                },
                "guestProcessing": {
                  "appAwareProcessing": {
                    "isEnabled": true,
                    "appSettings": [
                      {
                        "vss": "requireSuccess",
                        "transactionLogs": "process",
                        "vmObject": {
                          "type": "ResourcePool",
                          "vcName": "vcenter01.tech.local",
                          "name": "ResourcePool01",
                          "objectId": "resgroup-32774"
                        },
                        "sql": {
                          "logsProcessing": "backup",
                          "retainLogBackups": "untilBackupDeleted",
                          "backupMinsCount": 15,
                          "keepDaysCount": null,
                          "logShippingServers": {
                            "autoSelection": true,
                            "shippingServerIds": []
                          }
                        },
                        "oracle": {
                          "archiveLogs": "deleteExpiredGBs",
                          "retainLogBackups": "untilBackupDeleted",
                          "useGuestCredentials": false,
                          "credentialsId": "a1b84070-9767-4f47-99cd-e25f57cd65dc",
                          "deleteHoursCount": null,
                          "deleteGBsCount": 10240,
                          "backupLogs": true,
                          "backupMinsCount": 23,
                          "keepDaysCount": 15,
                          "logShippingServers": {
                            "autoSelection": true,
                            "shippingServerIds": []
                          }
                        },
                        "exclusions": {
                          "exclusionPolicy": "disabled",
                          "itemsList": []
                        },
                        "scripts": {
                          "scriptProcessingMode": "disableExec",
                          "windowsScripts": null,
                          "linuxScripts": null
                        }
                      }
                    ]
                  },
                  "guestFSIndexing": {
                    "isEnabled": true,
                    "indexingSettings": [
                      {
                        "vmObject": {
                          "type": "ResourcePool",
                          "vcName": "vcenter01.tech.local",
                          "name": "ResourcePool01",
                          "objectId": "resgroup-32774"
                        },
                        "WindowsIndexing": {
                          "guestFSIndexingMode": "indexAllExcept",
                          "indexingList": [
                            "%windir%",
                            "%ProgramFiles%",
                            "%ProgramFiles(x86)%",
                            "%ProgramW6432%",
                            "%TEMP%"
                          ]
                        },
                        "LinuxIndexing": {
                          "guestFSIndexingMode": "indexAllExcept",
                          "indexingList": [
                            "/cdrom",
                            "/dev",
                            "/media",
                            "/mnt",
                            "/proc",
                            "/tmp",
                            "/lost+found"
                          ]
                        }
                      }
                    ]
                  },
                  "guestInteractionProxies": {
                    "autoSelection": true,
                    "proxyIds": []
                  },
                  "guestCredentials": {
                    "windowsCredsId": "a1b84070-9767-4f47-99cd-e25f57cd65dc",
                    "linuxCredsId": "00000000-0000-0000-0000-000000000000",
                    "credentialsPerMachine": [
                      {
                        "windowsCredsId": "a1b84070-9767-4f47-99cd-e25f57cd65dc",
                        "linuxCredsId": "00000000-0000-0000-0000-000000000000",
                        "vmObject": {
                          "type": "ResourcePool",
                          "vcName": "vcenter01.tech.local",
                          "name": "ResourcePool01",
                          "objectId": "resgroup-32774"
                        }
                      }
                    ]
                  }
                },
                "schedule": {
                  "isEnabled": true,
                  "daily": {
                    "dailyKind": "Everyday",
                    "isEnabled": true,
                    "localTime": "10:00 PM",
                    "days": [
                      "sunday",
                      "monday",
                      "tuesday",
                      "wednesday",
                      "thursday",
                      "friday",
                      "saturday"
                    ]
                  },
                  "monthly": {
                    "dayOfWeek": "saturday",
                    "dayNumberInMonth": "Fourth",
                    "isEnabled": false,
                    "localTime": "10:00 PM",
                    "dayOfMonth": 1,
                    "months": [
                      "January",
                      "February",
                      "March",
                      "April",
                      "May",
                      "June",
                      "July",
                      "August",
                      "September",
                      "October",
                      "November",
                      "December"
                    ]
                  },
                  "periodically": {
                    "periodicallyKind": "Hours",
                    "isEnabled": false,
                    "frequency": 0,
                    "continuously": {
                      "BackupWindow": {
                        "days": [
                          {
                            "day": "monday",
                            "hours": "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
                          },
                          {
                            "day": "tuesday",
                            "hours": "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
                          },
                          {
                            "day": "wednesday",
                            "hours": "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
                          },
                          {
                            "day": "thursday",
                            "hours": "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
                          },
                          {
                            "day": "friday",
                            "hours": "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
                          },
                          {
                            "day": "saturday",
                            "hours": "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
                          },
                          {
                            "day": "sunday",
                            "hours": "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
                          }
                        ]
                      }
                    }
                  },
                  "retry": {
                    "isEnabled": true,
                    "retryCount": 3,
                    "awaitMinutes": 10
                  },
                  "backupWindow": {
                    "isEnabled": false,
                    "WindowSetting": {
                      "days": [
                        {
                          "day": "monday",
                          "hours": "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
                        },
                        {
                          "day": "tuesday",
                          "hours": "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
                        },
                        {
                          "day": "wednesday",
                          "hours": "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
                        },
                        {
                          "day": "thursday",
                          "hours": "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
                        },
                        {
                          "day": "friday",
                          "hours": "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
                        },
                        {
                          "day": "saturday",
                          "hours": "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
                        },
                        {
                          "day": "sunday",
                          "hours": "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Job has been created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/jobs/states": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewJobs"
          ]
        },
        "summary": "Get All Job States",
        "description": "The HTTP GET request to the `/api/v1/jobs/states` path allows you to get an array of all job states. The states include brief job information that you can also find under the **Jobs** node in the Veeam Backup & Replication console.",
        "operationId": "GetAllJobsStates",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "skip",
            "description": "Number of job states to skip.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/JobStatesFilters"
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of job states to return.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/JobStatesFilters"
            }
          },
          {
            "name": "orderColumn",
            "description": "Sorts job states by one of the state parameters.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EJobStatesFiltersOrderColumn"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/JobStatesFilters"
            }
          },
          {
            "name": "orderAsc",
            "description": "Sorts job states in the ascending order by the `orderColumn` parameter.",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/JobStatesFilters"
            }
          },
          {
            "name": "idFilter",
            "description": "Filters job states by job ID.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/JobStatesFilters"
            }
          },
          {
            "name": "nameFilter",
            "description": "Filters job states by the `nameFilter` pattern. The pattern can match any state parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/JobStatesFilters"
            }
          },
          {
            "name": "typeFilter",
            "description": "Filters job states by job type.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EJobType"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/JobStatesFilters"
            }
          },
          {
            "name": "lastResultFilter",
            "description": "Filters job states by status with which jobs must finish.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ESessionResult"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/JobStatesFilters"
            }
          },
          {
            "name": "statusFilter",
            "description": "Filters job states by current status of the job.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EJobStatus"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/JobStatesFilters"
            }
          },
          {
            "name": "workloadFilter",
            "description": "Filters job states by workloads that jobs must process.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EJobWorkload"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/JobStatesFilters"
            }
          },
          {
            "name": "lastRunAfterFilter",
            "description": "Returns job states for jobs that have run after the specified date and time.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/JobStatesFilters"
            }
          },
          {
            "name": "lastRunBeforeFilter",
            "description": "Returns job states for jobs that have not run after the specified date and time.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/JobStatesFilters"
            }
          },
          {
            "name": "isHighPriorityJobFilter",
            "description": "If *true*, Returns job states for jobs with high priority.",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/JobStatesFilters"
            }
          },
          {
            "name": "repositoryIdFilter",
            "description": "Filters job states by repository ID.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/JobStatesFilters"
            }
          },
          {
            "name": "objectsCountFilter",
            "description": "Filters job states by number of objects processed by the job.",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/JobStatesFilters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobStatesResult"
                },
                "example": {
                  "data": [
                    {
                      "type": "Backup",
                      "status": "running",
                      "lastResult": "None",
                      "workload": "vm",
                      "id": "301450bc-34cd-4d2c-bfc3-8d269bb471be",
                      "name": "AD Backup",
                      "description": "Created by GAMMA\\Administrator",
                      "lastRun": "2022-02-04T21:40:34.473+03:00",
                      "nextRun": null,
                      "repositoryId": "88788f9e-d8f5-4eb4-bc4f-9b3f5403bcec",
                      "repositoryName": "Default Backup Repository",
                      "objectsCount": 1,
                      "sessionId": "dc98d2df-e845-46c4-bba1-57c3d020bf36"
                    },
                    {
                      "type": "Backup",
                      "status": "inactive",
                      "lastResult": "Warning",
                      "workload": "vm",
                      "id": "53b87378-7958-477d-8def-fbe6740d4b6f",
                      "name": "Exchange Backup",
                      "description": "Created by GAMMA\\Administrator",
                      "lastRun": "2021-02-20T06:53:17.747+03:00",
                      "nextRun": null,
                      "repositoryId": "88788f9e-d8f5-4eb4-bc4f-9b3f5403bcec",
                      "repositoryName": "Default Backup Repository",
                      "objectsCount": 1,
                      "sessionId": "4c5f14a6-b883-4b83-891a-d520809e4284"
                    },
                    {
                      "type": "Backup",
                      "status": "running",
                      "lastResult": "None",
                      "workload": "application",
                      "id": "75fc491a-d158-4380-a433-ebc42a28e4df",
                      "name": "Oracle Backup",
                      "description": "Created by GAMMA\\Administrator",
                      "lastRun": "2022-02-04T21:40:24.96+03:00",
                      "nextRun": "2022-02-05T16:00:00+03:00",
                      "repositoryId": "49607f55-4cc4-4ea5-a2c9-e750318d0f34",
                      "repositoryName": "Storage 3",
                      "objectsCount": 1,
                      "sessionId": "433d8b8b-bcb7-4ce3-986e-7bf2a3731d01"
                    }
                  ],
                  "pagination": {
                    "total": 3,
                    "count": 3,
                    "skip": 0,
                    "limit": 200
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/jobs/{id}": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewJobs"
          ]
        },
        "summary": "Get Job",
        "description": "The HTTP GET request to the `/api/v1/jobs/{id}` path allows you to get a job that has the specified `id`.",
        "operationId": "GetJob",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the job.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobModel"
                },
                "example": {
                  "isHighPriority": false,
                  "virtualMachines": {
                    "includes": [
                      {
                        "inventoryObject": {
                          "type": "VirtualMachine",
                          "hostName": "172.17.52.34",
                          "name": "srv45",
                          "objectId": "vm-61281"
                        },
                        "size": "152.5 GB"
                      }
                    ],
                    "excludes": {
                      "vms": [],
                      "disks": [
                        {
                          "disksToProcess": "AllDisks",
                          "vmObject": {
                            "type": "VirtualMachine",
                            "hostName": "172.17.52.34",
                            "name": "srv45",
                            "objectId": "vm-61281"
                          },
                          "disks": [],
                          "removeFromVMConfiguration": true
                        }
                      ],
                      "templates": {
                        "isEnabled": true,
                        "excludeFromIncremental": true
                      }
                    }
                  },
                  "storage": {
                    "backupRepositoryId": "49607f55-4cc4-4ea5-a2c9-e750318d0f34",
                    "backupProxies": {
                      "autoSelection": true,
                      "proxyIds": []
                    },
                    "retentionPolicy": {
                      "type": "RestorePoints",
                      "quantity": 7
                    },
                    "gfsPolicy": {
                      "isEnabled": false,
                      "weekly": {
                        "desiredTime": "sunday",
                        "isEnabled": false,
                        "keepForNumberOfWeeks": 1
                      },
                      "monthly": {
                        "desiredTime": "First",
                        "isEnabled": false,
                        "keepForNumberOfMonths": 1
                      },
                      "yearly": {
                        "desiredTime": "January",
                        "isEnabled": false,
                        "keepForNumberOfYears": 1
                      }
                    },
                    "advancedSettings": {
                      "backupModeType": "Incremental",
                      "synthenticFulls": {
                        "isEnabled": false,
                        "days": [
                          "saturday"
                        ]
                      },
                      "activeFulls": {
                        "isEnabled": false,
                        "weekly": {
                          "isEnabled": true,
                          "days": [
                            "saturday"
                          ]
                        },
                        "monthly": {
                          "dayOfWeek": "monday",
                          "dayNumberInMonth": "First",
                          "isEnabled": false,
                          "dayOfMonths": 1,
                          "months": [
                            "January",
                            "February",
                            "March",
                            "April",
                            "May",
                            "June",
                            "July",
                            "August",
                            "September",
                            "October",
                            "November",
                            "December"
                          ]
                        }
                      },
                      "backupHealth": {
                        "isEnabled": false,
                        "weekly": {
                          "isEnabled": false,
                          "days": [
                            "friday"
                          ]
                        },
                        "monthly": {
                          "dayOfWeek": "friday",
                          "dayNumberInMonth": "Last",
                          "isEnabled": true,
                          "dayOfMonths": 1,
                          "months": [
                            "January",
                            "February",
                            "March",
                            "April",
                            "May",
                            "June",
                            "July",
                            "August",
                            "September",
                            "October",
                            "November",
                            "December"
                          ]
                        }
                      },
                      "fullBackupMaintenance": {
                        "RemoveData": {
                          "isEnabled": false,
                          "afterDays": 14
                        },
                        "defragmentAndCompact": {
                          "isEnabled": false,
                          "weekly": {
                            "isEnabled": false,
                            "days": [
                              "saturday"
                            ]
                          },
                          "monthly": {
                            "dayOfWeek": "saturday",
                            "dayNumberInMonth": "Last",
                            "isEnabled": true,
                            "dayOfMonths": 1,
                            "months": [
                              "January",
                              "February",
                              "March",
                              "April",
                              "May",
                              "June",
                              "July",
                              "August",
                              "September",
                              "October",
                              "November",
                              "December"
                            ]
                          }
                        }
                      },
                      "storageData": {
                        "compressionLevel": "Optimal",
                        "storageOptimization": "LocalTarget",
                        "enableInlineDataDedup": true,
                        "excludeSwapFileBlocks": true,
                        "excludeDeletedFileBlocks": true,
                        "encryption": {
                          "isEnabled": false,
                          "encryptionPasswordIdOrNull": "00000000-0000-0000-0000-000000000000",
                          "encryptionPasswordTag": null
                        }
                      },
                      "notifications": {
                        "sendSNMPNotifications": false,
                        "emailNotifications": {
                          "notificationType": null,
                          "isEnabled": false,
                          "recipients": [],
                          "customNotificationSettings": null
                        },
                        "vmAttribute": {
                          "isEnabled": false,
                          "notes": "Notes",
                          "appendToExisitingValue": true
                        }
                      },
                      "vSphere": {
                        "enableVMWareToolsQuiescence": false,
                        "changedBlockTracking": {
                          "isEnabled": true,
                          "enableCBTautomatically": true,
                          "resetCBTonActiveFull": true
                        }
                      },
                      "storageIntegration": {
                        "isEnabled": true,
                        "limitProcessedVm": false,
                        "limitProcessedVmCount": 10,
                        "failoverToStandardBackup": false
                      },
                      "scripts": {
                        "periodicityType": "BackupSessions",
                        "preCommand": {
                          "isEnabled": false,
                          "command": ""
                        },
                        "postCommand": {
                          "isEnabled": false,
                          "command": ""
                        },
                        "runScriptEvery": 1,
                        "dayOfWeek": [
                          "saturday"
                        ]
                      }
                    }
                  },
                  "guestProcessing": {
                    "appAwareProcessing": {
                      "isEnabled": true,
                      "appSettings": [
                        {
                          "vss": "requireSuccess",
                          "transactionLogs": "process",
                          "vmObject": {
                            "type": "VirtualMachine",
                            "hostName": "172.17.52.34",
                            "name": "srv45",
                            "objectId": "vm-61281"
                          },
                          "usePersistentGuestAgent": false,
                          "sql": {
                            "logsProcessing": "truncate",
                            "retainLogBackups": null,
                            "backupMinsCount": null,
                            "keepDaysCount": null,
                            "logShippingServers": null
                          },
                          "oracle": {
                            "archiveLogs": "preserve",
                            "retainLogBackups": "untilBackupDeleted",
                            "useGuestCredentials": true,
                            "credentialsId": null,
                            "deleteHoursCount": null,
                            "deleteGBsCount": null,
                            "backupLogs": true,
                            "backupMinsCount": 15,
                            "keepDaysCount": 15,
                            "logShippingServers": {
                              "autoSelection": true,
                              "shippingServerIds": []
                            }
                          },
                          "exclusions": {
                            "exclusionPolicy": "disabled",
                            "itemsList": []
                          },
                          "scripts": {
                            "scriptProcessingMode": "disableExec",
                            "windowsScripts": null,
                            "linuxScripts": null
                          }
                        }
                      ]
                    },
                    "guestFSIndexing": {
                      "isEnabled": false,
                      "indexingSettings": []
                    },
                    "guestInteractionProxies": {
                      "autoSelection": true,
                      "proxyIds": []
                    },
                    "guestCredentials": {
                      "credsType": "Standard",
                      "credsId": "6454c893-d5c6-4de8-be38-d984ea30dae4",
                      "credentialsPerMachine": []
                    }
                  },
                  "schedule": {
                    "runAutomatically": true,
                    "daily": {
                      "dailyKind": "Everyday",
                      "isEnabled": true,
                      "localTime": "4:00 PM",
                      "days": [
                        "sunday",
                        "monday",
                        "tuesday",
                        "wednesday",
                        "thursday",
                        "friday",
                        "saturday"
                      ]
                    },
                    "monthly": {
                      "dayOfWeek": "saturday",
                      "dayNumberInMonth": "Fourth",
                      "isEnabled": false,
                      "localTime": "9:00 AM",
                      "dayOfMonth": 1,
                      "months": [
                        "January",
                        "February",
                        "March",
                        "April",
                        "May",
                        "June",
                        "July",
                        "August",
                        "September",
                        "October",
                        "November",
                        "December"
                      ]
                    },
                    "periodically": {
                      "periodicallyKind": "Hours",
                      "isEnabled": false,
                      "frequency": 1,
                      "backupWindow": {
                        "days": [
                          {
                            "day": "sunday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "monday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "tuesday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "wednesday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "thursday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "friday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "saturday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          }
                        ]
                      },
                      "startTimeWithinAnHour": 0
                    },
                    "continuously": {
                      "isEnabled": false,
                      "backupWindow": {
                        "days": [
                          {
                            "day": "sunday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "monday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "tuesday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "wednesday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "thursday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "friday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "saturday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          }
                        ]
                      }
                    },
                    "afterThisJob": {
                      "isEnabled": false,
                      "jobName": null
                    },
                    "retry": {
                      "isEnabled": true,
                      "retryCount": 3,
                      "awaitMinutes": 10
                    },
                    "backupWindow": {
                      "isEnabled": false,
                      "backupWindow": {
                        "days": [
                          {
                            "day": "sunday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "monday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "tuesday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "wednesday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "thursday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "friday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "saturday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          }
                        ]
                      }
                    }
                  },
                  "type": "Backup",
                  "id": "75fc491a-d158-4380-a433-ebc42a28e4df",
                  "name": "Oracle Backup",
                  "description": "Created by GAMMA\\Administrator",
                  "isDisabled": false
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Jobs"
        ],
        "x-veeam-authorize": {
          "claims": [
            "UpdateJobs"
          ]
        },
        "summary": "Edit Job",
        "description": "The HTTP PUT request to the `/api/v1/jobs/{id}` path allows you to edit a job that has the specified `id`.",
        "operationId": "UpdateJob",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the job.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobModel"
              },
              "example": {
                "isHighPriority": true,
                "virtualMachines": {
                  "includes": [
                    {
                      "inventoryObject": {
                        "type": "VirtualMachine",
                        "hostName": "172.17.42.92",
                        "name": "DLExch",
                        "objectId": "516"
                      },
                      "size": "170 GB"
                    }
                  ],
                  "excludes": {
                    "vms": [],
                    "disks": [
                      {
                        "disksToProcess": "AllDisks",
                        "vmObject": {
                          "type": "VirtualMachine",
                          "hostName": "172.17.42.92",
                          "name": "DLExch",
                          "objectId": "516"
                        },
                        "disks": [],
                        "removeFromVMConfiguration": true
                      }
                    ],
                    "templates": {
                      "isEnabled": true,
                      "excludeFromIncremental": true
                    }
                  }
                },
                "storage": {
                  "backupRepositoryId": "88788f9e-d8f5-4eb4-bc4f-9b3f5403bcec",
                  "backupProxies": {
                    "autoSelection": true,
                    "proxyIds": []
                  },
                  "retentionPolicy": {
                    "type": "RestorePoints",
                    "quantity": 3
                  },
                  "gfsPolicy": {
                    "isEnabled": false,
                    "weekly": {
                      "desiredTime": "sunday",
                      "isEnabled": false,
                      "keepForNumberOfWeeks": 1
                    },
                    "monthly": {
                      "desiredTime": "First",
                      "isEnabled": false,
                      "keepForNumberOfMonths": 1
                    },
                    "yearly": {
                      "desiredTime": "January",
                      "isEnabled": false,
                      "keepForNumberOfYears": 1
                    }
                  },
                  "advancedSettings": {
                    "backupModeType": "Incremental",
                    "synthenticFulls": {
                      "isEnabled": false,
                      "days": [
                        "saturday"
                      ]
                    },
                    "activeFulls": {
                      "isEnabled": false,
                      "weekly": {
                        "isEnabled": true,
                        "days": [
                          "saturday"
                        ]
                      },
                      "monthly": {
                        "dayOfWeek": "monday",
                        "dayNumberInMonth": "First",
                        "isEnabled": false,
                        "dayOfMonths": 1,
                        "months": [
                          "January",
                          "February",
                          "March",
                          "April",
                          "May",
                          "June",
                          "July",
                          "August",
                          "September",
                          "October",
                          "November",
                          "December"
                        ]
                      }
                    },
                    "backupHealth": {
                      "isEnabled": false,
                      "weekly": {
                        "isEnabled": false,
                        "days": [
                          "friday"
                        ]
                      },
                      "monthly": {
                        "dayOfWeek": "friday",
                        "dayNumberInMonth": "Last",
                        "isEnabled": true,
                        "dayOfMonths": 1,
                        "months": [
                          "January",
                          "February",
                          "March",
                          "April",
                          "May",
                          "June",
                          "July",
                          "August",
                          "September",
                          "October",
                          "November",
                          "December"
                        ]
                      }
                    },
                    "fullBackupMaintenance": {
                      "RemoveData": {
                        "isEnabled": false,
                        "afterDays": 14
                      },
                      "defragmentAndCompact": {
                        "isEnabled": false,
                        "weekly": {
                          "isEnabled": false,
                          "days": [
                            "saturday"
                          ]
                        },
                        "monthly": {
                          "dayOfWeek": "saturday",
                          "dayNumberInMonth": "Last",
                          "isEnabled": true,
                          "dayOfMonths": 1,
                          "months": [
                            "January",
                            "February",
                            "March",
                            "April",
                            "May",
                            "June",
                            "July",
                            "August",
                            "September",
                            "October",
                            "November",
                            "December"
                          ]
                        }
                      }
                    },
                    "storageData": {
                      "compressionLevel": "Optimal",
                      "storageOptimization": "LocalTarget",
                      "enableInlineDataDedup": true,
                      "excludeSwapFileBlocks": true,
                      "excludeDeletedFileBlocks": true,
                      "encryption": {
                        "isEnabled": false,
                        "encryptionPasswordIdOrNull": "00000000-0000-0000-0000-000000000000",
                        "encryptionPasswordTag": null
                      }
                    },
                    "notifications": {
                      "sendSNMPNotifications": false,
                      "emailNotifications": {
                        "notificationType": null,
                        "isEnabled": false,
                        "recipients": [],
                        "customNotificationSettings": null
                      },
                      "vmAttribute": {
                        "isEnabled": false,
                        "notes": "Notes",
                        "appendToExisitingValue": true
                      }
                    },
                    "vSphere": {
                      "enableVMWareToolsQuiescence": false,
                      "changedBlockTracking": {
                        "isEnabled": true,
                        "enableCBTautomatically": true,
                        "resetCBTonActiveFull": true
                      }
                    },
                    "storageIntegration": {
                      "isEnabled": true,
                      "limitProcessedVm": false,
                      "limitProcessedVmCount": 10,
                      "failoverToStandardBackup": false
                    },
                    "scripts": {
                      "periodicityType": "BackupSessions",
                      "preCommand": {
                        "isEnabled": false,
                        "command": ""
                      },
                      "postCommand": {
                        "isEnabled": false,
                        "command": ""
                      },
                      "runScriptEvery": 1,
                      "dayOfWeek": [
                        "saturday"
                      ]
                    }
                  }
                },
                "guestProcessing": {
                  "appAwareProcessing": {
                    "isEnabled": true,
                    "appSettings": [
                      {
                        "vss": "requireSuccess",
                        "transactionLogs": "process",
                        "vmObject": {
                          "type": "VirtualMachine",
                          "hostName": "172.17.42.92",
                          "name": "DLExch",
                          "objectId": "516"
                        },
                        "usePersistentGuestAgent": false,
                        "sql": {
                          "logsProcessing": "truncate",
                          "retainLogBackups": null,
                          "backupMinsCount": null,
                          "keepDaysCount": null,
                          "logShippingServers": null
                        },
                        "oracle": {
                          "archiveLogs": "preserve",
                          "retainLogBackups": null,
                          "useGuestCredentials": true,
                          "credentialsId": null,
                          "deleteHoursCount": null,
                          "deleteGBsCount": null,
                          "backupLogs": false,
                          "backupMinsCount": null,
                          "keepDaysCount": null,
                          "logShippingServers": null
                        },
                        "exclusions": {
                          "exclusionPolicy": "disabled",
                          "itemsList": []
                        },
                        "scripts": {
                          "scriptProcessingMode": "disableExec",
                          "windowsScripts": null,
                          "linuxScripts": null
                        }
                      }
                    ]
                  },
                  "guestFSIndexing": {
                    "isEnabled": false,
                    "indexingSettings": []
                  },
                  "guestInteractionProxies": {
                    "autoSelection": true,
                    "proxyIds": []
                  },
                  "guestCredentials": {
                    "credsType": "Standard",
                    "credsId": "d38995da-75ec-4ada-ac31-2138d7a0351f",
                    "credentialsPerMachine": []
                  }
                },
                "schedule": {
                  "runAutomatically": false,
                  "daily": {
                    "dailyKind": "Everyday",
                    "isEnabled": true,
                    "localTime": "10:00 PM",
                    "days": [
                      "sunday",
                      "monday",
                      "tuesday",
                      "wednesday",
                      "thursday",
                      "friday",
                      "saturday"
                    ]
                  },
                  "monthly": {
                    "dayOfWeek": "saturday",
                    "dayNumberInMonth": "Fourth",
                    "isEnabled": false,
                    "localTime": "10:00 PM",
                    "dayOfMonth": 1,
                    "months": [
                      "January",
                      "February",
                      "March",
                      "April",
                      "May",
                      "June",
                      "July",
                      "August",
                      "September",
                      "October",
                      "November",
                      "December"
                    ]
                  },
                  "periodically": {
                    "periodicallyKind": "Hours",
                    "isEnabled": false,
                    "frequency": 1,
                    "backupWindow": {
                      "days": [
                        {
                          "day": "sunday",
                          "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        },
                        {
                          "day": "monday",
                          "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        },
                        {
                          "day": "tuesday",
                          "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        },
                        {
                          "day": "wednesday",
                          "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        },
                        {
                          "day": "thursday",
                          "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        },
                        {
                          "day": "friday",
                          "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        },
                        {
                          "day": "saturday",
                          "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        }
                      ]
                    },
                    "startTimeWithinAnHour": 0
                  },
                  "continuously": {
                    "isEnabled": false,
                    "backupWindow": {
                      "days": [
                        {
                          "day": "sunday",
                          "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        },
                        {
                          "day": "monday",
                          "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        },
                        {
                          "day": "tuesday",
                          "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        },
                        {
                          "day": "wednesday",
                          "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        },
                        {
                          "day": "thursday",
                          "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        },
                        {
                          "day": "friday",
                          "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        },
                        {
                          "day": "saturday",
                          "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        }
                      ]
                    }
                  },
                  "afterThisJob": {
                    "isEnabled": false,
                    "jobName": null
                  },
                  "retry": {
                    "isEnabled": true,
                    "retryCount": 3,
                    "awaitMinutes": 10
                  },
                  "backupWindow": {
                    "isEnabled": false,
                    "backupWindow": {
                      "days": [
                        {
                          "day": "sunday",
                          "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        },
                        {
                          "day": "monday",
                          "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        },
                        {
                          "day": "tuesday",
                          "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        },
                        {
                          "day": "wednesday",
                          "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        },
                        {
                          "day": "thursday",
                          "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        },
                        {
                          "day": "friday",
                          "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        },
                        {
                          "day": "saturday",
                          "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                        }
                      ]
                    }
                  }
                },
                "type": "Backup",
                "id": "53b87378-7958-477d-8def-fbe6740d4b6f",
                "name": "Exchange Backup",
                "description": "Created by GAMMA\\Administrator",
                "isDisabled": false
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Job has been updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobModel"
                },
                "example": {
                  "isHighPriority": true,
                  "virtualMachines": {
                    "includes": [
                      {
                        "inventoryObject": {
                          "type": "VirtualMachine",
                          "hostName": "172.17.42.92",
                          "name": "DLExch",
                          "objectId": "516"
                        },
                        "size": "178.1 GB"
                      }
                    ],
                    "excludes": {
                      "vms": [],
                      "disks": [
                        {
                          "disksToProcess": "AllDisks",
                          "vmObject": {
                            "type": "VirtualMachine",
                            "hostName": "172.17.42.92",
                            "name": "DLExch",
                            "objectId": "516"
                          },
                          "disks": [],
                          "removeFromVMConfiguration": true
                        }
                      ],
                      "templates": {
                        "isEnabled": true,
                        "excludeFromIncremental": true
                      }
                    }
                  },
                  "storage": {
                    "backupRepositoryId": "88788f9e-d8f5-4eb4-bc4f-9b3f5403bcec",
                    "backupProxies": {
                      "autoSelection": true,
                      "proxyIds": []
                    },
                    "retentionPolicy": {
                      "type": "RestorePoints",
                      "quantity": 3
                    },
                    "gfsPolicy": {
                      "isEnabled": false,
                      "weekly": {
                        "desiredTime": "sunday",
                        "isEnabled": false,
                        "keepForNumberOfWeeks": 1
                      },
                      "monthly": {
                        "desiredTime": "First",
                        "isEnabled": false,
                        "keepForNumberOfMonths": 1
                      },
                      "yearly": {
                        "desiredTime": "January",
                        "isEnabled": false,
                        "keepForNumberOfYears": 1
                      }
                    },
                    "advancedSettings": {
                      "backupModeType": "Incremental",
                      "synthenticFulls": {
                        "isEnabled": false,
                        "days": [
                          "saturday"
                        ]
                      },
                      "activeFulls": {
                        "isEnabled": false,
                        "weekly": {
                          "isEnabled": true,
                          "days": [
                            "saturday"
                          ]
                        },
                        "monthly": {
                          "dayOfWeek": "monday",
                          "dayNumberInMonth": "First",
                          "isEnabled": false,
                          "dayOfMonths": 1,
                          "months": [
                            "January",
                            "February",
                            "March",
                            "April",
                            "May",
                            "June",
                            "July",
                            "August",
                            "September",
                            "October",
                            "November",
                            "December"
                          ]
                        }
                      },
                      "backupHealth": {
                        "isEnabled": false,
                        "weekly": {
                          "isEnabled": false,
                          "days": [
                            "friday"
                          ]
                        },
                        "monthly": {
                          "dayOfWeek": "friday",
                          "dayNumberInMonth": "Last",
                          "isEnabled": true,
                          "dayOfMonths": 1,
                          "months": [
                            "January",
                            "February",
                            "March",
                            "April",
                            "May",
                            "June",
                            "July",
                            "August",
                            "September",
                            "October",
                            "November",
                            "December"
                          ]
                        }
                      },
                      "fullBackupMaintenance": {
                        "RemoveData": {
                          "isEnabled": false,
                          "afterDays": 14
                        },
                        "defragmentAndCompact": {
                          "isEnabled": false,
                          "weekly": {
                            "isEnabled": false,
                            "days": [
                              "saturday"
                            ]
                          },
                          "monthly": {
                            "dayOfWeek": "saturday",
                            "dayNumberInMonth": "Last",
                            "isEnabled": true,
                            "dayOfMonths": 1,
                            "months": [
                              "January",
                              "February",
                              "March",
                              "April",
                              "May",
                              "June",
                              "July",
                              "August",
                              "September",
                              "October",
                              "November",
                              "December"
                            ]
                          }
                        }
                      },
                      "storageData": {
                        "compressionLevel": "Optimal",
                        "storageOptimization": "LocalTarget",
                        "enableInlineDataDedup": true,
                        "excludeSwapFileBlocks": true,
                        "excludeDeletedFileBlocks": true,
                        "encryption": {
                          "isEnabled": false,
                          "encryptionPasswordIdOrNull": "00000000-0000-0000-0000-000000000000",
                          "encryptionPasswordTag": null
                        }
                      },
                      "notifications": {
                        "sendSNMPNotifications": false,
                        "emailNotifications": {
                          "notificationType": null,
                          "isEnabled": false,
                          "recipients": [],
                          "customNotificationSettings": null
                        },
                        "vmAttribute": {
                          "isEnabled": false,
                          "notes": "Notes",
                          "appendToExisitingValue": true
                        }
                      },
                      "vSphere": {
                        "enableVMWareToolsQuiescence": false,
                        "changedBlockTracking": {
                          "isEnabled": true,
                          "enableCBTautomatically": true,
                          "resetCBTonActiveFull": true
                        }
                      },
                      "storageIntegration": {
                        "isEnabled": true,
                        "limitProcessedVm": false,
                        "limitProcessedVmCount": 10,
                        "failoverToStandardBackup": false
                      },
                      "scripts": {
                        "periodicityType": "BackupSessions",
                        "preCommand": {
                          "isEnabled": false,
                          "command": ""
                        },
                        "postCommand": {
                          "isEnabled": false,
                          "command": ""
                        },
                        "runScriptEvery": 1,
                        "dayOfWeek": [
                          "saturday"
                        ]
                      }
                    }
                  },
                  "guestProcessing": {
                    "appAwareProcessing": {
                      "isEnabled": true,
                      "appSettings": [
                        {
                          "vss": "requireSuccess",
                          "transactionLogs": "process",
                          "vmObject": {
                            "type": "VirtualMachine",
                            "hostName": "172.17.42.92",
                            "name": "DLExch",
                            "objectId": "516"
                          },
                          "usePersistentGuestAgent": false,
                          "sql": {
                            "logsProcessing": "truncate",
                            "retainLogBackups": null,
                            "backupMinsCount": null,
                            "keepDaysCount": null,
                            "logShippingServers": null
                          },
                          "oracle": {
                            "archiveLogs": "preserve",
                            "retainLogBackups": null,
                            "useGuestCredentials": true,
                            "credentialsId": null,
                            "deleteHoursCount": null,
                            "deleteGBsCount": null,
                            "backupLogs": false,
                            "backupMinsCount": null,
                            "keepDaysCount": null,
                            "logShippingServers": null
                          },
                          "exclusions": {
                            "exclusionPolicy": "disabled",
                            "itemsList": []
                          },
                          "scripts": {
                            "scriptProcessingMode": "disableExec",
                            "windowsScripts": null,
                            "linuxScripts": null
                          }
                        }
                      ]
                    },
                    "guestFSIndexing": {
                      "isEnabled": false,
                      "indexingSettings": []
                    },
                    "guestInteractionProxies": {
                      "autoSelection": true,
                      "proxyIds": []
                    },
                    "guestCredentials": {
                      "credsType": "Standard",
                      "credsId": "d38995da-75ec-4ada-ac31-2138d7a0351f",
                      "credentialsPerMachine": []
                    }
                  },
                  "schedule": {
                    "runAutomatically": false,
                    "daily": {
                      "dailyKind": "Everyday",
                      "isEnabled": true,
                      "localTime": "10:00 PM",
                      "days": [
                        "sunday",
                        "monday",
                        "tuesday",
                        "wednesday",
                        "thursday",
                        "friday",
                        "saturday"
                      ]
                    },
                    "monthly": {
                      "dayOfWeek": "saturday",
                      "dayNumberInMonth": "Fourth",
                      "isEnabled": false,
                      "localTime": "10:00 PM",
                      "dayOfMonth": 1,
                      "months": [
                        "January",
                        "February",
                        "March",
                        "April",
                        "May",
                        "June",
                        "July",
                        "August",
                        "September",
                        "October",
                        "November",
                        "December"
                      ]
                    },
                    "periodically": {
                      "periodicallyKind": "Hours",
                      "isEnabled": false,
                      "frequency": 1,
                      "backupWindow": {
                        "days": [
                          {
                            "day": "sunday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "monday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "tuesday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "wednesday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "thursday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "friday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "saturday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          }
                        ]
                      },
                      "startTimeWithinAnHour": 0
                    },
                    "continuously": {
                      "isEnabled": false,
                      "backupWindow": {
                        "days": [
                          {
                            "day": "sunday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "monday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "tuesday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "wednesday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "thursday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "friday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "saturday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          }
                        ]
                      }
                    },
                    "afterThisJob": {
                      "isEnabled": false,
                      "jobName": null
                    },
                    "retry": {
                      "isEnabled": true,
                      "retryCount": 3,
                      "awaitMinutes": 10
                    },
                    "backupWindow": {
                      "isEnabled": false,
                      "backupWindow": {
                        "days": [
                          {
                            "day": "sunday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "monday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "tuesday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "wednesday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "thursday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "friday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          },
                          {
                            "day": "saturday",
                            "hours": "1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
                          }
                        ]
                      }
                    }
                  },
                  "type": "Backup",
                  "id": "53b87378-7958-477d-8def-fbe6740d4b6f",
                  "name": "Exchange Backup",
                  "description": "Created by GAMMA\\Administrator",
                  "isDisabled": false
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Jobs"
        ],
        "x-veeam-authorize": {
          "claims": [
            "DeleteJobs"
          ]
        },
        "summary": "Delete Job",
        "description": "The HTTP DELETE request to the `/api/v1/jobs/{id}` path allows you to delete a job that has the specified `id`.",
        "operationId": "DeleteJob",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the job.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Deleted"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/jobs/{id}/start": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "x-veeam-authorize": {
          "claims": [
            "StartJobs"
          ]
        },
        "summary": "Start Job",
        "description": "The HTTP POST request to the `/api/v1/jobs/{id}/start` path allows you to start a job that has the specified `id`.",
        "operationId": "StartJob",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the job.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobStartSpec"
              },
              "example": {
                "performActiveFull": false,
                "startChainedJobs": false
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Job session has been started.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                },
                "example": {
                  "sessionType": "Job",
                  "state": "Starting",
                  "id": "b1380736-18a9-4fac-adfe-20abc570e8de",
                  "name": "Oracle Backup",
                  "activityId": "75fc491a-d158-4380-a433-ebc42a28e4df",
                  "creationTime": "2022-02-04T20:46:49.067+03:00",
                  "endTime": null,
                  "progressPercent": 0,
                  "result": null,
                  "resourceId": null,
                  "resourceReference": null,
                  "parentSessionId": null,
                  "usn": 0
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/jobs/{id}/stop": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "x-veeam-authorize": {
          "claims": [
            "StopJobs"
          ]
        },
        "summary": "Stop Job",
        "description": "The HTTP POST request to the `/api/v1/jobs/{id}/stop` path allows you to stop a job that has the specified `id`.",
        "operationId": "StopJob",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the job.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobStopSpec"
              },
              "example": {
                "gracefullStop": true
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Job session has been stopped.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                },
                "example": {
                  "sessionType": "Job",
                  "state": "Working",
                  "id": "3b5a044b-f38d-4ae8-85d1-38872095a537",
                  "name": "Oracle Backup",
                  "activityId": "75fc491a-d158-4380-a433-ebc42a28e4df",
                  "creationTime": "2022-02-04T20:52:06.387+03:00",
                  "endTime": null,
                  "progressPercent": 0,
                  "result": null,
                  "resourceId": null,
                  "resourceReference": null,
                  "parentSessionId": null,
                  "usn": 0
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/jobs/{id}/disable": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "x-veeam-authorize": {
          "claims": [
            "DisableJobs"
          ]
        },
        "summary": "Disable Job",
        "description": "The HTTP POST request to the `/api/v1/jobs/{id}/disable` path allows you to disable a job that has the specified `id`.",
        "operationId": "DisableJob",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the job.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job has been disabled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptySuccessResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/jobs/{id}/enable": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "x-veeam-authorize": {
          "claims": [
            "EnableJobs"
          ]
        },
        "summary": "Enable Job",
        "description": "The HTTP POST request to the `/api/v1/jobs/{id}/enable` path allows you to enable a job that has the specified `id`.",
        "operationId": "EnableJob",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the job.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job has been enabled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptySuccessResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/credentials": {
      "get": {
        "tags": [
          "Credentials"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewCredentials"
          ]
        },
        "summary": "Get All Credentials",
        "description": "The HTTP GET request to the `/api/v1/credentials` path allows you to get an array of credentials records that are added to the backup server.",
        "operationId": "GetAllCreds",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "skip",
            "description": "Number of credentials records to skip.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/CredentialsFilters"
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of credentials records to return.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/CredentialsFilters"
            }
          },
          {
            "name": "orderColumn",
            "description": "Sorts credentials by one of the credentials parameters.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ECredentialsFiltersOrderColumn"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/CredentialsFilters"
            }
          },
          {
            "name": "orderAsc",
            "description": "Sorts credentials in the ascending order by the `orderColumn` parameter.",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/CredentialsFilters"
            }
          },
          {
            "name": "nameFilter",
            "description": "Filters credentials by the `nameFilter` pattern. The pattern can match any credentials parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/CredentialsFilters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialsResult"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Credentials"
        ],
        "x-veeam-authorize": {
          "claims": [
            "CreateCredentials"
          ]
        },
        "summary": "Add Credentials Record",
        "description": "The HTTP POST request to the `/api/v1/credentials` path allows you to add a credentials record.",
        "operationId": "CreateCreds",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialsSpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Account has been added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialsModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/credentials/{id}": {
      "get": {
        "tags": [
          "Credentials"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewCredentials"
          ]
        },
        "summary": "Get Credentials Record",
        "description": "The HTTP GET request to the `/api/v1/credentials/{id}` path allows you to get a credentials record that has the specified `id`.",
        "operationId": "GetCreds",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the credentials record.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialsModel"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Credentials"
        ],
        "x-veeam-authorize": {
          "claims": [
            "UpdateCredentials"
          ]
        },
        "summary": "Edit Credentials Record",
        "description": "The HTTP PUT request to the `/api/v1/credentials/{id}` path allows you to edit a credentials record that has the specified `id`.",
        "operationId": "UpdateCreds",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the credentials record.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialsModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Credentials record has been updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialsModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Credentials"
        ],
        "x-veeam-authorize": {
          "claims": [
            "DeleteCredentials"
          ]
        },
        "summary": "Remove Credentials Record",
        "description": "The HTTP DELETE request to the `/api/v1/credentials/{id}` path allows you to remove a credentials record that has the specified `id`.",
        "operationId": "DeleteCreds",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the credentials record.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Credentials record has been removed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptySuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/credentials/{id}/changepassword": {
      "post": {
        "tags": [
          "Credentials"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ChangeAccountPassword"
          ]
        },
        "summary": "Change Password",
        "description": "The HTTP POST request to the `/api/v1/credentials/{id}/changepassword` path allows you to change a password of the credentials record that has the specified `id`.",
        "operationId": "ChangePasswordForCreds",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the credentials record.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialsPasswordChangeSpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password has been changed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptySuccessResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/credentials/{id}/changeprivatekey": {
      "post": {
        "tags": [
          "Credentials"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ChangeLinuxPrivateKey"
          ]
        },
        "summary": "Change Linux Private Key",
        "description": "The HTTP POST request to the `/api/v1/credentials/{id}/changeprivatekey` path allows you to change a Linux private key of the credentials record that has the specified `id`.",
        "operationId": "ChangePrivateKeyForCreds",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the credentials record.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrivateKeyChangeSpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Private key has been changed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptySuccessResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/credentials/{id}/changerootpassword": {
      "post": {
        "tags": [
          "Credentials"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ChangeLinuxRootPassword"
          ]
        },
        "summary": "Change Linux Root Password",
        "description": "The HTTP POST request to the `/api/v1/credentials/{id}/changerootpassword` path allows you to change a Linux root password of the credentials record that has the specified `id`.",
        "operationId": "ChangeRootPasswordForCreds",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the credentials record.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialsPasswordChangeSpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Root password has been changed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptySuccessResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/cloudCredentials": {
      "get": {
        "tags": [
          "Credentials"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewCloudCredentials"
          ]
        },
        "summary": "Get All Cloud Credentials",
        "description": "The HTTP GET request to the `/api/v1/cloudCredentials` path allows you to get an array of credentials records used to connect to cloud services.",
        "operationId": "GetAllCloudCreds",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "skip",
            "description": "Number of cloud credentials records to skip.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/CloudCredentialsFilters"
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of cloud credentials records to return.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/CloudCredentialsFilters"
            }
          },
          {
            "name": "orderColumn",
            "description": "Sorts cloud credentials by one of the cloud credentials parameters.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ECloudCredentialsFiltersOrderColumn"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/CloudCredentialsFilters"
            }
          },
          {
            "name": "orderAsc",
            "description": "Sorts cloud credentials in the ascending order by the `orderColumn` parameter.",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/CloudCredentialsFilters"
            }
          },
          {
            "name": "nameFilter",
            "description": "Filters cloud credentials by the `nameFilter` pattern. The pattern can match any cloud credentials parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/CloudCredentialsFilters"
            }
          },
          {
            "name": "typeFilter",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ECloudCredentialsType"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/CloudCredentialsFilters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudCredentialsResult"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Credentials"
        ],
        "x-veeam-authorize": {
          "claims": [
            "CreateCloudCredentials"
          ]
        },
        "summary": "Add Cloud Credentials Record",
        "description": "The HTTP POST request to the `/api/v1/cloudCredentials` path allows you to add a credentials record used to connect to cloud services.",
        "operationId": "CreateCloudCreds",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudCredentialsSpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Cloud credentials record has been created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudCredentialsModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/cloudCredentials/appRegistration": {
      "post": {
        "tags": [
          "Credentials"
        ],
        "x-veeam-authorize": {
          "claims": [
            "CreateCloudCredentials"
          ]
        },
        "summary": "Get Verification Code",
        "description": "The HTTP POST request to the `/api/v1/cloudCredentials/appRegistration` path allows you to get a single-use verification code required to register a new Azure Active Directory application.",
        "operationId": "RequestAppRegistrationByDeviceCode",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudDeviceCodeSpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Verification code has been received.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudDeviceCodeModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/cloudCredentials/appRegistration/{verificationCode}": {
      "post": {
        "tags": [
          "Credentials"
        ],
        "x-veeam-authorize": {
          "claims": [
            "CreateCloudCredentials"
          ]
        },
        "summary": "Register Azure AD Application",
        "description": "The HTTP POST request to the `/api/v1/cloudCredentials/appRegistration/{verificationCode}` path allows you to register a new Azure Active Directory application using the specified `verificationCode`.",
        "operationId": "FinishAppRegistrationByDeviceCode",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "verificationCode",
            "description": "Verification code. To obtain the code, use the [Get Verification Code](#tag/Credentials/operation/RequestAppRegistrationByDeviceCode) request.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Azure Active Directory application has been registered.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudNativeApplicationModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/cloudCredentials/{id}": {
      "get": {
        "tags": [
          "Credentials"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewCloudCredentials"
          ]
        },
        "summary": "Get Cloud Credentials Record",
        "description": "The HTTP GET request to the `/api/v1/cloudCredentials/{id}` path allows you to get a cloud credentials record that has the specified `id`.",
        "operationId": "GetCloudCreds",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the cloud credentials record.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudCredentialsModel"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Credentials"
        ],
        "x-veeam-authorize": {
          "claims": [
            "UpdateCloudCredentials"
          ]
        },
        "summary": "Edit Cloud Credentials Record",
        "description": "The HTTP PUT request to the `/api/v1/cloudCredentials/{id}` path allows you to edit a cloud credentials record that has the specified `id`.",
        "operationId": "UpdateCloudCreds",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the cloud credentials record.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudCredentialsModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Cloud credentials record has been updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudCredentialsModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Credentials"
        ],
        "x-veeam-authorize": {
          "claims": [
            "DeleteCloudCredentials"
          ]
        },
        "summary": "Remove Cloud Credentials Record",
        "description": "The HTTP DELETE request to the `/api/v1/cloudCredentials/{id}` path allows you to remove a cloud credentials record that has the specified `id`.",
        "operationId": "DeleteCloudCreds",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the cloud credentials record.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Cloud credentials record has been removed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptySuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/cloudCredentials/{id}/changeSecretKey": {
      "post": {
        "tags": [
          "Credentials"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ChangeCloudSecretKey"
          ]
        },
        "summary": "Change Secret Key",
        "description": "The HTTP POST request to the `/api/v1/cloudCredentials/{id}/changeSecretKey` path allows you to change a secret key of a cloud credentials record that has the specified `id`.",
        "operationId": "ChangeCloudCredsSecretKey",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the cloud credentials record.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudCredentialsPasswordSpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Secret key has been changed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudCredentialsModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/cloudCredentials/{id}/changeCertificate": {
      "post": {
        "tags": [
          "Credentials"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ChangeCloudCertificate"
          ]
        },
        "summary": "Change Certificate",
        "description": "The HTTP POST request to the `/api/v1/cloudCredentials/{id}/changeCertificate` path allows you to change a certificate used for authentication in your Azure Active Directory application associated with an Azure compute account that has the specified `id`.",
        "operationId": "ChangeCloudCertificate",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the Azure compute account.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CertificateUploadSpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Certificate has been changed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudCredentialsModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/cloudCredentials/{id}/helperAppliances": {
      "get": {
        "tags": [
          "Credentials"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewCredentials"
          ]
        },
        "summary": "Get All Helper Appliances",
        "description": "The HTTP GET request to the `/api/v1/cloudCredentials/{id}/helperAppliances` path allows you to get an array of Lunux-based helper appliances of a Microsoft Azure compute account that has the specified `id`.",
        "operationId": "GetAllCredsHelperAppliances",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the Microsoft Azure compute account.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudHelperApplianceResult"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Credentials"
        ],
        "x-veeam-authorize": {
          "claims": [
            "CreateCloudCredentials"
          ]
        },
        "summary": "Add or Edit Helper Appliance",
        "operationId": "CreateCloudCredsHelperAppliance",
        "description": "The HTTP POST request to the `/api/v1/cloudCredentials/{id}/helperAppliances` path allows you to create a new Lunux-based helper appliance or edit settings of an existing one for a Microsoft Azure compute account that has the specified `id`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the Microsoft Azure compute account.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudHelperApplianceSpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "AzureApplianceDeploy session has been created. To check the progress, track the session `state`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/cloudCredentials/{id}/helperAppliances/{applianceId}": {
      "get": {
        "tags": [
          "Credentials"
        ],
        "x-veeam-authorize": {
          "claims": [
            "UpdateCloudCredentials"
          ]
        },
        "summary": "Get Helper Appliance",
        "operationId": "GetCloudCredsHelperAppliance",
        "description": "The HTTP GET request to the `/api/v1/cloudCredentials/{id}/helperAppliances/{applianceId}` path allows you to get a Lunux-based helper appliance with the `applianceId` of a Microsoft Azure compute account that has the specified `id`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the Microsoft Azure compute account.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "applianceId",
            "description": "ID of the helper appliance.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudHelperApplianceModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Credentials"
        ],
        "x-veeam-authorize": {
          "claims": [
            "DeleteCloudCredentials"
          ]
        },
        "summary": "Remove Helper Appliance",
        "description": "The HTTP DELETE request to the `/api/v1/cloudCredentials/{id}/helperAppliances/{applianceId}` path allows you to remove a Lunux-based helper appliance with the `applianceId` of a Microsoft Azure compute account that has the specified `id`.",
        "operationId": "DeleteCloudCredsHelperAppliance",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the Microsoft Azure compute account.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "applianceId",
            "description": "ID of the helper appliance.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Helper appliance has been removed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptySuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/cloudBrowser": {
      "post": {
        "tags": [
          "Cloud Browser"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewCloudHierarchy"
          ]
        },
        "summary": "Get Cloud Hierarchy",
        "description": "The HTTP POST request to the `/api/v1/cloudBrowser` path allows you to browse cloud resources (compute or storage) available for the specified storage account.",
        "operationId": "BrowseCloudEntity",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudBrowserSpec"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudBrowserModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/cloudBrowser/newFolder": {
      "post": {
        "tags": [
          "Cloud Browser"
        ],
        "x-veeam-authorize": {
          "claims": [
            "CreateCloudStorageFolder"
          ]
        },
        "summary": "New Folder",
        "description": "The HTTP POST request to the `/api/v1/cloudBrowser/newFolder` path allows you to create a new folder in the cloud infrastructure.<br><div class=\"note\"><strong>NOTE</strong><br>The REST API does not create new containers, you can create a folder in an existing container only.</div>",
        "operationId": "CreateNewCloudFolder",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudBrowserNewFolderSpec"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Cloud folder has been created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptySuccessResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/encryptionPasswords": {
      "get": {
        "tags": [
          "Encryption"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewEncryptionPasswords"
          ]
        },
        "summary": "Get All Encryption Passwords",
        "description": "The HTTP GET request to the `/api/v1/encryptionPasswords` path allows you to get an array of all passwords that are used for data encryption.",
        "operationId": "GetAllEncryptionPasswords",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "skip",
            "description": "Number of passwords to skip.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/EncryptionPasswordsFilters"
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of passwords to return.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/EncryptionPasswordsFilters"
            }
          },
          {
            "name": "orderColumn",
            "description": "Sorts passwords by one of the password parameters.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EEncryptionPasswordsFiltersOrderColumn"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/EncryptionPasswordsFilters"
            }
          },
          {
            "name": "orderAsc",
            "description": "Sorts passwords in the ascending order by the `orderColumn` parameter.",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/EncryptionPasswordsFilters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EncryptionPasswordsResult"
                },
                "example": {
                  "data": [
                    {
                      "id": "6ebbe3cc-8147-47b6-b77a-01eeb7965522",
                      "hint": "Standard Password",
                      "modificationTime": "2021-10-19T12:37:58.27+03:00",
                      "tag": "internal"
                    },
                    {
                      "id": "3261d360-1db7-4291-b1ed-360ef5b77175",
                      "hint": "Created by TECH\\Administrator",
                      "modificationTime": "2022-02-11T11:34:28.677+03:00",
                      "tag": "external"
                    }
                  ],
                  "pagination": {
                    "total": 2,
                    "count": 2,
                    "skip": 0,
                    "limit": 200
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Encryption"
        ],
        "x-veeam-authorize": {
          "claims": [
            "CreateEncryptionPasswords"
          ]
        },
        "summary": "Add Encryption Password",
        "description": "The HTTP POST request to the `/api/v1/encryptionPasswords` path allows you to add an encryption password.",
        "operationId": "CreateEncryptionPassword",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EncryptionPasswordSpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Password has been added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EncryptionPasswordModel"
                },
                "example": {
                  "password": "passsw3wrsdf2d44",
                  "hint": "Pet name",
                  "tag": "vcenter01"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/encryptionPasswords/{id}": {
      "get": {
        "tags": [
          "Encryption"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewEncryptionPasswords"
          ]
        },
        "summary": "Get Encryption Password",
        "description": "The HTTP GET request to the `/api/v1/encryptionPasswords/{id}` path allows you to get an encryption password that has the specified `id`.",
        "operationId": "GetEncryptionPassword",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the encryption password.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EncryptionPasswordModel"
                },
                "example": {
                  "id": "6ebbe3cc-8147-47b6-b77a-01eeb7965522",
                  "hint": "Standard Password",
                  "modificationTime": "2022-10-19T12:37:58.27+03:00",
                  "tag": "internal"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Encryption"
        ],
        "x-veeam-authorize": {
          "claims": [
            "UpdateEncryptionPasswords"
          ]
        },
        "summary": "Edit Encryption Password",
        "description": "The HTTP PUT request to the `/api/v1/encryptionPasswords/{id}` path allows you to edit an encryption password that has the specified `id`.",
        "operationId": "UpdateEncryptionPassword",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the encryption password.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EncryptionPasswordModel"
              },
              "example": {
                "id": "6ebbe3cc-8147-47b6-b77a-01eeb7965522",
                "hint": "Poem",
                "modificationTime": "2022-10-19T12:37:58.27+03:00",
                "tag": "internal"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password has been updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EncryptionPasswordModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Encryption"
        ],
        "x-veeam-authorize": {
          "claims": [
            "DeleteEncryptionPasswords"
          ]
        },
        "summary": "Remove Encryption Password",
        "description": "The HTTP DELETE request to the `/api/v1/encryptionPasswords/{id}` path allows you to remove an encryption password that has the specified `id`.",
        "operationId": "DeleteEncryptionPassword",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the encryption password.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Password has been removed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptySuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/backups": {
      "get": {
        "tags": [
          "Backups"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewBackups"
          ]
        },
        "summary": "Get All Backups",
        "description": "The HTTP GET request to the `/api/v1/backups` path allows you to get an array of all backups that are created on or imported to the backup server.",
        "operationId": "GetAllBackups",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "skip",
            "description": "Number of backups to skip.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/BackupsFilters"
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of backups to return.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/BackupsFilters"
            }
          },
          {
            "name": "orderColumn",
            "description": "Sorts backups by one of the backup parameters.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EBackupsFiltersOrderColumn"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/BackupsFilters"
            }
          },
          {
            "name": "orderAsc",
            "description": "Sorts backups in the ascending order by the `orderColumn` parameter.",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/BackupsFilters"
            }
          },
          {
            "name": "nameFilter",
            "description": "Filters backups by the `nameFilter` pattern. The pattern can match any backup parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/BackupsFilters"
            }
          },
          {
            "name": "createdAfterFilter",
            "description": "Returns backups that are created after the specified date and time.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/BackupsFilters"
            }
          },
          {
            "name": "createdBeforeFilter",
            "description": "Returns backups that are created before the specified date and time.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/BackupsFilters"
            }
          },
          {
            "name": "platformIdFilter",
            "description": "Filters backups by ID of the backup object platform.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/BackupsFilters"
            }
          },
          {
            "name": "jobIdFilter",
            "description": "Filters backups by ID of the parent job.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/BackupsFilters"
            }
          },
          {
            "name": "policyTagFilter",
            "description": "Filters backups by retention policy tag.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/BackupsFilters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupsResult"
                },
                "example": {
                  "data": [
                    {
                      "platformName": "VMware",
                      "id": "f3b0fbc5-01cf-4464-976a-4881e6eda067",
                      "jobId": "53b87378-7958-477d-8def-fbe6740d4b6f",
                      "policyTag": "",
                      "name": "Oracle Backup",
                      "platformId": "00000000-0000-0000-0000-000000000000",
                      "creationTime": "2022-02-12T04:24:16.2+03:00",
                      "repositoryId": "88788f9e-d8f5-4eb4-bc4f-9b3f5403bcec"
                    },
                    {
                      "platformName": "CustomPlatform",
                      "id": "b2f9f40f-7944-498f-baff-175e18558829",
                      "jobId": "00000000-0000-0000-0000-000000000000",
                      "policyTag": "",
                      "name": "Oracle Backup",
                      "platformId": "c8098b32-9700-459b-b27c-4dceaf4ea932",
                      "creationTime": "2019-11-13T16:34:21+03:00",
                      "repositoryId": "49607f55-4cc4-4ea5-a2c9-e750318d0f34"
                    }
                  ],
                  "pagination": {
                    "total": 2,
                    "count": 2,
                    "skip": 0,
                    "limit": 200
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/backups/{id}": {
      "get": {
        "tags": [
          "Backups"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewBackups"
          ]
        },
        "summary": "Get Backup",
        "description": "The HTTP GET request to the `/api/v1/backups/{id}` path allows you to get a backup that has the specified `id`.",
        "operationId": "GetBackup",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the backup.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupModel"
                },
                "example": {
                  "platformName": "VMware",
                  "id": "9d4c348d-284a-480d-9340-6454998fa227",
                  "jobId": "301450bc-34cd-4d2c-bfc3-8d269bb471be",
                  "policyTag": "",
                  "name": "AD Backup",
                  "platformId": "00000000-0000-0000-0000-000000000000",
                  "creationTime": "2021-02-12T04:24:32.087+03:00",
                  "repositoryId": "88788f9e-d8f5-4eb4-bc4f-9b3f5403bcec"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/backups/{id}/objects": {
      "get": {
        "tags": [
          "Backups"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewBackupObjects"
          ]
        },
        "summary": "Get Backup Objects",
        "description": "The HTTP GET request to the `/api/v1/backups/{id}/objects` path allows you to get an array of virtual infrastructure objects (VMs and VM containers) that are included in a backup that has the specified ID.",
        "operationId": "GetBackupObjects",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the backup.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupObjectsResult"
                },
                "example": {
                  "data": [
                    {
                      "viType": "VirtualMachine",
                      "objectId": "503",
                      "path": "172.17.42.92\\DLDC",
                      "platformName": "VMware",
                      "id": "2a192b21-4d32-4b94-829e-231e8f0c0355",
                      "name": "DLDC",
                      "type": "VM",
                      "platformId": "00000000-0000-0000-0000-000000000000",
                      "restorePointsCount": 3
                    }
                  ],
                  "pagination": {
                    "total": 1,
                    "count": 1,
                    "skip": 0,
                    "limit": 1
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/backupObjects": {
      "get": {
        "tags": [
          "Backup Objects"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewBackupObjects"
          ]
        },
        "summary": "Get All Backup Objects",
        "description": "The HTTP GET request to the `/api/v1/backupObjects` path allows you to get an array of virtual infrastructure objects (VMs and VM containers) that are included in backups created by the backup server.",
        "operationId": "GetAllBackupObjects",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "skip",
            "description": "Number of backup objects to skip.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/BackupObjectsFilters"
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of backup objects to return.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/BackupObjectsFilters"
            }
          },
          {
            "name": "orderColumn",
            "description": "Sorts backup objects by one of the backup object parameters.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EBackupObjectsFiltersOrderColumn"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/BackupObjectsFilters"
            }
          },
          {
            "name": "orderAsc",
            "description": "Sorts backup objects in the ascending order by the `orderColumn` parameter.",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/BackupObjectsFilters"
            }
          },
          {
            "name": "nameFilter",
            "description": "Filters backup objects by the `nameFilter` pattern. The pattern can match any backup object parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/BackupObjectsFilters"
            }
          },
          {
            "name": "platformNameFilter",
            "description": "Filters backup objects by platform ID.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EPlatformType"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/BackupObjectsFilters"
            }
          },
          {
            "name": "platformIdFilter",
            "description": "Filters backup objects by platform ID.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/BackupObjectsFilters"
            }
          },
          {
            "name": "typeFilter",
            "description": "Filters backup objects by object type.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/BackupObjectsFilters"
            }
          },
          {
            "name": "viTypeFilter",
            "description": "Filters backup objects by the type of VMware vSphere server.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/BackupObjectsFilters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupObjectsResult"
                },
                "example": {
                  "data": [
                    {
                      "platformName": "CustomPlatform",
                      "id": "47335ff1-a4f0-41ae-91f6-21a129fe4500",
                      "name": null,
                      "type": "Directory",
                      "platformId": "c8098b32-9700-459b-b27c-4dceaf4ea932",
                      "restorePointsCount": 11
                    },
                    {
                      "viType": "VirtualMachine",
                      "objectId": "503",
                      "path": "172.17.42.92\\DLDC",
                      "platformName": "VMware",
                      "id": "2a192b21-4d32-4b94-829e-231e8f0c0355",
                      "name": "DLDC",
                      "type": "VM",
                      "platformId": "00000000-0000-0000-0000-000000000000",
                      "restorePointsCount": 3
                    }
                  ],
                  "pagination": {
                    "total": 2,
                    "count": 2,
                    "skip": 0,
                    "limit": 200
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/backupObjects/{id}": {
      "get": {
        "tags": [
          "Backup Objects"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewBackupObjects"
          ]
        },
        "summary": "Get Backup Object",
        "description": "The HTTP GET request to the `/api/v1/backupObjects/{id}` path allows you to get a backup object that has the specified `id`.",
        "operationId": "GetBackupObject",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the backup object.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupObjectModel"
                },
                "example": {
                  "viType": "VirtualMachine",
                  "objectId": "vm-69191",
                  "path": "vcenter01.tech.local\\Atlanta\\esx04.tech.local\\Enterprise\\winsrv88",
                  "platformName": "VmWare",
                  "id": "fcea73fa-aa48-45e1-89e4-6e33411e8de2",
                  "name": "winsrv88",
                  "type": "VM",
                  "platformId": "00000000-0000-0000-0000-000000000000",
                  "restorePointsCount": 13
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/backupObjects/{id}/restorePoints": {
      "get": {
        "tags": [
          "Backup Objects"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewRestorePoints"
          ]
        },
        "summary": "Get Restore Points",
        "description": "The HTTP GET request to the `/api/v1/backupObjects/{id}/restorePoints` path allows you to get an array of restore points of a backup object that has the specified `id`.",
        "operationId": "GetBackupObjectRestorePoints",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the backup object.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectRestorePointsResult"
                },
                "example": {
                  "data": [
                    {
                      "platformName": "VmWare",
                      "id": "cb9b2475-46d9-40ae-8d27-0f2f1dfa97cd",
                      "name": "winsrv88",
                      "platformId": "00000000-0000-0000-0000-000000000000",
                      "creationTime": "2022-02-02T22:01:18.163+01:00",
                      "backupId": "3c3d7ebd-3b06-4a99-899c-fa7d5320582a",
                      "allowedOperations": []
                    },
                    {
                      "platformName": "VmWare",
                      "id": "a97c72ed-adaf-4b27-a31e-c1ff5af9ba8f",
                      "name": "winsrv88",
                      "platformId": "00000000-0000-0000-0000-000000000000",
                      "creationTime": "2022-02-01T22:00:39.997+01:00",
                      "backupId": "3c3d7ebd-3b06-4a99-899c-fa7d5320582a",
                      "allowedOperations": []
                    }
                  ],
                  "pagination": {
                    "total": 2,
                    "count": 2,
                    "skip": 0,
                    "limit": 2
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/objectRestorePoints": {
      "get": {
        "tags": [
          "Object Restore Points"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewRestorePoints"
          ]
        },
        "summary": "Get All Restore Points",
        "description": "The HTTP GET request to the `/api/v1/objectRestorePoints` path allows you to get an array of all restore points created on the backup server.",
        "operationId": "GetAllObjectRestorePoints",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "skip",
            "description": "Number of restore points to skip.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ObjectRestorePointsFilters"
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of restore points to return.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ObjectRestorePointsFilters"
            }
          },
          {
            "name": "orderColumn",
            "description": "Sorts restore points by one of the restore point parameters.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EObjectRestorePointsFiltersOrderColumn"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ObjectRestorePointsFilters"
            }
          },
          {
            "name": "orderAsc",
            "description": "Sorts restore points in the ascending order by the `orderColumn` parameter.",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ObjectRestorePointsFilters"
            }
          },
          {
            "name": "createdAfterFilter",
            "description": "Returns restore points that are created after the specified date and time.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ObjectRestorePointsFilters"
            }
          },
          {
            "name": "createdBeforeFilter",
            "description": "Returns restore points that are created before the specified date and time.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ObjectRestorePointsFilters"
            }
          },
          {
            "name": "nameFilter",
            "description": "Filters restore points by the `nameFilter` pattern. The pattern can match any restore point parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ObjectRestorePointsFilters"
            }
          },
          {
            "name": "platformNameFilter",
            "description": "Filters restore points by name of the backup object platform.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EPlatformType"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ObjectRestorePointsFilters"
            }
          },
          {
            "name": "platformIdFilter",
            "description": "Filters restore points by ID of the backup object platform.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ObjectRestorePointsFilters"
            }
          },
          {
            "name": "backupIdFilter",
            "description": "Filters restore points by backup ID.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ObjectRestorePointsFilters"
            }
          },
          {
            "name": "backupObjectIdFilter",
            "description": "Filters restore points by backup object ID.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ObjectRestorePointsFilters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectRestorePointsResult"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/objectRestorePoints/{id}": {
      "get": {
        "tags": [
          "Object Restore Points"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewRestorePoints"
          ]
        },
        "summary": "Get Restore Point",
        "description": "The HTTP GET request to the `/api/v1/objectRestorePoints/{id}` path allows you to get a restore point that has the specified `id`.",
        "operationId": "GetObjectRestorePoint",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the restore point.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectRestorePointModel"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/objectRestorePoints/{id}/disks": {
      "get": {
        "tags": [
          "Object Restore Points"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewRestorePointDisks"
          ]
        },
        "summary": "Get Restore Point Disks",
        "description": "The HTTP GET request to the `/api/v1/objectRestorePoints/{id}/disks` path allows you to get an array of disks from a restore point that has the specified `id`.",
        "operationId": "GetObjectRestorePointDisks",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the restore point.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectRestorePointDisksResult"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/restore/instantRecovery/vmware/vm": {
      "get": {
        "tags": [
          "Restore"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewIRMountedVMs"
          ]
        },
        "summary": "Get All VM Mounts",
        "description": "The HTTP GET request to the `/api/v1/restore/instantRecovery/vmware/vm` path allows you to get an array of VM mounts.",
        "operationId": "GetAllInstantViVMRecoveryMounts",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "skip",
            "description": "Number of mounts to skip.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/InstantViVMRecoveryMountsFilters"
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of mounts to return.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/InstantViVMRecoveryMountsFilters"
            }
          },
          {
            "name": "orderColumn",
            "description": "Sorts mounts by one of the mount parameters.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EInstantViVMRecoveryMountsFiltersOrderColumn"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/InstantViVMRecoveryMountsFilters"
            }
          },
          {
            "name": "orderAsc",
            "description": "Sorts mounts in the ascending order by the `orderColumn` parameter.",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/InstantViVMRecoveryMountsFilters"
            }
          },
          {
            "name": "stateFilter",
            "description": "Filters mounts by mount state.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EInstantRecoveryMountState"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/InstantViVMRecoveryMountsFilters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstantViVMRecoveryMountsResult"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Restore"
        ],
        "x-veeam-authorize": {
          "claims": [
            "StartViVMInstantRecovery"
          ]
        },
        "summary": "Start Instant Recovery",
        "description": "The HTTP POST request to the `/api/v1/restore/instantRecovery/vmware/vm/` path allows you to start Instant Recovery of a VMware vSphere VM to VMware vSphere. You can recover a VM from the specified restore point to the original location with initial VM settings, or to any location but with different settings.",
        "operationId": "InstantViVMRecoveryMount",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstantViVMRecoverySpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Instant Recovery to VMware vSphere has been started.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/restore/instantRecovery/vmware/vm/{mountId}": {
      "get": {
        "tags": [
          "Restore"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewIRMountedVMs"
          ]
        },
        "summary": "Get VM Mount",
        "description": "The HTTP GET request to the `/api/v1/restore/instantRecovery/vmware/vm/{mountId}` path allows you to get a VM mount that has the specified `mountID`.",
        "operationId": "GetInstantViVMRecoveryMount",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "mountId",
            "description": "Mount ID.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstantViVMRecoveryMount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/restore/instantRecovery/vmware/vm/{mountId}/unmount": {
      "post": {
        "tags": [
          "Restore"
        ],
        "x-veeam-authorize": {
          "claims": [
            "DismountIRVMs"
          ]
        },
        "summary": "Stop VM Publishing",
        "description": "The HTTP POST request to the `/api/v1/restore/instantRecovery/vmware/vm/{mountId}/unmount` path allows you to stop publishing the recovered VM and remove it from the destination host.",
        "operationId": "InstantViVMRecoveryUnmount",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "mountId",
            "description": "Mount ID.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "VM has been unpublished.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/restore/instantRecovery/vmware/vm/{mountId}/migrate": {
      "post": {
        "tags": [
          "Restore"
        ],
        "x-veeam-authorize": {
          "claims": [
            "MigrateIRMountedVMs"
          ]
        },
        "summary": "Start VM Migration",
        "description": "The HTTP POST request to the `/api/v1/restore/instantRecovery/vmware/vm/{mountId}/migrate` path allows you to start VM migration from the specified mount.",
        "operationId": "InstantViVMRecoveryMigrate",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "mountId",
            "description": "Mount ID.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ViVMQuickMigrationSpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "VM Migration has been started. To check the progress, track the session `state`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/restore/vmRestore/vmware/": {
      "post": {
        "tags": [
          "Restore"
        ],
        "x-veeam-authorize": {
          "claims": [
            "StartEntireVmRestore"
          ]
        },
        "summary": "Start Entire VM Restore",
        "description": "The HTTP POST request to the `/api/v1/restore/vmRestore/vmware/` path allows you to perform entire VM restore of a VMware vSphere VM to VMware vSphere. You can restore a VM from the specified restore point to the original location with initial VM settings, or to any location but with different settings.",
        "operationId": "EntireVmRestoreVmware",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntireViVMRestoreSpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Restore session has been created. To check the progress, track the session `state`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/restore/instantRecovery/vmware/fcd": {
      "get": {
        "tags": [
          "Restore"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewIRMountedDisks"
          ]
        },
        "summary": "Get All FCD Mounts",
        "description": "The HTTP GET request to the `/api/v1/restore/instantRecovery/vmware/fcd` path allows you to get an array of FCD mounts.",
        "operationId": "GetAllVmwareFcdInstantRecoveryMountModels",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "skip",
            "description": "Number of mounts to skip.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/VmwareFcdInstantRecoveryMountsFilters"
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of mounts to return.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/VmwareFcdInstantRecoveryMountsFilters"
            }
          },
          {
            "name": "orderColumn",
            "description": "Sorts mounts by one of the mount parameters.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EVmwareFcdInstantRecoveryMountsFiltersOrderColumn"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/VmwareFcdInstantRecoveryMountsFilters"
            }
          },
          {
            "name": "orderAsc",
            "description": "Sorts mounts in the ascending order by the `orderColumn` parameter.",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/VmwareFcdInstantRecoveryMountsFilters"
            }
          },
          {
            "name": "stateFilter",
            "description": "Filters mounts by mount state.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EInstantRecoveryMountState"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/VmwareFcdInstantRecoveryMountsFilters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VmwareFcdInstantRecoveryMountsResult"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Restore"
        ],
        "x-veeam-authorize": {
          "claims": [
            "StartFCDInstantRecovery"
          ]
        },
        "summary": "Start Instant FCD Recovery",
        "description": "The HTTP POST request to the `/api/v1/restore/instantRecovery/vmware/fcd/` path allows you to start Instant FCD Recovery from the restore point to the destination cluster.<br>Specify the destination cluster in the `destinationCluster` parameter of the request body as a model of the VMware vSphere object. For details on how to get the cluster model, see [Get VMware vSphere Server Objects](#tag/Inventory-Browser/operation/GetVmwareHostObject).",
        "operationId": "InstantRecoveryVmwareFcdMountWithSession",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VmwareFcdInstantRecoverySpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Instant FCD Recovery has been started. To check the progress, track the session `state`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/restore/instantRecovery/vmware/fcd/{mountId}": {
      "get": {
        "tags": [
          "Restore"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewIRMountedDisks"
          ]
        },
        "summary": "Get FCD Mount",
        "description": "The HTTP GET request to the `/api/v1/restore/instantRecovery/vmware/fcd/{mountId}` path allows you to get information about the mounted vPower NFS datastore, such as restore session ID, mount state, instant FCD recovery settings and disks that will be recovered.",
        "operationId": "GetVmwareFcdInstantRecoveryMountModel",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "mountId",
            "description": "Mount ID.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VmwareFcdInstantRecoveryMount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/restore/instantRecovery/vmware/fcd/{mountId}/dismount": {
      "post": {
        "tags": [
          "Restore"
        ],
        "x-veeam-authorize": {
          "claims": [
            "DismountIRDisks"
          ]
        },
        "summary": "Stop FCD Publishing",
        "description": "The HTTP POST request to the `/api/v1/restore/instantRecovery/vmware/fcd/{mountId}/dismount` path allows you to stop publishing the recovered FCDs and remove the disks from the datastore.",
        "operationId": "InstantRecoveryVmwareFcdDismountWithSession",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "mountId",
            "description": "Mount ID.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Disks has been unmounted. To check the progress, track the session `state`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/restore/instantRecovery/vmware/fcd/{mountId}/migrate": {
      "post": {
        "tags": [
          "Restore"
        ],
        "x-veeam-authorize": {
          "claims": [
            "MigrateIRMountedDisks"
          ]
        },
        "summary": "Start FCD Migration",
        "description": "The HTTP POST request to the `/api/v1/restore/instantRecovery/vmware/fcd/{mountId}/migrate` path allows you to start migration of FCDs from the specified mount.<br>In the request body specify FCD migration configuration:<ul> <li>Disks for migration</li> <li>Target datastore</li> <li>Storage policy that will be applied to the migrated disks</li></ul> For details on how to get models of the datastore and storage policy, see [Get VMware vSphere Server Objects](#tag/Inventory-Browser/operation/GetVmwareHostObject).",
        "operationId": "InstantRecoveryVmwareFcdMigrateWithSession",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "mountId",
            "description": "Mount ID.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VmwareFcdQuickMigrationSpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "FCD Migration has been started. To check the progress, track the session `state`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/agents/recoveryTokens": {
      "get": {
        "tags": [
          "Agents"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewComputerRecoveryTokens"
          ]
        },
        "summary": "Get All Recovery Tokens",
        "description": "The HTTP GET request to the `/api/v1/agents/recoveryTokens` path allows you to get an array of all recovery tokens.",
        "operationId": "GetAllComputerRecoveryTokens",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "skip",
            "description": "Number of recovery tokens to skip.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ComputerRecoveryTokenFilters"
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of recovery tokens to return.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ComputerRecoveryTokenFilters"
            }
          },
          {
            "name": "orderColumn",
            "description": "Sorts recovery tokens by one of the parameters.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/EComputerRecoveryTokenFiltersOrderColumn"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ComputerRecoveryTokenFilters"
            }
          },
          {
            "name": "orderAsc",
            "description": "Sorts recovery tokens in the ascending order by the `orderColumn` parameter.",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ComputerRecoveryTokenFilters"
            }
          },
          {
            "name": "nameFilter",
            "description": "Filters recovery tokens by the `nameFilter` pattern. The pattern can match any repository parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/ComputerRecoveryTokenFilters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputerRecoveryTokenResult"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Agents"
        ],
        "x-veeam-authorize": {
          "claims": [
            "CreateComputerRecoveryToken"
          ]
        },
        "summary": "Create Recovery Token",
        "description": "The HTTP POST request to the `/api/v1/agents/recoveryTokens` path allows you to create a new recovery token.",
        "operationId": "CreateComputerRecoveryToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComputerRecoveryTokenSpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Recovery token has been created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputerRecoveryTokenModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/agents/recoveryTokens/{id}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewComputerRecoveryTokens"
          ]
        },
        "summary": "Get Recovery Token",
        "description": "The HTTP GET request to the `/api/v1/agents/recoveryTokens/{id}` path allows you to get a recovery token that has the specified `id`.",
        "operationId": "GetComputerRecoveryToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the recovery token.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputerRecoveryTokenModel"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Agents"
        ],
        "x-veeam-authorize": {
          "claims": [
            "UpdateComputerRecoveryToken"
          ]
        },
        "summary": "Edit Recovery Token",
        "description": "The HTTP PUT request to the `/api/v1/agents/recoveryTokens/{id}` path allows you to edit settings of a recovery token that has the specified `id`.",
        "operationId": "UpdateComputerRecoveryToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the recovery token.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComputerRecoveryTokenModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Recovery token has been updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputerRecoveryTokenModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Agents"
        ],
        "x-veeam-authorize": {
          "claims": [
            "DeleteComputerRecoveryToken"
          ]
        },
        "summary": "Delete Recovery Token",
        "description": "The HTTP DELETE request to the `/api/v1/agents/recoveryTokens/{id}` path allows you to delete a recovery token that has the specified `id`.",
        "operationId": "DeleteComputerRecoveryToken",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the recovery token.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Token has been deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptySuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/automation/jobs/import": {
      "post": {
        "tags": [
          "Automation"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ImportJobs"
          ]
        },
        "summary": "Import Jobs",
        "description": "The HTTP POST request to the `/api/v1/automation/jobs/import` path allows you to import jobs to Veeam Backup & Replication.",
        "operationId": "ImportJobs",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobImportSpecCollection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Automation session has been created to import the jobs. To check the progress, track the session `state`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/automation/jobs/export": {
      "post": {
        "tags": [
          "Automation"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ExportJobs"
          ]
        },
        "summary": "Export Jobs",
        "description": "The HTTP POST request to the `/api/v1/automation/jobs/export` path allows you to export jobs from Veeam Backup & Replication.",
        "operationId": "ExportJobs",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobExportSpec"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobImportSpecCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/automation/credentials/import": {
      "post": {
        "tags": [
          "Automation"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ImportCredentials"
          ]
        },
        "summary": "Import Credentials",
        "description": "The HTTP POST request to the `/api/v1/automation/credentials/import` path allows you to import credentials to Veeam Backup & Replication.",
        "operationId": "ImportCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialsImportSpecCollection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Automation session has been created to import the credentials. To check the progress, track the session `state`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/automation/credentials/export": {
      "post": {
        "tags": [
          "Automation"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ExportCredentials"
          ]
        },
        "summary": "Export Credentials",
        "description": "The HTTP POST request to the `/api/v1/automation/credentials/export` path allows you to export credentials from Veeam Backup & Replication.",
        "operationId": "ExportCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CredentialsExportSpec"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialsImportSpecCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/automation/cloudcredentials/import": {
      "post": {
        "tags": [
          "Automation"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ImportCredentials"
          ]
        },
        "summary": "Import Cloud Credentials",
        "description": "The HTTP POST request to the `/api/v1/automation/cloudcredentials/import` path allows you to import cloud credentials to Veeam Backup & Replication.",
        "operationId": "ImportCloudCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudCredentialsImportSpecCollection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Automation session has been created to import the cloud credentials. To check the progress, track the session `state`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/automation/cloudcredentials/export": {
      "post": {
        "tags": [
          "Automation"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ExportCredentials"
          ]
        },
        "summary": "Export Cloud Credentials",
        "description": "The HTTP POST request to the `/api/v1/automation/cloudcredentials/export` path allows you to export cloud credentials from Veeam Backup & Replication.",
        "operationId": "ExportCloudCredentials",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloudCredentialsExportSpec"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudCredentialsImportSpecCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/automation/proxies/import": {
      "post": {
        "tags": [
          "Automation"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ImportProxies"
          ]
        },
        "summary": "Import Proxies",
        "description": "The HTTP POST request to the `/api/v1/automation/proxies/import` path allows you to import backup proxies to Veeam Backup & Replication.",
        "operationId": "ImportProxies",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProxyImportSpecCollection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Automation session has been created to import the proxies. To check the progress, track the session `state`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/automation/proxies/export": {
      "post": {
        "tags": [
          "Automation"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ExportProxies"
          ]
        },
        "summary": "Export Proxies",
        "description": "The HTTP POST request to the `/api/v1/automation/proxies/export` path allows you to export backup proxies from Veeam Backup & Replication.",
        "operationId": "ExportProxies",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProxyExportSpec"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxyImportSpecCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/automation/managedServers/import": {
      "post": {
        "tags": [
          "Automation"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ImportManagedServers"
          ]
        },
        "summary": "Import Servers",
        "description": "The HTTP POST request to the `/api/v1/automation/managedServers/import` path allows you to import managed servers to Veeam Backup & Replication.",
        "operationId": "ImportManagedServers",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManageServerImportSpecCollection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Automation session has been created to import the servers. To check the progress, track the session `state`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/automation/managedServers/export": {
      "post": {
        "tags": [
          "Automation"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ExportManagedServers"
          ]
        },
        "summary": "Export Servers",
        "description": "The HTTP POST request to the `/api/v1/automation/managedServers/export` path allows you to export managed servers from Veeam Backup & Replication.",
        "operationId": "ExportManagedServers",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManageServerExportSpec"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManageServerImportSpecCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/automation/repositories/import": {
      "post": {
        "tags": [
          "Automation"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ImportRepositories"
          ]
        },
        "summary": "Import Repositories",
        "description": "The HTTP POST request to the `/api/v1/automation/repositories/import` path allows you to import backup repositories to Veeam Backup & Replication.",
        "operationId": "ImportRepositories",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepositoryImportSpecCollection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Automation session has been created to import the repositories. To check the progress, track the session `state`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/automation/repositories/export": {
      "post": {
        "tags": [
          "Automation"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ExportRepositories"
          ]
        },
        "summary": "Export Repositories",
        "description": "The HTTP POST request to the `/api/v1/automation/repositories/export` path allows you to export backup repositories from Veeam Backup & Replication.",
        "operationId": "ExportRepositories",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepositoryExportSpec"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryImportSpecCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/automation/encryptionPasswords/import": {
      "post": {
        "tags": [
          "Automation"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ImportEncryptionPasswords"
          ]
        },
        "summary": "Import Encryption Passwords",
        "description": "The HTTP POST request to the `/api/v1/automation/encryptionPasswords/import` path allows you to import encryption passwords to Veeam Backup & Replication.",
        "operationId": "ImportEncryptionPasswords",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EncryptionPasswordImportSpecCollection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Automation session has been created to import the passwords. To check the progress, track the session `state`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/automation/encryptionPasswords/export": {
      "post": {
        "tags": [
          "Automation"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ExportEncryptionPasswords"
          ]
        },
        "summary": "Export Encryption Passwords",
        "description": "The HTTP POST request to the `/api/v1/automation/encryptionPasswords/export` path allows you to export encryption passwords from Veeam Backup & Replication.",
        "operationId": "ExportEncryptionPasswords",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EncryptionPasswordExportSpec"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EncryptionPasswordImportSpecCollection"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/automation/sessions": {
      "get": {
        "tags": [
          "Automation"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewSessions"
          ]
        },
        "summary": "Get All Automation Sessions",
        "description": "The HTTP GET request to the `/api/v1/automation/sessions` path allows you to get an array of all automation sessions performed on the backup server.",
        "operationId": "GetAllAutomationSessions",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "skip",
            "description": "Number of sessions to skip.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          },
          {
            "name": "limit",
            "description": "Maximum number of sessions to return.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          },
          {
            "name": "orderColumn",
            "description": "Sorts sessions by one of the session parameters.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ESessionsFiltersOrderColumn"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          },
          {
            "name": "orderAsc",
            "description": "Sorts sessions in the ascending order by the `orderColumn` parameter.",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          },
          {
            "name": "nameFilter",
            "description": "Filters sessions by the `nameFilter` pattern. The pattern can match any session parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          },
          {
            "name": "createdAfterFilter",
            "description": "Returns sessions that are created after the specified date and time.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          },
          {
            "name": "createdBeforeFilter",
            "description": "Returns sessions that are created before the specified date and time.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          },
          {
            "name": "endedAfterFilter",
            "description": "Returns sessions that are finished after the specified date and time.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          },
          {
            "name": "endedBeforeFilter",
            "description": "Returns sessions that are finished before the specified date and time.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          },
          {
            "name": "typeFilter",
            "description": "Filters sessions by session type.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ESessionType"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          },
          {
            "name": "stateFilter",
            "description": "Filters sessions by session state.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ESessionState"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          },
          {
            "name": "resultFilter",
            "description": "Filters sessions by session result.",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ESessionResult"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          },
          {
            "name": "jobIdFilter",
            "description": "Filters sessions by job ID.",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "x-veeam-spec": {
              "$ref": "#/components/schemas/SessionsFilters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsResult"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/automation/sessions/{id}": {
      "get": {
        "tags": [
          "Automation"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewSessions"
          ]
        },
        "summary": "Get Automation Session",
        "description": "The HTTP GET request to the `/api/v1/automation/sessions/{id}` path allows you to get an automation session that has the specified `id`.",
        "operationId": "GetAutomationSession",
        "parameters": [
          {
            "name": "id",
            "description": "ID of the session.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionModel"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/automation/sessions/{id}/logs": {
      "get": {
        "tags": [
          "Automation"
        ],
        "x-veeam-authorize": {
          "claims": [
            "ViewSessions"
          ]
        },
        "summary": "Get Automation Session Logs",
        "description": "The HTTP GET request to the `/api/v1/automation/sessions/{id}/logs` path allows you to get an array of log records of an automation session that has the specified `id`.",
        "operationId": "GetAutomationSessionLogs",
        "parameters": [
          {
            "name": "id",
            "description": "ID of the session.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/apiVersionParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionLogResult"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/automation/sessions/{id}/stop": {
      "post": {
        "tags": [
          "Automation"
        ],
        "x-veeam-authorize": {
          "claims": [
            "StopSessions"
          ]
        },
        "summary": "Stop Automation Session",
        "description": "The HTTP POST request to the `/api/v1/automation/sessions/{id}/stop` path allows you to stop an automation session that has the specified `id`.",
        "operationId": "StopAutomationSession",
        "parameters": [
          {
            "$ref": "#/components/parameters/apiVersionParam"
          },
          {
            "name": "id",
            "description": "ID of the session.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptySuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "Deleted": {
        "description": "Removed.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EmptySuccessResponse"
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFound": {
        "description": "Not found. No object was found with the path parameter specified in the request.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "ServerTimeModel": {
        "required": [
          "serverTime"
        ],
        "type": "object",
        "properties": {
          "serverTime": {
            "description": "Current date and time on the backup server.",
            "type": "string",
            "format": "date-time"
          },
          "timeZone": {
            "description": "Time zone where the backup server is located.",
            "type": "string"
          }
        }
      },
      "ServerInfoModel": {
        "required": [
          "vbrInstallationId",
          "name",
          "buildVersion",
          "patches"
        ],
        "type": "object",
        "properties": {
          "vbrId": {
            "description": "Veeam Backup & Replication installation ID.",
            "type": "string"
          },
          "name": {
            "description": "Full DNS name or IP address of the backup server.",
            "type": "string"
          },
          "buildVersion": {
            "description": "Veeam Backup & Replication build number.",
            "type": "string"
          },
          "patches": {
            "description": "Array of Veeam Backup & Replication cumulative patches installed on the backup server.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Error": {
        "required": [
          "errorCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "description": "The error code is a string that uniquely identifies an error condition and should be understood by programs that detect and handle errors by type",
            "enum": [
              "AccessDenied",
              "ExpiredToken",
              "InvalidToken",
              "InvalidURI",
              "MethodNotAllowed",
              "NotFound",
              "NotImplemented",
              "ServiceUnavailable",
              "UnexpectedContent",
              "UnknownError"
            ]
          },
          "message": {
            "type": "string",
            "description": "The error message contains a generic description of the error condition in English. It is intended for a human audience"
          },
          "resourceId": {
            "type": "string",
            "description": "ID of the object that is involved in the error (or empty)"
          }
        },
        "description": ""
      },
      "PaginationResult": {
        "description": "Pagination settings.",
        "required": [
          "total",
          "count"
        ],
        "type": "object",
        "properties": {
          "total": {
            "description": "Total number of results.",
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "description": "Number of returned results.",
            "type": "integer",
            "format": "int32"
          },
          "skip": {
            "description": "Number of skipped results.",
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "description": "Maximum number of results to return.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EmptySuccessResponse": {
        "type": "object",
        "description": "Empty success response (200, 201, 204)."
      },
      "SessionsFilters": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "orderColumn": {
            "$ref": "#/components/schemas/ESessionsFiltersOrderColumn"
          },
          "orderAsc": {
            "type": "boolean"
          },
          "nameFilter": {
            "type": "string"
          },
          "createdAfterFilter": {
            "type": "string",
            "format": "date-time"
          },
          "createdBeforeFilter": {
            "type": "string",
            "format": "date-time"
          },
          "endedAfterFilter": {
            "type": "string",
            "format": "date-time"
          },
          "endedBeforeFilter": {
            "type": "string",
            "format": "date-time"
          },
          "typeFilter": {
            "$ref": "#/components/schemas/ESessionType"
          },
          "stateFilter": {
            "$ref": "#/components/schemas/ESessionState"
          },
          "resultFilter": {
            "$ref": "#/components/schemas/ESessionResult"
          },
          "jobIdFilter": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ESessionsFiltersOrderColumn": {
        "type": "string",
        "enum": [
          "Name",
          "SessionType",
          "CreationTime",
          "EndTime",
          "State",
          "Result"
        ]
      },
      "SessionsResult": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of sessions.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionModel"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationResult"
          }
        }
      },
      "SessionModel": {
        "required": [
          "activityId",
          "creationTime",
          "id",
          "name",
          "sessionType",
          "state",
          "usn"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of the session.",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "Name of the session.",
            "type": "string"
          },
          "activityId": {
            "description": "ID of the activity.",
            "type": "string",
            "format": "uuid"
          },
          "sessionType": {
            "$ref": "#/components/schemas/ESessionType"
          },
          "creationTime": {
            "description": "Date and time when the session was created.",
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "description": "Date and time when the session was ended.",
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "$ref": "#/components/schemas/ESessionState"
          },
          "progressPercent": {
            "description": "Progress percentage of the session.",
            "type": "integer"
          },
          "result": {
            "$ref": "#/components/schemas/SessionResultModel"
          },
          "resourceId": {
            "description": "ID of the resource.",
            "type": "string",
            "format": "uuid"
          },
          "resourceReference": {
            "description": "URI of the resource.",
            "type": "string"
          },
          "parentSessionId": {
            "description": "ID of the parent session.",
            "type": "string",
            "format": "uuid"
          },
          "usn": {
            "description": "Update sequence number.",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "SessionResultModel": {
        "description": "Session result.",
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ESessionResult"
          },
          "message": {
            "description": "Message that explains the session result.",
            "type": "string"
          },
          "isCanceled": {
            "description": "If *true*, the session has been canceled.",
            "type": "boolean"
          }
        }
      },
      "ESessionType": {
        "description": "Type of the session.",
        "type": "string",
        "enum": [
          "Infrastructure",
          "Job",
          "Automation",
          "ConfigurationBackup",
          "RepositoryMaintenance",
          "RepositoryEvacuate",
          "InfrastructureItemDeletion",
          "RestoreVm",
          "InstantRecovery",
          "FirstClassDiskInstantRestore",
          "AzureApplianceDeploy",
          "QuickMigration"
        ]
      },
      "ESessionState": {
        "description": "State of the session.",
        "type": "string",
        "enum": [
          "Stopped",
          "Starting",
          "Stopping",
          "Working",
          "Pausing",
          "Resuming",
          "WaitingTape",
          "Idle",
          "Postprocessing",
          "WaitingRepository",
          "WaitingSlot"
        ]
      },
      "ESessionResult": {
        "description": "Result status.",
        "type": "string",
        "enum": [
          "None",
          "Success",
          "Warning",
          "Failed"
        ]
      },
      "SessionLogResult": {
        "description": "Log of the session.",
        "type": "object",
        "properties": {
          "totalRecords": {
            "description": "Total number of records.",
            "type": "integer"
          },
          "records": {
            "description": "Array of log records.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionLogRecordModel"
            }
          }
        }
      },
      "SessionLogRecordModel": {
        "description": "Record of the session log.",
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of the log record.",
            "type": "integer"
          },
          "status": {
            "description": "Status of the operation described by the log record.",
            "$ref": "#/components/schemas/ETaskLogRecordStatus"
          },
          "startTime": {
            "description": "Date and time when the operation was started.",
            "type": "string",
            "format": "date-time"
          },
          "updateTime": {
            "description": "Date and time when the log record was updated.",
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "description": "Title of the log record.",
            "type": "string"
          },
          "description": {
            "description": "Description of the log record.",
            "type": "string"
          }
        }
      },
      "ETaskLogRecordStatus": {
        "type": "string",
        "enum": [
          "None",
          "Succeeded",
          "Warning",
          "Failed"
        ]
      },
      "CertificateModel": {
        "description": "Certificate settings.",
        "required": [
          "issuedBy",
          "issuedTo",
          "keyAlgorithm",
          "keySize",
          "serialNumber",
          "subject",
          "thumbprint",
          "validBy",
          "validFrom"
        ],
        "type": "object",
        "properties": {
          "thumbprint": {
            "description": "Thumbprint of the certificate.",
            "type": "string"
          },
          "serialNumber": {
            "description": "Serial number of the certificate.",
            "type": "string"
          },
          "keyAlgorithm": {
            "description": "Key algorithm of the certificate.",
            "type": "string"
          },
          "keySize": {
            "description": "Key size of the certificate.",
            "type": "string"
          },
          "subject": {
            "description": "Subject of the certificate.",
            "type": "string"
          },
          "issuedTo": {
            "description": "Acquirer of the certificate.",
            "type": "string"
          },
          "issuedBy": {
            "description": "Issuer of the certificate.",
            "type": "string"
          },
          "validFrom": {
            "description": "Date and time the certificate is valid from.",
            "type": "string",
            "format": "date-time"
          },
          "validBy": {
            "description": "Expiration date and time of the certificate.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AuthorizationCodeModel": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "description": "String that is used to obtain an access token. Lifetime of the authorization code is 60 seconds.",
            "type": "string"
          }
        }
      },
      "TokenLoginSpec": {
        "required": [
          "grant_type"
        ],
        "type": "object",
        "properties": {
          "grant_type": {
            "$ref": "#/components/schemas/ELoginGrantType"
          },
          "username": {
            "description": "User name. Required if the `grant_type` value is `password`.",
            "type": "string"
          },
          "password": {
            "description": "Password. Required if the `grant_type` value is `password`.",
            "type": "string",
            "format": "password"
          },
          "refresh_token": {
            "description": "Refresh token. Required if the `grant_type` value is `refresh_token`.",
            "type": "string"
          },
          "code": {
            "type": "string",
            "description": "Authorization code. Required if the `grant_type` value is `authorization_code`."
          },
          "use_short_term_refresh": {
            "description": "If *true*, a short-term refresh token is used. Lifetime of the short-term refresh token is the access token lifetime plus 15 minutes.",
            "type": "boolean"
          },
          "vbr_token": {
            "description": "Veeam Backup & Replication platform service token.",
            "type": "string"
          }
        }
      },
      "ELoginGrantType": {
        "description": "Authorization grant type.<br>Available values:<ul> <li>`password` — used to obtain an access token by providing a user name and password.</li> <li>`refresh_token` — used to refresh an expired or lost access token by providing a refresh token.</li> <li>`authorization_code` — used to obtain an access token by providing an authorization code.</li> <li>`vbr_token` — used to obtain an access token by providing a Veeam Backup & Replication token. This grant type is only used in a restricted mode for integration with Veeam Backup & Replication.</li></ul>",
        "type": "string",
        "enum": [
          "password",
          "refresh_token",
          "authorization_code",
          "vbr_token"
        ],
        "default": "password"
      },
      "TokenModel": {
        "required": [
          ".expires",
          ".issued",
          "access_token",
          "expires_in",
          "refresh_token",
          "token_type"
        ],
        "type": "object",
        "properties": {
          "access_token": {
            "description": "String that represents authorization issued to the client. It must be specified in all requests. An access token can be used multiple times, but its lifetime is 15 minutes.",
            "type": "string"
          },
          "token_type": {
            "description": "Type of the access token.",
            "type": "string"
          },
          "refresh_token": {
            "description": "String that is used to obtain a new access token if the current access token expires or becomes lost. A refresh token can be used only once, and its default lifetime is 14 days.",
            "type": "string"
          },
          "expires_in": {
            "description": "Lifetime of the access token, in seconds.",
            "type": "integer",
            "format": "int32"
          },
          ".issued": {
            "description": "Date and time when the access token is issued.",
            "type": "string",
            "format": "date-time"
          },
          ".expires": {
            "description": "Date and time when the access token expires.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "HostConnectionSpec": {
        "required": [
          "serverName",
          "credentialsId",
          "type"
        ],
        "type": "object",
        "properties": {
          "serverName": {
            "description": "Full DNS name or IP address of the server.",
            "type": "string"
          },
          "credentialsId": {
            "description": "ID of a credentials record used to connect to the server.",
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/EManagedServerType"
          },
          "port": {
            "description": "Port used to communicate with the server.",
            "type": "integer"
          }
        }
      },
      "ERepositoryType": {
        "description": "Repository type.",
        "type": "string",
        "enum": [
          "WinLocal",
          "LinuxLocal",
          "Smb",
          "Nfs",
          "AzureBlob",
          "AzureDataBox",
          "AzureArchive",
          "AmazonS3",
          "AmazonSnowballEdge",
          "AmazonS3Glacier",
          "S3Compatible",
          "GoogleCloud",
          "IBMCloud",
          "ExtendableRepository",
          "DDBoost",
          "ExaGrid",
          "HPStoreOnceIntegration",
          "Quantum",
          "WasabiCloud",
          "LinuxHardened",
          "Infinidat",
          "Fujitsu"
        ]
      },
      "EPlatform": {
        "type": "string",
        "enum": [
          "VMware",
          "HyperV",
          "Test",
          "Vcd",
          "Tape",
          "EndPoint",
          "LinuxPhysical",
          "CustomPlatform",
          "Conf",
          "NasBackup",
          "EmulatedVMware",
          "Extension0",
          "Extension1",
          "Extension"
        ]
      },
      "ManagedServersFilters": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "orderColumn": {
            "$ref": "#/components/schemas/EManagedServersFiltersOrderColumn"
          },
          "orderAsc": {
            "type": "boolean"
          },
          "nameFilter": {
            "type": "string"
          },
          "typeFilter": {
            "$ref": "#/components/schemas/EManagedServerType"
          },
          "viTypeFilter": {
            "$ref": "#/components/schemas/EViHostType"
          }
        }
      },
      "EManagedServersFiltersOrderColumn": {
        "type": "string",
        "enum": [
          "Name",
          "Type",
          "Description"
        ]
      },
      "ManagedServersResult": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of managed servers.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManagedServerModel"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationResult"
          }
        }
      },
      "ManagedServerModel": {
        "required": [
          "credentialsId",
          "description",
          "id",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of the server.",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "Full DNS name or IP address of the server.",
            "type": "string"
          },
          "description": {
            "description": "Description of the server.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/EManagedServerType"
          },
          "credentialsId": {
            "description": "ID of a credentials record used to connect to the server.",
            "type": "string",
            "format": "uuid"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/WindowsHostModel"
          },
          {
            "$ref": "#/components/schemas/LinuxHostModel"
          },
          {
            "$ref": "#/components/schemas/ViHostModel"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "WindowsHost": "#/components/schemas/WindowsHostModel",
            "LinuxHost": "#/components/schemas/LinuxHostModel",
            "ViHost": "#/components/schemas/ViHostModel"
          }
        }
      },
      "EManagedServerType": {
        "description": "Type of the server.",
        "type": "string",
        "enum": [
          "WindowsHost",
          "LinuxHost",
          "ViHost"
        ]
      },
      "ManagedServerSpec": {
        "required": [
          "credentialsId",
          "description",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Full DNS name or IP address of the server.",
            "type": "string"
          },
          "description": {
            "description": "Description of the server.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/EManagedServerType"
          },
          "credentialsId": {
            "description": "ID of the credentials used to connect to the server.",
            "type": "string",
            "format": "uuid"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/WindowsHostSpec"
          },
          {
            "$ref": "#/components/schemas/LinuxHostSpec"
          },
          {
            "$ref": "#/components/schemas/ViHostSpec"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "WindowsHost": "#/components/schemas/WindowsHostSpec",
            "LinuxHost": "#/components/schemas/LinuxHostSpec",
            "ViHost": "#/components/schemas/ViHostSpec"
          }
        }
      },
      "WindowsHostSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ManagedServerSpec"
          },
          {
            "type": "object",
            "properties": {
              "networkSettings": {
                "$ref": "#/components/schemas/WindowsHostPortsModel"
              }
            }
          }
        ]
      },
      "WindowsHostModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ManagedServerModel"
          },
          {
            "type": "object",
            "properties": {
              "networkSettings": {
                "$ref": "#/components/schemas/WindowsHostPortsModel"
              }
            }
          }
        ]
      },
      "WindowsHostPortsModel": {
        "description": "Veeam Backup & Replication components installed on the server and ports used by the components.",
        "type": "object",
        "properties": {
          "components": {
            "description": "Array of Veeam Backup & Replication components.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WindowsHostComponentPortModel"
            }
          },
          "portRangeStart": {
            "description": "Start port used for data transfer.",
            "type": "integer"
          },
          "portRangeEnd": {
            "description": "End port used for data transfer.",
            "type": "integer"
          },
          "serverThisSide": {
            "description": "If *true*, the server is run on this side.",
            "type": "boolean"
          }
        }
      },
      "WindowsHostComponentPortModel": {
        "description": "Ports used by Veeam Backup & Replication components.",
        "required": [
          "componentName",
          "port"
        ],
        "type": "object",
        "properties": {
          "componentName": {
            "$ref": "#/components/schemas/EWindowsHostComponentType"
          },
          "port": {
            "description": "Port used by the component.",
            "type": "integer"
          }
        }
      },
      "EWindowsHostComponentType": {
        "description": "Veeam Backup & Replication component.",
        "type": "string",
        "enum": [
          "Transport",
          "Nfs",
          "HvIntegration",
          "DeployerSvc",
          "WanAccelerator",
          "Tape",
          "CloudGate",
          "CloudServiceInvoker",
          "CloudServiceRemoting",
          "RestoreProxy",
          "EpAgent",
          "EpAgentSqlLocalDB",
          "EpAgentSharedManagementObjects",
          "EpAgentSqlSysClrTypes",
          "AgentConfigureService",
          "VawRedist",
          "ValRedist",
          "GuestControl",
          "FileSystemVssIntegration",
          "VssHwSnapshotProvider",
          "Cdp",
          "VamRedist"
        ]
      },
      "LinuxHostSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ManagedServerSpec"
          }
        ],
        "type": "object",
        "required": [
          "sshFingerprint"
        ],
        "properties": {
          "sshSettings": {
            "$ref": "#/components/schemas/LinuxHostSSHSettingsModel"
          },
          "sshFingerprint": {
            "description": "SSH key fingerprint used to verify the server identity. For details on how to get the fingerprint, see [Request TLS Certificate or SSH Fingerprint](#tag/Connection/operation/GetConnectionCertificate).",
            "type": "string"
          }
        }
      },
      "LinuxHostModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ManagedServerModel"
          },
          {
            "type": "object",
            "properties": {
              "sshSettings": {
                "$ref": "#/components/schemas/LinuxHostSSHSettingsModel"
              },
              "credentialsStorageType": {
                "$ref": "#/components/schemas/ECredentialsStorageType"
              }
            }
          }
        ]
      },
      "ECredentialsStorageType": {
        "description": "Credentials type used to connect to the Linux server.",
        "type": "string",
        "enum": [
          "Permanent",
          "SingleUse"
        ]
      },
      "LinuxHostSSHSettingsModel": {
        "description": "SSH settings.",
        "type": "object",
        "properties": {
          "sshTimeOutMs": {
            "description": "SSH timeout, in ms. If a task targeted at the server is inactive after the timeout, the task is terminated.",
            "type": "integer"
          },
          "portRangeStart": {
            "description": "Start port used for data transfer.",
            "type": "integer"
          },
          "portRangeEnd": {
            "description": "End port used for data transfer.",
            "type": "integer"
          },
          "serverThisSide": {
            "description": "If *true*, the server is run on this side.",
            "type": "boolean"
          },
          "managementPort": {
            "description": "Port used as a control channel from the Veeam Backup & Replication console to the Linux server.",
            "type": "integer"
          }
        }
      },
      "ViHostModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ManagedServerModel"
          },
          {
            "type": "object",
            "required": [
              "port"
            ],
            "properties": {
              "viHostType": {
                "$ref": "#/components/schemas/EViHostType"
              },
              "port": {
                "description": "Port used to communicate with the server.",
                "type": "integer"
              }
            }
          }
        ]
      },
      "EViHostType": {
        "description": "Type of the VMware vSphere server.",
        "type": "string",
        "enum": [
          "ESX",
          "ESXi",
          "VC"
        ]
      },
      "ViHostSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ManagedServerSpec"
          },
          {
            "type": "object",
            "properties": {
              "port": {
                "description": "Port used to communicate with the server.",
                "type": "integer"
              },
              "certificateThumbprint": {
                "description": "Certificate thumbprint used to verify the server identity. For details on how to get the thumbprint, see [Request TLS Certificate or SSH Fingerprint](#tag/Connection/operation/GetConnectionCertificate).",
                "type": "string"
              }
            }
          }
        ]
      },
      "RepositoriesFilters": {
        "type": "object",
        "properties": {
          "skip": {
            "description": "Number of repositories to skip.",
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "description": "Maximum number of repositories to return.",
            "type": "integer",
            "format": "int32"
          },
          "orderColumn": {
            "$ref": "#/components/schemas/ERepositoryFiltersOrderColumn"
          },
          "orderAsc": {
            "description": "Sorts repositories in the ascending order by the `orderColumn` parameter.",
            "type": "boolean"
          },
          "nameFilter": {
            "description": "Filters repositories by the `nameFilter` pattern. The pattern can match any repository parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.",
            "type": "string"
          },
          "typeFilter": {
            "$ref": "#/components/schemas/ERepositoryType"
          },
          "hostIdFilter": {
            "description": "Filters repositories by ID of the backup server.",
            "type": "string",
            "format": "uuid"
          },
          "pathFilter": {
            "description": "Filters repositories by path to the folder where backup files are stored.",
            "type": "string"
          },
          "vmbApiFilter": {
            "description": "Filters repositories by VM Backup API parameters converted to the base64 string. To obtain the string, call the `GetApiProductInfoString` method of VM Backup API.",
            "type": "string"
          },
          "vmbApiPlatform": {
            "description": "Filters repositories by ID of a platform that you use to communicate with VM Backup API.",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ERepositoryFiltersOrderColumn": {
        "description": "Sorts repositories by one of the repository parameters.",
        "type": "string",
        "enum": [
          "Name",
          "Description",
          "Type",
          "Host",
          "Path"
        ]
      },
      "RepositoriesResult": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of backup repositories.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepositoryModel"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationResult"
          }
        }
      },
      "RepositoryBehaviorFilters": {
        "type": "object",
        "properties": {
          "overwriteOwner": {
            "type": "boolean"
          }
        }
      },
      "VmbApiFilterModel": {
        "type": "object",
        "required": [
          "protocolVersion",
          "assemblyVersion",
          "productId",
          "versionFlags"
        ],
        "properties": {
          "protocolVersion": {
            "type": "integer"
          },
          "assemblyVersion": {
            "type": "string"
          },
          "productId": {
            "type": "string",
            "format": "uuid"
          },
          "versionFlags": {
            "type": "integer"
          }
        }
      },
      "RepositorySpec": {
        "required": [
          "description",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the backup repository.",
            "type": "string"
          },
          "description": {
            "description": "Description of the backup repository.",
            "type": "string"
          },
          "tag": {
            "description": "Tag that identifies the backup repository.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ERepositoryType"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/WindowsLocalStorageSpec"
          },
          {
            "$ref": "#/components/schemas/LinuxLocalStorageSpec"
          },
          {
            "$ref": "#/components/schemas/NfsStorageSpec"
          },
          {
            "$ref": "#/components/schemas/SmbStorageSpec"
          },
          {
            "$ref": "#/components/schemas/AzureBlobStorageSpec"
          },
          {
            "$ref": "#/components/schemas/AzureDataBoxStorageSpec"
          },
          {
            "$ref": "#/components/schemas/AmazonS3StorageSpec"
          },
          {
            "$ref": "#/components/schemas/AmazonSnowballEdgeStorageSpec"
          },
          {
            "$ref": "#/components/schemas/S3CompatibleStorageSpec"
          },
          {
            "$ref": "#/components/schemas/GoogleCloudStorageSpec"
          },
          {
            "$ref": "#/components/schemas/IBMCloudStorageSpec"
          },
          {
            "$ref": "#/components/schemas/AmazonS3GlacierStorageSpec"
          },
          {
            "$ref": "#/components/schemas/AzureArchiveStorageSpec"
          },
          {
            "$ref": "#/components/schemas/WasabiCloudStorageSpec"
          },
          {
            "$ref": "#/components/schemas/LinuxHardenedStorageSpec"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "WinLocal": "#/components/schemas/WindowsLocalStorageSpec",
            "LinuxLocal": "#/components/schemas/LinuxLocalStorageSpec",
            "Smb": "#/components/schemas/SmbStorageSpec",
            "Nfs": "#/components/schemas/NfsStorageSpec",
            "AzureBlob": "#/components/schemas/AzureBlobStorageSpec",
            "AzureDataBox": "#/components/schemas/AzureDataBoxStorageSpec",
            "AzureArchive": "#/components/schemas/AzureArchiveStorageSpec",
            "AmazonS3": "#/components/schemas/AmazonS3StorageSpec",
            "AmazonSnowballEdge": "#/components/schemas/AmazonSnowballEdgeStorageSpec",
            "AmazonS3Glacier": "#/components/schemas/AmazonS3GlacierStorageSpec",
            "S3Compatible": "#/components/schemas/S3CompatibleStorageSpec",
            "GoogleCloud": "#/components/schemas/GoogleCloudStorageSpec",
            "IBMCloud": "#/components/schemas/IBMCloudStorageSpec",
            "WasabiCloud": "#/components/schemas/WasabiCloudStorageSpec",
            "LinuxHardened": "#/components/schemas/LinuxHardenedStorageSpec"
          }
        }
      },
      "RepositoryModel": {
        "required": [
          "description",
          "id",
          "name",
          "type",
          "kind"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of the backup repository.",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "Name of the backup repository.",
            "type": "string"
          },
          "description": {
            "description": "Description of the backup repository.",
            "type": "string"
          },
          "tag": {
            "description": "Tag that identifies the backup repository.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ERepositoryType"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/WindowsLocalStorageModel"
          },
          {
            "$ref": "#/components/schemas/LinuxLocalStorageModel"
          },
          {
            "$ref": "#/components/schemas/NfsStorageModel"
          },
          {
            "$ref": "#/components/schemas/SmbStorageModel"
          },
          {
            "$ref": "#/components/schemas/AzureBlobStorageModel"
          },
          {
            "$ref": "#/components/schemas/AzureDataBoxStorageModel"
          },
          {
            "$ref": "#/components/schemas/AmazonS3StorageModel"
          },
          {
            "$ref": "#/components/schemas/AmazonSnowballEdgeStorageModel"
          },
          {
            "$ref": "#/components/schemas/S3CompatibleStorageModel"
          },
          {
            "$ref": "#/components/schemas/GoogleCloudStorageModel"
          },
          {
            "$ref": "#/components/schemas/IBMCloudStorageModel"
          },
          {
            "$ref": "#/components/schemas/AmazonS3GlacierStorageModel"
          },
          {
            "$ref": "#/components/schemas/AzureArchiveStorageModel"
          },
          {
            "$ref": "#/components/schemas/WasabiCloudStorageModel"
          },
          {
            "$ref": "#/components/schemas/LinuxHardenedStorageModel"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "WinLocal": "#/components/schemas/WindowsLocalStorageModel",
            "LinuxLocal": "#/components/schemas/LinuxLocalStorageModel",
            "Smb": "#/components/schemas/SmbStorageModel",
            "Nfs": "#/components/schemas/NfsStorageModel",
            "AzureBlob": "#/components/schemas/AzureBlobStorageModel",
            "AzureDataBox": "#/components/schemas/AzureDataBoxStorageModel",
            "AzureArchive": "#/components/schemas/AzureArchiveStorageModel",
            "AmazonS3": "#/components/schemas/AmazonS3StorageModel",
            "AmazonSnowballEdge": "#/components/schemas/AmazonSnowballEdgeStorageModel",
            "AmazonS3Glacier": "#/components/schemas/AmazonS3GlacierStorageModel",
            "S3Compatible": "#/components/schemas/S3CompatibleStorageModel",
            "GoogleCloud": "#/components/schemas/GoogleCloudStorageModel",
            "IBMCloud": "#/components/schemas/IBMCloudStorageModel",
            "WasabiCloud": "#/components/schemas/WasabiCloudStorageModel",
            "LinuxHardened": "#/components/schemas/LinuxHardenedStorageModel"
          }
        }
      },
      "SmbRepositoryShareSettingsModel": {
        "description": "Share settings.",
        "required": [
          "credentialsId",
          "sharePath"
        ],
        "type": "object",
        "properties": {
          "sharePath": {
            "description": "Path to the shared folder that is used as a backup repository.",
            "type": "string"
          },
          "credentialsId": {
            "description": "ID of the credentials record used to access the shared folder.",
            "type": "string",
            "format": "uuid"
          },
          "gatewayServer": {
            "$ref": "#/components/schemas/RepositoryShareGatewayModel"
          }
        }
      },
      "NfsRepositoryShareSettingsModel": {
        "description": "Share settings.",
        "required": [
          "sharePath"
        ],
        "type": "object",
        "properties": {
          "sharePath": {
            "description": "Path to the shared folder that is used as a backup repository.",
            "type": "string"
          },
          "gatewayServer": {
            "$ref": "#/components/schemas/RepositoryShareGatewayModel"
          }
        }
      },
      "RepositoryShareGatewayModel": {
        "description": "Settings for the gateway server.",
        "type": "object",
        "required": [
          "autoSelect"
        ],
        "properties": {
          "autoSelect": {
            "description": "If *true*, Veeam Backup & Replication automatically selects a gateway server.",
            "type": "boolean"
          },
          "gatewayServerIds": {
            "description": "Array of gateway server IDs.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "ObjectStorageConnectionModel": {
        "description": "Object storage connection settings.",
        "type": "object",
        "required": [
          "connectionType"
        ],
        "properties": {
          "connectionType": {
            "$ref": "#/components/schemas/ERepositoryConnectionType"
          },
          "gatewayServerIds": {
            "description": "Array of gateway server IDs. The value is *null* if the connection type is *Direct*.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "ERepositoryConnectionType": {
        "description": "Repository connection type (direct or through a gateway server).",
        "type": "string",
        "enum": [
          "Direct",
          "SelectedGateway"
        ]
      },
      "WindowsLocalRepositorySettingsModel": {
        "description": "Repository settings.",
        "type": "object",
        "properties": {
          "path": {
            "description": "Path to the folder where backup files are stored.",
            "type": "string"
          },
          "enableTaskLimit": {
            "description": "If *true*, the maximum number of concurrent tasks is limited.",
            "type": "boolean"
          },
          "maxTaskCount": {
            "description": "Maximum number of concurrent tasks.",
            "type": "integer"
          },
          "enableReadWriteLimit": {
            "description": "If *true*, reading and writing speed is limited.",
            "type": "boolean"
          },
          "readWriteRate": {
            "description": "Maximum rate that restricts the total speed of reading and writing data to the backup repository disk.",
            "type": "integer"
          },
          "advancedSettings": {
            "$ref": "#/components/schemas/RepositoryAdvancedSettingsModel"
          }
        }
      },
      "LinuxLocalRepositorySettingsModel": {
        "description": "Repository settings.",
        "type": "object",
        "properties": {
          "path": {
            "description": "Path to the folder where backup files are stored.",
            "type": "string"
          },
          "enableTaskLimit": {
            "description": "If *true*, the maximum number of concurrent tasks is limited.",
            "type": "boolean"
          },
          "maxTaskCount": {
            "description": "Maximum number of concurrent tasks.",
            "type": "integer"
          },
          "enableReadWriteLimit": {
            "description": "If *true*, reading and writing speed is limited.",
            "type": "boolean"
          },
          "readWriteRate": {
            "description": "Maximum rate that restricts the total speed of reading and writing data to the backup repository disk.",
            "type": "integer"
          },
          "useFastCloningOnXFSVolumes": {
            "description": "If *true*, fast cloning on XFS volumes is used.",
            "type": "boolean"
          },
          "advancedSettings": {
            "$ref": "#/components/schemas/RepositoryAdvancedSettingsModel"
          }
        }
      },
      "LinuxHardenedRepositorySettingsModel": {
        "description": "Repository settings.",
        "type": "object",
        "properties": {
          "path": {
            "description": "Path to the folder where backup files are stored.",
            "type": "string"
          },
          "enableTaskLimit": {
            "description": "If *true*, the maximum number of concurrent tasks is limited.",
            "type": "boolean"
          },
          "maxTaskCount": {
            "description": "Maximum number of concurrent tasks.",
            "type": "integer"
          },
          "enableReadWriteLimit": {
            "description": "If *true*, reading and writing speed is limited.",
            "type": "boolean"
          },
          "readWriteRate": {
            "description": "Maximum rate that restricts the total speed of reading and writing data to the backup repository disk.",
            "type": "integer"
          },
          "useFastCloningOnXFSVolumes": {
            "description": "If *true*, fast cloning on XFS volumes is used.",
            "type": "boolean"
          },
          "makeRecentBackupsImmutableDays": {
            "description": "Number of days to keep immutable backups.",
            "type": "integer"
          },
          "advancedSettings": {
            "$ref": "#/components/schemas/RepositoryAdvancedSettingsModel"
          }
        }
      },
      "NetworkRepositorySettingsModel": {
        "description": "Repository settings.",
        "type": "object",
        "properties": {
          "enableTaskLimit": {
            "description": "If *true*, the maximum number of concurrent tasks is limited.",
            "type": "boolean"
          },
          "maxTaskCount": {
            "description": "Maximum number of concurrent tasks.",
            "type": "integer"
          },
          "enableReadWriteLimit": {
            "description": "If *true*, reading and writing speed is limited.",
            "type": "boolean"
          },
          "readWriteRate": {
            "description": "Maximum rate that restricts the total speed of reading and writing data to the backup repository disk.",
            "type": "integer"
          },
          "advancedSettings": {
            "$ref": "#/components/schemas/RepositoryAdvancedSettingsModel"
          }
        }
      },
      "RepositoryAdvancedSettingsModel": {
        "description": "Advanced settings for the backup repository.",
        "type": "object",
        "properties": {
          "alignDataBlocks": {
            "description": "If *true*, Veeam Backup & Replication aligns VM data saved to a backup file at a 4 KB block boundary.",
            "type": "boolean"
          },
          "decompressBeforeStoring": {
            "description": "If *true*, Veeam Backup & Replication decompresses backup data blocks before storing to improve deduplication ratios.",
            "type": "boolean"
          },
          "rotatedDrives": {
            "description": "If *true*, the repository drive is rotated.",
            "type": "boolean"
          },
          "perVmBackup": {
            "description": "If *true*, Veeam Backup & Replication creates a separate backup file for every VM in the job.",
            "type": "boolean"
          },
          "RotatedDriveCleanupMode": {
            "$ref": "#/components/schemas/ERotatedDriveCleanupMode"
          }
        }
      },
      "ERotatedDriveCleanupMode": {
        "description": "Cleanup mode:<ul> <li>`Disabled` — continue the backup chain on an inserted drive.</li> <li>`ClearBackupFolder` — delete existing backups belonging to the job.</li> <li>`ClearRepositoryFolder` — delete all existing backups from repository.</li></ul>",
        "type": "string",
        "enum": [
          "Disabled",
          "ClearBackupFolder",
          "ClearRepositoryFolder"
        ]
      },
      "MountServerSettingsModel": {
        "description": "Settings for the mount server that is used for file-level and application items restore.",
        "required": [
          "mountServerId",
          "vPowerNFSEnabled",
          "writeCacheFolder"
        ],
        "type": "object",
        "properties": {
          "mountServerId": {
            "description": "ID of the mount server.",
            "type": "string",
            "format": "uuid"
          },
          "writeCacheFolder": {
            "description": "Path to the folder used for writing cache during mount operations.",
            "type": "string"
          },
          "vPowerNFSEnabled": {
            "description": "If *true*, the vPower NFS Service is enabled on the mount server.",
            "type": "boolean"
          },
          "vPowerNFSPortSettings": {
            "$ref": "#/components/schemas/VPowerNFSPortSettingsModel"
          }
        }
      },
      "VPowerNFSPortSettingsModel": {
        "description": "Network ports used by the vPower NFS Service.",
        "type": "object",
        "properties": {
          "mountPort": {
            "description": "Mount port.",
            "type": "integer"
          },
          "vPowerNFSPort": {
            "description": "vPower NFS port.",
            "type": "integer"
          }
        }
      },
      "WindowsLocalStorageSpec": {
        "description": "Microsoft Windows-based repository.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositorySpec"
          },
          {
            "type": "object",
            "required": [
              "hostId",
              "mountServer",
              "repository"
            ],
            "properties": {
              "hostId": {
                "description": "ID of the server that is used as a backup repository.",
                "type": "string",
                "format": "uuid"
              },
              "repository": {
                "$ref": "#/components/schemas/WindowsLocalRepositorySettingsModel"
              },
              "mountServer": {
                "$ref": "#/components/schemas/MountServerSettingsModel"
              }
            }
          }
        ]
      },
      "LinuxLocalStorageSpec": {
        "description": "Linux-based repository.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositorySpec"
          },
          {
            "type": "object",
            "required": [
              "hostId",
              "mountServer",
              "repository"
            ],
            "properties": {
              "hostId": {
                "description": "ID of the server that is used as a backup repository.",
                "type": "string",
                "format": "uuid"
              },
              "repository": {
                "$ref": "#/components/schemas/LinuxLocalRepositorySettingsModel"
              },
              "mountServer": {
                "$ref": "#/components/schemas/MountServerSettingsModel"
              }
            }
          }
        ]
      },
      "WindowsLocalStorageModel": {
        "description": "Microsoft Windows-based repository.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositoryModel"
          },
          {
            "type": "object",
            "required": [
              "hostId",
              "mountServer",
              "repository"
            ],
            "properties": {
              "hostId": {
                "description": "ID of the server that is used as a backup repository.",
                "type": "string",
                "format": "uuid"
              },
              "repository": {
                "$ref": "#/components/schemas/WindowsLocalRepositorySettingsModel"
              },
              "mountServer": {
                "$ref": "#/components/schemas/MountServerSettingsModel"
              }
            }
          }
        ]
      },
      "LinuxLocalStorageModel": {
        "description": "Linux-based repository.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositoryModel"
          },
          {
            "type": "object",
            "required": [
              "hostId",
              "mountServer",
              "repository"
            ],
            "properties": {
              "hostId": {
                "description": "ID of the server that is used as a backup repository.",
                "type": "string",
                "format": "uuid"
              },
              "repository": {
                "$ref": "#/components/schemas/LinuxLocalRepositorySettingsModel"
              },
              "mountServer": {
                "$ref": "#/components/schemas/MountServerSettingsModel"
              }
            }
          }
        ]
      },
      "NfsStorageSpec": {
        "description": "NFS backup repository.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositorySpec"
          },
          {
            "type": "object",
            "required": [
              "mountServer",
              "repository",
              "share"
            ],
            "properties": {
              "share": {
                "$ref": "#/components/schemas/NfsRepositoryShareSettingsModel"
              },
              "repository": {
                "$ref": "#/components/schemas/NetworkRepositorySettingsModel"
              },
              "mountServer": {
                "$ref": "#/components/schemas/MountServerSettingsModel"
              }
            }
          }
        ]
      },
      "SmbStorageSpec": {
        "description": "SMB backup repository.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositorySpec"
          },
          {
            "type": "object",
            "required": [
              "mountServer",
              "repository",
              "share"
            ],
            "properties": {
              "share": {
                "$ref": "#/components/schemas/SmbRepositoryShareSettingsModel"
              },
              "repository": {
                "$ref": "#/components/schemas/NetworkRepositorySettingsModel"
              },
              "mountServer": {
                "$ref": "#/components/schemas/MountServerSettingsModel"
              }
            }
          }
        ]
      },
      "NfsStorageModel": {
        "description": "NFS backup repository.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositoryModel"
          },
          {
            "type": "object",
            "required": [
              "mountServer",
              "repository",
              "share"
            ],
            "properties": {
              "share": {
                "$ref": "#/components/schemas/NfsRepositoryShareSettingsModel"
              },
              "repository": {
                "$ref": "#/components/schemas/NetworkRepositorySettingsModel"
              },
              "mountServer": {
                "$ref": "#/components/schemas/MountServerSettingsModel"
              }
            }
          }
        ]
      },
      "SmbStorageModel": {
        "description": "SMB backup repository.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositoryModel"
          },
          {
            "type": "object",
            "required": [
              "mountServer",
              "repository",
              "share"
            ],
            "properties": {
              "share": {
                "$ref": "#/components/schemas/SmbRepositoryShareSettingsModel"
              },
              "repository": {
                "$ref": "#/components/schemas/NetworkRepositorySettingsModel"
              },
              "mountServer": {
                "$ref": "#/components/schemas/MountServerSettingsModel"
              }
            }
          }
        ]
      },
      "LinuxHardenedStorageSpec": {
        "description": "Linux hardened repository.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositorySpec"
          },
          {
            "type": "object",
            "required": [
              "hostId",
              "mountServer",
              "repository"
            ],
            "properties": {
              "hostId": {
                "description": "ID of the server that is used as a backup repository.",
                "type": "string",
                "format": "uuid"
              },
              "repository": {
                "$ref": "#/components/schemas/LinuxHardenedRepositorySettingsModel"
              },
              "mountServer": {
                "$ref": "#/components/schemas/MountServerSettingsModel"
              }
            }
          }
        ]
      },
      "LinuxHardenedStorageModel": {
        "description": "Linux hardened repository.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositoryModel"
          },
          {
            "type": "object",
            "required": [
              "hostId",
              "mountServer",
              "repository"
            ],
            "properties": {
              "hostId": {
                "description": "ID of the server that is used as a backup repository.",
                "type": "string",
                "format": "uuid"
              },
              "repository": {
                "$ref": "#/components/schemas/LinuxHardenedRepositorySettingsModel"
              },
              "mountServer": {
                "$ref": "#/components/schemas/MountServerSettingsModel"
              }
            }
          }
        ]
      },
      "ProxiesFilters": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "orderColumn": {
            "$ref": "#/components/schemas/EProxiesFiltersOrderColumn"
          },
          "orderAsc": {
            "type": "boolean"
          },
          "nameFilter": {
            "type": "string"
          },
          "typeFilter": {
            "$ref": "#/components/schemas/EProxyType"
          },
          "hostIdFilter": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "EProxiesFiltersOrderColumn": {
        "type": "string",
        "enum": [
          "Name",
          "Type",
          "Description"
        ]
      },
      "ProxiesResult": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of backup proxies.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProxyModel"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationResult"
          }
        }
      },
      "ProxySpec": {
        "required": [
          "description",
          "type"
        ],
        "type": "object",
        "properties": {
          "description": {
            "description": "Description of the backup proxy.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/EProxyType"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ViProxySpec"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "ViProxy": "#/components/schemas/ViProxySpec"
          }
        }
      },
      "ViProxySpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProxySpec"
          },
          {
            "type": "object",
            "required": [
              "server"
            ],
            "properties": {
              "server": {
                "$ref": "#/components/schemas/ProxyServerSettingsModel"
              }
            }
          }
        ]
      },
      "EProxyType": {
        "description": "Type of the backup proxy.",
        "type": "string",
        "enum": [
          "ViProxy"
        ]
      },
      "ProxyModel": {
        "required": [
          "id",
          "description",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of the backup proxy.",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "Name of the backup proxy.",
            "type": "string"
          },
          "description": {
            "description": "Description of the backup proxy.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/EProxyType"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ViProxyModel"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "ViProxy": "#/components/schemas/ViProxyModel"
          }
        }
      },
      "ViProxyModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProxyModel"
          },
          {
            "type": "object",
            "required": [
              "server"
            ],
            "properties": {
              "server": {
                "$ref": "#/components/schemas/ProxyServerSettingsModel"
              }
            }
          }
        ]
      },
      "EBackupProxyTransportMode": {
        "description": "Transport mode of the backup proxy.",
        "type": "string",
        "enum": [
          "auto",
          "directAccess",
          "virtualAppliance",
          "network"
        ]
      },
      "ProxyServerSettingsModel": {
        "description": "Server settings for the backup proxy.",
        "required": [
          "hostId"
        ],
        "type": "object",
        "properties": {
          "hostId": {
            "description": "ID of the server.",
            "type": "string",
            "format": "uuid"
          },
          "transportMode": {
            "$ref": "#/components/schemas/EBackupProxyTransportMode"
          },
          "failoverToNetwork": {
            "description": "(For the Direct storage access and Virtual appliance transport modes) If *true*, Veeam Backup & Replication failovers to the network transport mode in case the primary mode fails or is unavailable.",
            "type": "boolean"
          },
          "hostToProxyEncryption": {
            "description": "(For the Network mode) If *true*, VM data is transferred over an encrypted TLS connection.",
            "type": "boolean"
          },
          "connectedDatastores": {
            "$ref": "#/components/schemas/ProxyDatastoreSettingsModel"
          },
          "maxTaskCount": {
            "description": "Maximum number of concurrent tasks.",
            "type": "integer"
          }
        }
      },
      "ProxyDatastoreSettingsModel": {
        "description": "Datastores to which the backup proxy has a direct SAN or NFS connection.",
        "required": [
          "autoSelect"
        ],
        "type": "object",
        "properties": {
          "autoSelect": {
            "description": "If *true*, all datastores that the backup proxy can access are detected automatically.",
            "type": "boolean"
          },
          "datastores": {
            "description": "Array of datastores to which the backup proxy has a direct SAN or NFS connection.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProxyDatastoreModel"
            }
          }
        }
      },
      "ProxyDatastoreModel": {
        "type": "object",
        "properties": {
          "datastore": {
            "$ref": "#/components/schemas/VmwareObjectModel"
          },
          "vmCount": {
            "description": "Number of VMs.",
            "type": "integer"
          }
        }
      },
      "GlobalNetworkTrafficRulesModel": {
        "type": "object",
        "required": [
          "useMultipleStreamsPerJob"
        ],
        "properties": {
          "useMultipleStreamsPerJob": {
            "description": "If *true*, Veeam Backup & Replication uses multiple TCP/IP transfer connection for every job session.",
            "type": "boolean"
          },
          "uploadStreamsCount": {
            "description": "Number of TCP/IP connections per job.",
            "type": "integer",
            "format": "integer"
          },
          "trafficRules": {
            "description": "Array of traffic rules.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrafficRuleModel"
            }
          },
          "preferredNetworks": {
            "$ref": "#/components/schemas/PreferredNetworksModel"
          }
        }
      },
      "TrafficRuleModel": {
        "type": "object",
        "required": [
          "name",
          "sourceIPStart",
          "sourceIPEnd",
          "targetIPStart",
          "targetIPEnd"
        ],
        "properties": {
          "id": {
            "description": "ID of the rule.",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "Name of the rule.",
            "type": "string"
          },
          "sourceIPStart": {
            "description": "Start IP address of the range for the backup infrastructure components on the source side.",
            "type": "string"
          },
          "sourceIPEnd": {
            "description": "End IP address of the range for the backup infrastructure components on the source side.",
            "type": "string"
          },
          "targetIPStart": {
            "description": "Start IP address of the range for the backup infrastructure components on the target side.",
            "type": "string"
          },
          "targetIPEnd": {
            "description": "End IP address of the range for the backup infrastructure components on the target side.",
            "type": "string"
          },
          "encryptionEnabled": {
            "description": "If *true*, traffic encryption is enabled.",
            "type": "boolean"
          },
          "throttlingEnabled": {
            "description": "If *true*, traffic throttling is enabled.",
            "type": "boolean"
          },
          "throttlingUnit": {
            "$ref": "#/components/schemas/ESpeedUnit"
          },
          "throttlingValue": {
            "description": "Maximum speed that must be used to transfer data from source to target.",
            "type": "integer",
            "format": "int32"
          },
          "throttlingWindowEnabled": {
            "description": "If *true*, throttling window during which the speed must be limited is enabled.",
            "type": "boolean"
          },
          "throttlingWindowOptions": {
            "$ref": "#/components/schemas/BackupWindowSettingModel"
          }
        }
      },
      "ESpeedUnit": {
        "description": "Traffic speed unit.",
        "type": "string",
        "enum": [
          "KbytePerSec",
          "MbitPerSpec",
          "MbytePerSec"
        ]
      },
      "PreferredNetworksModel": {
        "description": "Preferred networks used for backup and replication traffic.",
        "type": "object",
        "required": [
          "isEnabled"
        ],
        "properties": {
          "isEnabled": {
            "description": "If *true*, prefered networks are enabled.",
            "type": "boolean"
          },
          "networks": {
            "description": "Array of networks.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PreferredNetworkModel"
            }
          }
        }
      },
      "PreferredNetworkModel": {
        "type": "object",
        "properties": {
          "ipAddress": {
            "description": "IP address.",
            "type": "string"
          },
          "subnetMask": {
            "description": "Subnet mask.",
            "type": "string"
          },
          "cidrNotation": {
            "description": "CIDR notation.",
            "type": "string"
          }
        }
      },
      "JobStatesFilters": {
        "description": "Filters jobs by the specified parameters.",
        "type": "object",
        "properties": {
          "skip": {
            "description": "Skips the specified number of jobs.",
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "description": "Returns the specified number of jobs.",
            "type": "integer",
            "format": "int32"
          },
          "orderColumn": {
            "$ref": "#/components/schemas/EJobStatesFiltersOrderColumn"
          },
          "orderAsc": {
            "description": "Sorts jobs in the ascending order by the `orderColumn` parameter.",
            "type": "boolean"
          },
          "idFilter": {
            "type": "string",
            "format": "uuid"
          },
          "nameFilter": {
            "description": "Filters jobs by the `nameFilter` pattern. The pattern can match any job state parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.",
            "type": "string"
          },
          "typeFilter": {
            "$ref": "#/components/schemas/EJobType"
          },
          "lastResultFilter": {
            "$ref": "#/components/schemas/ESessionResult"
          },
          "statusFilter": {
            "$ref": "#/components/schemas/EJobStatus"
          },
          "workloadFilter": {
            "$ref": "#/components/schemas/EJobWorkload"
          },
          "lastRunAfterFilter": {
            "type": "string",
            "format": "date-time"
          },
          "lastRunBeforeFilter": {
            "type": "string",
            "format": "date-time"
          },
          "isHighPriorityJobFilter": {
            "type": "boolean"
          },
          "repositoryIdFilter": {
            "type": "string",
            "format": "uuid"
          },
          "objectsCountFilter": {
            "type": "integer"
          }
        }
      },
      "EJobStatesFiltersOrderColumn": {
        "description": "Orders job states by the specified column.",
        "type": "string",
        "enum": [
          "Name",
          "Type",
          "Status",
          "LastRun",
          "LastResult",
          "NextRun",
          "Description",
          "RepositoryId",
          "ObjectsCount"
        ]
      },
      "EJobStatus": {
        "description": "Current status of the job.",
        "type": "string",
        "enum": [
          "running",
          "inactive",
          "disabled"
        ]
      },
      "EJobWorkload": {
        "description": "Workload which the job must process.",
        "type": "string",
        "enum": [
          "application",
          "cloudVm",
          "file",
          "server",
          "workstation",
          "vm"
        ]
      },
      "JobStatesResult": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of job states.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobStateModel"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationResult"
          }
        }
      },
      "JobStateModel": {
        "required": [
          "id",
          "name",
          "type",
          "description",
          "status",
          "lastResult",
          "workload",
          "objectsCount"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of the job.",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "Name of the job.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/EJobType"
          },
          "description": {
            "description": "Description of the job.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/EJobStatus"
          },
          "lastRun": {
            "description": "Last run of the job.",
            "type": "string",
            "format": "date-time"
          },
          "lastResult": {
            "$ref": "#/components/schemas/ESessionResult"
          },
          "nextRun": {
            "description": "Next run of the job.",
            "type": "string",
            "format": "date-time"
          },
          "workload": {
            "$ref": "#/components/schemas/EJobWorkload"
          },
          "repositoryId": {
            "description": "ID of the backup repository.",
            "type": "string",
            "format": "uuid"
          },
          "repositoryName": {
            "description": "Name of the backup repository.",
            "type": "string"
          },
          "objectsCount": {
            "description": "Number of objects processed by the job.",
            "type": "integer"
          },
          "sessionId": {
            "description": "ID of the last job session.",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "JobsFilters": {
        "description": "Filters jobs by the specified parameters.",
        "type": "object",
        "properties": {
          "skip": {
            "description": "Skips the specified number of jobs.",
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "description": "Returns the specified number of jobs.",
            "type": "integer",
            "format": "int32"
          },
          "orderColumn": {
            "$ref": "#/components/schemas/EJobFiltersOrderColumn"
          },
          "orderAsc": {
            "description": "Sorts jobs in the ascending order by the `orderColumn` parameter.",
            "type": "boolean"
          },
          "nameFilter": {
            "description": "Filters jobs by the `nameFilter` pattern. The pattern can match any job parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.",
            "type": "string"
          },
          "typeFilter": {
            "$ref": "#/components/schemas/EJobType"
          }
        }
      },
      "EJobFiltersOrderColumn": {
        "description": "Orders jobs by the specified column.",
        "type": "string",
        "enum": [
          "Name",
          "Type",
          "Description"
        ]
      },
      "JobsResult": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of jobs.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobModel"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationResult"
          }
        }
      },
      "JobModel": {
        "required": [
          "id",
          "name",
          "description",
          "type",
          "isDisabled"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of the job.",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "Name of the job.",
            "type": "string"
          },
          "description": {
            "description": "Description of the job.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/EJobType"
          },
          "isDisabled": {
            "description": "If *true*, the job is disabled.",
            "type": "boolean"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/BackupJobModel"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Backup": "#/components/schemas/BackupJobModel"
          }
        }
      },
      "EJobType": {
        "description": "Type of the job.",
        "type": "string",
        "enum": [
          "Backup"
        ]
      },
      "JobStartSpec": {
        "required": [
          "performActiveFull"
        ],
        "type": "object",
        "properties": {
          "performActiveFull": {
            "description": "If *true*, Veeam Backup & Replication will perform an active full backup.",
            "type": "boolean",
            "default": false
          },
          "startChainedJobs": {
            "description": "If *true*, Veeam Backup & Replication will start chained jobs as well.",
            "type": "boolean",
            "default": false
          }
        }
      },
      "JobStopSpec": {
        "required": [
          "gracefullStop"
        ],
        "type": "object",
        "properties": {
          "gracefullStop": {
            "description": "If *true*, Veeam Backup & Replication will produce a new restore point for those VMs that have already been processed and for VMs that are being processed at the moment.",
            "type": "boolean",
            "default": true
          }
        }
      },
      "JobSpec": {
        "type": "object",
        "required": [
          "name",
          "description",
          "type"
        ],
        "properties": {
          "name": {
            "description": "Name of the job.",
            "type": "string"
          },
          "description": {
            "description": "Job description specified at the time of the job creation.",
            "type": "string"
          },
          "type": {
            "description": "Job type.",
            "$ref": "#/components/schemas/EJobType"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/BackupJobSpec"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Backup": "#/components/schemas/BackupJobSpec"
          }
        }
      },
      "BackupJobSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JobSpec"
          },
          {
            "required": [
              "guestProcessing",
              "isHighPriority",
              "schedule",
              "storage",
              "virtualMachines"
            ],
            "type": "object",
            "properties": {
              "isHighPriority": {
                "description": "If *true*, the job has a high priority in getting backup infrastructure resources.",
                "type": "boolean",
                "default": false
              },
              "virtualMachines": {
                "$ref": "#/components/schemas/BackupJobVirtualMachinesSpec"
              },
              "storage": {
                "$ref": "#/components/schemas/BackupJobStorageModel"
              },
              "guestProcessing": {
                "$ref": "#/components/schemas/BackupJobGuestProcessingModel"
              },
              "schedule": {
                "$ref": "#/components/schemas/BackupScheduleModel"
              }
            }
          }
        ]
      },
      "BackupJobVirtualMachinesSpec": {
        "description": "Arrays of objects that you want to back up or exclude from the backup.",
        "required": [
          "includes"
        ],
        "type": "object",
        "properties": {
          "includes": {
            "description": "Array of objects that you want to back up.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VmwareObjectModel"
            }
          },
          "excludes": {
            "$ref": "#/components/schemas/BackupJobExclusionsSpec"
          }
        }
      },
      "BackupJobExclusionsSpec": {
        "description": "Objects that you want to exclude from the backup.",
        "type": "object",
        "properties": {
          "vms": {
            "description": "Array of VMs.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VmwareObjectModel"
            }
          },
          "disks": {
            "description": "Array of disks.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VmwareObjectDiskModel"
            }
          },
          "templates": {
            "$ref": "#/components/schemas/BackupJobExclusionsTemplates"
          }
        }
      },
      "EVmwareInventoryType": {
        "description": "Type of the VMware vSphere object.",
        "type": "string",
        "enum": [
          "Unknown",
          "VirtualMachine",
          "vCenterServer",
          "Datacenter",
          "Cluster",
          "Host",
          "ResourcePool",
          "Folder",
          "Datastore",
          "DatastoreCluster",
          "StoragePolicy",
          "Template",
          "ComputeResource",
          "VirtualApp",
          "Tag",
          "Category",
          "Multitag",
          "Network"
        ]
      },
      "BackupJobStorageModel": {
        "description": "Backup storage settings.",
        "required": [
          "backupProxies",
          "backupRepositoryId",
          "retentionPolicy"
        ],
        "type": "object",
        "properties": {
          "backupRepositoryId": {
            "description": "ID of the backup repository.",
            "type": "string",
            "format": "uuid"
          },
          "backupProxies": {
            "$ref": "#/components/schemas/BackupProxiesSettingsModel"
          },
          "retentionPolicy": {
            "$ref": "#/components/schemas/BackupJobRetentionPolicySettingsModel"
          },
          "gfsPolicy": {
            "$ref": "#/components/schemas/GFSPolicySettingsModel"
          },
          "advancedSettings": {
            "$ref": "#/components/schemas/BackupJobAdvancedSettingsModel"
          }
        }
      },
      "BackupProxiesSettingsModel": {
        "description": "Backup proxy settings.",
        "required": [
          "autoSelection"
        ],
        "type": "object",
        "properties": {
          "autoSelection": {
            "description": "If *true*, backup proxies are detected and assigned automatically.",
            "type": "boolean",
            "default": true
          },
          "proxyIds": {
            "description": "Array of proxy IDs.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "BackupJobRetentionPolicySettingsModel": {
        "description": "Retention policy settings.",
        "required": [
          "quantity",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ERetentionPolicyType"
          },
          "quantity": {
            "description": "Number of restore points or days to keep.",
            "type": "integer"
          }
        }
      },
      "ERetentionPolicyType": {
        "description": "Type of the retention policy.",
        "type": "string",
        "enum": [
          "RestorePoints",
          "Days"
        ]
      },
      "GFSPolicySettingsModel": {
        "description": "GFS retention policy settings.",
        "required": [
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, the long-term (GFS) retention policy is enabled.",
            "type": "boolean"
          },
          "weekly": {
            "$ref": "#/components/schemas/GFSPolicySettingsWeeklyModel"
          },
          "monthly": {
            "$ref": "#/components/schemas/GFSPolicySettingsMonthlyModel"
          },
          "yearly": {
            "$ref": "#/components/schemas/GFSPolicySettingsYearlyModel"
          }
        }
      },
      "GFSPolicySettingsWeeklyModel": {
        "description": "Weekly GFS retention policy.",
        "required": [
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, the weekly GFS retention policy is enabled.",
            "type": "boolean"
          },
          "keepForNumberOfWeeks": {
            "description": "Number of weeks to keep full backups for archival purposes. Possible values are from 1 through 9999.",
            "type": "integer"
          },
          "desiredTime": {
            "description": "Day of the week when the full backup that will be kept for archival purposes is created.",
            "$ref": "#/components/schemas/EDayOfWeek"
          }
        }
      },
      "GFSPolicySettingsMonthlyModel": {
        "description": "Monthly GFS retention policy.",
        "required": [
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, the monthly GFS retention policy is enabled.",
            "type": "boolean"
          },
          "keepForNumberOfMonths": {
            "description": "Number of months to keep full backups for archival purposes. Possible values are from 1 through 999.",
            "type": "integer"
          },
          "desiredTime": {
            "description": "Week of the month when the full backup that will be kept for archival purposes is created (the first week is the first 7 days of the month).",
            "$ref": "#/components/schemas/ESennightOfMonth"
          }
        }
      },
      "GFSPolicySettingsYearlyModel": {
        "description": "Yearly GFS retention policy.",
        "required": [
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, the yearly GFS retention policy is enabled.",
            "type": "boolean"
          },
          "keepForNumberOfYears": {
            "description": "Number of years to keep full backups for archival purposes. Possible values are from 1 through 999.",
            "type": "integer"
          },
          "desiredTime": {
            "description": "Month when the full backup that will be kept for archival purposes is created.",
            "$ref": "#/components/schemas/EMonth"
          }
        }
      },
      "BackupJobAdvancedSettingsModel": {
        "description": "Advanced settings of the backup job.",
        "required": [
          "backupModeType"
        ],
        "type": "object",
        "properties": {
          "backupModeType": {
            "$ref": "#/components/schemas/EBackupModeType"
          },
          "synthenticFulls": {
            "$ref": "#/components/schemas/SyntheticFullSettingsModel"
          },
          "activeFulls": {
            "$ref": "#/components/schemas/ActiveFullSettingsModel"
          },
          "backupHealth": {
            "$ref": "#/components/schemas/BackupHealthCheckSettingsModels"
          },
          "fullBackupMaintenance": {
            "$ref": "#/components/schemas/FullBackupMaintenanceModel"
          },
          "storageData": {
            "$ref": "#/components/schemas/BackupStorageSettingModel"
          },
          "notifications": {
            "$ref": "#/components/schemas/NotificationSettingsModel"
          },
          "vSphere": {
            "$ref": "#/components/schemas/BackupJobAdvancedSettingsVSphereModel"
          },
          "storageIntegration": {
            "$ref": "#/components/schemas/PrimaryStorageIntegrationSettingsModel"
          },
          "scripts": {
            "$ref": "#/components/schemas/JobScriptsSettingsModel"
          }
        }
      },
      "JobScriptsSettingsModel": {
        "description": "Script settings.",
        "type": "object",
        "properties": {
          "preCommand": {
            "description": "Script executed before the backup job.",
            "$ref": "#/components/schemas/ScriptCommand"
          },
          "postCommand": {
            "description": "Script executed after the backup job.",
            "$ref": "#/components/schemas/ScriptCommand"
          },
          "periodicityType": {
            "$ref": "#/components/schemas/EScriptPeriodicityType"
          },
          "runScriptEvery": {
            "description": "Number of the backup job session after which the scripts must be executed.",
            "type": "integer"
          },
          "dayOfWeek": {
            "description": "Days of the week when the scripts must be executed.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EDayOfWeek"
            }
          }
        }
      },
      "ScriptCommand": {
        "description": "Script settings.",
        "required": [
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, script execution is enabled.",
            "type": "boolean"
          },
          "command": {
            "description": "Path to the script.",
            "type": "string"
          }
        }
      },
      "EScriptPeriodicityType": {
        "description": "Type of script periodicity.",
        "type": "string",
        "enum": [
          "Days",
          "BackupSessions"
        ]
      },
      "PrimaryStorageIntegrationSettingsModel": {
        "description": "Primary storage integration settings for the backup job.",
        "required": [
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, the primary storage integration is enabled. In this case, storage snapshots (instead of VM snapshots) are used for VM data processing.",
            "type": "boolean"
          },
          "limitProcessedVm": {
            "description": "If *true*, the number of processed VMs per storage snapshot is limited.",
            "type": "boolean"
          },
          "limitProcessedVmCount": {
            "description": "Number of processed VMs per storage snapshot.",
            "type": "integer"
          },
          "failoverToStandardBackup": {
            "description": "If *true*, failover to the regular VM processing mode is enabled. In this case, if backup from storage snapshot fails, VM snapshots are used.",
            "type": "boolean"
          }
        }
      },
      "BackupJobAdvancedSettingsVSphereModel": {
        "description": "VMware vSphere settings for the backup job.",
        "type": "object",
        "properties": {
          "enableVMWareToolsQuiescence": {
            "description": "If *true*, VMware Tools quiescence is enabled for freezing the VM file system and application data.",
            "type": "boolean"
          },
          "changedBlockTracking": {
            "$ref": "#/components/schemas/VSphereChangedBlockTrackingSettingsModel"
          }
        }
      },
      "VSphereChangedBlockTrackingSettingsModel": {
        "description": "CBT settings for the backup job.",
        "required": [
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, CBT data is used.",
            "type": "boolean"
          },
          "enableCBTautomatically": {
            "description": "If *true*, CBT is enabled for all processed VMs even if CBT is disabled in VM configuration. CBT is used for VMs with virtual hardware version 7 or later. These VMs must not have existing snapshots.",
            "type": "boolean"
          },
          "resetCBTonActiveFull": {
            "description": "If *true*, CBT is reset before creating active full backups.",
            "type": "boolean"
          }
        }
      },
      "NotificationSettingsModel": {
        "description": "Notification settings for the backup job.",
        "type": "object",
        "properties": {
          "sendSNMPNotifications": {
            "description": "If *true*, SNMP notifications are enabled for this job.",
            "type": "boolean"
          },
          "emailNotifications": {
            "$ref": "#/components/schemas/EmailNotificationSettingsModel"
          },
          "vmAttribute": {
            "$ref": "#/components/schemas/NotificationVmAttributeSettingsModel"
          }
        }
      },
      "EmailNotificationSettingsModel": {
        "description": "Email notification settings for the backup job.",
        "required": [
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, email notifications are enabled for this job.",
            "type": "boolean"
          },
          "recipients": {
            "description": "Array of recipient’s email addresses.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "notificationType": {
            "$ref": "#/components/schemas/EEmailNotificationType"
          },
          "customNotificationSettings": {
            "$ref": "#/components/schemas/EmailCustomNotificationType"
          }
        }
      },
      "EEmailNotificationType": {
        "description": "Type of email notification settings (global notification settings specified for the backup server, or custom notification settings specified for this job).",
        "type": "string",
        "enum": [
          "UseGlobalNotificationSettings",
          "UseCustomNotificationSettings"
        ]
      },
      "EmailCustomNotificationType": {
        "description": "Custom notification settings.",
        "type": "object",
        "properties": {
          "subject": {
            "description": "Notification subject. Use the following variables in the subject:<ul> <li>*%Time%* — completion time</li> <li>*%JobName%* — job name</li> <li>*%JobResult%* — job result</li> <li>*%ObjectCount%* — number of VMs in the job</li> <li>*%Issues%* — number of VMs in the job that have finished with the Warning or Failed status</li></ul>",
            "type": "string"
          },
          "notifyOnSuccess": {
            "description": "If *true*, email notifications are sent when the job completes successfully.",
            "type": "boolean"
          },
          "notifyOnWarning": {
            "description": "If *true*, email notifications are sent when the job completes with a warning.",
            "type": "boolean"
          },
          "notifyOnError": {
            "description": "If *true*, email notifications are sent when the job fails.",
            "type": "boolean"
          },
          "SuppressNotificationUntilLastRetry": {
            "description": "If *true*, email notifications are sent about the final job status only (not per every job retry).",
            "type": "boolean"
          }
        }
      },
      "NotificationVmAttributeSettingsModel": {
        "description": "VM attribute settings.",
        "required": [
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, information about successfully performed backup is written to a VM attribute.",
            "type": "boolean"
          },
          "notes": {
            "description": "Name of the VM attribute.",
            "type": "string"
          },
          "appendToExisitingValue": {
            "description": "If *true*, information about successfully performed backup is appended to the existing value of the attribute added by the user.",
            "type": "boolean"
          }
        }
      },
      "EBackupModeType": {
        "description": "Type of the backup method used to create a restore point.",
        "type": "string",
        "enum": [
          "Full",
          "Incremental",
          "ReverseIncremental",
          "Transofrm",
          "TransformForeverIncremental"
        ]
      },
      "SyntheticFullSettingsModel": {
        "description": "Synthetic full backup settings.",
        "required": [
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, active full backups are enabled.",
            "type": "boolean"
          },
          "weekly": {
            "$ref": "#/components/schemas/AdvancedStorageScheduleWeeklyModel"
          },
          "monthly": {
            "$ref": "#/components/schemas/AdvancedStorageScheduleMonthlyModel"
          }
        }
      },
      "ActiveFullSettingsModel": {
        "description": "Active full backup settings.",
        "required": [
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, active full backups are enabled.",
            "type": "boolean"
          },
          "weekly": {
            "$ref": "#/components/schemas/AdvancedStorageScheduleWeeklyModel"
          },
          "monthly": {
            "$ref": "#/components/schemas/AdvancedStorageScheduleMonthlyModel"
          }
        }
      },
      "AdvancedStorageScheduleWeeklyModel": {
        "description": "Weekly schedule settings.",
        "required": [
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, the weekly schedule is enabled.",
            "type": "boolean",
            "default": false
          },
          "days": {
            "description": "Days of the week when the operation is performed.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EDayOfWeek"
            }
          }
        }
      },
      "AdvancedStorageScheduleMonthlyModel": {
        "description": "Monthly schedule settings.",
        "required": [
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, the monthly schedule is enabled.",
            "type": "boolean"
          },
          "dayOfWeek": {
            "$ref": "#/components/schemas/EDayOfWeek"
          },
          "dayNumberInMonth": {
            "$ref": "#/components/schemas/EDayNumberInMonth"
          },
          "dayOfMonths": {
            "description": "Day of the month when the operation is performed.",
            "type": "integer"
          },
          "months": {
            "description": "Months when the operation is performed.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EMonth"
            }
          }
        }
      },
      "BackupHealthCheckSettingsModels": {
        "description": "Health check settings for the for the latest restore point in the backup chain.",
        "required": [
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, the health check is enabled.",
            "type": "boolean"
          },
          "weekly": {
            "$ref": "#/components/schemas/AdvancedStorageScheduleWeeklyModel"
          },
          "monthly": {
            "$ref": "#/components/schemas/AdvancedStorageScheduleMonthlyModel"
          }
        }
      },
      "FullBackupMaintenanceModel": {
        "description": "Maintenance settings for full backup files.",
        "type": "object",
        "properties": {
          "RemoveData": {
            "$ref": "#/components/schemas/FullBackupMaintenanceRemoveDataModel"
          },
          "defragmentAndCompact": {
            "$ref": "#/components/schemas/FullBackupMaintenanceDefragmentAndCompactModel"
          }
        }
      },
      "FullBackupMaintenanceRemoveDataModel": {
        "description": "Backup data setting for deleted VMs.",
        "required": [
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, Veeam Backup & Replication keeps the backup data of deleted VMs for the `afterDays` number of days.",
            "type": "boolean"
          },
          "afterDays": {
            "description": "Number of days.",
            "type": "integer"
          }
        }
      },
      "FullBackupMaintenanceDefragmentAndCompactModel": {
        "description": "Compact operation settings.",
        "required": [
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, Veeam Backup & Replication compacts full backup files.",
            "type": "boolean"
          },
          "weekly": {
            "$ref": "#/components/schemas/AdvancedStorageScheduleWeeklyModel"
          },
          "monthly": {
            "$ref": "#/components/schemas/AdvancedStorageScheduleMonthlyModel"
          }
        }
      },
      "BackupStorageSettingModel": {
        "description": "Storage settings.",
        "type": "object",
        "properties": {
          "enableInlineDataDedup": {
            "description": "If *true*, Veeam Backup & Replication deduplicates VM data before storing it in the backup repository.",
            "type": "boolean"
          },
          "excludeSwapFileBlocks": {
            "description": "If *true*, Veeam Backup & Replication excludes swap file blocks from processing.",
            "type": "boolean"
          },
          "excludeDeletedFileBlocks": {
            "description": "If *true*, Veeam Backup & Replication does not copy deleted file blocks.",
            "type": "boolean"
          },
          "compressionLevel": {
            "$ref": "#/components/schemas/ECompressionLevel"
          },
          "storageOptimization": {
            "$ref": "#/components/schemas/EStorageOptimization"
          },
          "encryption": {
            "$ref": "#/components/schemas/BackupStorageSettingsEncryptionModel"
          }
        }
      },
      "EStorageOptimization": {
        "description": "Storage optimization that depends on the target type.",
        "type": "string",
        "enum": [
          "LocalTargetLarge",
          "LocalTarget",
          "LANTarget",
          "WANTarget",
          "LocalTargetLarge8192",
          "LocalTargetLarge4096"
        ]
      },
      "ECompressionLevel": {
        "description": "Compression level.",
        "type": "string",
        "enum": [
          "None",
          "DedupFriendly",
          "Optimal",
          "High",
          "Extreme"
        ]
      },
      "BackupStorageSettingsEncryptionModel": {
        "description": "Encryption of backup files.",
        "required": [
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, the content of backup files is encrypted.",
            "type": "boolean"
          },
          "encryptionPasswordIdOrNull": {
            "description": "ID of the password used for encryption. The value is *null* for exported objects.",
            "type": "string",
            "format": "uuid"
          },
          "encryptionPasswordTag": {
            "type": "string",
            "description": "Tag used to identify the password."
          }
        }
      },
      "BackupJobGuestProcessingModel": {
        "description": "Guest processing settings.",
        "required": [
          "appAwareProcessing",
          "guestFSIndexing"
        ],
        "type": "object",
        "properties": {
          "appAwareProcessing": {
            "$ref": "#/components/schemas/BackupApplicationAwareProcessingModel"
          },
          "guestFSIndexing": {
            "$ref": "#/components/schemas/GuestFileSystemIndexingModel"
          },
          "guestInteractionProxies": {
            "$ref": "#/components/schemas/GuestInteractionProxiesSettingsModel"
          },
          "guestCredentials": {
            "$ref": "#/components/schemas/GuestOsCredentialsModel"
          }
        }
      },
      "BackupApplicationAwareProcessingModel": {
        "description": "Application-aware processing settings.",
        "required": [
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, application-aware processing is enabled.",
            "type": "boolean"
          },
          "appSettings": {
            "description": "Array of VMware vSphere objects and their application settings.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackupApplicationSettingsModel"
            }
          }
        }
      },
      "BackupApplicationSettingsModel": {
        "required": [
          "vmObject",
          "vss"
        ],
        "type": "object",
        "properties": {
          "vmObject": {
            "$ref": "#/components/schemas/VmwareObjectModel"
          },
          "vss": {
            "$ref": "#/components/schemas/EApplicationSettingsVSS"
          },
          "usePersistentGuestAgent": {
            "description": "If *true*, persistent guest agent is used.",
            "type": "boolean"
          },
          "transactionLogs": {
            "$ref": "#/components/schemas/ETransactionLogsSettings"
          },
          "sql": {
            "$ref": "#/components/schemas/BackupSQLSettingsModel"
          },
          "oracle": {
            "$ref": "#/components/schemas/BackupOracleSettingsModel"
          },
          "exclusions": {
            "$ref": "#/components/schemas/BackupFSExclusionsModel"
          },
          "scripts": {
            "$ref": "#/components/schemas/BackupScriptSettingsModel"
          }
        }
      },
      "EApplicationSettingsVSS": {
        "description": "Behavior scenario for application-aware processing.",
        "type": "string",
        "enum": [
          "requireSuccess",
          "ignoreFailures",
          "disabled"
        ]
      },
      "ETransactionLogsSettings": {
        "description": "Transaction logs settings that define whether copy-only backups must be created, or transaction logs for Microsoft Exchange, Microsoft SQL and Oracle VMs must be processed.<br> If transaction log processing is selected, specify the following parameters:<ul> <li>[For Microsoft SQL Server VMs] Microsoft SQL Server transaction log settings</li> <li>[For Oracle VMs] Oracle archived log settings</li></ul>",
        "type": "string",
        "enum": [
          "process",
          "copyOnly"
        ]
      },
      "BackupSQLSettingsModel": {
        "description": "Microsoft SQL Server transaction log settings.",
        "required": [
          "logsProcessing"
        ],
        "type": "object",
        "properties": {
          "logsProcessing": {
            "$ref": "#/components/schemas/ESQLLogsProcessing"
          },
          "backupMinsCount": {
            "description": "Frequency of transaction log backup, in minutes.",
            "type": "integer"
          },
          "retainLogBackups": {
            "$ref": "#/components/schemas/ERetainLogBackupsType"
          },
          "keepDaysCount": {
            "description": "Number of days to keep transaction logs in the backup repository.",
            "type": "integer"
          },
          "logShippingServers": {
            "$ref": "#/components/schemas/BackupLogShippingServersModel"
          }
        }
      },
      "ESQLLogsProcessing": {
        "description": "Type of transaction logs processing.",
        "type": "string",
        "enum": [
          "truncate",
          "preserve",
          "backup",
          "neverTruncate"
        ]
      },
      "ERetainLogBackupsType": {
        "description": "Retention policy for the logs stored in the backup repository.",
        "type": "string",
        "enum": [
          "untilBackupDeleted",
          "KeepOnlyDays"
        ]
      },
      "BackupLogShippingServersModel": {
        "description": "Log shipping server used to transport logs.",
        "required": [
          "autoSelection"
        ],
        "type": "object",
        "properties": {
          "autoSelection": {
            "description": "If *true*, Veeam Backup & Replication chooses an optimal log shipping server automatically.",
            "type": "boolean"
          },
          "shippingServerIds": {
            "description": "Array of servers that are explicitly selected for log shipping.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "BackupOracleSettingsModel": {
        "description": "Oracle archived log settings.",
        "required": [
          "archiveLogs",
          "useGuestCredentials"
        ],
        "type": "object",
        "properties": {
          "useGuestCredentials": {
            "description": "If *true*, Veeam Backup & Replication uses credentials specified in the guest processing settings.",
            "type": "boolean"
          },
          "credentialsId": {
            "description": "ID of the credentials record that is used if `useGuestCredentials` is *false*.",
            "type": "string",
            "format": "uuid"
          },
          "archiveLogs": {
            "$ref": "#/components/schemas/EBackupOracleLogsSettings"
          },
          "deleteHoursCount": {
            "description": "Time period in hours to keep archived logs. This parameter should be specified if the `EBackupOracleLogsSettings` value is *deleteExpiredHours*.",
            "type": "integer"
          },
          "deleteGBsCount": {
            "description": "Maximum size for archived logs in GB. This parameter should be specified if the `EBackupOracleLogsSettings` value is *deleteExpiredGBs*.",
            "type": "integer"
          },
          "backupLogs": {
            "description": "If *true*, archived logs are backed up.",
            "type": "boolean"
          },
          "backupMinsCount": {
            "description": "Frequency of archived log backup, in minutes.",
            "type": "integer"
          },
          "retainLogBackups": {
            "$ref": "#/components/schemas/ERetainLogBackupsType"
          },
          "keepDaysCount": {
            "description": "Number of days to keep archived logs.",
            "type": "integer"
          },
          "logShippingServers": {
            "$ref": "#/components/schemas/BackupLogShippingServersModel"
          }
        }
      },
      "EBackupOracleLogsSettings": {
        "description": "Type of archived logs processing.",
        "type": "string",
        "enum": [
          "preserve",
          "deleteExpiredHours",
          "deleteExpiredGBs"
        ]
      },
      "BackupFSExclusionsModel": {
        "description": "VM guest OS file exclusion.",
        "required": [
          "exclusionPolicy"
        ],
        "type": "object",
        "properties": {
          "exclusionPolicy": {
            "$ref": "#/components/schemas/EBackupExclusionPolicy"
          },
          "itemsList": {
            "description": "Array of files and folders. Full paths to files and folders, environmental variables and file masks with the asterisk (*) and question mark (?) characters can be used.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EBackupExclusionPolicy": {
        "description": "Exclusion policy.",
        "type": "string",
        "enum": [
          "disabled",
          "excludeOnly",
          "includeOnly"
        ]
      },
      "BackupScriptSettingsModel": {
        "description": "Pre-freeze and post-thaw scripts.",
        "required": [
          "scriptProcessingMode"
        ],
        "type": "object",
        "properties": {
          "scriptProcessingMode": {
            "$ref": "#/components/schemas/EBackupScriptProcessingMode"
          },
          "windowsScripts": {
            "$ref": "#/components/schemas/BackupWindowsScriptModel"
          },
          "linuxScripts": {
            "$ref": "#/components/schemas/BackupLinuxScriptModel"
          }
        }
      },
      "EBackupScriptProcessingMode": {
        "description": "Scenario for scripts execution.",
        "type": "string",
        "enum": [
          "disableExec",
          "ignoreExecFailures",
          "requireSuccess"
        ]
      },
      "BackupWindowsScriptModel": {
        "description": "Paths to pre-freeze and post-thaw scripts for Microsoft Windows VMs.",
        "type": "object",
        "properties": {
          "preFreezeScript": {
            "description": "Path to a pre-freeze script.",
            "type": "string"
          },
          "postThawScript": {
            "description": "Path to a post-thaw script.",
            "type": "string"
          }
        }
      },
      "BackupLinuxScriptModel": {
        "description": "Paths to pre-freeze and post-thaw scripts for Linux VMs.",
        "type": "object",
        "properties": {
          "preFreezeScript": {
            "description": "Path to a pre-freeze script.",
            "type": "string"
          },
          "postThawScript": {
            "description": "Path to a post-thaw script.",
            "type": "string"
          }
        }
      },
      "GuestFileSystemIndexingModel": {
        "description": "VM guest OS file indexing.",
        "required": [
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, file indexing is enabled.",
            "type": "boolean"
          },
          "indexingSettings": {
            "description": "Array of VMs with guest OS file indexing options.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackupIndexingSettingsModel"
            }
          }
        }
      },
      "BackupIndexingSettingsModel": {
        "required": [
          "vmObject"
        ],
        "type": "object",
        "properties": {
          "vmObject": {
            "$ref": "#/components/schemas/VmwareObjectModel"
          },
          "WindowsIndexing": {
            "$ref": "#/components/schemas/BackupObjectIndexingModel"
          },
          "LinuxIndexing": {
            "$ref": "#/components/schemas/BackupObjectIndexingModel"
          }
        }
      },
      "BackupObjectIndexingModel": {
        "description": "Guest OS indexing options for the VM.",
        "required": [
          "guestFSIndexingMode"
        ],
        "type": "object",
        "properties": {
          "guestFSIndexingMode": {
            "$ref": "#/components/schemas/EGuestFSIndexingMode"
          },
          "indexingList": {
            "description": "Array of folders. Environmental variables and full paths to folders can be used.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EGuestFSIndexingMode": {
        "description": "Indexing mode.",
        "type": "string",
        "enum": [
          "disable",
          "indexAll",
          "indexAllExcept",
          "indexOnly"
        ]
      },
      "EGuestOSType": {
        "description": "Type of the guest OS.",
        "type": "string",
        "enum": [
          "Windows",
          "Linux"
        ]
      },
      "GuestInteractionProxiesSettingsModel": {
        "description": "Guest interaction proxy used to deploy the runtime process on the VM guest OS.",
        "required": [
          "autoSelection"
        ],
        "type": "object",
        "properties": {
          "autoSelection": {
            "description": "If *true*, Veeam Backup & Replication automatically selects the guest interaction proxy.",
            "type": "boolean",
            "default": true
          },
          "proxyIds": {
            "description": "Array of proxies specified explicitly. The array must contain Microsoft Windows servers added to the backup infrastructure only.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "GuestOsCredentialsModel": {
        "description": "VM custom credentials.",
        "type": "object",
        "required": [
          "credsId",
          "credsType"
        ],
        "properties": {
          "credsId": {
            "description": "Credentials ID for Microsoft Windows VMs.",
            "type": "string",
            "format": "uuid"
          },
          "credsType": {
            "$ref": "#/components/schemas/ECredentialsType"
          },
          "credentialsPerMachine": {
            "description": "Individual credentials for VMs.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuestOsCredentialsPerMachineModel"
            }
          }
        }
      },
      "GuestOsCredentialsPerMachineModel": {
        "required": [
          "vmObject"
        ],
        "type": "object",
        "properties": {
          "windowsCredsId": {
            "description": "Credentials ID for a Microsoft Windows VM.",
            "type": "string",
            "format": "uuid"
          },
          "linuxCredsId": {
            "description": "Credentials ID for a Linux VM.",
            "type": "string",
            "format": "uuid"
          },
          "vmObject": {
            "$ref": "#/components/schemas/VmwareObjectModel"
          }
        }
      },
      "ECredentialsType": {
        "description": "Credentials type.",
        "type": "string",
        "enum": [
          "Standard",
          "Linux"
        ]
      },
      "BackupScheduleModel": {
        "description": "Job scheduling options.",
        "required": [
          "runAutomatically"
        ],
        "type": "object",
        "properties": {
          "runAutomatically": {
            "description": "If *true*, job scheduling is enabled.",
            "type": "boolean",
            "default": false
          },
          "daily": {
            "$ref": "#/components/schemas/ScheduleDailyModel"
          },
          "monthly": {
            "$ref": "#/components/schemas/ScheduleMonthlyModel"
          },
          "periodically": {
            "$ref": "#/components/schemas/SchedulePeriodicallyModel"
          },
          "continuously": {
            "$ref": "#/components/schemas/ScheduleBackupWindowModel"
          },
          "afterThisJob": {
            "$ref": "#/components/schemas/ScheduleAfterThisJobModel"
          },
          "retry": {
            "$ref": "#/components/schemas/ScheduleRetryModel"
          },
          "backupWindow": {
            "$ref": "#/components/schemas/ScheduleBackupWindowModel"
          }
        }
      },
      "ScheduleAfterThisJobModel": {
        "description": "Job chaining options.",
        "type": "object",
        "required": [
          "isEnabled"
        ],
        "properties": {
          "isEnabled": {
            "description": "If *true*, job chaining is enabled.",
            "type": "boolean"
          },
          "jobName": {
            "description": "Name of the preceding job.",
            "type": "string"
          }
        }
      },
      "ScheduleDailyModel": {
        "description": "Daily scheduling options.",
        "required": [
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, daily schedule is enabled.",
            "type": "boolean",
            "default": true
          },
          "localTime": {
            "description": "Local time when the job must start.",
            "type": "string",
            "format": "time"
          },
          "dailyKind": {
            "$ref": "#/components/schemas/EDailyKinds"
          },
          "days": {
            "description": "Days of the week when the job must start.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EDayOfWeek"
            }
          }
        }
      },
      "EDailyKinds": {
        "description": "Kind of daily scheduling scheme.",
        "type": "string",
        "enum": [
          "Everyday",
          "WeekDays",
          "SelectedDays"
        ]
      },
      "EDayOfWeek": {
        "description": "Day of the week.",
        "type": "string",
        "enum": [
          "monday",
          "tuesday",
          "wednesday",
          "thursday",
          "friday",
          "saturday",
          "sunday"
        ]
      },
      "ScheduleMonthlyModel": {
        "description": "Monthly scheduling options.",
        "required": [
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, monthly schedule is enabled.",
            "type": "boolean",
            "default": false
          },
          "localTime": {
            "description": "Local time when the job must start.",
            "type": "string",
            "format": "time"
          },
          "dayOfWeek": {
            "$ref": "#/components/schemas/EDayOfWeek"
          },
          "dayNumberInMonth": {
            "$ref": "#/components/schemas/EDayNumberInMonth"
          },
          "dayOfMonth": {
            "description": "Day of the month when the job must start.",
            "type": "integer"
          },
          "months": {
            "description": "Months when the job must start.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EMonth"
            }
          }
        }
      },
      "EDayNumberInMonth": {
        "description": "Week day number in the month.",
        "type": "string",
        "enum": [
          "First",
          "Second",
          "Third",
          "Fourth",
          "Last",
          "OnDay"
        ]
      },
      "EMonth": {
        "description": "Month.",
        "type": "string",
        "enum": [
          "January",
          "February",
          "March",
          "April",
          "May",
          "June",
          "July",
          "August",
          "September",
          "October",
          "November",
          "December"
        ]
      },
      "SchedulePeriodicallyModel": {
        "description": "Periodic scheduling options.",
        "required": [
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, periodic schedule is enabled.",
            "type": "boolean",
            "default": false
          },
          "periodicallyKind": {
            "$ref": "#/components/schemas/EPeriodicallyKinds"
          },
          "frequency": {
            "description": "Number of time units that defines the time interval.",
            "type": "integer"
          },
          "backupWindow": {
            "$ref": "#/components/schemas/BackupWindowSettingModel"
          },
          "startTimeWithinAnHour": {
            "description": "Start time within an hour, in minutes.",
            "type": "integer"
          }
        }
      },
      "EPeriodicallyKinds": {
        "description": "Time unit for periodic job scheduling.",
        "type": "string",
        "enum": [
          "Hours",
          "Minutes",
          "Seconds",
          "Days"
        ]
      },
      "ScheduleBackupWindowModel": {
        "description": "Backup window settings.",
        "required": [
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, backup window is enabled.",
            "type": "boolean",
            "default": false
          },
          "backupWindow": {
            "$ref": "#/components/schemas/BackupWindowSettingModel"
          }
        }
      },
      "BackupWindowDayHoursModel": {
        "description": "Hourly scheme for a day.",
        "required": [
          "day",
          "hours"
        ],
        "type": "object",
        "properties": {
          "day": {
            "$ref": "#/components/schemas/EDayOfWeek"
          },
          "hours": {
            "description": "String of 24 hours in the following format:<br>*1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1*<br>where *1* means permitted, *0* means denied.",
            "type": "string"
          }
        }
      },
      "BackupWindowSettingModel": {
        "description": "Time scheme that defines permitted days and hours for the job to start.",
        "required": [
          "days"
        ],
        "type": "object",
        "properties": {
          "days": {
            "description": "Array of per-day schemes.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackupWindowDayHoursModel"
            }
          }
        }
      },
      "ScheduleRetryModel": {
        "description": "Retry options.",
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, retry options are enabled.",
            "type": "boolean",
            "default": false
          },
          "retryCount": {
            "description": "Number of retries set for the job. Must be greater than zero.",
            "type": "integer",
            "default": 3
          },
          "awaitMinutes": {
            "description": "Time interval between job retries in minutes. Must be greater than zero.",
            "type": "integer",
            "default": 10
          }
        }
      },
      "ESennightOfMonth": {
        "description": "Sennight of the month.",
        "type": "string",
        "enum": [
          "First",
          "Second",
          "Third",
          "Fourth",
          "Fifth",
          "Last"
        ]
      },
      "BackupJobModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/JobModel"
          },
          {
            "type": "object",
            "required": [
              "guestProcessing",
              "isHighPriority",
              "schedule",
              "storage",
              "virtualMachines"
            ],
            "properties": {
              "isHighPriority": {
                "description": "If *true*, the job has a high priority in getting backup infrastructure resources.",
                "type": "boolean"
              },
              "virtualMachines": {
                "$ref": "#/components/schemas/BackupJobVirtualMachinesModel"
              },
              "storage": {
                "$ref": "#/components/schemas/BackupJobStorageModel"
              },
              "guestProcessing": {
                "$ref": "#/components/schemas/BackupJobGuestProcessingModel"
              },
              "schedule": {
                "$ref": "#/components/schemas/BackupScheduleModel"
              }
            }
          }
        ]
      },
      "BackupJobVirtualMachinesModel": {
        "description": "Included and excluded objects.",
        "required": [
          "includes"
        ],
        "type": "object",
        "properties": {
          "includes": {
            "description": "Array of VMs and VM containers processed by the job.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VmwareObjectSizeModel"
            }
          },
          "excludes": {
            "$ref": "#/components/schemas/BackupJobExclusions"
          }
        }
      },
      "BackupJobExclusions": {
        "description": "Objects excluded from the backup.",
        "type": "object",
        "properties": {
          "vms": {
            "description": "Array of VMs excluded from the backup.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VmwareObjectSizeModel"
            }
          },
          "disks": {
            "description": "Array of VM disks excluded from the backup.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VmwareObjectDiskModel"
            }
          },
          "templates": {
            "$ref": "#/components/schemas/BackupJobExclusionsTemplates"
          }
        }
      },
      "BackupJobExclusionsTemplates": {
        "description": "VM templates exclusion.",
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, VM templates are excluded from the backup.",
            "type": "boolean"
          },
          "excludeFromIncremental": {
            "description": "If *true*, VM templates are excluded from the incremental backup.",
            "type": "boolean"
          }
        }
      },
      "VmwareObjectDiskModel": {
        "required": [
          "disks",
          "disksToProcess",
          "vmObject"
        ],
        "type": "object",
        "properties": {
          "vmObject": {
            "$ref": "#/components/schemas/VmwareObjectModel"
          },
          "disksToProcess": {
            "$ref": "#/components/schemas/EVmwareDisksTypeToProcess"
          },
          "disks": {
            "description": "Array of disks.",
            "type": "array",
            "items": {
              "description": "ID of the disk.",
              "type": "string"
            }
          },
          "removeFromVMConfiguration": {
            "description": "If *true*, the disk is removed from VM configuration.",
            "type": "boolean"
          }
        }
      },
      "EVmwareDisksTypeToProcess": {
        "description": "Type of disk selection.",
        "type": "string",
        "enum": [
          "AllDisks",
          "SystemOnly",
          "SelectedDisks"
        ]
      },
      "VmwareObjectSizeModel": {
        "required": [
          "inventoryObject"
        ],
        "type": "object",
        "properties": {
          "inventoryObject": {
            "$ref": "#/components/schemas/VmwareObjectModel"
          },
          "size": {
            "description": "Size used by the VMware vSphere object.",
            "type": "string"
          }
        }
      },
      "VmwareObjectModel": {
        "description": "VMware vSphere object.",
        "required": [
          "name",
          "type",
          "hostName"
        ],
        "type": "object",
        "properties": {
          "hostName": {
            "description": "Name of the VMware vSphere server that hosts the object.",
            "type": "string"
          },
          "name": {
            "description": "Name of the VMware vSphere object.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/EVmwareInventoryType"
          },
          "objectId": {
            "description": "ID of the VMware vSphere object. The parameter is required for all VMware vSphere objects except vCenter Servers and standalone ESXi hosts.",
            "type": "string"
          }
        }
      },
      "CredentialsFilters": {
        "type": "object",
        "properties": {
          "skip": {
            "description": "Number of credentials records to skip.",
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "description": "Maximum number of credentials records to return.",
            "type": "integer",
            "format": "int32"
          },
          "orderColumn": {
            "$ref": "#/components/schemas/ECredentialsFiltersOrderColumn"
          },
          "orderAsc": {
            "description": "Sorts credentials in the ascending order by the `orderColumn` parameter.",
            "type": "boolean"
          },
          "nameFilter": {
            "description": "Filters credentials by the `nameFilter` pattern. The pattern can match any credentials parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.",
            "type": "string"
          }
        }
      },
      "ECredentialsFiltersOrderColumn": {
        "type": "string",
        "enum": [
          "Username",
          "Description"
        ]
      },
      "CredentialsResult": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of credentials.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CredentialsModel"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationResult"
          }
        }
      },
      "CredentialsSpec": {
        "required": [
          "username",
          "type"
        ],
        "type": "object",
        "properties": {
          "username": {
            "description": "User name.",
            "type": "string"
          },
          "password": {
            "description": "Password.",
            "type": "string"
          },
          "description": {
            "description": "Description of the credentials record.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ECredentialsType"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/StandardCredentialsSpec"
          },
          {
            "$ref": "#/components/schemas/LinuxCredentialsSpec"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Standard": "#/components/schemas/StandardCredentialsSpec",
            "Linux": "#/components/schemas/LinuxCredentialsSpec"
          }
        }
      },
      "StandardCredentialsSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CredentialsSpec"
          },
          {
            "type": "object",
            "properties": {
              "tag": {
                "description": "Tag used to identify the credentials record.",
                "type": "string"
              }
            }
          }
        ]
      },
      "LinuxCredentialsSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CredentialsSpec"
          },
          {
            "type": "object",
            "properties": {
              "tag": {
                "description": "Tag used to identify the credentials record.",
                "type": "string"
              },
              "SSHPort": {
                "description": "SSH port used to connect to a Linux server.",
                "type": "integer"
              },
              "autoElevated": {
                "description": "If *true*, the permissions of the account are automatically elevated to the root user.",
                "type": "boolean"
              },
              "addToSudoers": {
                "description": "If *true*, the account is automatically added to the sudoers file.",
                "type": "boolean"
              },
              "useSu": {
                "description": "If *true*, the `su` command is used for Linux distributions where the `sudo` command is not available.",
                "type": "boolean"
              },
              "privateKey": {
                "description": "Private key.",
                "type": "string"
              },
              "passphrase": {
                "description": "Passphrase that protects the private key.",
                "type": "string"
              },
              "rootPassword": {
                "description": "Password for the root account.",
                "type": "string"
              }
            }
          }
        ]
      },
      "CredentialsModel": {
        "required": [
          "id",
          "username",
          "description",
          "type",
          "creationTime"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of the credentials record.",
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "description": "User name.",
            "type": "string"
          },
          "description": {
            "description": "Description of the credentials record.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ECredentialsType"
          },
          "creationTime": {
            "description": "Date and time when the credentials were created.",
            "type": "string",
            "format": "date-time"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/StandardCredentialsModel"
          },
          {
            "$ref": "#/components/schemas/LinuxCredentialsModel"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "Standard": "#/components/schemas/StandardCredentialsModel",
            "Linux": "#/components/schemas/LinuxCredentialsModel"
          }
        }
      },
      "StandardCredentialsModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CredentialsModel"
          },
          {
            "type": "object",
            "properties": {
              "tag": {
                "description": "Tag used to identify the credentials record.",
                "type": "string"
              }
            }
          }
        ]
      },
      "CredentialsPasswordChangeSpec": {
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "description": "New password.",
            "type": "string"
          }
        }
      },
      "LinuxCredentialsModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CredentialsModel"
          },
          {
            "type": "object",
            "properties": {
              "tag": {
                "description": "Tag used to identify the credentials record.",
                "type": "string"
              },
              "SSHPort": {
                "description": "SSH port used to connect to a Linux server.",
                "type": "integer"
              },
              "autoElevated": {
                "description": "If *true*, the permissions of the account are automatically elevated to the root user.",
                "type": "boolean"
              },
              "addToSudoers": {
                "description": "If *true*, the account is automatically added to the sudoers file.",
                "type": "boolean"
              },
              "useSu": {
                "description": "If *true*, the `su` command is used for Linux distributions where the `sudo` command is not available.",
                "type": "boolean"
              },
              "privateKey": {
                "description": "Private key.",
                "type": "string"
              },
              "passphrase": {
                "description": "Passphrase that protects the private key.",
                "type": "string"
              }
            }
          }
        ]
      },
      "PrivateKeyChangeSpec": {
        "required": [
          "privateKey"
        ],
        "type": "object",
        "properties": {
          "privateKey": {
            "description": "New private key.",
            "type": "string"
          },
          "passphrase": {
            "description": "Passphrase that protects the private key.",
            "type": "string"
          }
        }
      },
      "JobImportSpecCollection": {
        "required": [
          "jobs"
        ],
        "type": "object",
        "properties": {
          "jobs": {
            "description": "Array of jobs.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobImportSpec"
            }
          }
        }
      },
      "JobImportSpec": {
        "required": [
          "description",
          "guestProcessing",
          "isHighPriority",
          "name",
          "schedule",
          "storage",
          "type",
          "virtualMachines"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the job.",
            "type": "string"
          },
          "description": {
            "description": "Description of the job.",
            "type": "string"
          },
          "isHighPriority": {
            "description": "If *true*, the job has a high priority in getting backup infrastructure resources.",
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/EJobType"
          },
          "virtualMachines": {
            "$ref": "#/components/schemas/BackupJobVirtualMachinesSpec"
          },
          "storage": {
            "$ref": "#/components/schemas/BackupJobStorageImportModel"
          },
          "guestProcessing": {
            "$ref": "#/components/schemas/BackupJobGuestProcessingImportModel"
          },
          "schedule": {
            "$ref": "#/components/schemas/BackupScheduleModel"
          }
        }
      },
      "BackupJobStorageImportModel": {
        "description": "Backup storage settings.",
        "required": [
          "backupProxies",
          "backupRepository",
          "retentionPolicy"
        ],
        "type": "object",
        "properties": {
          "backupRepository": {
            "$ref": "#/components/schemas/BackupRepositoryImportModel"
          },
          "backupProxies": {
            "$ref": "#/components/schemas/BackupJobImportProxiesModel"
          },
          "retentionPolicy": {
            "$ref": "#/components/schemas/BackupJobRetentionPolicySettingsModel"
          },
          "gfsPolicy": {
            "$ref": "#/components/schemas/GFSPolicySettingsModel"
          },
          "advancedSettings": {
            "$ref": "#/components/schemas/BackupJobAdvancedSettingsModel"
          }
        }
      },
      "BackupRepositoryImportModel": {
        "description": "Backup repository.",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the backup repository.",
            "type": "string"
          },
          "tag": {
            "description": "Tag that identifies the backup repository.",
            "type": "string"
          }
        }
      },
      "BackupJobImportProxiesModel": {
        "description": "Backup proxies.",
        "required": [
          "automaticSelection"
        ],
        "type": "object",
        "properties": {
          "automaticSelection": {
            "description": "If *true*, backup proxies are detected and assigned automatically.",
            "type": "boolean",
            "default": true
          },
          "proxies": {
            "description": "Array of backup proxies.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackupProxyImportModel"
            }
          }
        }
      },
      "BackupProxyImportModel": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the backup proxy.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/EBackupProxyImportType"
          },
          "tag": {
            "description": "Tag assigned to the backup proxy.",
            "type": "string"
          }
        }
      },
      "EBackupProxyImportType": {
        "type": "string",
        "enum": [
          "vmware"
        ]
      },
      "BackupJobGuestProcessingImportModel": {
        "description": "Guest processing settings.",
        "required": [
          "applicationAwareProcessing",
          "guestFileSystemIndexing"
        ],
        "type": "object",
        "properties": {
          "applicationAwareProcessing": {
            "$ref": "#/components/schemas/BackupApplicationAwareProcessingImportModel"
          },
          "guestFileSystemIndexing": {
            "$ref": "#/components/schemas/GuestFileSystemIndexingModel"
          },
          "guestInteractionProxies": {
            "$ref": "#/components/schemas/GuestInteractionProxiesSettingsImportModel"
          },
          "guestCredentials": {
            "$ref": "#/components/schemas/GuestOsCredentialsImportModel"
          }
        }
      },
      "BackupApplicationAwareProcessingImportModel": {
        "description": "Application-aware processing settings.",
        "required": [
          "isEnabled"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, application-aware processing is enabled.",
            "type": "boolean"
          },
          "appSettings": {
            "description": "Array of VMware vSphere objects and their application settings.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackupApplicationSettingsImportModel"
            }
          }
        }
      },
      "BackupApplicationSettingsImportModel": {
        "required": [
          "vmObject",
          "vss"
        ],
        "type": "object",
        "properties": {
          "vmObject": {
            "$ref": "#/components/schemas/VmwareObjectModel"
          },
          "vss": {
            "$ref": "#/components/schemas/EApplicationSettingsVSS"
          },
          "usePersistentGuestAgent": {
            "description": "If *true*, persistent guest agent is used.",
            "type": "boolean"
          },
          "transactionLogs": {
            "$ref": "#/components/schemas/ETransactionLogsSettings"
          },
          "sql": {
            "$ref": "#/components/schemas/BackupSQLSettingsImportModel"
          },
          "oracle": {
            "$ref": "#/components/schemas/BackupOracleSettingsImportModel"
          },
          "exclusions": {
            "$ref": "#/components/schemas/BackupFSExclusionsModel"
          },
          "scripts": {
            "$ref": "#/components/schemas/BackupScriptSettingsModel"
          }
        }
      },
      "BackupSQLSettingsImportModel": {
        "description": "Microsoft SQL Server transaction log settings.",
        "required": [
          "logsProcessing"
        ],
        "type": "object",
        "properties": {
          "logsProcessing": {
            "$ref": "#/components/schemas/ESQLLogsProcessing"
          },
          "backupMinsCount": {
            "description": "Frequency of transaction log backup, in minutes.",
            "type": "integer"
          },
          "retainLogBackups": {
            "$ref": "#/components/schemas/ERetainLogBackupsType"
          },
          "keepDaysCount": {
            "description": "Number of days to keep transaction logs in the backup repository.",
            "type": "integer"
          },
          "logShippingServers": {
            "$ref": "#/components/schemas/BackupLogShippingServersImportModel"
          }
        }
      },
      "BackupLogShippingServersImportModel": {
        "description": "Log shipping server used to transport logs.",
        "required": [
          "autoSelection"
        ],
        "type": "object",
        "properties": {
          "autoSelection": {
            "description": "If *true*, Veeam Backup & Replication chooses an optimal log shipping server automatically.",
            "type": "boolean"
          },
          "shippingServerNames": {
            "description": "Array of servers that are explicitly selected for log shipping.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BackupOracleSettingsImportModel": {
        "description": "Oracle archived log settings.",
        "required": [
          "archiveLogs",
          "useGuestCredentials"
        ],
        "type": "object",
        "properties": {
          "useGuestCredentials": {
            "description": "If *true*, Veeam Backup & Replication uses credentials specified in the guest processing settings.",
            "type": "boolean"
          },
          "credentials": {
            "$ref": "#/components/schemas/CredentialsImportModel"
          },
          "archiveLogs": {
            "$ref": "#/components/schemas/EBackupOracleLogsSettings"
          },
          "deleteHoursCount": {
            "description": "Time period in hours to keep archived logs. This parameter should be specified if the `EBackupOracleLogsSettings` value is *deleteExpiredHours*.",
            "type": "integer"
          },
          "deleteGBsCount": {
            "description": "Maximum size for archived logs in GB. This parameter should be specified if the `EBackupOracleLogsSettings` value is *deleteExpiredGBs*.",
            "type": "integer"
          },
          "backupLogs": {
            "description": "If *true*, archived logs are backed up.",
            "type": "boolean"
          },
          "backupMinsCount": {
            "description": "Frequency of archived log backup, in minutes.",
            "type": "integer"
          },
          "retainLogBackups": {
            "$ref": "#/components/schemas/ERetainLogBackupsType"
          },
          "keepDaysCount": {
            "description": "Number of days to keep archived logs.",
            "type": "integer"
          },
          "logShippingServers": {
            "$ref": "#/components/schemas/BackupLogShippingServersImportModel"
          }
        }
      },
      "GuestOsCredentialsImportModel": {
        "description": "VM custom credentials.",
        "type": "object",
        "properties": {
          "creds": {
            "$ref": "#/components/schemas/CredentialsImportModel"
          },
          "credentialsPerMachine": {
            "description": "Individual credentials for VMs.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GuestOsCredentialsPerMachineImportModel"
            }
          }
        }
      },
      "GuestOsCredentialsPerMachineImportModel": {
        "required": [
          "vmObject"
        ],
        "type": "object",
        "properties": {
          "windowsCreds": {
            "$ref": "#/components/schemas/CredentialsImportModel"
          },
          "linuxCreds": {
            "$ref": "#/components/schemas/CredentialsImportModel"
          },
          "vmObject": {
            "$ref": "#/components/schemas/VmwareObjectModel"
          }
        }
      },
      "CredentialsImportModel": {
        "description": "Credentials used for connection.",
        "required": [
          "credentialsName"
        ],
        "type": "object",
        "properties": {
          "credentialsName": {
            "description": "User name, account name or access key.",
            "type": "string"
          },
          "credentialsTag": {
            "description": "Tag used to identify the credentials record.",
            "type": "string"
          }
        }
      },
      "GuestInteractionProxiesSettingsImportModel": {
        "description": "Guest interaction proxy used to deploy the runtime process on the VM guest OS.",
        "required": [
          "automaticSelection"
        ],
        "type": "object",
        "properties": {
          "automaticSelection": {
            "description": "If *true*, Veeam Backup & Replication automatically selects the guest interaction proxy.",
            "type": "boolean",
            "default": true
          },
          "proxies": {
            "description": "Array of proxies specified explicitly. The array must contain Microsoft Windows servers added to the backup infrastructure only.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "JobExportSpec": {
        "type": "object",
        "properties": {
          "ids": {
            "description": "Array of job IDs.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "types": {
            "description": "Array of job types.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "names": {
            "description": "Array of job names. Wildcard characters are supported.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ViRootFilters": {
        "type": "object",
        "properties": {
          "skip": {
            "description": "Number of VMware vSphere servers to skip.",
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "description": "Maximum number of VMware vSphere servers to return.",
            "type": "integer",
            "format": "int32"
          },
          "orderColumn": {
            "$ref": "#/components/schemas/EViRootFiltersOrderColumn"
          },
          "orderAsc": {
            "description": "Sorts VMware vSphere servers in the ascending order by the `orderColumn` parameter.",
            "type": "boolean"
          },
          "nameFilter": {
            "description": "Filters VMware vSphere servers by the `nameFilter` pattern. The pattern can match any VMware vSphere server parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.",
            "type": "string"
          }
        }
      },
      "EViRootFiltersOrderColumn": {
        "description": "Sorts VMware vSphere servers by one of the VMware vSphere server parameters.",
        "type": "string",
        "enum": [
          "Name",
          "Type"
        ]
      },
      "ViRootsResult": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of VMware vSphere servers.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VmwareObjectSizeModel"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationResult"
          }
        }
      },
      "VCenterInventoryFilters": {
        "type": "object",
        "properties": {
          "skip": {
            "description": "Number of objects to skip.",
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "description": "Maximum number of objects to return.",
            "type": "integer",
            "format": "int32"
          },
          "orderColumn": {
            "$ref": "#/components/schemas/EvCentersInventoryFiltersOrderColumn"
          },
          "orderAsc": {
            "description": "Sorts objects in the ascending order by the `orderColumn` parameter.",
            "type": "boolean"
          },
          "objectIdFilter": {
            "description": "Filters objects by object ID.",
            "type": "string"
          },
          "hierarchyTypeFilter": {
            "$ref": "#/components/schemas/EHierarchyType"
          },
          "nameFilter": {
            "description": "Filters objects by the `nameFilter` pattern. The pattern can match any object parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.",
            "type": "string"
          },
          "typeFilter": {
            "$ref": "#/components/schemas/EVmwareInventoryType"
          },
          "parentContainerNameFilter": {
            "description": "Filters objects by name of the parent container.",
            "type": "string"
          }
        }
      },
      "EHierarchyType": {
        "description": "Hierarchy type.",
        "type": "string",
        "enum": [
          "HostsAndClusters",
          "DatastoresAndVms",
          "HostsAndDatastores",
          "VmsAndTemplates",
          "VmsAndTags",
          "Network"
        ]
      },
      "EvCentersInventoryFiltersOrderColumn": {
        "description": "Sorts vCenter Servers by one of the job parameters.",
        "type": "string",
        "enum": [
          "Name",
          "ObjectId",
          "Type"
        ]
      },
      "VCenterInventoryResult": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of vCenter Servers.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VmwareObjectSizeModel"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationResult"
          }
        }
      },
      "CredentialsImportSpecCollection": {
        "required": [
          "credentials"
        ],
        "type": "object",
        "properties": {
          "credentials": {
            "description": "Array of credentials.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CredentialsImportSpec"
            }
          }
        }
      },
      "CredentialsImportSpec": {
        "required": [
          "tag",
          "type",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "description": "User name.",
            "type": "string"
          },
          "password": {
            "description": "Password.",
            "type": "string"
          },
          "description": {
            "description": "Description of the credentials record.",
            "type": "string"
          },
          "tag": {
            "description": "Tag used to identify the credentials record.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ECredentialsType"
          },
          "linuxAdditionalSettings": {
            "$ref": "#/components/schemas/CredentialsLinuxSettingsImportModel"
          }
        }
      },
      "CredentialsLinuxSettingsImportModel": {
        "description": "Additional Linux account settings.",
        "type": "object",
        "properties": {
          "SSHPort": {
            "description": "SSH port used to connect to a Linux server.",
            "type": "integer"
          },
          "autoElevated": {
            "description": "If *true*, the permissions of the account are automatically elevated to the root user.",
            "type": "boolean"
          },
          "addToSudoers": {
            "description": "If *true*, the account is automatically added to the sudoers file.",
            "type": "boolean"
          },
          "useSu": {
            "description": "If *true*, the `su` command is used for Linux distributions where the `sudo` command is not available.",
            "type": "boolean"
          },
          "privateKey": {
            "description": "Private key.",
            "type": "string"
          },
          "passphrase": {
            "description": "Passphrase that protects the private key.",
            "type": "string"
          },
          "rootPassword": {
            "description": "Password for the root account.",
            "type": "string"
          }
        }
      },
      "CredentialsExportSpec": {
        "type": "object",
        "properties": {
          "showHiddenCreds": {
            "description": "If *true*, service credentials are exported.",
            "type": "boolean"
          },
          "ids": {
            "description": "Array of credentials IDs.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "types": {
            "description": "Array of credentials types.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ECredentialsType"
            }
          },
          "names": {
            "uniqueItems": true,
            "type": "array",
            "description": "Array of credentials user names. Wildcard characters are supported.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CloudCredentialsExportSpec": {
        "type": "object",
        "properties": {
          "ids": {
            "description": "Array of cloud credentials IDs that you want to export.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "types": {
            "description": "Array of cloud credentials types that you want to export.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ECloudCredentialsType"
            }
          },
          "names": {
            "uniqueItems": true,
            "type": "array",
            "description": "Array of cloud credentials user names. Wildcard characters are supported.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CloudCredentialsImportSpecCollection": {
        "required": [
          "credentials"
        ],
        "type": "object",
        "properties": {
          "azureStorage": {
            "description": "Array of Azure storage accounts.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AzureStorageCloudCredentialsImportSpec"
            }
          },
          "azureCompute": {
            "description": "Array of Azure compute accounts.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AzureComputeCloudCredentialsImportSpec"
            }
          },
          "amazon": {
            "description": "Array of AWS accounts.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AmazonCloudCredentialsImportSpec"
            }
          },
          "google": {
            "description": "Array of Google accounts.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GoogleCloudCredentialsImportSpec"
            }
          }
        }
      },
      "AzureStorageCloudCredentialsImportSpec": {
        "required": [
          "type",
          "tag",
          "account",
          "sharedKey"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ECloudCredentialsType"
          },
          "description": {
            "description": "Description of the cloud credentials record.",
            "type": "string"
          },
          "tag": {
            "description": "Tag used to identify the cloud credentials record.",
            "type": "string"
          },
          "account": {
            "description": "Name of the Azure storage account.",
            "type": "string"
          },
          "sharedKey": {
            "description": "Shared key of the Azure storage account.",
            "type": "string"
          }
        }
      },
      "AzureComputeCloudCredentialsImportSpec": {
        "required": [
          "type",
          "tag",
          "connectionName",
          "existingAccount"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ECloudCredentialsType"
          },
          "description": {
            "description": "Description of the cloud credentials record.",
            "type": "string"
          },
          "tag": {
            "description": "Tag used to identify the cloud credentials record.",
            "type": "string"
          },
          "connectionName": {
            "description": "Name under which the cloud credentials record is shown in Veeam Backup & Replication.",
            "type": "string"
          },
          "existingAccount": {
            "$ref": "#/components/schemas/AzureComputeCredentialsExistingAccountSpec"
          }
        }
      },
      "AmazonCloudCredentialsImportSpec": {
        "required": [
          "type",
          "tag",
          "accessKey",
          "secretKey"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ECloudCredentialsType"
          },
          "description": {
            "description": "Description of the cloud credentials record.",
            "type": "string"
          },
          "tag": {
            "description": "Tag used to identify the cloud credentials record.",
            "type": "string"
          },
          "accessKey": {
            "description": "ID of the access key.",
            "type": "string"
          },
          "secretKey": {
            "description": "Secret key.",
            "type": "string"
          }
        }
      },
      "GoogleCloudCredentialsImportSpec": {
        "required": [
          "type",
          "tag",
          "accessKey",
          "secretKey"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ECloudCredentialsType"
          },
          "description": {
            "description": "Description of the cloud credentials record.",
            "type": "string"
          },
          "tag": {
            "description": "Tag used to identify the cloud credentials record.",
            "type": "string"
          },
          "accessKey": {
            "description": "Access ID of a Google HMAC key.",
            "type": "string"
          },
          "secretKey": {
            "description": "Secret linked to the access ID.",
            "type": "string"
          }
        }
      },
      "ProxyExportSpec": {
        "type": "object",
        "properties": {
          "ids": {
            "description": "Array of backup proxy IDs.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "types": {
            "description": "Array of backup proxy types.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EProxyType"
            }
          },
          "names": {
            "uniqueItems": true,
            "type": "array",
            "description": "Array of backup proxy names. Wildcard characters are supported.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ProxyImportSpecCollection": {
        "required": [
          "proxies"
        ],
        "type": "object",
        "properties": {
          "proxies": {
            "description": "Array of backup proxies.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProxyImportSpec"
            }
          }
        }
      },
      "ProxyImportSpec": {
        "required": [
          "description",
          "server",
          "type"
        ],
        "type": "object",
        "properties": {
          "description": {
            "description": "Description of the backup proxy.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/EProxyType"
          },
          "server": {
            "$ref": "#/components/schemas/ProxyServerSettingsImportSpec"
          }
        }
      },
      "ProxyServerSettingsImportSpec": {
        "description": "Settings of the server that is used as a backup proxy.",
        "required": [
          "hostName"
        ],
        "type": "object",
        "properties": {
          "hostName": {
            "description": "Name of the server.",
            "type": "string"
          },
          "hostTag": {
            "description": "Tag assigned to the server.",
            "type": "string"
          },
          "transportMode": {
            "$ref": "#/components/schemas/EBackupProxyTransportMode"
          },
          "failoverToNetwork": {
            "description": "(For the Direct storage access and Virtual appliance transport modes) If *true*, Veeam Backup & Replication failovers to the network transport mode in case the primary mode fails or is unavailable.",
            "type": "boolean"
          },
          "hostToProxyEncryption": {
            "description": "(For the Network mode) If *true*, VM data is transferred over an encrypted TLS connection.",
            "type": "boolean"
          },
          "connectedDatastores": {
            "$ref": "#/components/schemas/ProxyDatastoreSettingsModel"
          },
          "maxTaskCount": {
            "description": "Maximum number of concurrent tasks.",
            "type": "integer"
          }
        }
      },
      "ManageServerExportSpec": {
        "type": "object",
        "properties": {
          "ids": {
            "description": "Array of server IDs.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "types": {
            "description": "Array of server types.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EManagedServerType"
            }
          },
          "names": {
            "description": "Array of server names. Wildcard characters are supported.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ManageServerImportSpecCollection": {
        "type": "object",
        "properties": {
          "windowsHosts": {
            "description": "Array of managed Microsoft Windows servers.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WindowsHostImportSpec"
            }
          },
          "linuxHosts": {
            "description": "Array of managed Linux servers.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinuxHostImportSpec"
            }
          },
          "viHosts": {
            "description": "Array of VMware vSphere servers.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViHostImportSpec"
            }
          }
        }
      },
      "WindowsHostImportSpec": {
        "required": [
          "description",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Full DNS name or IP address of the server.",
            "type": "string"
          },
          "description": {
            "description": "Description of the server.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/EManagedServerType"
          },
          "credentials": {
            "$ref": "#/components/schemas/CredentialsImportModel"
          },
          "networkSettings": {
            "$ref": "#/components/schemas/WindowsHostPortsModel"
          }
        }
      },
      "LinuxHostImportSpec": {
        "required": [
          "credentials",
          "description",
          "name",
          "type",
          "sshFingerprint"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Full DNS name or IP address of the server.",
            "type": "string"
          },
          "description": {
            "description": "Description of the server.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/EManagedServerType"
          },
          "credentials": {
            "$ref": "#/components/schemas/CredentialsImportModel"
          },
          "sshSettings": {
            "$ref": "#/components/schemas/LinuxHostSSHSettingsModel"
          },
          "sshFingerprint": {
            "type": "string",
            "description": "SSH key fingerprint used to verify the server identity."
          }
        }
      },
      "ViHostImportSpec": {
        "required": [
          "credentials",
          "description",
          "name",
          "type",
          "viHostType"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Full DNS name or IP address of the server.",
            "type": "string"
          },
          "description": {
            "description": "Description of the server.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/EManagedServerType"
          },
          "viHostType": {
            "$ref": "#/components/schemas/EViHostType"
          },
          "credentials": {
            "$ref": "#/components/schemas/CredentialsImportModel"
          },
          "port": {
            "description": "Port used to communicate with the server.",
            "type": "integer"
          },
          "certificateThumbprint": {
            "type": "string",
            "description": "Certificate thumbprint used to verify the server identity."
          }
        }
      },
      "RepositoryExportSpec": {
        "type": "object",
        "properties": {
          "ids": {
            "description": "Array of repository IDs.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "types": {
            "description": "Array of repository types.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ERepositoryType"
            }
          },
          "names": {
            "description": "Array of repository names. Wildcard characters are supported.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RepositoryImportSpecCollection": {
        "type": "object",
        "properties": {
          "WindowsLocalRepositories": {
            "description": "Array of Microsoft Windows-based repositories.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WindowsLocalStorageImportSpec"
            }
          },
          "LinuxLocalRepositories": {
            "description": "Array of Microsoft Linux-based repositories.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinuxLocalStorageImportSpec"
            }
          },
          "SmbRepositories": {
            "description": "Array of SMB backup repositories.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SmbStorageImportSpec"
            }
          },
          "NfsRepositories": {
            "description": "Array of NFS backup repositories.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NfsStorageImportSpec"
            }
          },
          "AzureBlobStorages": {
            "description": "Array of Microsoft Azure Blob storages.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AzureBlobStorageImportSpec"
            }
          },
          "AzureDataBoxStorages": {
            "description": "Array of Microsoft Azure Data Box storages.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AzureDataBoxStorageImportSpec"
            }
          },
          "AmazonS3Storages": {
            "description": "Array of Amazon S3 storages.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AmazonS3StorageImportSpec"
            }
          },
          "AmazonSnowballEdgeStorages": {
            "description": "Array of AWS Snowball Edge storages.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AmazonSnowballEdgeStorageImportSpec"
            }
          },
          "S3CompatibleStorages": {
            "description": "Array of S3 compatible storages.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/S3CompatibleStorageImportSpec"
            }
          },
          "GoogleCloudStorages": {
            "description": "Array of Google Cloud storages.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GoogleCloudStorageImportSpec"
            }
          },
          "IBMCloudStorages": {
            "description": "Array of IBM Cloud storages.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IBMCloudStorageImportSpec"
            }
          },
          "AmazonS3GlacierStorages": {
            "description": "Array of Amazon S3 Glacier storages.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AmazonS3GlacierStorageImportSpec"
            }
          },
          "AzureArchiveStorages": {
            "description": "Array of Microsoft Azure Archive storages.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AzureArchiveStorageImportSpec"
            }
          },
          "WasabiCloudStorages": {
            "description": "Array of Wasabi Cloud storages.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WasabiCloudStorageImportSpec"
            }
          },
          "LinuxHardenedRepositories": {
            "description": "Array of Linux hardened repositories.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinuxHardenedStorageImportSpec"
            }
          }
        }
      },
      "WindowsLocalStorageImportSpec": {
        "required": [
          "description",
          "hostName",
          "kind",
          "mountServer",
          "name",
          "repository",
          "tag",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the backup repository.",
            "type": "string"
          },
          "description": {
            "description": "Description of the backup repository.",
            "type": "string"
          },
          "tag": {
            "description": "Tag that identifies the backup repository.",
            "type": "string"
          },
          "hostName": {
            "description": "ID of the server that is used as a backup repository.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ERepositoryType"
          },
          "repository": {
            "$ref": "#/components/schemas/WindowsLocalRepositorySettingsModel"
          },
          "mountServer": {
            "$ref": "#/components/schemas/MountServerSettingsImportSpec"
          }
        }
      },
      "LinuxLocalStorageImportSpec": {
        "required": [
          "description",
          "hostName",
          "kind",
          "mountServer",
          "name",
          "repository",
          "tag",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the backup repository.",
            "type": "string"
          },
          "description": {
            "description": "Description of the backup repository.",
            "type": "string"
          },
          "tag": {
            "description": "Tag that identifies the backup repository.",
            "type": "string"
          },
          "hostName": {
            "description": "ID of the server that is used as a backup repository.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ERepositoryType"
          },
          "repository": {
            "$ref": "#/components/schemas/LinuxLocalRepositorySettingsModel"
          },
          "mountServer": {
            "$ref": "#/components/schemas/MountServerSettingsImportSpec"
          }
        }
      },
      "LinuxHardenedStorageImportSpec": {
        "required": [
          "description",
          "hostName",
          "kind",
          "mountServer",
          "name",
          "repository",
          "tag",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the backup repository.",
            "type": "string"
          },
          "description": {
            "description": "Description of the backup repository.",
            "type": "string"
          },
          "tag": {
            "description": "Tag that identifies the backup repository.",
            "type": "string"
          },
          "hostName": {
            "description": "ID of the server that is used as a backup repository.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ERepositoryType"
          },
          "repository": {
            "$ref": "#/components/schemas/LinuxHardenedRepositorySettingsModel"
          },
          "mountServer": {
            "$ref": "#/components/schemas/MountServerSettingsImportSpec"
          }
        }
      },
      "MountServerSettingsImportSpec": {
        "description": "Settings for the mount server that is used for file-level and application items restore.",
        "required": [
          "mountServerName",
          "vPowerNFSEnabled",
          "writeCacheFolder"
        ],
        "type": "object",
        "properties": {
          "mountServerName": {
            "description": "Name of the mount server.",
            "type": "string"
          },
          "writeCacheFolder": {
            "description": "Path to the folder used for writing cache during mount operations.",
            "type": "string"
          },
          "vPowerNFSEnabled": {
            "description": "If *true*, the vPower NFS Service is enabled on the mount server.",
            "type": "boolean"
          },
          "vPowerNFSPortSettings": {
            "$ref": "#/components/schemas/VPowerNFSPortSettingsModel"
          }
        }
      },
      "SmbStorageImportSpec": {
        "required": [
          "description",
          "kind",
          "mountServer",
          "name",
          "repository",
          "share",
          "tag",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the backup repository.",
            "type": "string"
          },
          "description": {
            "description": "Description of the backup repository.",
            "type": "string"
          },
          "tag": {
            "description": "Tag that identifies the backup repository.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ERepositoryType"
          },
          "share": {
            "$ref": "#/components/schemas/SmbRepositoryShareSettingsSpec"
          },
          "repository": {
            "$ref": "#/components/schemas/NetworkRepositorySettingsModel"
          },
          "mountServer": {
            "$ref": "#/components/schemas/MountServerSettingsImportSpec"
          }
        }
      },
      "NfsStorageImportSpec": {
        "required": [
          "description",
          "kind",
          "mountServer",
          "name",
          "repository",
          "share",
          "tag",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the backup repository.",
            "type": "string"
          },
          "description": {
            "description": "Description of the backup repository.",
            "type": "string"
          },
          "tag": {
            "description": "Tag that identifies the backup repository.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ERepositoryType"
          },
          "share": {
            "$ref": "#/components/schemas/NfsRepositoryShareSettingsSpec"
          },
          "repository": {
            "$ref": "#/components/schemas/NetworkRepositorySettingsModel"
          },
          "mountServer": {
            "$ref": "#/components/schemas/MountServerSettingsImportSpec"
          }
        }
      },
      "SmbRepositoryShareSettingsSpec": {
        "description": "Share settings.",
        "required": [
          "credentials",
          "sharePath"
        ],
        "type": "object",
        "properties": {
          "sharePath": {
            "description": "Path to the shared folder that is used as a backup repository.",
            "type": "string"
          },
          "credentials": {
            "$ref": "#/components/schemas/CredentialsImportModel"
          },
          "gatewayServer": {
            "$ref": "#/components/schemas/RepositoryShareGatewayImportSpec"
          }
        }
      },
      "NfsRepositoryShareSettingsSpec": {
        "required": [
          "sharePath"
        ],
        "type": "object",
        "properties": {
          "sharePath": {
            "description": "Path to the shared folder that is used as a backup repository.",
            "type": "string"
          },
          "gatewayServer": {
            "$ref": "#/components/schemas/RepositoryShareGatewayImportSpec"
          }
        }
      },
      "RepositoryShareGatewayImportSpec": {
        "description": "Settings for the gateway server.",
        "type": "object",
        "properties": {
          "autoSelect": {
            "description": "If *true*, Veeam Backup & Replication automatically selects a gateway server.",
            "type": "boolean"
          },
          "gatewayServerName": {
            "description": "Name of the gateway server.",
            "type": "string"
          }
        }
      },
      "AzureBlobStorageImportSpec": {
        "required": [
          "name",
          "description",
          "tag",
          "type",
          "account",
          "container",
          "mountServer"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the object storage repository.",
            "type": "string"
          },
          "description": {
            "description": "Description of the object storage repository.",
            "type": "string"
          },
          "tag": {
            "description": "Tag that identifies the object storage repository.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ERepositoryType"
          },
          "enableTaskLimit": {
            "description": "If *true*, the maximum number of concurrent tasks is limited.",
            "type": "boolean"
          },
          "maxTaskCount": {
            "description": "Maximum number of concurrent tasks.",
            "type": "integer"
          },
          "account": {
            "$ref": "#/components/schemas/AzureBlobStorageAccountImportModel"
          },
          "container": {
            "$ref": "#/components/schemas/AzureBlobStorageContainerModel"
          },
          "proxyAppliance": {
            "$ref": "#/components/schemas/AzureStorageProxyModel"
          },
          "mountServer": {
            "$ref": "#/components/schemas/MountServerSettingsImportSpec"
          }
        }
      },
      "AzureBlobStorageAccountImportModel": {
        "description": "Account used to access the Azure Blob storage.",
        "type": "object",
        "required": [
          "credentials",
          "regionType",
          "gatewayServer"
        ],
        "properties": {
          "credentials": {
            "$ref": "#/components/schemas/CloudCredentialsImportModel"
          },
          "regionType": {
            "$ref": "#/components/schemas/EAzureRegionType"
          },
          "connectionSettings": {
            "$ref": "#/components/schemas/ObjectStorageConnectionImportSpec"
          }
        }
      },
      "CloudCredentialsImportModel": {
        "description": "Cloud credentials used for connection.",
        "required": [
          "name",
          "tag",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "User name, account name or access key.",
            "type": "string"
          },
          "tag": {
            "description": "Tag used to identify the cloud credentials record.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ECloudCredentialsType"
          }
        }
      },
      "ObjectStorageConnectionImportSpec": {
        "description": "Object storage connection settings.",
        "type": "object",
        "required": [
          "connectionType"
        ],
        "properties": {
          "connectionType": {
            "$ref": "#/components/schemas/ERepositoryConnectionType"
          },
          "gatewayServers": {
            "description": "Array of gateway server IDs. The value is *null* if the connection type is *Direct*.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AzureDataBoxStorageImportSpec": {
        "required": [
          "name",
          "description",
          "tag",
          "type",
          "account",
          "container",
          "mountServer"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the object storage repository.",
            "type": "string"
          },
          "description": {
            "description": "Description of the object storage repository.",
            "type": "string"
          },
          "tag": {
            "description": "Tag that identifies the object storage repository.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ERepositoryType"
          },
          "enableTaskLimit": {
            "description": "If *true*, the maximum number of concurrent tasks is limited.",
            "type": "boolean"
          },
          "maxTaskCount": {
            "description": "Maximum number of concurrent tasks.",
            "type": "integer"
          },
          "account": {
            "$ref": "#/components/schemas/AzureDataBoxStorageAccountImportModel"
          },
          "container": {
            "$ref": "#/components/schemas/AzureDataBoxStorageContainerModel"
          },
          "mountServer": {
            "$ref": "#/components/schemas/MountServerSettingsImportSpec"
          }
        }
      },
      "AzureDataBoxStorageAccountImportModel": {
        "description": "Account used to access the Azure Data Box storage.",
        "type": "object",
        "required": [
          "serviceEndpoint",
          "credentials",
          "connectionSettings"
        ],
        "properties": {
          "serviceEndpoint": {
            "description": "Service endpoint address of the Azure Data Box device.",
            "type": "string"
          },
          "credentials": {
            "$ref": "#/components/schemas/CloudCredentialsImportModel"
          },
          "connectionSettings": {
            "$ref": "#/components/schemas/ObjectStorageConnectionImportSpec"
          }
        }
      },
      "AmazonS3StorageImportSpec": {
        "required": [
          "name",
          "description",
          "tag",
          "type",
          "account",
          "bucket",
          "mountServer"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the object storage repository.",
            "type": "string"
          },
          "description": {
            "description": "Description of the object storage repository.",
            "type": "string"
          },
          "tag": {
            "description": "Tag that identifies the object storage repository.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ERepositoryType"
          },
          "enableTaskLimit": {
            "description": "If *true*, the maximum number of concurrent tasks is limited.",
            "type": "boolean"
          },
          "maxTaskCount": {
            "description": "Maximum number of concurrent tasks.",
            "type": "integer"
          },
          "account": {
            "$ref": "#/components/schemas/AmazonS3StorageAccountImportModel"
          },
          "bucket": {
            "$ref": "#/components/schemas/AmazonS3StorageBucketModel"
          },
          "mountServer": {
            "$ref": "#/components/schemas/MountServerSettingsImportSpec"
          },
          "proxyAppliance": {
            "$ref": "#/components/schemas/AmazonS3StorageProxyApplianceModel"
          }
        }
      },
      "AmazonS3StorageAccountImportModel": {
        "description": "Account used to access the Amazon S3 storage.",
        "type": "object",
        "required": [
          "credentials",
          "regionType",
          "connectionSettings"
        ],
        "properties": {
          "credentials": {
            "$ref": "#/components/schemas/CloudCredentialsImportModel"
          },
          "regionType": {
            "$ref": "#/components/schemas/EAmazonRegionType"
          },
          "connectionSettings": {
            "$ref": "#/components/schemas/ObjectStorageConnectionImportSpec"
          }
        }
      },
      "AmazonSnowballEdgeStorageImportSpec": {
        "required": [
          "name",
          "description",
          "tag",
          "type",
          "account",
          "bucket",
          "mountServer"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the object storage repository.",
            "type": "string"
          },
          "description": {
            "description": "Description of the object storage repository.",
            "type": "string"
          },
          "tag": {
            "description": "Tag that identifies the object storage repository.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ERepositoryType"
          },
          "enableTaskLimit": {
            "description": "If *true*, the maximum number of concurrent tasks is limited.",
            "type": "boolean"
          },
          "maxTaskCount": {
            "description": "Maximum number of concurrent tasks.",
            "type": "integer"
          },
          "account": {
            "$ref": "#/components/schemas/AmazonSnowballEdgeStorageAccountImportModel"
          },
          "bucket": {
            "$ref": "#/components/schemas/AmazonSnowballEdgeStorageBucketModel"
          },
          "mountServer": {
            "$ref": "#/components/schemas/MountServerSettingsImportSpec"
          }
        }
      },
      "AmazonSnowballEdgeStorageAccountImportModel": {
        "description": "AWS account used to access the AWS Snowball Edge storage.",
        "type": "object",
        "required": [
          "servicePoint",
          "regionId",
          "credentials",
          "connectionSettings"
        ],
        "properties": {
          "servicePoint": {
            "description": "Service point address and port number of the AWS Snowball Edge device.",
            "type": "string"
          },
          "regionId": {
            "description": "For AWS Snowball Edge, the region is *snow*.",
            "type": "string"
          },
          "credentials": {
            "$ref": "#/components/schemas/CloudCredentialsImportModel"
          },
          "connectionSettings": {
            "$ref": "#/components/schemas/ObjectStorageConnectionImportSpec"
          }
        }
      },
      "S3CompatibleStorageImportSpec": {
        "required": [
          "name",
          "description",
          "tag",
          "type",
          "account",
          "bucket",
          "mountServer"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the object storage repository.",
            "type": "string"
          },
          "description": {
            "description": "Description of the object storage repository.",
            "type": "string"
          },
          "tag": {
            "description": "Tag that identifies the object storage repository.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ERepositoryType"
          },
          "enableTaskLimit": {
            "description": "If *true*, the maximum number of concurrent tasks is limited.",
            "type": "boolean"
          },
          "maxTaskCount": {
            "description": "Maximum number of concurrent tasks.",
            "type": "integer"
          },
          "account": {
            "$ref": "#/components/schemas/S3CompatibleStorageAccountImportModel"
          },
          "bucket": {
            "$ref": "#/components/schemas/S3CompatibleStorageBucketModel"
          },
          "mountServer": {
            "$ref": "#/components/schemas/MountServerSettingsImportSpec"
          },
          "proxyAppliance": {
            "$ref": "#/components/schemas/S3CompatibleProxyModel"
          }
        }
      },
      "S3CompatibleStorageAccountImportModel": {
        "description": "Account used to access the S3 compatible storage.",
        "type": "object",
        "required": [
          "servicePoint",
          "regionId",
          "credentials",
          "connectionSettings"
        ],
        "properties": {
          "servicePoint": {
            "description": "Endpoint address of the storage.",
            "type": "string"
          },
          "regionId": {
            "description": "ID of a region where the storage is located.",
            "type": "string"
          },
          "credentials": {
            "$ref": "#/components/schemas/CloudCredentialsImportModel"
          },
          "connectionSettings": {
            "$ref": "#/components/schemas/ObjectStorageConnectionImportSpec"
          }
        }
      },
      "GoogleCloudStorageImportSpec": {
        "required": [
          "name",
          "description",
          "tag",
          "type",
          "account",
          "bucket",
          "mountServer"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the object storage repository.",
            "type": "string"
          },
          "description": {
            "description": "Description of the object storage repository.",
            "type": "string"
          },
          "tag": {
            "description": "Tag that identifies the object storage repository.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ERepositoryType"
          },
          "enableTaskLimit": {
            "description": "If *true*, the maximum number of concurrent tasks is limited.",
            "type": "boolean"
          },
          "maxTaskCount": {
            "description": "Maximum number of concurrent tasks.",
            "type": "integer"
          },
          "account": {
            "$ref": "#/components/schemas/GoogleCloudStorageAccountImportModel"
          },
          "bucket": {
            "$ref": "#/components/schemas/GoogleCloudStorageBucketModel"
          },
          "mountServer": {
            "$ref": "#/components/schemas/MountServerSettingsImportSpec"
          }
        }
      },
      "GoogleCloudStorageAccountImportModel": {
        "description": "Account used to access the Google Cloud storage.",
        "type": "object",
        "required": [
          "credentials",
          "regionId",
          "connectionSettings"
        ],
        "properties": {
          "credentials": {
            "$ref": "#/components/schemas/CloudCredentialsImportModel"
          },
          "regionId": {
            "description": "ID of a region where the storage bucket is located.",
            "type": "string"
          },
          "connectionSettings": {
            "$ref": "#/components/schemas/ObjectStorageConnectionImportSpec"
          }
        }
      },
      "IBMCloudStorageImportSpec": {
        "required": [
          "name",
          "description",
          "tag",
          "type",
          "account",
          "bucket",
          "mountServer"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the object storage repository.",
            "type": "string"
          },
          "description": {
            "description": "Description of the object storage repository.",
            "type": "string"
          },
          "tag": {
            "description": "Tag that identifies the object storage repository.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ERepositoryType"
          },
          "enableTaskLimit": {
            "description": "If *true*, the maximum number of concurrent tasks is limited.",
            "type": "boolean"
          },
          "maxTaskCount": {
            "description": "Maximum number of concurrent tasks.",
            "type": "integer"
          },
          "account": {
            "$ref": "#/components/schemas/IBMCloudStorageAccountImportModel"
          },
          "bucket": {
            "$ref": "#/components/schemas/IBMCloudStorageBucketModel"
          },
          "mountServer": {
            "$ref": "#/components/schemas/MountServerSettingsImportSpec"
          },
          "proxyAppliance": {
            "$ref": "#/components/schemas/S3CompatibleProxyModel"
          }
        }
      },
      "IBMCloudStorageAccountImportModel": {
        "description": "Account used to access the IBM Cloud storage.",
        "type": "object",
        "required": [
          "servicePoint",
          "regionId",
          "credentials",
          "connectionSettings"
        ],
        "properties": {
          "servicePoint": {
            "description": "Endpoint address of the storage.",
            "type": "string"
          },
          "regionId": {
            "description": "ID of a region where the storage is located.",
            "type": "string"
          },
          "credentials": {
            "$ref": "#/components/schemas/CloudCredentialsImportModel"
          },
          "connectionSettings": {
            "$ref": "#/components/schemas/ObjectStorageConnectionImportSpec"
          }
        }
      },
      "AmazonS3GlacierStorageImportSpec": {
        "required": [
          "name",
          "description",
          "tag",
          "type",
          "account",
          "bucket",
          "mountServer"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the object storage repository.",
            "type": "string"
          },
          "description": {
            "description": "Description of the object storage repository.",
            "type": "string"
          },
          "tag": {
            "description": "Tag that identifies the object storage repository.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ERepositoryType"
          },
          "account": {
            "$ref": "#/components/schemas/AmazonS3StorageAccountImportModel"
          },
          "bucket": {
            "$ref": "#/components/schemas/AmazonS3GlacierStorageBucketModel"
          },
          "proxyAppliance": {
            "$ref": "#/components/schemas/AmazonS3StorageProxyApplianceModel"
          }
        }
      },
      "AzureArchiveStorageImportSpec": {
        "required": [
          "name",
          "description",
          "tag",
          "type",
          "account",
          "container",
          "mountServer"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the object storage repository.",
            "type": "string"
          },
          "description": {
            "description": "Description of the object storage repository.",
            "type": "string"
          },
          "tag": {
            "description": "Tag that identifies the object storage repository.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ERepositoryType"
          },
          "account": {
            "$ref": "#/components/schemas/AzureArchiveStorageAccountImportModel"
          },
          "container": {
            "$ref": "#/components/schemas/AzureArchiveStorageContainerModel"
          },
          "proxyAppliance": {
            "$ref": "#/components/schemas/AzureStorageProxyModel"
          }
        }
      },
      "AzureArchiveStorageAccountImportModel": {
        "description": "Account used to access the Azure Archive storage.",
        "type": "object",
        "required": [
          "credentials",
          "regionType",
          "gatewayServer"
        ],
        "properties": {
          "credentials": {
            "$ref": "#/components/schemas/CloudCredentialsImportModel"
          },
          "regionType": {
            "$ref": "#/components/schemas/EAzureRegionType"
          },
          "connectionSettings": {
            "$ref": "#/components/schemas/ObjectStorageConnectionImportSpec"
          }
        }
      },
      "WasabiCloudStorageImportSpec": {
        "required": [
          "name",
          "description",
          "tag",
          "type",
          "account",
          "bucket",
          "mountServer"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the object storage repository.",
            "type": "string"
          },
          "description": {
            "description": "Description of the object storage repository.",
            "type": "string"
          },
          "tag": {
            "description": "Tag that identifies the object storage repository.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ERepositoryType"
          },
          "enableTaskLimit": {
            "description": "If *true*, the maximum number of concurrent tasks is limited.",
            "type": "boolean"
          },
          "maxTaskCount": {
            "description": "Maximum number of concurrent tasks.",
            "type": "integer"
          },
          "account": {
            "$ref": "#/components/schemas/WasabiCloudStorageAccountImportModel"
          },
          "bucket": {
            "$ref": "#/components/schemas/WasabiCloudStorageBucketModel"
          },
          "mountServer": {
            "$ref": "#/components/schemas/MountServerSettingsImportSpec"
          },
          "proxyAppliance": {
            "$ref": "#/components/schemas/S3CompatibleProxyModel"
          }
        }
      },
      "WasabiCloudStorageAccountImportModel": {
        "description": "Account used to access the Wasabi Cloud storage.",
        "type": "object",
        "required": [
          "regionId",
          "credentials",
          "connectionSettings"
        ],
        "properties": {
          "regionId": {
            "description": "ID of a region where the storage is located.",
            "type": "string"
          },
          "credentials": {
            "$ref": "#/components/schemas/CloudCredentialsImportModel"
          },
          "connectionSettings": {
            "$ref": "#/components/schemas/ObjectStorageConnectionImportSpec"
          }
        }
      },
      "EncryptionPasswordsFilters": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "orderColumn": {
            "$ref": "#/components/schemas/EEncryptionPasswordsFiltersOrderColumn"
          },
          "orderAsc": {
            "type": "boolean"
          }
        }
      },
      "EEncryptionPasswordsFiltersOrderColumn": {
        "type": "string",
        "enum": [
          "Hint",
          "ModificationTime"
        ]
      },
      "EncryptionPasswordSpec": {
        "required": [
          "hint",
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "description": "Password for data encryption. If you lose the password, you will not be able to restore it.",
            "type": "string"
          },
          "hint": {
            "description": "Hint for the encryption password. Provide a meaningful hint that will help you recall the password.",
            "type": "string"
          },
          "tag": {
            "description": "Tag for the encryption password.",
            "type": "string"
          }
        }
      },
      "EncryptionPasswordsResult": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of encryption passwords.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EncryptionPasswordModel"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationResult"
          }
        }
      },
      "EncryptionPasswordModel": {
        "required": [
          "hint",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of the encryption password.",
            "type": "string",
            "format": "uuid"
          },
          "hint": {
            "description": "Hint for the encryption password.",
            "type": "string"
          },
          "modificationTime": {
            "description": "Date and time when the password was last modified.",
            "type": "string",
            "format": "date-time"
          },
          "tag": {
            "description": "Tag for the encryption password.",
            "type": "string"
          }
        }
      },
      "EncryptionPasswordImportSpecCollection": {
        "type": "object",
        "properties": {
          "encryptionPasswords": {
            "description": "Array of encryption passwords.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EncryptionPasswordImportSpec"
            }
          }
        }
      },
      "EncryptionPasswordImportSpec": {
        "required": [
          "hint",
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "description": "Password.",
            "type": "string"
          },
          "hint": {
            "description": "Hint for the encryption password.",
            "type": "string"
          },
          "tag": {
            "description": "Tag for the encryption password.",
            "type": "string"
          }
        }
      },
      "EncryptionPasswordExportSpec": {
        "type": "object",
        "properties": {
          "modificationTimeFrom": {
            "description": "Date and time when the password was last modified.",
            "type": "string",
            "format": "date-time"
          },
          "ids": {
            "description": "Array of password IDs.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "hints": {
            "description": "Array of password hints.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "description": "Array of password tags.",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BackupsFilters": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "orderColumn": {
            "$ref": "#/components/schemas/EBackupsFiltersOrderColumn"
          },
          "orderAsc": {
            "type": "boolean"
          },
          "nameFilter": {
            "type": "string"
          },
          "createdAfterFilter": {
            "type": "string",
            "format": "date-time"
          },
          "createdBeforeFilter": {
            "type": "string",
            "format": "date-time"
          },
          "platformIdFilter": {
            "type": "string",
            "format": "uuid"
          },
          "jobIdFilter": {
            "type": "string",
            "format": "uuid"
          },
          "policyTagFilter": {
            "type": "string"
          }
        }
      },
      "EBackupsFiltersOrderColumn": {
        "type": "string",
        "enum": [
          "Name",
          "CreationTime",
          "PlatformId",
          "JobId",
          "PolicyTag"
        ]
      },
      "BackupsResult": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of backups.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackupModel"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationResult"
          }
        }
      },
      "BackupModel": {
        "type": "object",
        "required": [
          "id",
          "name",
          "type",
          "platformName",
          "platformId",
          "creationTime",
          "repositoryId"
        ],
        "properties": {
          "id": {
            "description": "ID of the backup.",
            "type": "string",
            "format": "uuid"
          },
          "jobId": {
            "description": "ID of the job that created the backup.",
            "type": "string",
            "format": "uuid"
          },
          "policyTag": {
            "description": "Tag that identifies retention policy.",
            "type": "string"
          },
          "name": {
            "description": "Name of the job that created the backup.",
            "type": "string"
          },
          "platformName": {
            "$ref": "#/components/schemas/EPlatformType"
          },
          "platformId": {
            "description": "ID of the platform of the backup resource.",
            "type": "string",
            "format": "uuid"
          },
          "creationTime": {
            "description": "Date and time when the backup was created.",
            "type": "string",
            "format": "date-time"
          },
          "repositoryId": {
            "description": "ID of the backup repository where the backup is stored.",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "EPlatformType": {
        "description": "Platform name.",
        "type": "string",
        "enum": [
          "VMware",
          "HyperV",
          "Vcd",
          "WindowsPhysical",
          "LinuxPhysical",
          "Tape",
          "NasBackup",
          "CustomPlatform"
        ]
      },
      "BackupObjectsFilters": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "orderColumn": {
            "$ref": "#/components/schemas/EBackupObjectsFiltersOrderColumn"
          },
          "orderAsc": {
            "type": "boolean"
          },
          "nameFilter": {
            "type": "string"
          },
          "platformNameFilter": {
            "$ref": "#/components/schemas/EPlatformType"
          },
          "platformIdFilter": {
            "type": "string",
            "format": "uuid"
          },
          "typeFilter": {
            "type": "string"
          },
          "viTypeFilter": {
            "type": "string"
          }
        }
      },
      "EBackupObjectsFiltersOrderColumn": {
        "type": "string",
        "enum": [
          "Name",
          "ObjectId",
          "PlatformId",
          "Type"
        ]
      },
      "BackupObjectsResult": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of backup objects.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackupObjectModel"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationResult"
          }
        }
      },
      "BackupObjectModel": {
        "type": "object",
        "required": [
          "id",
          "platformName"
        ],
        "properties": {
          "id": {
            "description": "ID of the object.",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "Name of the object.",
            "type": "string"
          },
          "type": {
            "description": "Type of the object.",
            "type": "string"
          },
          "platformName": {
            "$ref": "#/components/schemas/EPlatformType"
          },
          "platformId": {
            "description": "Id of the platform where the object was created.",
            "type": "string",
            "format": "uuid"
          },
          "restorePointsCount": {
            "description": "Number of restore points.",
            "type": "integer"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/ViBackupObjectModel"
          }
        ],
        "discriminator": {
          "propertyName": "platformName",
          "mapping": {
            "VMware": "#/components/schemas/ViBackupObjectModel"
          }
        }
      },
      "ViBackupObjectModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BackupObjectModel"
          },
          {
            "type": "object",
            "required": [
              "objectId"
            ],
            "properties": {
              "objectId": {
                "description": "ID of the virtual infrastructure object (mo-ref or ID, depending on the virtualization platform).",
                "type": "string"
              },
              "viType": {
                "$ref": "#/components/schemas/EVmwareInventoryType"
              },
              "path": {
                "description": "Path to the object.",
                "type": "string"
              }
            }
          }
        ]
      },
      "ObjectRestorePointsFilters": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "orderColumn": {
            "$ref": "#/components/schemas/EObjectRestorePointsFiltersOrderColumn"
          },
          "orderAsc": {
            "type": "boolean"
          },
          "createdAfterFilter": {
            "type": "string",
            "format": "date-time"
          },
          "createdBeforeFilter": {
            "type": "string",
            "format": "date-time"
          },
          "nameFilter": {
            "type": "string"
          },
          "platformNameFilter": {
            "$ref": "#/components/schemas/EPlatformType"
          },
          "platformIdFilter": {
            "type": "string",
            "format": "uuid"
          },
          "backupIdFilter": {
            "type": "string",
            "format": "uuid"
          },
          "backupObjectIdFilter": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "EObjectRestorePointsFiltersOrderColumn": {
        "type": "string",
        "enum": [
          "CreationTime",
          "PlatformId",
          "BackupId"
        ]
      },
      "ObjectRestorePointsResult": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of restore points.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRestorePointModel"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationResult"
          }
        }
      },
      "ObjectRestorePointModel": {
        "type": "object",
        "required": [
          "id",
          "name",
          "paltformName",
          "platformId",
          "creationTime",
          "backupId",
          "allowedOperations"
        ],
        "properties": {
          "id": {
            "description": "ID of the restore point.",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "Object name.",
            "type": "string"
          },
          "platformName": {
            "$ref": "#/components/schemas/EPlatformType"
          },
          "platformId": {
            "description": "ID of a platform on which the object was created.",
            "type": "string",
            "format": "uuid"
          },
          "creationTime": {
            "description": "Date and time when the restore point was created.",
            "type": "string",
            "format": "date-time"
          },
          "backupId": {
            "description": "ID of a backup that contains the restore point.",
            "type": "string",
            "format": "uuid"
          },
          "allowedOperations": {
            "description": "Array of operations allowed for the restore point.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EObjectRestorePointOperation"
            }
          }
        }
      },
      "EObjectRestorePointOperation": {
        "type": "string",
        "enum": [
          "VmwareInstantRecoveryFcd"
        ]
      },
      "ObjectRestorePointDisksResult": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of disks.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRestorePointDiskModel"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationResult"
          }
        }
      },
      "ObjectRestorePointDiskModel": {
        "type": "object",
        "required": [
          "uid",
          "type",
          "name",
          "capacity",
          "state"
        ],
        "properties": {
          "uid": {
            "description": "ID of the disk.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/EDiskInfoType"
          },
          "name": {
            "description": "Name of the disk.",
            "type": "string"
          },
          "capacity": {
            "description": "Capacity of the disk.",
            "type": "integer",
            "format": "int64"
          },
          "state": {
            "$ref": "#/components/schemas/EDiskInfoProcessState"
          }
        }
      },
      "EDiskInfoProcessState": {
        "description": "Process state of the disk.",
        "type": "string",
        "enum": [
          "NotProcessed",
          "InProcessing",
          "PartiallyProcessed",
          "Processed"
        ]
      },
      "EDiskInfoType": {
        "description": "Type of the disk.",
        "type": "string",
        "enum": [
          "Unknown",
          "Simple",
          "Vi",
          "Hv",
          "HvRawDiskFile",
          "EndPoint"
        ]
      },
      "VmwareFcdInstantRecoverySpec": {
        "description": "Instant FCD Recovery configuration:<ul> <li>Restore point ID</li> <li>Destination cluster</li> <li>Disks for restore</li> <li>Write cache</li></ul>",
        "type": "object",
        "required": [
          "objectRestorePointId",
          "destinationCluster",
          "disksMapping"
        ],
        "properties": {
          "objectRestorePointId": {
            "description": "ID of the restore point.",
            "type": "string",
            "format": "uuid"
          },
          "destinationCluster": {
            "$ref": "#/components/schemas/VmwareObjectModel"
          },
          "disksMapping": {
            "description": "Array of disks for restore.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VmwareFcdInstantRecoveryDiskSpec"
            }
          },
          "writeCache": {
            "$ref": "#/components/schemas/VmwareFcdWriteCacheSpec"
          }
        }
      },
      "VmwareFcdInstantRecoveryMountsFilters": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "orderColumn": {
            "$ref": "#/components/schemas/EVmwareFcdInstantRecoveryMountsFiltersOrderColumn"
          },
          "orderAsc": {
            "type": "boolean"
          },
          "nameFilter": {
            "type": "string"
          },
          "stateFilter": {
            "$ref": "#/components/schemas/EInstantRecoveryMountState"
          }
        }
      },
      "EVmwareFcdInstantRecoveryMountsFiltersOrderColumn": {
        "type": "string",
        "enum": [
          "state",
          "name"
        ]
      },
      "VmwareFcdInstantRecoveryMountsResult": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of FCD mounts.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VmwareFcdInstantRecoveryMount"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationResult"
          }
        }
      },
      "VmwareFcdInstantRecoveryMount": {
        "type": "object",
        "required": [
          "id",
          "sessionId",
          "state",
          "spec"
        ],
        "properties": {
          "id": {
            "description": "Mount ID.",
            "type": "string",
            "format": "uuid"
          },
          "sessionId": {
            "description": "ID of the restore session. Use the ID to track the progress. For details, see [Get Session](#tag/Sessions/operation/GetSession).",
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "$ref": "#/components/schemas/EInstantRecoveryMountState"
          },
          "spec": {
            "$ref": "#/components/schemas/VmwareFcdInstantRecoverySpec"
          },
          "errorMessage": {
            "description": "Error message.",
            "type": "string"
          },
          "mountedDisks": {
            "description": "Array of mounted disks.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VmwareFcdInstantRecoveryDiskInfo"
            }
          }
        }
      },
      "VmwareFcdInstantRecoveryDiskSpec": {
        "type": "object",
        "required": [
          "nameInBackup",
          "mountedDiskName",
          "registeredFcdName"
        ],
        "properties": {
          "nameInBackup": {
            "description": "Disk name displayed in the backup.",
            "type": "string"
          },
          "mountedDiskName": {
            "description": "Name of the VMDK file that will be stored in the datastore.",
            "type": "string"
          },
          "registeredFcdName": {
            "description": "Name under which the disk will be registered as an FCD in the vCenter Managed Object Browser.",
            "type": "string"
          }
        }
      },
      "VmwareFcdInstantRecoveryDiskInfo": {
        "type": "object",
        "required": [
          "nameInBackup",
          "mountedDiskName",
          "registeredFcdName",
          "objectId"
        ],
        "properties": {
          "nameInBackup": {
            "description": "Disk name displayed in the backup.",
            "type": "string"
          },
          "mountedDiskName": {
            "description": "Name of the VMDK file that is stored in the datastore.",
            "type": "string"
          },
          "registeredFcdName": {
            "description": "Name under which the disk is registered as an FCD in the vCenter Managed Object Browser.",
            "type": "string"
          },
          "objectId": {
            "description": "FCD ID.",
            "type": "string"
          }
        }
      },
      "VmwareFcdWriteCacheSpec": {
        "description": "Write cache for recovered disks.",
        "type": "object",
        "required": [
          "redirectIsEnabled"
        ],
        "properties": {
          "redirectIsEnabled": {
            "description": "If *true*, cache redirection is enabled. In this case, all changes made to the recovered disks while the Instant FCD Recovery is active are redirected to the specified `cacheDatastore` associated with the `storagePolicy`.",
            "type": "boolean"
          },
          "cacheDatastore": {
            "$ref": "#/components/schemas/VmwareObjectModel"
          },
          "storagePolicy": {
            "$ref": "#/components/schemas/VmwareObjectModel"
          }
        }
      },
      "EInstantRecoveryMountState": {
        "description": "Mount state.",
        "type": "string",
        "enum": [
          "Failed",
          "Mounting",
          "Mounted",
          "Dismounting"
        ]
      },
      "ScaleOutRepositoriesResult": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of scale-out backup repositories.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScaleOutRepositoryModel"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationResult"
          }
        }
      },
      "ScaleOutRepositorySpec": {
        "type": "object",
        "required": [
          "name",
          "description",
          "performanceTier"
        ],
        "properties": {
          "name": {
            "description": "Name of the scale-out backup repository.",
            "type": "string"
          },
          "description": {
            "description": "Description of the scale-out backup repository.",
            "type": "string"
          },
          "tag": {
            "description": "Tag assigned to the scale-out backup repository.",
            "type": "string"
          },
          "performanceTier": {
            "$ref": "#/components/schemas/PerformanceTierSpec"
          },
          "placementPolicy": {
            "$ref": "#/components/schemas/PlacementPolicyModel"
          },
          "capacityTier": {
            "$ref": "#/components/schemas/CapacityTierModel"
          },
          "archiveTier": {
            "$ref": "#/components/schemas/ArchiveTierModel"
          }
        }
      },
      "PerformanceTierSpec": {
        "description": "Performance tier.",
        "type": "object",
        "required": [
          "performanceExtents"
        ],
        "properties": {
          "performanceExtents": {
            "description": "Array of performance extents.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformanceExtentSpec"
            }
          },
          "advancedSettings": {
            "$ref": "#/components/schemas/PerformanceTierAdvancedSettingsModel"
          }
        }
      },
      "PerformanceExtentSpec": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "ID of a backup repository added as a performance extent.",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ScaleOutRepositoryModel": {
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "performanceTier"
        ],
        "properties": {
          "id": {
            "description": "ID of the scale-out backup repository.",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "Name of the scale-out backup repository.",
            "type": "string"
          },
          "description": {
            "description": "Description of the scale-out backup repository.",
            "type": "string"
          },
          "tag": {
            "description": "Tag assigned to the scale-out backup repository.",
            "type": "string"
          },
          "performanceTier": {
            "$ref": "#/components/schemas/PerformanceTierModel"
          },
          "placementPolicy": {
            "$ref": "#/components/schemas/PlacementPolicyModel"
          },
          "capacityTier": {
            "$ref": "#/components/schemas/CapacityTierModel"
          },
          "archiveTier": {
            "$ref": "#/components/schemas/ArchiveTierModel"
          }
        }
      },
      "PerformanceTierModel": {
        "description": "Performance tier.",
        "type": "object",
        "required": [
          "performanceExtents"
        ],
        "properties": {
          "performanceExtents": {
            "description": "Array of performance extents.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformanceExtentModel"
            }
          },
          "advancedSettings": {
            "$ref": "#/components/schemas/PerformanceTierAdvancedSettingsModel"
          }
        }
      },
      "PerformanceExtentModel": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "description": "ID of the backup repository added as a performance extent.",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "Name of the backup repository added as a performance extent.",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ERepositoryExtentStatusType"
          }
        }
      },
      "PerformanceTierAdvancedSettingsModel": {
        "description": "Advanced settings of the performance tier.",
        "type": "object",
        "properties": {
          "perVmBackup": {
            "description": "If *true*, Veeam Backup & Replication creates a separate backup file for every VM in the job.",
            "type": "boolean"
          },
          "fullWhenExtentOffline": {
            "description": "If *true*, Veeam Backup & Replication creates a full backup file instead of an incremental backup file in case the required extent is offline.",
            "type": "boolean"
          }
        }
      },
      "PlacementPolicyModel": {
        "description": "Backup file placement policy.",
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/EPlacementPolicyType"
          },
          "settings": {
            "description": "Placement policy settings.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackupPlacementSettingsModel"
            }
          },
          "enforceStrictPlacementPolicy": {
            "description": "If *true*, the backup job fails in case the placement policy cannot be met.",
            "type": "boolean"
          }
        }
      },
      "EPlacementPolicyType": {
        "description": "Type of placement policy.",
        "x-enumDescriptions": {
          "DataLocality": "Veeam Backup & Replication stores full and incremental backup files to the same performance extent of the scale-out backup repository.",
          "Performance": "Veeam Backup & Replication stores full and incremental backup files to different performance extents of the scale-out backup repository."
        },
        "enum": [
          "DataLocality",
          "Performance"
        ],
        "type": "string"
      },
      "ERepositoryExtentStatusType": {
        "description": "Performance extent status.",
        "enum": [
          "Normal",
          "Evacuate",
          "Pending",
          "Sealed",
          "Maintenance",
          "ResyncRequired",
          "TenantEvacuating"
        ],
        "type": "string"
      },
      "BackupPlacementSettingsModel": {
        "type": "object",
        "required": [
          "extentId",
          "allowedBackups"
        ],
        "properties": {
          "extentId": {
            "description": "ID of a performance extent.",
            "type": "string",
            "format": "uuid"
          },
          "allowedBackups": {
            "$ref": "#/components/schemas/EAllowedBackupsType"
          }
        }
      },
      "EAllowedBackupsType": {
        "description": "Type of backup files that can be stored on the extent.",
        "enum": [
          "All",
          "FullsOnly",
          "IncrementsOnly",
          "None"
        ],
        "type": "string"
      },
      "CapacityTierModel": {
        "description": "Capacity tier.",
        "type": "object",
        "required": [
          "enabled"
        ],
        "properties": {
          "enabled": {
            "description": "If *true*, the capacity tier is enabled.",
            "type": "boolean"
          },
          "extents": {
            "description": "Array of capacity extents.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CapacityExtentModel"
            }
          },
          "offloadWindow": {
            "$ref": "#/components/schemas/BackupWindowSettingModel"
          },
          "copyPolicyEnabled": {
            "description": "If *true*, Veeam Backup & Replication copies backups from the performance extents to the capacity extent as soon as the backups are created.",
            "type": "boolean"
          },
          "movePolicyEnabled": {
            "description": "If *true*, Veeam Backup & Replication moves backup files that belong to inactive backup chains from the performance extents to the capacity extent.",
            "type": "boolean"
          },
          "operationalRestorePeriodDays": {
            "description": "Number of days after which inactive backup chains on the performance extents are moved to the capacity extent. Specify *0* to offload inactive backup chains on the same day they are created.",
            "type": "integer"
          },
          "overridePolicy": {
            "$ref": "#/components/schemas/CapacityTierOverridePolicyModel"
          },
          "encryption": {
            "$ref": "#/components/schemas/BackupStorageSettingsEncryptionModel"
          }
        }
      },
      "CapacityExtentModel": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "ID of an object storage repository added as a capacity extent.",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "CapacityTierOverridePolicyModel": {
        "description": "Policy that overrides the move policy if the scale-out backup repository is reaching its capacity.",
        "type": "object",
        "required": [
          "isEnabled"
        ],
        "properties": {
          "isEnabled": {
            "description": "If *true*, Veeam Backup & Replication moves oldest backup files sooner if the scale-out backup repository is reaching the threshold.",
            "type": "boolean"
          },
          "overrideSpaceThresholdPercents": {
            "description": "Space threshold of the scale-out backup repository, in percent.",
            "type": "integer"
          }
        }
      },
      "ArchiveTierModel": {
        "description": "Archive tier.",
        "type": "object",
        "required": [
          "isEnabled"
        ],
        "properties": {
          "isEnabled": {
            "description": "If *true*, the archive tier is enabled.",
            "type": "boolean"
          },
          "extentId": {
            "description": "ID of an object storage repository added as an archive extent.",
            "type": "string",
            "format": "uuid"
          },
          "archivePeriodDays": {
            "description": "Number of days after which backup chains on the capacity extent are moved to the archive extent. Specify *0* to offload inactive backup chains on the same day they are created.",
            "type": "integer"
          },
          "advancedSettings": {
            "$ref": "#/components/schemas/ArchiveTierAdvancedSettingsModel"
          }
        }
      },
      "ArchiveTierAdvancedSettingsModel": {
        "description": "Advanced settings of the archive tier.",
        "type": "object",
        "properties": {
          "costOptimizedArchiveEnabled": {
            "description": "If *true*, backups are archived as soon as the remaining retention time is above minimum storage period for the repository.",
            "type": "boolean"
          },
          "archiveDeduplicationEnabled": {
            "description": "If *true*, each backup is stored as a delta to the previous one.",
            "type": "boolean"
          }
        }
      },
      "ScaleOutRepositoriesFilters": {
        "type": "object",
        "properties": {
          "skip": {
            "description": "Number of repositories to skip.",
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "description": "Maximum number of repositories to return.",
            "type": "integer",
            "format": "int32"
          },
          "orderColumn": {
            "$ref": "#/components/schemas/EScaleOutRepositoryFiltersOrderColumn"
          },
          "orderAsc": {
            "description": "Sorts repositories in the ascending order by the `orderColumn` parameter.",
            "type": "boolean"
          },
          "nameFilter": {
            "description": "Filters repositories by the `nameFilter` pattern. The pattern can match any repository parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.",
            "type": "string"
          }
        }
      },
      "EScaleOutRepositoryFiltersOrderColumn": {
        "type": "string",
        "enum": [
          "Name",
          "Description",
          "Type",
          "Host",
          "Path"
        ]
      },
      "CloudCredentialsResult": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of cloud credentials.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CloudCredentialsModel"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationResult"
          }
        }
      },
      "CloudCredentialsSpec": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "description": {
            "description": "Description of the cloud credentials record.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ECloudCredentialsType"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/AmazonCloudCredentialsSpec"
          },
          {
            "$ref": "#/components/schemas/AzureStorageCloudCredentialsSpec"
          },
          {
            "$ref": "#/components/schemas/AzureComputeCloudCredentialsSpec"
          },
          {
            "$ref": "#/components/schemas/GoogleCloudCredentialsSpec"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "AzureStorage": "#/components/schemas/AzureStorageCloudCredentialsSpec",
            "Amazon": "#/components/schemas/AmazonCloudCredentialsSpec",
            "Google": "#/components/schemas/GoogleCloudCredentialsSpec",
            "AzureCompute": "#/components/schemas/AzureComputeCloudCredentialsSpec"
          }
        }
      },
      "CloudCredentialsModel": {
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "description": "ID of the cloud credentials record.",
            "type": "string",
            "format": "uuid"
          },
          "description": {
            "description": "Description of the cloud credentials record.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ECloudCredentialsType"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/AmazonCloudCredentialsModel"
          },
          {
            "$ref": "#/components/schemas/AzureStorageCloudCredentialsModel"
          },
          {
            "$ref": "#/components/schemas/AzureComputeCloudCredentialsModel"
          },
          {
            "$ref": "#/components/schemas/GoogleCloudCredentialsModel"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "AzureStorage": "#/components/schemas/AzureStorageCloudCredentialsModel",
            "Amazon": "#/components/schemas/AmazonCloudCredentialsModel",
            "Google": "#/components/schemas/GoogleCloudCredentialsModel",
            "AzureCompute": "#/components/schemas/AzureComputeCloudCredentialsModel"
          }
        }
      },
      "AmazonCloudCredentialsSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudCredentialsSpec"
          },
          {
            "type": "object",
            "required": [
              "accessKey",
              "secretKey"
            ],
            "properties": {
              "accessKey": {
                "description": "ID of the access key.",
                "type": "string"
              },
              "secretKey": {
                "description": "Secret key.",
                "type": "string"
              },
              "tag": {
                "description": "Tag used to identify the cloud credentials record.",
                "type": "string"
              }
            }
          }
        ]
      },
      "AmazonCloudCredentialsModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudCredentialsModel"
          },
          {
            "type": "object",
            "required": [
              "accessKey"
            ],
            "properties": {
              "accessKey": {
                "description": "ID of the access key.",
                "type": "string"
              },
              "tag": {
                "description": "Tag used to identify the cloud credentials record.",
                "type": "string"
              }
            }
          }
        ]
      },
      "AzureStorageCloudCredentialsSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudCredentialsSpec"
          },
          {
            "type": "object",
            "required": [
              "account",
              "sharedKey"
            ],
            "properties": {
              "account": {
                "description": "Name of the Azure storage account.",
                "type": "string"
              },
              "sharedKey": {
                "description": "Shared key of the Azure storage account.",
                "type": "string"
              },
              "tag": {
                "description": "Tag used to identify the cloud credentials record.",
                "type": "string"
              }
            },
            "example": {
              "description": "Azure storage account",
              "type": "AzureStorage",
              "tag": "createdbysheiladcory",
              "account": "williamfox",
              "sharedKey": "0sF53pZ/c8cVk+sEMby1lGZzA4SJezapyrFysdjlfLlUwMESTW6dEnkC3x62USr4cwHgPxarsBCE+ASt1Zjmwg=="
            }
          }
        ]
      },
      "AzureStorageCloudCredentialsModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudCredentialsModel"
          },
          {
            "type": "object",
            "required": [
              "account"
            ],
            "properties": {
              "account": {
                "description": "Name of the Azure storage account.",
                "type": "string"
              },
              "tag": {
                "description": "Tag used to identify the cloud credentials record.",
                "type": "string"
              }
            }
          }
        ]
      },
      "AzureComputeCloudCredentialsSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudCredentialsSpec"
          },
          {
            "type": "object",
            "required": [
              "connectionName",
              "creationMode"
            ],
            "properties": {
              "connectionName": {
                "description": "Name under which the cloud credentials record will be shown in Veeam Backup & Replication.",
                "type": "string"
              },
              "creationMode": {
                "$ref": "#/components/schemas/EAzureComputeCredentialsCreationMode"
              },
              "existingAccount": {
                "$ref": "#/components/schemas/AzureComputeCredentialsExistingAccountSpec"
              },
              "newAccount": {
                "$ref": "#/components/schemas/AzureComputeCredentialsNewAccountSpec"
              },
              "tag": {
                "description": "Tag used to identify the cloud credentials record.",
                "type": "string"
              }
            }
          }
        ]
      },
      "EAzureComputeCredentialsCreationMode": {
        "description": "Mode that defines whether you want to connect to Azure Active Directory using an existing or a newly created Azure Active Directory application.",
        "type": "string",
        "enum": [
          "NewAccount",
          "ExistingAccount"
        ]
      },
      "AzureComputeCredentialsExistingAccountSpec": {
        "description": "Existing Azure Active Directory application.",
        "type": "object",
        "required": [
          "deployment",
          "subscription"
        ],
        "properties": {
          "deployment": {
            "$ref": "#/components/schemas/AzureComputeCloudCredentialsDeploymentModel"
          },
          "subscription": {
            "$ref": "#/components/schemas/AzureComputeCloudCredentialsSubscriptionSpec"
          }
        }
      },
      "AzureComputeCredentialsNewAccountSpec": {
        "description": "New Azure Active Directory application.",
        "type": "object",
        "required": [
          "region",
          "verificationCode"
        ],
        "properties": {
          "region": {
            "$ref": "#/components/schemas/EAzureRegionType"
          },
          "verificationCode": {
            "description": "Single-use verification code. Use this code to sign in on the https://microsoft.com/devicelogin page.",
            "type": "string"
          }
        }
      },
      "CloudHelperApplianceSpec": {
        "description": "Helper appliance settings.",
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ECloudCredentialsType"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/AzureLinuxHelperApplianceSpec"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "AzureCompute": "#/components/schemas/AzureLinuxHelperApplianceSpec"
          }
        }
      },
      "CloudHelperApplianceModel": {
        "description": "Helper appliance settings.",
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ECloudCredentialsType"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/AzureLinuxHelperApplianceModel"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "AzureCompute": "#/components/schemas/AzureLinuxHelperApplianceModel"
          }
        }
      },
      "CloudHelperApplianceResult": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of Lunux-based helper appliances.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CloudHelperApplianceModel"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationResult"
          }
        }
      },
      "AzureLinuxHelperApplianceSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudHelperApplianceSpec",
            "type": "object",
            "required": [
              "subscriptionId"
            ],
            "properties": {
              "subscriptionId": {
                "description": "ID that Veeam Backup & Replication assigned to the Azure subscription.",
                "type": "string",
                "format": "uuid"
              },
              "location": {
                "description": "Storage account location where you want to configure the helper appliance.",
                "type": "string"
              },
              "storageAccount": {
                "description": "Name of the Azure storage account whose resources are used to store the helper appliance.",
                "type": "string"
              },
              "resourceGroup": {
                "description": "Resource group associated with the helper appliance.",
                "type": "string"
              },
              "virtualNetwork": {
                "description": "Network to which the helper appliance is connected.",
                "type": "string"
              },
              "subnet": {
                "description": "Subnet for the helper appliance.",
                "type": "string"
              },
              "SSHPort": {
                "description": "Port over which Veeam Backup & Replication communicates with the helper appliance.",
                "type": "integer"
              }
            }
          }
        ]
      },
      "AzureLinuxHelperApplianceModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudHelperApplianceModel"
          },
          {
            "description": "Lunux-based helper appliance for Microsoft Azure account.",
            "type": "object",
            "required": [
              "id",
              "subscriptionId"
            ],
            "properties": {
              "id": {
                "description": "Helper appliance ID.",
                "type": "string",
                "format": "uuid"
              },
              "subscriptionId": {
                "description": "ID that Veeam Backup & Replication assigned to the Azure subscription.",
                "type": "string",
                "format": "uuid"
              },
              "vmName": {
                "description": "VM name of the helper appliance.",
                "type": "string"
              },
              "location": {
                "description": "Storage account location where the helper appliance is configured.",
                "type": "string"
              },
              "storageAccount": {
                "description": "Azure storage account whose resources are used to store disks of the helper appliance.",
                "type": "string"
              },
              "resourceGroup": {
                "description": "Resource group associated with the helper appliance.",
                "type": "string"
              },
              "virtualNetwork": {
                "description": "Network to which the helper appliance is connected.",
                "type": "string"
              },
              "subnet": {
                "description": "Subnet for the helper appliance.",
                "type": "string"
              },
              "SSHPort": {
                "description": "Port over which Veeam Backup & Replication communicates with the helper appliance.",
                "type": "integer"
              }
            }
          }
        ]
      },
      "AzureComputeCloudCredentialsSubscriptionSpec": {
        "description": "Microsoft Azure compute account. For password-based authentication, specify client secret. For certificate-based authentication, specify certificate and password.",
        "type": "object",
        "required": [
          "tenantId",
          "applicationId"
        ],
        "properties": {
          "tenantId": {
            "description": "ID of a tenant where the Azure Active Directory application is registered in.",
            "type": "string"
          },
          "applicationId": {
            "description": "Client ID assigned to the Azure Active Directory application.",
            "type": "string"
          },
          "secret": {
            "type": "string",
            "description": "(For password-based authentication) Client secret assigned to the Azure Active Directory application."
          },
          "certificate": {
            "$ref": "#/components/schemas/CertificateUploadSpec"
          }
        }
      },
      "CertificateUploadSpec": {
        "description": "Certificate settings (for certificate-based authentication).",
        "type": "object",
        "required": [
          "certificate",
          "formatType"
        ],
        "properties": {
          "certificate": {
            "type": "string",
            "description": "Base64-encoded string of the content of a PFX certificate file."
          },
          "formatType": {
            "$ref": "#/components/schemas/ECertificateFileFormatType"
          },
          "password": {
            "description": "Decryption password for the certificate file.",
            "type": "string"
          }
        }
      },
      "ECertificateFileFormatType": {
        "description": "Certificate file format.",
        "type": "string",
        "enum": [
          "pfx"
        ]
      },
      "AzureComputeCloudCredentialsDeploymentModel": {
        "description": "Environment to restore workloads to.",
        "type": "object",
        "required": [
          "deploymentType"
        ],
        "properties": {
          "deploymentType": {
            "$ref": "#/components/schemas/EAzureComputeCredentialsDeploymentType"
          },
          "region": {
            "$ref": "#/components/schemas/EAzureRegionType"
          }
        }
      },
      "EAzureComputeCredentialsDeploymentType": {
        "description": "Deployment type (global Microsoft Azure or Microsoft Azure Stack Hub).",
        "type": "string",
        "enum": [
          "MicrosoftAzure",
          "MicrosoftAzureStack"
        ]
      },
      "AzureComputeCloudCredentialsModel": {
        "description": "Microsoft Azure compute account.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudCredentialsModel"
          },
          {
            "type": "object",
            "required": [
              "connectionName",
              "deployment",
              "subscription"
            ],
            "properties": {
              "connectionName": {
                "description": "Name under which the cloud credentials record is shown in Veeam Backup & Replication.",
                "type": "string"
              },
              "deployment": {
                "$ref": "#/components/schemas/AzureComputeCloudCredentialsDeploymentModel"
              },
              "subscription": {
                "$ref": "#/components/schemas/AzureComputeCloudCredentialsSubscriptionModel"
              },
              "tag": {
                "description": "Tag used to identify the cloud credentials record.",
                "type": "string"
              }
            }
          }
        ]
      },
      "AzureComputeCloudCredentialsSubscriptionModel": {
        "description": "Microsoft Azure tenant settings.",
        "type": "object",
        "required": [
          "tenantId",
          "applicationId"
        ],
        "properties": {
          "tenantId": {
            "description": "ID of a tenant where the Azure Active Directory application is registered in.",
            "type": "string"
          },
          "applicationId": {
            "description": "Client ID assigned to the Azure Active Directory application.",
            "type": "string"
          },
          "secret": {
            "type": "string",
            "description": "(For password-based authentication) Client secret assigned to the Azure Active Directory application."
          },
          "subscriptions": {
            "description": "Array of Azure subscriptions associated with the account.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AzureComputeCloudCredentialsSubscriptionInfo"
            }
          }
        }
      },
      "AzureComputeCloudCredentialsSubscriptionInfo": {
        "type": "object",
        "required": [
          "id",
          "azureSubscriptionId"
        ],
        "properties": {
          "id": {
            "description": "ID that Veeam Backup & Replication assigned to the Azure subscription.",
            "type": "string",
            "format": "uuid"
          },
          "azureSubscriptionId": {
            "description": "Original Azure subscription ID.",
            "type": "string"
          },
          "azureSubscriptionName": {
            "description": "Azure subscription name.",
            "type": "string"
          }
        }
      },
      "GoogleCloudCredentialsSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudCredentialsSpec"
          },
          {
            "type": "object",
            "required": [
              "accessKey",
              "secretKey"
            ],
            "properties": {
              "accessKey": {
                "description": "Access ID of a Google HMAC key.",
                "type": "string"
              },
              "secretKey": {
                "description": "Secret linked to the access ID.",
                "type": "string"
              },
              "tag": {
                "description": "Tag used to identify the cloud credentials record.",
                "type": "string"
              }
            }
          }
        ]
      },
      "GoogleCloudCredentialsModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudCredentialsModel"
          },
          {
            "type": "object",
            "required": [
              "accessKey"
            ],
            "properties": {
              "accessKey": {
                "description": "Access ID of a Google HMAC key.",
                "type": "string"
              },
              "tag": {
                "description": "Tag used to identify the cloud credentials record.",
                "type": "string"
              }
            }
          }
        ]
      },
      "ECloudCredentialsType": {
        "description": "Cloud credentials type.",
        "type": "string",
        "enum": [
          "AzureStorage",
          "AzureCompute",
          "Amazon",
          "Google"
        ]
      },
      "CloudCredentialsFilters": {
        "type": "object",
        "properties": {
          "skip": {
            "description": "Number of cloud credentials records to skip.",
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "description": "Maximum number of cloud credentials records to return.",
            "type": "integer",
            "format": "int32"
          },
          "orderColumn": {
            "$ref": "#/components/schemas/ECloudCredentialsFiltersOrderColumn"
          },
          "orderAsc": {
            "description": "Sorts cloud credentials in the ascending order by the `orderColumn` parameter.",
            "type": "boolean"
          },
          "nameFilter": {
            "description": "Filters cloud credentials by the `nameFilter` pattern. The pattern can match any cloud credentials parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.",
            "type": "string"
          },
          "typeFilter": {
            "$ref": "#/components/schemas/ECloudCredentialsType"
          }
        }
      },
      "ECloudCredentialsFiltersOrderColumn": {
        "description": "Sorts cloud credentials by one of the cloud credentials parameters.",
        "type": "string",
        "enum": [
          "Name",
          "Description"
        ]
      },
      "CloudCredentialsPasswordSpec": {
        "type": "object",
        "required": [
          "newSecretKey"
        ],
        "properties": {
          "newSecretKey": {
            "description": "New secret key.",
            "type": "string"
          }
        }
      },
      "CloudBrowserSpec": {
        "type": "object",
        "required": [
          "credentialsId",
          "serviceType"
        ],
        "properties": {
          "credentialsId": {
            "description": "ID of the object storage account (for browsing either storage or compute infrastructure).",
            "type": "string",
            "format": "uuid"
          },
          "serviceType": {
            "$ref": "#/components/schemas/ECloudServiceType"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/AzureBlobBrowserSpec"
          },
          {
            "$ref": "#/components/schemas/AzureDataBoxBrowserSpec"
          },
          {
            "$ref": "#/components/schemas/AmazonS3BrowserSpec"
          },
          {
            "$ref": "#/components/schemas/S3CompatibleBrowserSpec"
          },
          {
            "$ref": "#/components/schemas/AmazonSnowballEdgeBrowserSpec"
          },
          {
            "$ref": "#/components/schemas/GoogleCloudStorageBrowserSpec"
          },
          {
            "$ref": "#/components/schemas/IBMCloudStorageBrowserSpec"
          },
          {
            "$ref": "#/components/schemas/AzureComputeBrowserSpec"
          },
          {
            "$ref": "#/components/schemas/AmazonEC2BrowserSpec"
          },
          {
            "$ref": "#/components/schemas/WasabiCloudStorageBrowserSpec"
          }
        ],
        "discriminator": {
          "propertyName": "serviceType",
          "mapping": {
            "AzureBlob": "#/components/schemas/AzureBlobBrowserSpec",
            "AzureDataBox": "#/components/schemas/AzureDataBoxBrowserSpec",
            "AmazonS3": "#/components/schemas/AmazonS3BrowserSpec",
            "S3Compatible": "#/components/schemas/S3CompatibleBrowserSpec",
            "AmazonSnowballEdge": "#/components/schemas/AmazonSnowballEdgeBrowserSpec",
            "GoogleCloud": "#/components/schemas/GoogleCloudStorageBrowserSpec",
            "IBMCloud": "#/components/schemas/IBMCloudStorageBrowserSpec",
            "AzureCompute": "#/components/schemas/AzureComputeBrowserSpec",
            "AmazonEC2": "#/components/schemas/AmazonEC2BrowserSpec",
            "WasabiCloud": "#/components/schemas/WasabiCloudStorageBrowserSpec"
          }
        }
      },
      "AzureBlobBrowserSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserSpec"
          },
          {
            "type": "object",
            "properties": {
              "regionType": {
                "$ref": "#/components/schemas/EAzureRegionType"
              },
              "folderType": {
                "$ref": "#/components/schemas/ECloudBrowserFolderType"
              },
              "gatewayServerId": {
                "description": "ID of a gateway server you want to use to connect to the object storage. Specify this parameter to check internet connection of the server. As a gateway server you can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.",
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ]
      },
      "AzureDataBoxBrowserSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserSpec"
          },
          {
            "type": "object",
            "properties": {
              "servicePoint": {
                "description": "Service endpoint used to connect to the Azure Data Box object storage.",
                "type": "string"
              },
              "gatewayServerId": {
                "description": "ID of a gateway server you want to use to connect to the object storage. Specify this parameter to check internet connection of the server. As a gateway server you can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.",
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ]
      },
      "AmazonS3BrowserSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserSpec"
          },
          {
            "type": "object",
            "required": [
              "regionType"
            ],
            "properties": {
              "regionType": {
                "$ref": "#/components/schemas/EAmazonRegionType"
              },
              "gatewayServerId": {
                "description": "ID of a gateway server you want to use to connect to the object storage. Specify this parameter to check internet connection of the server. As a gateway server you can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.",
                "type": "string",
                "format": "uuid"
              },
              "folderType": {
                "$ref": "#/components/schemas/ECloudBrowserFolderType"
              },
              "filters": {
                "$ref": "#/components/schemas/AmazonS3CloudBrowserFilters"
              }
            }
          }
        ]
      },
      "AmazonS3CloudBrowserFilters": {
        "description": "Amazon S3 hierarchy filters.",
        "type": "object",
        "required": [
          "regionId"
        ],
        "properties": {
          "regionId": {
            "description": "Filters buckets by AWS region where an Amazon S3 data center is located.",
            "type": "string"
          },
          "bucketName": {
            "description": "Filters buckets by bucket name.",
            "type": "string"
          }
        }
      },
      "ECloudBrowserFolderType": {
        "description": "Folder type.",
        "type": "string",
        "enum": [
          "backup",
          "archive"
        ]
      },
      "S3CompatibleBrowserSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserSpec"
          },
          {
            "type": "object",
            "properties": {
              "regionId": {
                "description": "Region where the S3 compatible storage is located.",
                "type": "string"
              },
              "servicePoint": {
                "description": "Service point address of the S3 compatible storage.",
                "type": "string"
              },
              "gatewayServerId": {
                "description": "ID of a gateway server you want to use to connect to the object storage. Specify this parameter to check internet connection of the server. As a gateway server you can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.",
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ]
      },
      "AmazonSnowballEdgeBrowserSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserSpec"
          },
          {
            "type": "object",
            "properties": {
              "regionId": {
                "description": "To connect to the AWS Snowball Edge device, specify the `snow` value.",
                "type": "string"
              },
              "servicePoint": {
                "description": "Service point address and port number of the AWS Snowball Edge device.",
                "type": "string"
              },
              "gatewayServerId": {
                "description": "ID of a gateway server you want to use to connect to the object storage. Specify this parameter to check internet connection of the server. As a gateway server you can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.",
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ]
      },
      "GoogleCloudStorageBrowserSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserSpec"
          },
          {
            "type": "object",
            "properties": {
              "gatewayServerId": {
                "description": "ID of a gateway server you want to use to connect to the object storage. Specify this parameter to check internet connection of the server. As a gateway server you can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.",
                "type": "string",
                "format": "uuid"
              },
              "filters": {
                "$ref": "#/components/schemas/GoogleCloudStorageBrowserFilters"
              }
            }
          }
        ]
      },
      "GoogleCloudStorageBrowserFilters": {
        "description": "Google Cloud hierarchy filters.",
        "type": "object",
        "required": [
          "regionId"
        ],
        "properties": {
          "regionId": {
            "description": "Google Cloud data center region.",
            "type": "string"
          },
          "bucketName": {
            "description": "Bucket name.",
            "type": "string"
          }
        }
      },
      "IBMCloudStorageBrowserSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserSpec"
          },
          {
            "type": "object",
            "required": [
              "regionId",
              "servicePoint"
            ],
            "properties": {
              "regionId": {
                "description": "Region of the IBM Cloud object storage.",
                "type": "string"
              },
              "servicePoint": {
                "description": "Endpoint address and port number of the IBM Cloud object storage.",
                "type": "string"
              },
              "gatewayServerId": {
                "description": "ID of a gateway server you want to use to connect to the object storage. Specify this parameter to check internet connection of the server. As a gateway server you can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.",
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ]
      },
      "AzureComputeBrowserSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserSpec"
          },
          {
            "type": "object",
            "properties": {
              "filters": {
                "$ref": "#/components/schemas/AzureComputeBrowserFilters"
              }
            }
          }
        ]
      },
      "AzureComputeBrowserFilters": {
        "description": "Azure Compute hierarchy filters.",
        "type": "object",
        "properties": {
          "showAllStorageAccounts": {
            "description": "If *true*, the result contains compute resorces for all storage accounts. If *false*, the result contains compute resorces available for the specified storage account only.",
            "type": "boolean",
            "default": false
          },
          "subscriptionId": {
            "description": "Filters compute resorces by ID that Veeam Backup & Replication assigned to the Azure subscription.",
            "type": "string"
          },
          "location": {
            "description": "Filters compute resorces by Azure location name.",
            "type": "string"
          },
          "hasNetworks": {
            "description": "If *true*, the result contains Azure resource groups with virtual networks only.",
            "type": "boolean",
            "default": false
          }
        }
      },
      "AmazonEC2BrowserSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserSpec"
          },
          {
            "type": "object",
            "required": [
              "regionType"
            ],
            "properties": {
              "regionType": {
                "$ref": "#/components/schemas/EAmazonRegionType"
              },
              "filters": {
                "$ref": "#/components/schemas/AmazonEC2BrowserFilters"
              }
            }
          }
        ]
      },
      "AmazonEC2BrowserFilters": {
        "description": "Amazon EC2 hierarchy filters.",
        "type": "object",
        "required": [
          "regionId"
        ],
        "properties": {
          "regionId": {
            "description": "Filters Amazon EC2 resources by AWS region.",
            "type": "string"
          }
        }
      },
      "WasabiCloudStorageBrowserSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserSpec"
          },
          {
            "type": "object",
            "required": [
              "regionId"
            ],
            "properties": {
              "regionId": {
                "description": "Region ID.",
                "type": "string"
              },
              "gatewayServerId": {
                "description": "ID of a gateway server you want to use to connect to the object storage. Specify this parameter to check internet connection of the server. As a gateway server you can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.",
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ]
      },
      "ECloudServiceType": {
        "description": "Type of cloud service.",
        "type": "string",
        "enum": [
          "AzureBlob",
          "AzureDataBox",
          "AmazonS3",
          "AmazonEC2",
          "S3Compatible",
          "AmazonSnowballEdge",
          "GoogleCloud",
          "IBMCloud",
          "AzureCompute",
          "WasabiCloud"
        ]
      },
      "CloudBrowserModel": {
        "type": "object",
        "required": [
          "credentialsId",
          "serviceType"
        ],
        "properties": {
          "credentialsId": {
            "description": "ID of the cloud credentials record.",
            "type": "string",
            "format": "uuid"
          },
          "serviceType": {
            "$ref": "#/components/schemas/ECloudServiceType"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/AzureBlobBrowserModel"
          },
          {
            "$ref": "#/components/schemas/AzureDataBoxBrowserModel"
          },
          {
            "$ref": "#/components/schemas/AmazonS3BrowserModel"
          },
          {
            "$ref": "#/components/schemas/AmazonSnowballEdgeBrowserModel"
          },
          {
            "$ref": "#/components/schemas/S3CompatibleBrowserModel"
          },
          {
            "$ref": "#/components/schemas/GoogleCloudStorageBrowserModel"
          },
          {
            "$ref": "#/components/schemas/IBMCloudStorageBrowserModel"
          },
          {
            "$ref": "#/components/schemas/AzureComputeBrowserModel"
          },
          {
            "$ref": "#/components/schemas/AmazonEC2BrowserModel"
          },
          {
            "$ref": "#/components/schemas/WasabiCloudStorageBrowserModel"
          }
        ],
        "discriminator": {
          "propertyName": "serviceType",
          "mapping": {
            "AzureBlob": "#/components/schemas/AzureBlobBrowserModel",
            "AzureDataBox": "#/components/schemas/AzureDataBoxBrowserModel",
            "AmazonS3": "#/components/schemas/AmazonS3BrowserModel",
            "AmazonSnowballEdge": "#/components/schemas/AmazonSnowballEdgeBrowserModel",
            "S3Compatible": "#/components/schemas/S3CompatibleBrowserModel",
            "GoogleCloud": "#/components/schemas/GoogleCloudStorageBrowserModel",
            "IBMCloud": "#/components/schemas/IBMCloudStorageBrowserModel",
            "AzureCompute": "#/components/schemas/AzureComputeBrowserModel",
            "AmazonEC2": "#/components/schemas/AmazonEC2BrowserModel",
            "WasabiCloud": "#/components/schemas/WasabiCloudStorageBrowserModel"
          }
        }
      },
      "AzureBlobBrowserModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserModel"
          },
          {
            "type": "object",
            "properties": {
              "hostId": {
                "description": "ID of a server used to connect to the object storage.",
                "type": "string",
                "format": "uuid"
              },
              "regionType": {
                "$ref": "#/components/schemas/EAzureRegionType"
              },
              "containers": {
                "description": "Array of containers that reside in the Azure storage account.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AzureBlobContainerBrowserModel"
                }
              }
            }
          }
        ]
      },
      "AzureBlobContainerBrowserModel": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Container name.",
            "type": "string"
          },
          "folders": {
            "description": "Array of folders loated in the container.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AzureDataBoxBrowserModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserModel"
          },
          {
            "type": "object",
            "properties": {
              "hostId": {
                "description": "ID of a server used to connect to the object storage.",
                "type": "string",
                "format": "uuid"
              },
              "containers": {
                "description": "Array of containers that reside in the Azure storage account.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AzureDataBoxContainerBrowserModel"
                }
              }
            }
          }
        ]
      },
      "AzureDataBoxContainerBrowserModel": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Container name.",
            "type": "string"
          },
          "folders": {
            "description": "Array of folders located in the container.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AmazonS3BrowserModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserModel"
          },
          {
            "type": "object",
            "required": [
              "hostId",
              "regionType"
            ],
            "properties": {
              "hostId": {
                "description": "ID of a server used to connect to the object storage.",
                "type": "string",
                "format": "uuid"
              },
              "regionType": {
                "$ref": "#/components/schemas/EAmazonRegionType"
              },
              "regions": {
                "description": "Array of AWS regions belonged to the region type.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AmazonS3RegionBrowserModel"
                }
              }
            }
          }
        ]
      },
      "AmazonS3RegionBrowserModel": {
        "description": "AWS region.",
        "type": "object",
        "properties": {
          "id": {
            "description": "Region ID.",
            "type": "string"
          },
          "name": {
            "description": "Region name.",
            "type": "string"
          },
          "buckets": {
            "description": "Array of buckets located in the region.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AmazonS3BucketBrowserModel"
            }
          }
        }
      },
      "AmazonS3BucketBrowserModel": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Bucket name.",
            "type": "string"
          },
          "folders": {
            "description": "Array of folders located in the bucket.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "S3CompatibleBrowserModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserModel"
          },
          {
            "type": "object",
            "properties": {
              "hostId": {
                "description": "ID of a server used to connect to the S3 compatible storage.",
                "type": "string",
                "format": "uuid"
              },
              "connectionPoint": {
                "description": "Service point address and port number of the S3 compatible storage.",
                "type": "string"
              },
              "regions": {
                "description": "Array of regions.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/S3CompatibleRegionBrowserModel"
                }
              }
            }
          }
        ]
      },
      "S3CompatibleRegionBrowserModel": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Region ID.",
            "type": "string"
          },
          "name": {
            "description": "Region name.",
            "type": "string"
          },
          "buckets": {
            "description": "Array of buckets located in the region.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/S3CompatibleBucketBrowserModel"
            }
          }
        }
      },
      "S3CompatibleBucketBrowserModel": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Bucket name.",
            "type": "string"
          },
          "folders": {
            "description": "Array of folders located in the bucket.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AmazonSnowballEdgeBrowserModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserModel"
          },
          {
            "type": "object",
            "properties": {
              "hostId": {
                "description": "ID of a server used to connect to the AWS Snowball Edge device.",
                "type": "string",
                "format": "uuid"
              },
              "connectionPoint": {
                "description": "Service point address and port number of the AWS Snowball Edge device.",
                "type": "string"
              },
              "regions": {
                "description": "Array of regions.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AmazonSnowballEdgeRegionBrowserModel"
                }
              }
            }
          }
        ]
      },
      "AmazonSnowballEdgeRegionBrowserModel": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Region ID.",
            "type": "string"
          },
          "name": {
            "description": "Region name.",
            "type": "string"
          },
          "buckets": {
            "description": "Array of buckets located in the region.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AmazonSnowballEdgeBucketBrowserModel"
            }
          }
        }
      },
      "AmazonSnowballEdgeBucketBrowserModel": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Bucket name.",
            "type": "string"
          },
          "folders": {
            "description": "Array of folders located in the bucket.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GoogleCloudStorageBrowserModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserModel"
          },
          {
            "type": "object",
            "properties": {
              "hostId": {
                "description": "ID of a server used to connect to the object storage.",
                "type": "string",
                "format": "uuid"
              },
              "regions": {
                "description": "Array of regions.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GoogleCloudStorageRegionBrowserModel"
                }
              }
            }
          }
        ]
      },
      "GoogleCloudStorageRegionBrowserModel": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Region ID.",
            "type": "string"
          },
          "name": {
            "description": "Region name.",
            "type": "string"
          },
          "buckets": {
            "description": "Array of buckets located in the region.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GoogleCloudStorageBucketBrowserModel"
            }
          }
        }
      },
      "GoogleCloudStorageBucketBrowserModel": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Bucket name.",
            "type": "string"
          },
          "folders": {
            "description": "Array of folders located in the bucket.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IBMCloudStorageBrowserModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserModel"
          },
          {
            "type": "object",
            "properties": {
              "hostId": {
                "description": "ID of a server used to connect to the object storage.",
                "type": "string",
                "format": "uuid"
              },
              "regions": {
                "description": "Array of regions.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IBMCloudStorageRegionBrowserModel"
                }
              }
            }
          }
        ]
      },
      "IBMCloudStorageRegionBrowserModel": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Region ID.",
            "type": "string"
          },
          "name": {
            "description": "Region name.",
            "type": "string"
          },
          "buckets": {
            "description": "Array of buckets located in the region.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IBMCloudStorageBucketBrowserModel"
            }
          }
        }
      },
      "IBMCloudStorageBucketBrowserModel": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Bucket name.",
            "type": "string"
          },
          "folders": {
            "description": "Array of folders located in the bucket.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AzureComputeBrowserModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserModel"
          },
          {
            "type": "object",
            "properties": {
              "regionType": {
                "description": "Azure region type.",
                "type": "string"
              },
              "subscriptions": {
                "description": "Array of Azure subscriptions associated with the account.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AzureSubscriptionBrowserModel"
                }
              }
            }
          }
        ]
      },
      "AzureSubscriptionBrowserModel": {
        "type": "object",
        "required": [
          "id",
          "resourceGroups",
          "virtualNetworks",
          "storageAccounts"
        ],
        "properties": {
          "id": {
            "description": "ID that Veeam Backup & Replication assigned to the Azure subscription.",
            "type": "string",
            "format": "uuid"
          },
          "azureSubscriptionId": {
            "description": "Original Azure subscription ID.",
            "type": "string"
          },
          "locations": {
            "description": "Array of Azure geographic regions.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AzureLocationBrowserModel"
            }
          }
        }
      },
      "AzureLocationBrowserModel": {
        "type": "object",
        "required": [
          "location",
          "storageAccounts",
          "resourceGroups"
        ],
        "properties": {
          "location": {
            "description": "Location name.",
            "type": "string"
          },
          "storageAccounts": {
            "description": "Array of storage accounts associated with the location.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AzureStorageAccountBrowserModel"
            }
          },
          "resourceGroups": {
            "description": "Array of Azure resource groups.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AzureResourceGroupBrowserModel"
            }
          }
        }
      },
      "AzureStorageAccountBrowserModel": {
        "type": "object",
        "properties": {
          "storageAccountName": {
            "description": "Account name.",
            "type": "string"
          },
          "instanceSizes": {
            "description": "Array of available instance sizes.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AzureResourceGroupBrowserModel": {
        "type": "object",
        "required": [
          "resourceGroup",
          "virtualNetworks"
        ],
        "properties": {
          "resourceGroup": {
            "description": "Resource group name.",
            "type": "string"
          },
          "virtualNetworks": {
            "description": "Array of virtual networks available in the resource group.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AzureVirtualNetworkBrowserModel"
            }
          }
        }
      },
      "AzureVirtualNetworkBrowserModel": {
        "type": "object",
        "properties": {
          "virtualNetworkName": {
            "description": "Virtual network name.",
            "type": "string"
          },
          "subnets": {
            "description": "Array of subnets.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AmazonEC2BrowserModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserModel"
          },
          {
            "type": "object",
            "required": [
              "hostId",
              "regionType",
              "regions"
            ],
            "properties": {
              "hostId": {
                "description": "ID of a server used to connect to the object storage.",
                "type": "string",
                "format": "uuid"
              },
              "regionType": {
                "$ref": "#/components/schemas/EAmazonRegionType"
              },
              "regions": {
                "description": "Array of regions.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AmazonEC2RegionBrowserModel"
                }
              }
            }
          }
        ]
      },
      "AmazonEC2RegionBrowserModel": {
        "type": "object",
        "properties": {
          "regionId": {
            "description": "Region ID.",
            "type": "string"
          },
          "vpcs": {
            "description": "Array of Amazon Virtual Private Cloud (Amazon VPC) networks.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AmazonVPCBrowserModel"
            }
          },
          "instanceTypes": {
            "description": "Array of Amazon instance types.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AmazonVPCBrowserModel": {
        "type": "object",
        "properties": {
          "vpcName": {
            "description": "VPC name.",
            "type": "string"
          },
          "subnets": {
            "description": "Array of VPC subnets.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "securityGroups": {
            "description": "Array of security groups.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "WasabiCloudStorageBrowserModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserModel"
          },
          {
            "type": "object",
            "properties": {
              "hostId": {
                "description": "ID of a server used to connect to the object storage.",
                "type": "string",
                "format": "uuid"
              },
              "regions": {
                "description": "Array of regions.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WasabiCloudStorageRegionBrowserModel"
                }
              }
            }
          }
        ]
      },
      "WasabiCloudStorageRegionBrowserModel": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Region ID.",
            "type": "string"
          },
          "name": {
            "description": "Region name.",
            "type": "string"
          },
          "buckets": {
            "description": "Array of buckets located in the region.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WasabiCloudStorageBucketBrowserModel"
            }
          }
        }
      },
      "WasabiCloudStorageBucketBrowserModel": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Bucket name.",
            "type": "string"
          },
          "folders": {
            "description": "Array of folders located in the bucket.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AzureBlobStorageSpec": {
        "description": "Microsoft Azure Blob storage.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositorySpec"
          },
          {
            "type": "object",
            "required": [
              "account",
              "container",
              "mountServer"
            ],
            "properties": {
              "enableTaskLimit": {
                "description": "If *true*, the maximum number of concurrent tasks is limited.",
                "type": "boolean"
              },
              "maxTaskCount": {
                "description": "Maximum number of concurrent tasks.",
                "type": "integer"
              },
              "account": {
                "$ref": "#/components/schemas/AzureBlobStorageAccountModel"
              },
              "container": {
                "$ref": "#/components/schemas/AzureBlobStorageContainerModel"
              },
              "proxyAppliance": {
                "$ref": "#/components/schemas/AzureStorageProxyModel"
              },
              "mountServer": {
                "$ref": "#/components/schemas/MountServerSettingsModel"
              }
            }
          }
        ]
      },
      "AzureBlobStorageModel": {
        "description": "Microsoft Azure Blob storage.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositoryModel"
          },
          {
            "type": "object",
            "required": [
              "account",
              "container",
              "mountServer"
            ],
            "properties": {
              "enableTaskLimit": {
                "description": "If *true*, the maximum number of concurrent tasks is limited.",
                "type": "boolean"
              },
              "maxTaskCount": {
                "description": "Maximum number of concurrent tasks.",
                "type": "integer"
              },
              "account": {
                "$ref": "#/components/schemas/AzureBlobStorageAccountModel"
              },
              "container": {
                "$ref": "#/components/schemas/AzureBlobStorageContainerModel"
              },
              "proxyAppliance": {
                "$ref": "#/components/schemas/AzureStorageProxyModel"
              },
              "mountServer": {
                "$ref": "#/components/schemas/MountServerSettingsModel"
              }
            }
          }
        ]
      },
      "AzureBlobStorageAccountModel": {
        "description": "Account used to access the Azure Blob storage.",
        "type": "object",
        "required": [
          "credentialsId",
          "regionType",
          "connectionSettings"
        ],
        "properties": {
          "credentialsId": {
            "description": "ID of the cloud credentials record.",
            "type": "string",
            "format": "uuid"
          },
          "regionType": {
            "$ref": "#/components/schemas/EAzureRegionType"
          },
          "connectionSettings": {
            "$ref": "#/components/schemas/ObjectStorageConnectionModel"
          }
        }
      },
      "EAzureRegionType": {
        "description": "Region where your Microsoft Azure container is located.",
        "type": "string",
        "enum": [
          "China",
          "Germany",
          "Global",
          "Government"
        ]
      },
      "AzureBlobStorageContainerModel": {
        "description": "Azure Blob storage container.",
        "type": "object",
        "required": [
          "containerName",
          "folderName"
        ],
        "properties": {
          "containerName": {
            "description": "Container name.",
            "type": "string"
          },
          "folderName": {
            "description": "Name of the folder that the object storage repository is mapped to.",
            "type": "string"
          },
          "storageConsumptionLimit": {
            "$ref": "#/components/schemas/ObjectStorageConsumptionLimitModel"
          }
        }
      },
      "AzureDataBoxStorageSpec": {
        "description": "Microsoft Azure Data Box storage.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositorySpec"
          },
          {
            "type": "object",
            "required": [
              "account",
              "container"
            ],
            "properties": {
              "enableTaskLimit": {
                "description": "If *true*, the maximum number of concurrent tasks is limited.",
                "type": "boolean"
              },
              "maxTaskCount": {
                "description": "Maximum number of concurrent tasks.",
                "type": "integer"
              },
              "account": {
                "$ref": "#/components/schemas/AzureDataBoxStorageAccountModel"
              },
              "container": {
                "$ref": "#/components/schemas/AzureDataBoxStorageContainerModel"
              }
            }
          }
        ]
      },
      "AzureDataBoxStorageModel": {
        "description": "Microsoft Azure Data Box storage.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositoryModel"
          },
          {
            "type": "object",
            "required": [
              "account",
              "container"
            ],
            "properties": {
              "enableTaskLimit": {
                "description": "If *true*, the maximum number of concurrent tasks is limited.",
                "type": "boolean"
              },
              "maxTaskCount": {
                "description": "Maximum number of concurrent tasks.",
                "type": "integer"
              },
              "account": {
                "$ref": "#/components/schemas/AzureDataBoxStorageAccountModel"
              },
              "container": {
                "$ref": "#/components/schemas/AzureDataBoxStorageContainerModel"
              }
            }
          }
        ]
      },
      "AzureDataBoxStorageAccountModel": {
        "description": "Account used to access the Azure Data Box storage.",
        "type": "object",
        "required": [
          "serviceEndpoint",
          "credentialsId"
        ],
        "properties": {
          "serviceEndpoint": {
            "description": "Service endpoint address of the Azure Data Box device.",
            "type": "string"
          },
          "credentialsId": {
            "description": "ID of the cloud credentials record.",
            "type": "string",
            "format": "uuid"
          },
          "connectionSettings": {
            "$ref": "#/components/schemas/ObjectStorageConnectionModel"
          }
        }
      },
      "AzureDataBoxStorageContainerModel": {
        "description": "Azure Data Box container where backup data is stored.",
        "type": "object",
        "properties": {
          "containerName": {
            "description": "Container name.",
            "type": "string"
          },
          "folderName": {
            "description": "Name of the folder that the object storage repository is mapped to.",
            "type": "string"
          }
        }
      },
      "AmazonS3StorageSpec": {
        "description": "Amazon S3 storage.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositorySpec"
          },
          {
            "type": "object",
            "required": [
              "account",
              "bucket",
              "mountServer"
            ],
            "properties": {
              "enableTaskLimit": {
                "description": "If *true*, the maximum number of concurrent tasks is limited.",
                "type": "boolean"
              },
              "maxTaskCount": {
                "description": "Maximum number of concurrent tasks.",
                "type": "integer"
              },
              "account": {
                "$ref": "#/components/schemas/AmazonS3StorageAccountModel"
              },
              "bucket": {
                "$ref": "#/components/schemas/AmazonS3StorageBucketModel"
              },
              "mountServer": {
                "$ref": "#/components/schemas/MountServerSettingsModel"
              },
              "proxyAppliance": {
                "$ref": "#/components/schemas/AmazonS3StorageProxyApplianceModel"
              }
            }
          }
        ]
      },
      "AmazonS3StorageModel": {
        "description": "Amazon S3 storage.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositoryModel"
          },
          {
            "type": "object",
            "required": [
              "account",
              "bucket",
              "mountServer"
            ],
            "properties": {
              "enableTaskLimit": {
                "description": "If *true*, the maximum number of concurrent tasks is limited.",
                "type": "boolean"
              },
              "maxTaskCount": {
                "description": "Maximum number of concurrent tasks.",
                "type": "integer"
              },
              "account": {
                "$ref": "#/components/schemas/AmazonS3StorageAccountModel"
              },
              "bucket": {
                "$ref": "#/components/schemas/AmazonS3StorageBucketModel"
              },
              "mountServer": {
                "$ref": "#/components/schemas/MountServerSettingsModel"
              },
              "proxyAppliance": {
                "$ref": "#/components/schemas/AmazonS3StorageProxyApplianceModel"
              }
            }
          }
        ]
      },
      "AmazonSnowballEdgeStorageSpec": {
        "description": "AWS Snowball Edge storage.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositorySpec"
          },
          {
            "type": "object",
            "required": [
              "account",
              "bucket",
              "mountServer"
            ],
            "properties": {
              "enableTaskLimit": {
                "description": "If *true*, the maximum number of concurrent tasks is limited.",
                "type": "boolean"
              },
              "maxTaskCount": {
                "description": "Maximum number of concurrent tasks.",
                "type": "integer"
              },
              "account": {
                "$ref": "#/components/schemas/AmazonSnowballEdgeStorageAccountModel"
              },
              "bucket": {
                "$ref": "#/components/schemas/AmazonSnowballEdgeStorageBucketModel"
              },
              "mountServer": {
                "$ref": "#/components/schemas/MountServerSettingsModel"
              }
            }
          }
        ]
      },
      "AmazonSnowballEdgeStorageModel": {
        "description": "AWS Snowball Edge storage.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositoryModel"
          },
          {
            "type": "object",
            "required": [
              "account",
              "bucket",
              "mountServer"
            ],
            "properties": {
              "enableTaskLimit": {
                "description": "If *true*, the maximum number of concurrent tasks is limited.",
                "type": "boolean"
              },
              "maxTaskCount": {
                "description": "Maximum number of concurrent tasks.",
                "type": "integer"
              },
              "account": {
                "$ref": "#/components/schemas/AmazonSnowballEdgeStorageAccountModel"
              },
              "bucket": {
                "$ref": "#/components/schemas/AmazonSnowballEdgeStorageBucketModel"
              },
              "mountServer": {
                "$ref": "#/components/schemas/MountServerSettingsModel"
              }
            }
          }
        ]
      },
      "AmazonSnowballEdgeStorageAccountModel": {
        "description": "AWS account used to access the AWS Snowball Edge storage.",
        "type": "object",
        "required": [
          "servicePoint",
          "regionId",
          "credentialsId",
          "gatewayServer"
        ],
        "properties": {
          "servicePoint": {
            "description": "Service point address and port number of the AWS Snowball Edge device.",
            "type": "string"
          },
          "regionId": {
            "description": "For AWS Snowball Edge, the region is `snow`.",
            "type": "string"
          },
          "credentialsId": {
            "description": "ID of the cloud credentials record.",
            "type": "string",
            "format": "uuid"
          },
          "connectionSettings": {
            "$ref": "#/components/schemas/ObjectStorageConnectionModel"
          }
        }
      },
      "AmazonSnowballEdgeStorageBucketModel": {
        "description": "Amazon S3 bucket.",
        "type": "object",
        "properties": {
          "bucketName": {
            "description": "Name of the Amazon S3 bucket.",
            "type": "string"
          },
          "folderName": {
            "description": "Name of the folder that the object storage repository is mapped to.",
            "type": "string"
          },
          "storageConsumptionLimit": {
            "$ref": "#/components/schemas/ObjectStorageConsumptionLimitModel"
          }
        }
      },
      "S3CompatibleStorageSpec": {
        "description": "S3 compatible storage.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositorySpec"
          },
          {
            "type": "object",
            "required": [
              "account",
              "bucket",
              "mountServer"
            ],
            "properties": {
              "enableTaskLimit": {
                "description": "If *true*, the maximum number of concurrent tasks is limited.",
                "type": "boolean"
              },
              "maxTaskCount": {
                "description": "Maximum number of concurrent tasks.",
                "type": "integer"
              },
              "account": {
                "$ref": "#/components/schemas/S3CompatibleStorageAccountModel"
              },
              "bucket": {
                "$ref": "#/components/schemas/S3CompatibleStorageBucketModel"
              },
              "mountServer": {
                "$ref": "#/components/schemas/MountServerSettingsModel"
              },
              "proxyAppliance": {
                "$ref": "#/components/schemas/S3CompatibleProxyModel"
              }
            }
          }
        ]
      },
      "S3CompatibleStorageModel": {
        "description": "S3 compatible storage.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositoryModel"
          },
          {
            "type": "object",
            "required": [
              "account",
              "bucket",
              "mountServer"
            ],
            "properties": {
              "enableTaskLimit": {
                "description": "If *true*, the maximum number of concurrent tasks is limited.",
                "type": "boolean"
              },
              "maxTaskCount": {
                "description": "Maximum number of concurrent tasks.",
                "type": "integer"
              },
              "account": {
                "$ref": "#/components/schemas/S3CompatibleStorageAccountModel"
              },
              "bucket": {
                "$ref": "#/components/schemas/S3CompatibleStorageBucketModel"
              },
              "mountServer": {
                "$ref": "#/components/schemas/MountServerSettingsModel"
              },
              "proxyAppliance": {
                "$ref": "#/components/schemas/S3CompatibleProxyModel"
              }
            }
          }
        ]
      },
      "S3CompatibleStorageAccountModel": {
        "description": "Account used to access the S3 compatible storage.",
        "type": "object",
        "required": [
          "servicePoint",
          "regionId",
          "credentialsId",
          "gatewayServer"
        ],
        "properties": {
          "servicePoint": {
            "description": "Endpoint address and port number of the storage.",
            "type": "string"
          },
          "regionId": {
            "description": "ID of a region where the storage is located.",
            "type": "string"
          },
          "credentialsId": {
            "description": "ID of a cloud credentials record used to access the storage.",
            "type": "string",
            "format": "uuid"
          },
          "connectionSettings": {
            "$ref": "#/components/schemas/ObjectStorageConnectionModel"
          }
        }
      },
      "S3CompatibleStorageBucketModel": {
        "description": "Bucket where backup data is stored.",
        "type": "object",
        "required": [
          "bucketName",
          "folderName"
        ],
        "properties": {
          "bucketName": {
            "description": "Bucket name.",
            "type": "string"
          },
          "folderName": {
            "description": "Name of the folder that the object storage repository is mapped to.",
            "type": "string"
          },
          "storageConsumptionLimit": {
            "$ref": "#/components/schemas/ObjectStorageConsumptionLimitModel"
          },
          "immutability": {
            "$ref": "#/components/schemas/ObjectStorageImmutabilityModel"
          }
        }
      },
      "AmazonS3StorageAccountModel": {
        "description": "Account used to access the Amazon S3 storage.",
        "type": "object",
        "required": [
          "credentialsId",
          "regionType",
          "gatewayServer"
        ],
        "properties": {
          "credentialsId": {
            "description": "ID of the cloud credentials record.",
            "type": "string",
            "format": "uuid"
          },
          "regionType": {
            "$ref": "#/components/schemas/EAmazonRegionType"
          },
          "connectionSettings": {
            "$ref": "#/components/schemas/ObjectStorageConnectionModel"
          }
        }
      },
      "AmazonS3StorageBucketModel": {
        "description": "Amazon S3 bucket where backup data is stored.",
        "type": "object",
        "required": [
          "regionId",
          "bucketName",
          "folderName"
        ],
        "properties": {
          "regionId": {
            "description": "ID of a region where the Amazon S3 bucket is located.",
            "type": "string"
          },
          "bucketName": {
            "description": "Name of an Amazon S3 bucket.",
            "type": "string"
          },
          "folderName": {
            "description": "Name of the folder that the object storage repository is mapped to.",
            "type": "string"
          },
          "storageConsumptionLimit": {
            "$ref": "#/components/schemas/ObjectStorageConsumptionLimitModel"
          },
          "immutability": {
            "$ref": "#/components/schemas/ObjectStorageImmutabilityModel"
          },
          "infrequentAccessStorage": {
            "$ref": "#/components/schemas/AmazonS3IAStorageModel"
          }
        }
      },
      "ObjectStorageImmutabilityModel": {
        "description": "Object storage immutability.",
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, storage immutability is enabled.",
            "type": "boolean"
          },
          "daysCount": {
            "description": "Immutability period.",
            "type": "integer"
          }
        }
      },
      "AmazonS3IAStorageModel": {
        "description": "Standard Infrequent Access.",
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, Standard Infrequent Access is enabled.",
            "type": "boolean"
          },
          "singleZoneEnabled": {
            "description": "If *true*, Amazon S3 One Zone-Infrequent Access is enabled.",
            "type": "boolean"
          }
        }
      },
      "CloudBrowserNewFolderSpec": {
        "type": "object",
        "required": [
          "credentialsId",
          "serviceType",
          "newFolderName"
        ],
        "properties": {
          "credentialsId": {
            "description": "ID of a cloud credentials record requiered to connect to the object storage.",
            "type": "string",
            "format": "uuid"
          },
          "serviceType": {
            "$ref": "#/components/schemas/ECloudServiceType"
          },
          "newFolderName": {
            "description": "Name of the new folder.",
            "type": "string"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/AzureBlobBrowserDestinationSpec"
          },
          {
            "$ref": "#/components/schemas/AzureDataBoxBrowserDestinationSpec"
          },
          {
            "$ref": "#/components/schemas/AmazonS3BrowserDestinationSpec"
          },
          {
            "$ref": "#/components/schemas/S3CompatibleBrowserDestinationSpec"
          },
          {
            "$ref": "#/components/schemas/AmazonSnowballEdgeBrowserDestinationSpec"
          },
          {
            "$ref": "#/components/schemas/GoogleCloudStorageBrowserDestinationSpec"
          },
          {
            "$ref": "#/components/schemas/IBMCloudStorageBrowserDestinationSpec"
          },
          {
            "$ref": "#/components/schemas/WasabiCloudStorageBrowserDestinationSpec"
          }
        ],
        "discriminator": {
          "propertyName": "serviceType",
          "mapping": {
            "AzureBlob": "#/components/schemas/AzureBlobBrowserDestinationSpec",
            "AzureDataBox": "#/components/schemas/AzureDataBoxBrowserDestinationSpec",
            "AmazonS3": "#/components/schemas/AmazonS3BrowserDestinationSpec",
            "S3Compatible": "#/components/schemas/S3CompatibleBrowserDestinationSpec",
            "AmazonSnowballEdge": "#/components/schemas/AmazonSnowballEdgeBrowserDestinationSpec",
            "GoogleCloud": "#/components/schemas/GoogleCloudStorageBrowserDestinationSpec",
            "IBMCloud": "#/components/schemas/IBMCloudStorageBrowserDestinationSpec",
            "WasabiCloud": "#/components/schemas/WasabiCloudStorageBrowserDestinationSpec"
          }
        }
      },
      "AzureBlobBrowserDestinationSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserNewFolderSpec"
          },
          {
            "type": "object",
            "required": [
              "regionType",
              "containerName"
            ],
            "properties": {
              "hostId": {
                "description": "ID of a server you want to use to connect to the object storage. You can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.",
                "type": "string",
                "format": "uuid"
              },
              "regionType": {
                "$ref": "#/components/schemas/EAzureRegionType"
              },
              "containerName": {
                "description": "Name of the container where you want to store your backup data.",
                "type": "string"
              },
              "folderType": {
                "$ref": "#/components/schemas/ECloudBrowserFolderType"
              }
            }
          }
        ]
      },
      "AzureDataBoxBrowserDestinationSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserNewFolderSpec"
          },
          {
            "type": "object",
            "required": [
              "servicePoint",
              "containerName"
            ],
            "properties": {
              "hostId": {
                "description": "ID of a server you want to use to connect to the object storage. You can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.",
                "type": "string",
                "format": "uuid"
              },
              "containerName": {
                "description": "Name of the container where you want to store your backup data.",
                "type": "string"
              },
              "servicePoint": {
                "description": "Service endpoint address of the Azure Data Box device.",
                "type": "string"
              }
            }
          }
        ]
      },
      "AmazonS3BrowserDestinationSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserNewFolderSpec"
          },
          {
            "type": "object",
            "required": [
              "regionType",
              "regionId",
              "bucketName"
            ],
            "properties": {
              "hostId": {
                "description": "ID of a server you want to use to connect to the object storage. You can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.",
                "type": "string",
                "format": "uuid"
              },
              "regionType": {
                "$ref": "#/components/schemas/EAmazonRegionType"
              },
              "regionId": {
                "description": "AWS region where the Amazon S3 bucket is located.",
                "type": "string"
              },
              "bucketName": {
                "description": "Name of the bucket where you want to store your backup data.",
                "type": "string"
              },
              "folderType": {
                "$ref": "#/components/schemas/ECloudBrowserFolderType"
              }
            }
          }
        ]
      },
      "S3CompatibleBrowserDestinationSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserNewFolderSpec"
          },
          {
            "type": "object",
            "required": [
              "connectionPoint",
              "regionId",
              "bucketName"
            ],
            "properties": {
              "hostId": {
                "description": "ID of a server you want to use to connect to the object storage. You can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.",
                "type": "string",
                "format": "uuid"
              },
              "connectionPoint": {
                "description": "Endpoint address and port number of the S3 compatible storage.",
                "type": "string"
              },
              "regionId": {
                "description": "Region where the bucket is located.",
                "type": "string"
              },
              "bucketName": {
                "description": "Name of the bucket where you want to store your backup data.",
                "type": "string"
              }
            }
          }
        ]
      },
      "AmazonSnowballEdgeBrowserDestinationSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserNewFolderSpec"
          },
          {
            "type": "object",
            "required": [
              "connectionPoint",
              "regionId",
              "bucketName"
            ],
            "properties": {
              "hostId": {
                "description": "ID of a server you want to use to connect to the object storage. You can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.",
                "type": "string",
                "format": "uuid"
              },
              "connectionPoint": {
                "description": "Service point address and port number of the AWS Snowball Edge device.",
                "type": "string"
              },
              "regionId": {
                "description": "For AWS Snowball Edge, the region is *snow*.",
                "type": "string"
              },
              "bucketName": {
                "description": "Name of the bucket where you want to store your backup data.",
                "type": "string"
              }
            }
          }
        ]
      },
      "GoogleCloudStorageBrowserDestinationSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserNewFolderSpec"
          },
          {
            "type": "object",
            "required": [
              "regionId",
              "bucketName"
            ],
            "properties": {
              "hostId": {
                "description": "ID of a server you want to use to connect to the object storage. You can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.",
                "type": "string",
                "format": "uuid"
              },
              "regionId": {
                "description": "Data center region where the bucket is located.",
                "type": "string"
              },
              "bucketName": {
                "description": "Name of the bucket where you want to store your backup data.",
                "type": "string"
              }
            }
          }
        ]
      },
      "IBMCloudStorageBrowserDestinationSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserNewFolderSpec"
          },
          {
            "type": "object",
            "required": [
              "connectionPoint",
              "regionId",
              "bucketName"
            ],
            "properties": {
              "hostId": {
                "description": "ID of a server you want to use to connect to the object storage. You can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.",
                "type": "string",
                "format": "uuid"
              },
              "connectionPoint": {
                "description": "Endpoint address and port number of the IBM Cloud object storage.",
                "type": "string"
              },
              "regionId": {
                "description": "Region where the bucket is located.",
                "type": "string"
              },
              "bucketName": {
                "description": "Name of the bucket where you want to store your backup data.",
                "type": "string"
              }
            }
          }
        ]
      },
      "WasabiCloudStorageBrowserDestinationSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudBrowserNewFolderSpec"
          },
          {
            "type": "object",
            "required": [
              "regionId",
              "bucketName"
            ],
            "properties": {
              "hostId": {
                "description": "ID of a server you want to use to connect to the object storage. You can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.",
                "type": "string",
                "format": "uuid"
              },
              "regionId": {
                "description": "Region where the bucket is located.",
                "type": "string"
              },
              "bucketName": {
                "description": "Name of the bucket where you want to store your backup data.",
                "type": "string"
              }
            }
          }
        ]
      },
      "EAmazonRegionType": {
        "description": "AWS region type.",
        "type": "string",
        "enum": [
          "China",
          "Global",
          "Government"
        ]
      },
      "EAmazonS3Region": {
        "description": "Amazon S3 region code.",
        "type": "string",
        "enum": [
          "unknown",
          "us-east-1",
          "us-east-2",
          "us-west-1",
          "us-west-2",
          "af-south-1",
          "ap-east-1",
          "ap-south-1",
          "ap-northeast-1",
          "ap-northeast-2",
          "ap-southeast-1",
          "ap-southeast-2",
          "ca-central-1",
          "eu-central-1",
          "eu-west-1",
          "eu-west-2",
          "eu-south-1",
          "eu-west-3",
          "eu-north-1",
          "me-south-1",
          "sa-east-1"
        ]
      },
      "ObjectStorageConsumptionLimitModel": {
        "description": "Soft consumption limit for the storage. The limit can be exceeded temporarily.",
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, the consumption limit is enabled.",
            "type": "boolean"
          },
          "consumptionLimitCount": {
            "description": "Limit value.",
            "type": "integer"
          },
          "consumptionLimitKind": {
            "$ref": "#/components/schemas/EConsumptionLimitKind"
          }
        }
      },
      "EConsumptionLimitKind": {
        "description": "Measurement unit.",
        "type": "string",
        "enum": [
          "TB",
          "PB"
        ]
      },
      "GoogleCloudStorageSpec": {
        "description": "Google Cloud storage.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositorySpec"
          },
          {
            "type": "object",
            "required": [
              "account",
              "bucket",
              "mountServer"
            ],
            "properties": {
              "enableTaskLimit": {
                "description": "If *true*, the maximum number of concurrent tasks is limited.",
                "type": "boolean"
              },
              "maxTaskCount": {
                "description": "Maximum number of concurrent tasks.",
                "type": "integer"
              },
              "account": {
                "$ref": "#/components/schemas/GoogleCloudStorageAccountModel"
              },
              "bucket": {
                "$ref": "#/components/schemas/GoogleCloudStorageBucketModel"
              },
              "mountServer": {
                "$ref": "#/components/schemas/MountServerSettingsModel"
              }
            }
          }
        ]
      },
      "GoogleCloudStorageModel": {
        "description": "Google Cloud storage.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositoryModel"
          },
          {
            "type": "object",
            "required": [
              "account",
              "bucket",
              "mountServer"
            ],
            "properties": {
              "enableTaskLimit": {
                "description": "If *true*, the maximum number of concurrent tasks is limited.",
                "type": "boolean"
              },
              "maxTaskCount": {
                "description": "Maximum number of concurrent tasks.",
                "type": "integer"
              },
              "account": {
                "$ref": "#/components/schemas/GoogleCloudStorageAccountModel"
              },
              "bucket": {
                "$ref": "#/components/schemas/GoogleCloudStorageBucketModel"
              },
              "mountServer": {
                "$ref": "#/components/schemas/MountServerSettingsModel"
              }
            }
          }
        ]
      },
      "GoogleCloudStorageAccountModel": {
        "description": "Account used to access the Google Cloud storage.",
        "type": "object",
        "required": [
          "credentialsId",
          "regionId",
          "connectionSettings"
        ],
        "properties": {
          "credentialsId": {
            "description": "ID of a cloud credentials record used to access the storage.",
            "type": "string",
            "format": "uuid"
          },
          "regionId": {
            "description": "ID of a region where the storage bucket is located.",
            "type": "string"
          },
          "connectionSettings": {
            "$ref": "#/components/schemas/ObjectStorageConnectionModel"
          }
        }
      },
      "GoogleCloudStorageBucketModel": {
        "description": "Google Cloud object storage bucket where backup data is stored.",
        "type": "object",
        "required": [
          "bucketName",
          "folderName"
        ],
        "properties": {
          "bucketName": {
            "description": "Name of a Google Cloud bucket.",
            "type": "string"
          },
          "folderName": {
            "description": "Name of the folder that the object storage repository is mapped to.",
            "type": "string"
          },
          "storageConsumptionLimit": {
            "$ref": "#/components/schemas/ObjectStorageConsumptionLimitModel"
          },
          "nearlineStorageEnabled": {
            "description": "If *true*, the nearline storage class is used.",
            "type": "boolean"
          }
        }
      },
      "IBMCloudStorageSpec": {
        "description": "IBM Cloud storage.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositorySpec"
          },
          {
            "type": "object",
            "required": [
              "account",
              "bucket",
              "mountServer"
            ],
            "properties": {
              "enableTaskLimit": {
                "description": "If *true*, the maximum number of concurrent tasks is limited.",
                "type": "boolean"
              },
              "maxTaskCount": {
                "description": "Maximum number of concurrent tasks.",
                "type": "integer"
              },
              "account": {
                "$ref": "#/components/schemas/IBMCloudStorageAccountModel"
              },
              "bucket": {
                "$ref": "#/components/schemas/IBMCloudStorageBucketModel"
              },
              "mountServer": {
                "$ref": "#/components/schemas/MountServerSettingsModel"
              },
              "proxyAppliance": {
                "$ref": "#/components/schemas/S3CompatibleProxyModel"
              }
            }
          }
        ]
      },
      "IBMCloudStorageModel": {
        "description": "IBM Cloud storage.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositoryModel"
          },
          {
            "type": "object",
            "required": [
              "account",
              "bucket",
              "mountServer"
            ],
            "properties": {
              "enableTaskLimit": {
                "description": "If *true*, the maximum number of concurrent tasks is limited.",
                "type": "boolean"
              },
              "maxTaskCount": {
                "description": "Maximum number of concurrent tasks.",
                "type": "integer"
              },
              "account": {
                "$ref": "#/components/schemas/IBMCloudStorageAccountModel"
              },
              "bucket": {
                "$ref": "#/components/schemas/IBMCloudStorageBucketModel"
              },
              "mountServer": {
                "$ref": "#/components/schemas/MountServerSettingsModel"
              },
              "proxyAppliance": {
                "$ref": "#/components/schemas/S3CompatibleProxyModel"
              }
            }
          }
        ]
      },
      "S3CompatibleProxyModel": {
        "description": "Proxy appliance for the S3 compatible storage.",
        "type": "object",
        "required": [
          "managedServerId"
        ],
        "properties": {
          "managedServerId": {
            "description": "ID of a managed server used as a proxy appliance.",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "IBMCloudStorageAccountModel": {
        "description": "Account used to access the IBM Cloud storage.",
        "type": "object",
        "required": [
          "servicePoint",
          "regionId",
          "credentialsId",
          "connectionSettings"
        ],
        "properties": {
          "servicePoint": {
            "description": "Endpoint address and port number of the storage.",
            "type": "string"
          },
          "regionId": {
            "description": "ID of a region where the storage is located.",
            "type": "string"
          },
          "credentialsId": {
            "description": "ID of a cloud credentials record used to access the storage.",
            "type": "string",
            "format": "uuid"
          },
          "connectionSettings": {
            "$ref": "#/components/schemas/ObjectStorageConnectionModel"
          }
        }
      },
      "IBMCloudStorageBucketModel": {
        "description": "IBM Cloud bucket where backup data is stored.",
        "type": "object",
        "required": [
          "bucketName",
          "folderName"
        ],
        "properties": {
          "bucketName": {
            "description": "Name of an IBM Cloud bucket.",
            "type": "string"
          },
          "folderName": {
            "description": "Name of the folder that the object storage repository is mapped to.",
            "type": "string"
          },
          "storageConsumptionLimit": {
            "$ref": "#/components/schemas/ObjectStorageConsumptionLimitModel"
          },
          "immutability": {
            "$ref": "#/components/schemas/ObjectStorageImmutabilityModel"
          }
        }
      },
      "AmazonS3GlacierStorageSpec": {
        "description": "Amazon S3 Glacier storage.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositorySpec"
          },
          {
            "type": "object",
            "required": [
              "account",
              "bucket",
              "mountServer"
            ],
            "properties": {
              "account": {
                "$ref": "#/components/schemas/AmazonS3StorageAccountModel"
              },
              "bucket": {
                "$ref": "#/components/schemas/AmazonS3GlacierStorageBucketModel"
              },
              "proxyAppliance": {
                "$ref": "#/components/schemas/AmazonS3StorageProxyApplianceModel"
              }
            }
          }
        ]
      },
      "AmazonS3GlacierStorageModel": {
        "description": "Amazon S3 Glacier storage.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositoryModel"
          },
          {
            "type": "object",
            "required": [
              "account",
              "bucket",
              "mountServer"
            ],
            "properties": {
              "account": {
                "$ref": "#/components/schemas/AmazonS3StorageAccountModel"
              },
              "bucket": {
                "$ref": "#/components/schemas/AmazonS3GlacierStorageBucketModel"
              },
              "proxyAppliance": {
                "$ref": "#/components/schemas/AmazonS3StorageProxyApplianceModel"
              }
            }
          }
        ]
      },
      "AmazonS3GlacierStorageBucketModel": {
        "description": "Amazon S3 Glacier bucket where backup data is stored.",
        "type": "object",
        "required": [
          "regionId",
          "bucketName",
          "folderName"
        ],
        "properties": {
          "regionId": {
            "description": "ID of a region where the Amazon S3 bucket is located.",
            "type": "string"
          },
          "bucketName": {
            "description": "Name of an Amazon S3 Glacier bucket.",
            "type": "string"
          },
          "folderName": {
            "description": "Name of the folder that the object storage repository is mapped to.",
            "type": "string"
          },
          "immutabilityEnabled": {
            "description": "If *true*, storage immutability is enabled.",
            "type": "boolean"
          },
          "useDeepArchive": {
            "description": "If *true*, Glacier Deep Archive is used for backups with the retention policy over 180 days.",
            "type": "boolean"
          }
        }
      },
      "AmazonS3StorageProxyApplianceModel": {
        "description": "Amazon S3 proxy appliance.",
        "type": "object",
        "properties": {
          "ec2InstanceType": {
            "description": "EC2 instance type for the proxy appliance.",
            "type": "string"
          },
          "vpc": {
            "description": "Amazon VPC where Veeam Backup & Replication launches the target instance.",
            "type": "string"
          },
          "subnet": {
            "description": "Subnet for the proxy appliance.",
            "type": "string"
          },
          "securityGroup": {
            "description": "Security group associated with the proxy appliance.",
            "type": "string"
          },
          "redirectorPort": {
            "description": "TCP port used to route requests between the proxy appliance and backup infrastructure components.",
            "type": "integer"
          }
        }
      },
      "AzureArchiveStorageSpec": {
        "description": "Microsoft Azure Archive storage.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositorySpec"
          },
          {
            "type": "object",
            "required": [
              "account",
              "container",
              "proxyAppliance"
            ],
            "properties": {
              "account": {
                "$ref": "#/components/schemas/AzureArchiveStorageAccountModel"
              },
              "container": {
                "$ref": "#/components/schemas/AzureArchiveStorageContainerModel"
              },
              "proxyAppliance": {
                "$ref": "#/components/schemas/AzureStorageProxyModel"
              }
            }
          }
        ]
      },
      "AzureArchiveStorageModel": {
        "description": "Microsoft Azure Archive storage.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositoryModel"
          },
          {
            "type": "object",
            "required": [
              "account",
              "container",
              "proxyAppliance"
            ],
            "properties": {
              "account": {
                "$ref": "#/components/schemas/AzureArchiveStorageAccountModel"
              },
              "container": {
                "$ref": "#/components/schemas/AzureArchiveStorageContainerModel"
              },
              "proxyAppliance": {
                "$ref": "#/components/schemas/AzureStorageProxyModel"
              }
            }
          }
        ]
      },
      "AzureArchiveStorageAccountModel": {
        "description": "Account used to access the Azure Archive storage.",
        "type": "object",
        "required": [
          "credentialsId",
          "regionType",
          "connectionSettings"
        ],
        "properties": {
          "credentialsId": {
            "description": "ID of a cloud credentials record used to access the storage.",
            "type": "string",
            "format": "uuid"
          },
          "regionType": {
            "$ref": "#/components/schemas/EAzureRegionType"
          },
          "connectionSettings": {
            "$ref": "#/components/schemas/ObjectStorageConnectionModel"
          }
        }
      },
      "AzureArchiveStorageContainerModel": {
        "description": "Azure Archive container where backup data is stored.",
        "type": "object",
        "required": [
          "containerName",
          "folderName"
        ],
        "properties": {
          "containerName": {
            "description": "Name of an Azure Archive container.",
            "type": "string"
          },
          "folderName": {
            "description": "Name of the folder that the object storage repository is mapped to.",
            "type": "string"
          }
        }
      },
      "AzureStorageProxyModel": {
        "description": "Azure storage proxy appliance.",
        "type": "object",
        "required": [
          "subscriptionId"
        ],
        "properties": {
          "subscriptionId": {
            "description": "ID that Veeam Backup & Replication assigned to the Azure subscription.",
            "type": "string",
            "format": "uuid"
          },
          "instanceSize": {
            "description": "Size of the appliance.",
            "type": "string"
          },
          "resourceGroup": {
            "description": "Resource group associated with the proxy appliance.",
            "type": "string"
          },
          "virtualNetwork": {
            "description": "Network to which the helper appliance is connected.",
            "type": "string"
          },
          "subnet": {
            "description": "Subnet for the proxy appliance.",
            "type": "string"
          },
          "redirectorPort": {
            "description": "TCP port used to route requests between the proxy appliance and backup infrastructure components.",
            "type": "integer"
          }
        }
      },
      "WasabiCloudStorageSpec": {
        "description": "Wasabi Cloud storage.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositorySpec"
          },
          {
            "type": "object",
            "required": [
              "account",
              "bucket",
              "mountServer"
            ],
            "properties": {
              "enableTaskLimit": {
                "description": "If *true*, the maximum number of concurrent tasks is limited.",
                "type": "boolean"
              },
              "maxTaskCount": {
                "description": "Maximum number of concurrent tasks.",
                "type": "integer"
              },
              "account": {
                "$ref": "#/components/schemas/WasabiCloudStorageAccountModel"
              },
              "bucket": {
                "$ref": "#/components/schemas/WasabiCloudStorageBucketModel"
              },
              "mountServer": {
                "$ref": "#/components/schemas/MountServerSettingsModel"
              },
              "proxyAppliance": {
                "$ref": "#/components/schemas/S3CompatibleProxyModel"
              }
            }
          }
        ]
      },
      "WasabiCloudStorageModel": {
        "description": "Wasabi Cloud storage.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RepositoryModel"
          },
          {
            "type": "object",
            "required": [
              "account",
              "bucket",
              "mountServer"
            ],
            "properties": {
              "enableTaskLimit": {
                "description": "If *true*, the maximum number of concurrent tasks is limited.",
                "type": "boolean"
              },
              "maxTaskCount": {
                "description": "Maximum number of concurrent tasks.",
                "type": "integer"
              },
              "account": {
                "$ref": "#/components/schemas/WasabiCloudStorageAccountModel"
              },
              "bucket": {
                "$ref": "#/components/schemas/WasabiCloudStorageBucketModel"
              },
              "mountServer": {
                "$ref": "#/components/schemas/MountServerSettingsModel"
              },
              "proxyAppliance": {
                "$ref": "#/components/schemas/S3CompatibleProxyModel"
              }
            }
          }
        ]
      },
      "WasabiCloudStorageAccountModel": {
        "description": "Account used to access the Wasabi Cloud storage.",
        "type": "object",
        "required": [
          "regionId",
          "credentialsId",
          "connectionSettings"
        ],
        "properties": {
          "regionId": {
            "description": "ID of a region where the storage is located.",
            "type": "string"
          },
          "credentialsId": {
            "description": "ID of a cloud credentials record used to access the storage.",
            "type": "string",
            "format": "uuid"
          },
          "connectionSettings": {
            "$ref": "#/components/schemas/ObjectStorageConnectionModel"
          }
        }
      },
      "WasabiCloudStorageBucketModel": {
        "description": "Wasabi bucket where backup data is stored.",
        "type": "object",
        "required": [
          "bucketName",
          "folderName"
        ],
        "properties": {
          "bucketName": {
            "description": "Name of a Wasabi bucket.",
            "type": "string"
          },
          "folderName": {
            "description": "Name of the folder that the object storage repository is mapped to.",
            "type": "string"
          },
          "storageConsumptionLimit": {
            "$ref": "#/components/schemas/ObjectStorageConsumptionLimitModel"
          },
          "immutability": {
            "$ref": "#/components/schemas/ObjectStorageImmutabilityModel"
          }
        }
      },
      "VmwareFcdQuickMigrationSpec": {
        "required": [
          "targetDatastore"
        ],
        "type": "object",
        "properties": {
          "mountedDiskNames": {
            "description": "Array of disks that will be migrated to the `targetDatastore` associated with the `storagePolicy`.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "targetDatastore": {
            "$ref": "#/components/schemas/VmwareObjectModel"
          },
          "storagePolicy": {
            "$ref": "#/components/schemas/VmwareObjectModel"
          }
        }
      },
      "RepositoryStatesResult": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of repository states.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepositoryStateModel"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationResult"
          }
        }
      },
      "RepositoryStateModel": {
        "required": [
          "id",
          "name",
          "type",
          "description",
          "capacityGB",
          "freeGB",
          "usedSpaceGB"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of the backup repository.",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "Name of the backup repository.",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ERepositoryType"
          },
          "description": {
            "description": "Description of the backup repository.",
            "type": "string"
          },
          "hostId": {
            "description": "ID of the server that is used as a backup repository.",
            "type": "string",
            "format": "uuid"
          },
          "hostName": {
            "description": "Name of the server that is used as a backup repository.",
            "type": "string"
          },
          "path": {
            "description": "Path to the folder where backup files are stored.",
            "type": "string"
          },
          "capacityGB": {
            "description": "Repository capacity in GB.",
            "type": "number",
            "format": "double"
          },
          "freeGB": {
            "description": "Repository free space in GB.",
            "type": "number",
            "format": "double"
          },
          "usedSpaceGB": {
            "description": "Repository used space in GB.",
            "type": "number",
            "format": "double"
          }
        }
      },
      "RepositoryStatesFilters": {
        "description": "Filters repositories by the specified parameters.",
        "type": "object",
        "properties": {
          "skip": {
            "description": "Skips the specified number of repositories.",
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "description": "Returns the specified number of repositories.",
            "type": "integer",
            "format": "int32"
          },
          "orderColumn": {
            "$ref": "#/components/schemas/ERepositoryStatesFiltersOrderColumn"
          },
          "orderAsc": {
            "description": "Sorts repositories in the ascending order by the `orderColumn` parameter.",
            "type": "boolean"
          },
          "idFilter": {
            "type": "string",
            "format": "uuid"
          },
          "nameFilter": {
            "description": "Filters repositories by the `nameFilter` pattern. The pattern can match any repository parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.",
            "type": "string"
          },
          "typeFilter": {
            "$ref": "#/components/schemas/ERepositoryType"
          },
          "capacityFilter": {
            "description": "Filters repositories by repository capacity.",
            "type": "number",
            "format": "double"
          },
          "freeSpaceFilter": {
            "description": "Filters repositories by repository free space.",
            "type": "number",
            "format": "double"
          },
          "usedSpaceFilter": {
            "description": "Filters repositories by repository used space.",
            "type": "number",
            "format": "double"
          }
        }
      },
      "ERepositoryStatesFiltersOrderColumn": {
        "description": "Orders repositories by the specified column.",
        "type": "string",
        "enum": [
          "Name",
          "Type",
          "Host",
          "Path",
          "CapacityGB",
          "FreeGB",
          "UsedSpaceGB",
          "Description"
        ]
      },
      "ServicesResult": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of services.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServicesModel"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationResult"
          }
        }
      },
      "ServicesModel": {
        "required": [
          "name",
          "port"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the service.",
            "type": "string"
          },
          "port": {
            "description": "Port used to communicate with the service.",
            "type": "integer"
          }
        }
      },
      "ServicesFilters": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "orderColumn": {
            "$ref": "#/components/schemas/EServicesFiltersOrderColumn"
          },
          "orderAsc": {
            "type": "boolean"
          },
          "nameFilter": {
            "type": "string"
          }
        }
      },
      "EServicesFiltersOrderColumn": {
        "type": "string",
        "enum": [
          "Name",
          "Port"
        ]
      },
      "RepositoryAccessPermissionsModel": {
        "description": "Repository access permissions.",
        "type": "object",
        "required": [
          "accessPolicy",
          "encryptBackups"
        ],
        "properties": {
          "accessPolicy": {
            "$ref": "#/components/schemas/ERepositoryAccessType"
          },
          "accounts": {
            "description": "(For *AllowExplicit* access policy) Array of accounts that have access to the backup repository.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "encryptBackups": {
            "description": "If *true*, Veeam Backup & Replication encrypts Veeam Agent backup files stored in the backup repository.",
            "type": "boolean"
          },
          "passwordId": {
            "description": "ID of the password used for encryption.",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ERepositoryAccessType": {
        "description": "Access type.",
        "type": "string",
        "enum": [
          "DenyAll",
          "AllowAll",
          "AllowExplicit"
        ]
      },
      "DeleteRepositoryFilters": {
        "type": "object",
        "properties": {
          "deleteBackups": {
            "type": "boolean"
          }
        }
      },
      "GeneralOptionsModel": {
        "type": "object",
        "properties": {
          "emailSettings": {
            "$ref": "#/components/schemas/GeneralOptionsEmailNotificationsModel"
          },
          "notifications": {
            "$ref": "#/components/schemas/GeneralOptionsNotificationsModel"
          }
        }
      },
      "GeneralOptionsEmailNotificationsModel": {
        "description": "Global email notification settings and job notifications.",
        "type": "object",
        "required": [
          "isEnabled",
          "smtpServerName",
          "advancedSmtpOptions",
          "from",
          "to",
          "subject",
          "sendDailyReportsAt",
          "notifyOnSuccess",
          "notifyOnWarning",
          "notifyOnFailure",
          "notifyOnLastRetry"
        ],
        "properties": {
          "isEnabled": {
            "description": "If *true*, global email notification settings are enabled.",
            "type": "boolean"
          },
          "smtpServerName": {
            "description": "Full DNS name or IP address of the SMTP server.",
            "type": "string"
          },
          "advancedSmtpOptions": {
            "$ref": "#/components/schemas/AdvancedSmtpOptionsModel"
          },
          "from": {
            "description": "Email address from which email notifications must be sent.",
            "type": "string"
          },
          "to": {
            "description": "Recipient email addresses. Use a semicolon to separate multiple addresses.",
            "type": "string"
          },
          "subject": {
            "description": "Notification subject. Use the following variables in the subject:<ul> <li>%Time% — completion time</li> <li>%JobName% — job name</li> <li>%JobResult% — job result</li> <li>%ObjectCount% — number of VMs in the job</li> <li>%Issues% — number of VMs in the job that have been processed with the Warning or Failed status</li></ul>",
            "type": "string"
          },
          "sendDailyReportsAt": {
            "description": "Time when Veeam Backup & Replication sends daily email reports.",
            "type": "string",
            "format": "date-time"
          },
          "notifyOnSuccess": {
            "description": "If *true*, email notifications are sent when the job completes successfully.",
            "type": "boolean"
          },
          "notifyOnWarning": {
            "description": "If *true*, email notifications are sent when the job completes with a warning.",
            "type": "boolean"
          },
          "notifyOnFailure": {
            "description": "If *true*, email notifications are sent when the job fails.",
            "type": "boolean"
          },
          "notifyOnLastRetry": {
            "description": "If *true*, email notifications are sent about the final job status only (not per every job retry).",
            "type": "boolean"
          }
        }
      },
      "AdvancedSmtpOptionsModel": {
        "description": "Advanced global email notification settings.",
        "type": "object",
        "required": [
          "port",
          "timeoutMs",
          "SSLEnabled",
          "authRequired"
        ],
        "properties": {
          "port": {
            "description": "Port number for the SMTP server.",
            "type": "integer",
            "format": "int32"
          },
          "timeoutMs": {
            "description": "Connection timeout for the SMTP server.",
            "type": "integer",
            "format": "int32"
          },
          "SSLEnabled": {
            "description": "If *true*, secure connection for email operations is used.",
            "type": "boolean"
          },
          "authRequired": {
            "description": "If *true*, the `credentialsId` credentials are used to connect to the SMTP server.",
            "type": "boolean"
          },
          "credentialsId": {
            "description": "ID of the credentials used to connect to the server.",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "GeneralOptionsNotificationsModel": {
        "description": "Other notifications such as notifications on low disk space, support contract expiration, and available updates.",
        "type": "object",
        "required": [
          "storageSpaceThresholdEnabled",
          "storageSpaceThreshold",
          "datastoreSpaceThresholdEnabled",
          "datastoreSpaceThreshold",
          "skipVMSpaceThresholdEnabled",
          "skipVMSpaceThreshold",
          "notifyOnSupportExpiration",
          "notifyOnUpdates"
        ],
        "properties": {
          "storageSpaceThresholdEnabled": {
            "description": "If *true*, notifications about critical amount of free space in backup storage are enabled.",
            "type": "boolean"
          },
          "storageSpaceThreshold": {
            "description": "Space threshold of backup storage, in percent.",
            "type": "integer",
            "format": "int32"
          },
          "datastoreSpaceThresholdEnabled": {
            "description": "If *true*, notifications about critical amount of free space in production datastore are enabled.",
            "type": "boolean"
          },
          "datastoreSpaceThreshold": {
            "description": "Space threshold of production datastore, in percent.",
            "type": "integer",
            "format": "int32"
          },
          "skipVMSpaceThresholdEnabled": {
            "description": "If *true* and the `skipVMSpaceThreshold` threshold is reached, Veeam Backup & Replication terminates backup and replication jobs working with production datastores before VM snapshots are taken.",
            "type": "boolean"
          },
          "skipVMSpaceThreshold": {
            "description": "Space threshold of production datastore, in percent.",
            "type": "integer",
            "format": "int32"
          },
          "notifyOnSupportExpiration": {
            "description": "If *true*, notifications about support contract expiration are enabled.",
            "type": "boolean"
          },
          "notifyOnUpdates": {
            "description": "If *true*, notifications about updates are enabled.",
            "type": "boolean"
          }
        }
      },
      "ConfigBackupModel": {
        "required": [
          "isEnabled",
          "backupRepositoryId",
          "restorePointsToKeep",
          "notifications",
          "schedule",
          "lastSuccessfulBackup",
          "encryption"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, configuration backup is enabled.",
            "type": "boolean"
          },
          "backupRepositoryId": {
            "description": "ID of the backup repository on which the configuration backup is stored.",
            "type": "string",
            "format": "uuid"
          },
          "restorePointsToKeep": {
            "description": "Number of restore points to keep in the backup repository.",
            "type": "integer",
            "format": "int32"
          },
          "notifications": {
            "$ref": "#/components/schemas/ConfigBackupNotificationsModel"
          },
          "schedule": {
            "$ref": "#/components/schemas/ConfigBackupScheduleModel"
          },
          "lastSuccessfulBackup": {
            "$ref": "#/components/schemas/ConfigBackupLastSuccessfulModel"
          },
          "encryption": {
            "$ref": "#/components/schemas/ConfigBackupEncryptionModel"
          }
        }
      },
      "ConfigBackupNotificationsModel": {
        "description": "Notification settings.",
        "required": [
          "SNMPEnabled"
        ],
        "type": "object",
        "properties": {
          "SNMPEnabled": {
            "description": "If *true*, SNMP traps are enabled for this job.",
            "type": "boolean"
          },
          "SMTPSettings": {
            "$ref": "#/components/schemas/ConfigBackupSMTPSettigsModel"
          }
        }
      },
      "ConfigBackupSMTPSettigsModel": {
        "description": "Email notification settings.",
        "required": [
          "isEnabled",
          "recipients",
          "settingsType",
          "subject",
          "notifyOnSuccess",
          "notifyOnWarning",
          "notifyOnError"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, email notifications are enabled for this job.",
            "type": "boolean"
          },
          "recipients": {
            "description": "Array of recipients' email addresses.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "settingsType": {
            "$ref": "#/components/schemas/EConfigBackupSMTPSettingsType"
          },
          "subject": {
            "description": "Notification subject. Use the following variables in the subject:<ul> <li>*%Time%* — completion time</li> <li>*%JobName%* — job name</li> <li>*%JobResult%* — job result</li></ul>",
            "type": "string"
          },
          "notifyOnSuccess": {
            "description": "If *true*, email notifications are sent when the job completes successfully.",
            "type": "boolean"
          },
          "notifyOnWarning": {
            "description": "If *true*, email notifications are sent when the job completes with a warning.",
            "type": "boolean"
          },
          "notifyOnError": {
            "description": "If *true*, email notifications are sent when the job fails.",
            "type": "boolean"
          }
        }
      },
      "EConfigBackupSMTPSettingsType": {
        "description": "Type of notification settings.",
        "type": "string",
        "enum": [
          "Global",
          "Custom"
        ]
      },
      "ConfigBackupLastSuccessfulModel": {
        "description": "Last successful backup.",
        "type": "object",
        "properties": {
          "lastSuccessfulTime": {
            "description": "Date and time when the last successful backup was created.",
            "type": "string",
            "format": "date-time"
          },
          "sessionId": {
            "description": "ID of the job session.",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ConfigBackupScheduleModel": {
        "description": "Scheduling settings.",
        "type": "object",
        "required": [
          "isEnabled"
        ],
        "properties": {
          "isEnabled": {
            "description": "If *true*, backup scheduling is enabled.",
            "type": "boolean"
          },
          "daily": {
            "$ref": "#/components/schemas/ScheduleDailyModel"
          },
          "monthly": {
            "$ref": "#/components/schemas/ScheduleMonthlyModel"
          }
        }
      },
      "ConfigBackupEncryptionModel": {
        "description": "Encryption settings.",
        "required": [
          "isEnabled",
          "passwordId"
        ],
        "type": "object",
        "properties": {
          "isEnabled": {
            "description": "If *true*, backup encryption is enabled.",
            "type": "boolean"
          },
          "passwordId": {
            "description": "ID of the password used for encryption.",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "ScaleOutExtentMaintenanceSpec": {
        "type": "object",
        "required": [
          "repositoryIds"
        ],
        "properties": {
          "repositoryIds": {
            "description": "Array of repository IDs added as scale-out backup repository extents.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "ConnectionCertificateModel": {
        "type": "object",
        "properties": {
          "fingerprint": {
            "description": "SSH key fingerprint used to verify the server identity.",
            "type": "string"
          },
          "certificate": {
            "$ref": "#/components/schemas/CertificateModel"
          }
        }
      },
      "EEntireVMRestoreModeType": {
        "description": "Restore mode.",
        "type": "string",
        "enum": [
          "OriginalLocation",
          "Customized"
        ]
      },
      "EntireViVMRestoreSpec": {
        "required": [
          "objectRestorePointId",
          "type"
        ],
        "type": "object",
        "properties": {
          "objectRestorePointId": {
            "description": "ID of the restore point.",
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/EEntireVMRestoreModeType"
          },
          "restoreProxies": {
            "$ref": "#/components/schemas/RestoreProxySpec"
          },
          "secureRestore": {
            "$ref": "#/components/schemas/SecureRestoreSpec"
          },
          "powerUp": {
            "description": "If *true*, Veeam Backup & Replication starts the restored VM on the target host.",
            "type": "boolean"
          },
          "reason": {
            "description": "Reason for restoring the VM.",
            "type": "string"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/EntireViVMOriginalLocationRestoreSpec"
          },
          {
            "$ref": "#/components/schemas/EntireViVMCustomizedRestoreSpec"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "OriginalLocation": "#/components/schemas/EntireViVMOriginalLocationRestoreSpec",
            "Customized": "#/components/schemas/EntireViVMCustomizedRestoreSpec"
          }
        }
      },
      "EntireViVMOriginalLocationRestoreSpec": {
        "description": "Restore to the original location with initial settings.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntireViVMRestoreSpec"
          },
          {
            "type": "object",
            "properties": {
              "quickRollback": {
                "description": "If *true*, Veeam Backup & Replication performs incremental restore.",
                "type": "boolean"
              }
            }
          }
        ]
      },
      "EntireViVMCustomizedRestoreSpec": {
        "description": "Restore to a new location or with different settings. To get models of the destination host and resource pool, use the [Get VMware vSphere Server Objects](#tag/Inventory-Browser/operation/GetVmwareHostObject) request.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EntireViVMRestoreSpec"
          },
          {
            "type": "object",
            "properties": {
              "destinationHost": {
                "$ref": "#/components/schemas/VmwareObjectModel"
              },
              "resourcePool": {
                "$ref": "#/components/schemas/VmwareObjectModel"
              },
              "datastore": {
                "$ref": "#/components/schemas/RestoreTargetDatastoreSpec"
              },
              "folder": {
                "$ref": "#/components/schemas/RestoreTargetFolderSpec"
              },
              "network": {
                "$ref": "#/components/schemas/RestoreTargetNetworkSpec"
              }
            }
          }
        ]
      },
      "RestoreProxySpec": {
        "description": "Backup proxies for VM data transport.",
        "required": [
          "autoSelection"
        ],
        "type": "object",
        "properties": {
          "autoSelection": {
            "description": "If *true*, Veeam Backup & Replication detects backup proxies that are connected to the source datastore and automatically assigns optimal proxy resources for processing VM data.",
            "type": "boolean"
          },
          "proxyIds": {
            "description": "Array of backup proxy IDs.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "SecureRestoreSpec": {
        "description": "Secure restore settings.",
        "required": [
          "enableAntivirusScan"
        ],
        "type": "object",
        "properties": {
          "enableAntivirusScan": {
            "description": "If *true*, Veeam Backup & Replication scans machine data with antivirus software before restoring the machine to the production environment.",
            "type": "boolean"
          },
          "virusDetectionAction": {
            "$ref": "#/components/schemas/EVirusDetectionAction"
          },
          "enableEntireVolumeScan": {
            "description": "If *true*, the antivirus continues machine scan after the first malware is found.",
            "type": "boolean"
          }
        }
      },
      "EVirusDetectionAction": {
        "description": "Action that Veeam Backup & Replication takes if the antivirus software finds a threat.",
        "type": "string",
        "enum": [
          "DisableNetwork",
          "AbortRecovery",
          "Ignore"
        ]
      },
      "RestoreTargetDatastoreSpec": {
        "description": "Destination datastore.",
        "type": "object",
        "properties": {
          "datastore": {
            "$ref": "#/components/schemas/VmwareObjectModel"
          },
          "diskType": {
            "$ref": "#/components/schemas/EDiskCreationMode"
          }
        }
      },
      "EDiskCreationMode": {
        "description": "Disk format of the restored VM.",
        "x-enumDescriptions": {
          "Source": "Same as source.",
          "Thick": "Thick provision lazy zeroed.",
          "Thin": "Thin provision.",
          "ThickEagerZeroed": "Thick provision eager zeroed."
        },
        "type": "string",
        "enum": [
          "Source",
          "Thick",
          "Thin",
          "ThickEagerZeroed"
        ]
      },
      "RestoreTargetFolderSpec": {
        "description": "Destination VM folder.",
        "required": [
          "folder"
        ],
        "type": "object",
        "properties": {
          "vmName": {
            "description": "VM name.",
            "type": "string"
          },
          "folder": {
            "$ref": "#/components/schemas/VmwareObjectModel"
          },
          "restoreVmTags": {
            "description": "If *true*, Veeam Backup & Replication restores tags that were assigned to the original VMs, and assigns them to the restored VMs.",
            "type": "boolean"
          }
        }
      },
      "RestoreTargetNetworkSpec": {
        "description": "Network to which the restored VM is connected.",
        "type": "object",
        "required": [
          "network"
        ],
        "properties": {
          "network": {
            "$ref": "#/components/schemas/VmwareObjectModel"
          },
          "disconnected": {
            "description": "If *true*, the restored VMs is not connected to any virtual network.",
            "type": "boolean"
          }
        }
      },
      "InstantViVMRecoverySpec": {
        "description": "Instant Recovery settings.",
        "required": [
          "objectRestorePointId",
          "type",
          "secureRestore"
        ],
        "type": "object",
        "properties": {
          "objectRestorePointId": {
            "description": "ID of the restore point.",
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "$ref": "#/components/schemas/EInstantVMRecoveryModeType"
          },
          "VmTagsRestoreEnabled": {
            "description": "If *true*, Veeam Backup & Replication restores tags that were assigned to the original VM, and assign them to the restored VM.",
            "type": "boolean"
          },
          "secureRestore": {
            "$ref": "#/components/schemas/SecureRestoreSpec"
          },
          "nicsEnabled": {
            "description": "If *true*, the restored VM is connected to the network.",
            "type": "boolean"
          },
          "powerUp": {
            "description": "If *true*, Veeam Backup & Replication starts the restored VM on the target host.",
            "type": "boolean"
          },
          "reason": {
            "description": "Reason for restoring the VM.",
            "type": "string"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/InstantViVMOriginalLocationRecoverySpec"
          },
          {
            "$ref": "#/components/schemas/InstantViVMCustomizedRecoverySpec"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "OriginalLocation": "#/components/schemas/InstantViVMOriginalLocationRecoverySpec",
            "Customized": "#/components/schemas/InstantViVMCustomizedRecoverySpec"
          }
        }
      },
      "EInstantVMRecoveryModeType": {
        "description": "Restore mode.",
        "type": "string",
        "enum": [
          "OriginalLocation",
          "Customized"
        ]
      },
      "InstantViVMOriginalLocationRecoverySpec": {
        "description": "Instant Recovery to the original location with initial settings.",
        "allOf": [
          {
            "$ref": "#/components/schemas/InstantViVMRecoverySpec"
          }
        ]
      },
      "InstantViVMCustomizedRecoverySpec": {
        "description": "Instant Recovery to a new location or with different settings.",
        "allOf": [
          {
            "$ref": "#/components/schemas/InstantViVMRecoverySpec"
          },
          {
            "type": "object",
            "required": [
              "destination",
              "datastore"
            ],
            "properties": {
              "destination": {
                "$ref": "#/components/schemas/InstantViVMCustomizedRecoveryDestinationSpec"
              },
              "datastore": {
                "$ref": "#/components/schemas/InstantViVMCustomizedRecoveryDatastoreSpec"
              },
              "overwrite": {
                "description": "If *true*, Veeam Backup & Replication overwrites the existing VM that has the same name.",
                "type": "boolean"
              }
            }
          }
        ]
      },
      "InstantViVMCustomizedRecoveryDestinationSpec": {
        "description": "Destination where the recovered VM resides. To get models of the destination host, folder and resource pool, use the [Get VMware vSphere Server Objects](#tag/Inventory-Browser/operation/GetVmwareHostObject) request.",
        "required": [
          "restoredVmName",
          "destinationHost",
          "folder",
          "resourcePool",
          "biosUuidPolicy"
        ],
        "type": "object",
        "properties": {
          "restoredVmName": {
            "description": "Restored VM name.",
            "type": "string"
          },
          "destinationHost": {
            "$ref": "#/components/schemas/VmwareObjectModel"
          },
          "folder": {
            "$ref": "#/components/schemas/VmwareObjectModel"
          },
          "resourcePool": {
            "$ref": "#/components/schemas/VmwareObjectModel"
          },
          "biosUuidPolicy": {
            "$ref": "#/components/schemas/EInstantViVmRecoveryBiosUuidPolicyType"
          }
        }
      },
      "EInstantViVmRecoveryBiosUuidPolicyType": {
        "description": "BIOS UUID policy for the restored VM.",
        "type": "string",
        "enum": [
          "preserve",
          "generateNew"
        ]
      },
      "InstantViVMCustomizedRecoveryDatastoreSpec": {
        "description": "Datastore that keeps redo logs with changes that take place while a VM is running from a backup.",
        "required": [
          "redirectIsEnabled"
        ],
        "type": "object",
        "properties": {
          "redirectIsEnabled": {
            "description": "If *true*, redo logs are redirected to `cacheDatastore`.",
            "type": "boolean"
          },
          "cacheDatastore": {
            "$ref": "#/components/schemas/VmwareObjectModel"
          }
        }
      },
      "InstantViVMRecoveryMount": {
        "description": "VM mount.",
        "required": [
          "id",
          "sessionId",
          "state",
          "spec",
          "vmName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Mount ID.",
            "type": "string",
            "format": "uuid"
          },
          "sessionId": {
            "description": "ID of the restore session. Use the ID to track the progress. For details, see [Get Session](#tag/Sessions/operation/GetSession).",
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "$ref": "#/components/schemas/EInstantRecoveryMountState"
          },
          "spec": {
            "$ref": "#/components/schemas/InstantViVMRecoverySpec"
          },
          "vmName": {
            "description": "Name of the recovered VM.",
            "type": "string"
          },
          "errorMessage": {
            "description": "Error message.",
            "type": "string"
          }
        }
      },
      "InstantViVMRecoveryMountsFilters": {
        "type": "object",
        "properties": {
          "skip": {
            "description": "Number of mounts to skip.",
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "description": "Maximum number of mounts to return.",
            "type": "integer",
            "format": "int32"
          },
          "orderColumn": {
            "$ref": "#/components/schemas/EInstantViVMRecoveryMountsFiltersOrderColumn"
          },
          "orderAsc": {
            "description": "Sorts mounts in the ascending order by the `orderColumn` parameter.",
            "type": "boolean"
          },
          "nameFilter": {
            "description": "Filters mounts by the `nameFilter` pattern. The pattern can match any mount parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.",
            "type": "string"
          },
          "stateFilter": {
            "$ref": "#/components/schemas/EInstantRecoveryMountState"
          }
        }
      },
      "EInstantViVMRecoveryMountsFiltersOrderColumn": {
        "description": "Sorts mounts by one of the mount parameters.",
        "type": "string",
        "enum": [
          "state",
          "name"
        ]
      },
      "InstantViVMRecoveryMountsResult": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of VM mounts.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstantViVMRecoveryMount"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationResult"
          }
        }
      },
      "ViVMQuickMigrationSpec": {
        "required": [
          "destinationHost"
        ],
        "type": "object",
        "properties": {
          "destinationHost": {
            "$ref": "#/components/schemas/VmwareObjectModel"
          },
          "resourcePool": {
            "$ref": "#/components/schemas/VmwareObjectModel"
          },
          "folder": {
            "$ref": "#/components/schemas/VmwareObjectModel"
          },
          "datastore": {
            "$ref": "#/components/schemas/VmwareObjectModel"
          },
          "sourceProxyIds": {
            "description": "Array of source backup proxies.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "targetProxyIds": {
            "description": "Array of target backup proxies.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "VeeamQMEnabled": {
            "description": "If *true*, the Veeam Quick Migration mechanism is used. Otherwise, Veeam Backup & Replication will use VMware vMotion for migration.",
            "type": "boolean"
          },
          "DeleteSourceVmsFiles": {
            "description": "If *true*, Veeam Backup & Replication will delete source VM files upon successful migration.",
            "type": "boolean"
          }
        }
      },
      "ComputerRecoveryTokenSpec": {
        "required": [
          "backupIds",
          "expirationDate"
        ],
        "type": "object",
        "properties": {
          "backupIds": {
            "description": "Array of backup IDs whose data you want to restore with the recovery token.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "expirationDate": {
            "description": "Date and time when the access token expires.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ComputerRecoveryTokenFilters": {
        "type": "object",
        "properties": {
          "skip": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "orderColumn": {
            "$ref": "#/components/schemas/EComputerRecoveryTokenFiltersOrderColumn"
          },
          "orderAsc": {
            "type": "boolean"
          },
          "nameFilter": {
            "type": "string"
          },
          "expirationDateBefore": {
            "type": "string",
            "format": "date-time"
          },
          "expirationDateAfter": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "EComputerRecoveryTokenFiltersOrderColumn": {
        "type": "string",
        "enum": [
          "Name",
          "ExpirationDate"
        ]
      },
      "ComputerRecoveryTokenResult": {
        "required": [
          "data",
          "pagination"
        ],
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of recovery tokens.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComputerRecoveryTokenModel"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationResult"
          }
        }
      },
      "ComputerRecoveryTokenModel": {
        "required": [
          "id",
          "name",
          "expirationDate"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of the recovery token.",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "Friendly name of the recovery token.",
            "type": "string"
          },
          "recoveryToken": {
            "description": "Recovery token.",
            "type": "string"
          },
          "expirationDate": {
            "description": "Date and time when the recovery token expires.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CloudDeviceCodeSpec": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ECloudCredentialsType"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/AzureComputeCloudDeviceCodeSpec"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "AzureCompute": "#/components/schemas/AzureComputeCloudDeviceCodeSpec"
          }
        }
      },
      "AzureComputeCloudDeviceCodeSpec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudDeviceCodeSpec"
          },
          {
            "type": "object",
            "required": [
              "region"
            ],
            "properties": {
              "region": {
                "$ref": "#/components/schemas/EAzureRegionType"
              }
            }
          }
        ]
      },
      "CloudDeviceCodeModel": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ECloudCredentialsType"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/AzureComputeCloudDeviceCodeModel"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "AzureCompute": "#/components/schemas/AzureComputeCloudDeviceCodeModel"
          }
        }
      },
      "AzureComputeCloudDeviceCodeModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudDeviceCodeModel"
          },
          {
            "type": "object",
            "required": [
              "url",
              "verificationCode",
              "expirationTime"
            ],
            "properties": {
              "url": {
                "description": "Verification URI.",
                "type": "string"
              },
              "verificationCode": {
                "description": "Verification code.",
                "type": "string"
              },
              "expirationTime": {
                "description": "Expiration date and time of the verification code. By default, the code is valid for 15 minutes.",
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "CloudNativeApplicationModel": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ECloudCredentialsType"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/AzureComputeCloudNativeApplicationModel"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "AzureCompute": "#/components/schemas/AzureComputeCloudNativeApplicationModel"
          }
        }
      },
      "AzureComputeCloudNativeApplicationModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CloudNativeApplicationModel"
          },
          {
            "type": "object",
            "required": [
              "applicationId",
              "secret",
              "tenantId"
            ],
            "properties": {
              "applicationId": {
                "description": "Client ID assigned to the Azure Active Directory application.",
                "type": "string"
              },
              "secret": {
                "description": "Client secret assigned to the Azure Active Directory application.",
                "type": "string"
              },
              "tenantId": {
                "description": "ID of a tenant where the Azure Active Directory application is registered in.",
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "parameters": {
      "apiVersionParam": {
        "name": "x-api-version",
        "description": "Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string",
          "default": "1.1-rev0"
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "Access token specified in the following format&#58; `Bearer <access token>`.",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}