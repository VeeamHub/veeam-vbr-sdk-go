// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EBackupScriptProcessingMode Scenario for scripts execution.
//
// swagger:model EBackupScriptProcessingMode
type EBackupScriptProcessingMode string

func NewEBackupScriptProcessingMode(value EBackupScriptProcessingMode) *EBackupScriptProcessingMode {
	v := value
	return &v
}

const (

	// EBackupScriptProcessingModeDisableExec captures enum value "disableExec"
	EBackupScriptProcessingModeDisableExec EBackupScriptProcessingMode = "disableExec"

	// EBackupScriptProcessingModeIgnoreExecFailures captures enum value "ignoreExecFailures"
	EBackupScriptProcessingModeIgnoreExecFailures EBackupScriptProcessingMode = "ignoreExecFailures"

	// EBackupScriptProcessingModeRequireSuccess captures enum value "requireSuccess"
	EBackupScriptProcessingModeRequireSuccess EBackupScriptProcessingMode = "requireSuccess"
)

// for schema
var eBackupScriptProcessingModeEnum []interface{}

func init() {
	var res []EBackupScriptProcessingMode
	if err := json.Unmarshal([]byte(`["disableExec","ignoreExecFailures","requireSuccess"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eBackupScriptProcessingModeEnum = append(eBackupScriptProcessingModeEnum, v)
	}
}

func (m EBackupScriptProcessingMode) validateEBackupScriptProcessingModeEnum(path, location string, value EBackupScriptProcessingMode) error {
	if err := validate.EnumCase(path, location, value, eBackupScriptProcessingModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e backup script processing mode
func (m EBackupScriptProcessingMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEBackupScriptProcessingModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e backup script processing mode based on context it is used
func (m EBackupScriptProcessingMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
