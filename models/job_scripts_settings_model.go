// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobScriptsSettingsModel Script settings.
//
// swagger:model JobScriptsSettingsModel
type JobScriptsSettingsModel struct {

	// Days of the week when the scripts must be executed.
	// Unique: true
	DayOfWeek []EDayOfWeek `json:"dayOfWeek"`

	// periodicity type
	PeriodicityType EScriptPeriodicityType `json:"periodicityType,omitempty"`

	// Script executed after the backup job.
	PostCommand *ScriptCommand `json:"postCommand,omitempty"`

	// Script executed before the backup job.
	PreCommand *ScriptCommand `json:"preCommand,omitempty"`

	// Number of the backup job session after which the scripts must be executed.
	RunScriptEvery int64 `json:"runScriptEvery,omitempty"`
}

// Validate validates this job scripts settings model
func (m *JobScriptsSettingsModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDayOfWeek(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriodicityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostCommand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreCommand(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobScriptsSettingsModel) validateDayOfWeek(formats strfmt.Registry) error {
	if swag.IsZero(m.DayOfWeek) { // not required
		return nil
	}

	if err := validate.UniqueItems("dayOfWeek", "body", m.DayOfWeek); err != nil {
		return err
	}

	for i := 0; i < len(m.DayOfWeek); i++ {

		if err := m.DayOfWeek[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dayOfWeek" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *JobScriptsSettingsModel) validatePeriodicityType(formats strfmt.Registry) error {
	if swag.IsZero(m.PeriodicityType) { // not required
		return nil
	}

	if err := m.PeriodicityType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("periodicityType")
		}
		return err
	}

	return nil
}

func (m *JobScriptsSettingsModel) validatePostCommand(formats strfmt.Registry) error {
	if swag.IsZero(m.PostCommand) { // not required
		return nil
	}

	if m.PostCommand != nil {
		if err := m.PostCommand.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postCommand")
			}
			return err
		}
	}

	return nil
}

func (m *JobScriptsSettingsModel) validatePreCommand(formats strfmt.Registry) error {
	if swag.IsZero(m.PreCommand) { // not required
		return nil
	}

	if m.PreCommand != nil {
		if err := m.PreCommand.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preCommand")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this job scripts settings model based on the context it is used
func (m *JobScriptsSettingsModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDayOfWeek(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePeriodicityType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostCommand(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreCommand(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobScriptsSettingsModel) contextValidateDayOfWeek(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DayOfWeek); i++ {

		if err := m.DayOfWeek[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dayOfWeek" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *JobScriptsSettingsModel) contextValidatePeriodicityType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PeriodicityType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("periodicityType")
		}
		return err
	}

	return nil
}

func (m *JobScriptsSettingsModel) contextValidatePostCommand(ctx context.Context, formats strfmt.Registry) error {

	if m.PostCommand != nil {
		if err := m.PostCommand.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postCommand")
			}
			return err
		}
	}

	return nil
}

func (m *JobScriptsSettingsModel) contextValidatePreCommand(ctx context.Context, formats strfmt.Registry) error {

	if m.PreCommand != nil {
		if err := m.PreCommand.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preCommand")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobScriptsSettingsModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobScriptsSettingsModel) UnmarshalBinary(b []byte) error {
	var res JobScriptsSettingsModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
