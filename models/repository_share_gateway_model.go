// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RepositoryShareGatewayModel Settings for the gateway server.
//
// swagger:model RepositoryShareGatewayModel
type RepositoryShareGatewayModel struct {

	// If *true*, Veeam Backup & Replication automatically selects a gateway server.
	AutoSelect bool `json:"autoSelect,omitempty"`

	// ID of the gateway server.
	// Format: uuid
	GatewayServerID strfmt.UUID `json:"gatewayServerId,omitempty"`
}

// Validate validates this repository share gateway model
func (m *RepositoryShareGatewayModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGatewayServerID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryShareGatewayModel) validateGatewayServerID(formats strfmt.Registry) error {
	if swag.IsZero(m.GatewayServerID) { // not required
		return nil
	}

	if err := validate.FormatOf("gatewayServerId", "body", "uuid", m.GatewayServerID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this repository share gateway model based on context it is used
func (m *RepositoryShareGatewayModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RepositoryShareGatewayModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepositoryShareGatewayModel) UnmarshalBinary(b []byte) error {
	var res RepositoryShareGatewayModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
