// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ESessionState State of the session.
//
// swagger:model ESessionState
type ESessionState string

func NewESessionState(value ESessionState) *ESessionState {
	v := value
	return &v
}

const (

	// ESessionStateStopped captures enum value "Stopped"
	ESessionStateStopped ESessionState = "Stopped"

	// ESessionStateStarting captures enum value "Starting"
	ESessionStateStarting ESessionState = "Starting"

	// ESessionStateStopping captures enum value "Stopping"
	ESessionStateStopping ESessionState = "Stopping"

	// ESessionStateWorking captures enum value "Working"
	ESessionStateWorking ESessionState = "Working"

	// ESessionStatePausing captures enum value "Pausing"
	ESessionStatePausing ESessionState = "Pausing"

	// ESessionStateResuming captures enum value "Resuming"
	ESessionStateResuming ESessionState = "Resuming"

	// ESessionStateWaitingTape captures enum value "WaitingTape"
	ESessionStateWaitingTape ESessionState = "WaitingTape"

	// ESessionStateIdle captures enum value "Idle"
	ESessionStateIdle ESessionState = "Idle"

	// ESessionStatePostprocessing captures enum value "Postprocessing"
	ESessionStatePostprocessing ESessionState = "Postprocessing"

	// ESessionStateWaitingRepository captures enum value "WaitingRepository"
	ESessionStateWaitingRepository ESessionState = "WaitingRepository"

	// ESessionStateWaitingSlot captures enum value "WaitingSlot"
	ESessionStateWaitingSlot ESessionState = "WaitingSlot"
)

// for schema
var eSessionStateEnum []interface{}

func init() {
	var res []ESessionState
	if err := json.Unmarshal([]byte(`["Stopped","Starting","Stopping","Working","Pausing","Resuming","WaitingTape","Idle","Postprocessing","WaitingRepository","WaitingSlot"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eSessionStateEnum = append(eSessionStateEnum, v)
	}
}

func (m ESessionState) validateESessionStateEnum(path, location string, value ESessionState) error {
	if err := validate.EnumCase(path, location, value, eSessionStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e session state
func (m ESessionState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateESessionStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e session state based on context it is used
func (m ESessionState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
