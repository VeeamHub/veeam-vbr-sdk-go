// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupModel backup model
//
// swagger:model BackupModel
type BackupModel struct {

	// Date and time when the backup was created.
	// Required: true
	// Format: date-time
	CreationTime *strfmt.DateTime `json:"creationTime"`

	// ID of the backup.
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// ID of the job that created the backup.
	// Format: uuid
	JobID strfmt.UUID `json:"jobId,omitempty"`

	// Name of the job that created the backup.
	// Required: true
	Name *string `json:"name"`

	// ID of the platform of the backup resource.
	// Required: true
	// Format: uuid
	PlatformID *strfmt.UUID `json:"platformId"`

	// platform name
	// Required: true
	PlatformName *EPlatformType `json:"platformName"`

	// Tag that identifies retention policy.
	PolicyTag string `json:"policyTag,omitempty"`

	// ID of the backup repository where the backup is stored.
	// Required: true
	// Format: uuid
	RepositoryID *strfmt.UUID `json:"repositoryId"`
}

// Validate validates this backup model
func (m *BackupModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepositoryID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupModel) validateCreationTime(formats strfmt.Registry) error {

	if err := validate.Required("creationTime", "body", m.CreationTime); err != nil {
		return err
	}

	if err := validate.FormatOf("creationTime", "body", "date-time", m.CreationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BackupModel) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BackupModel) validateJobID(formats strfmt.Registry) error {
	if swag.IsZero(m.JobID) { // not required
		return nil
	}

	if err := validate.FormatOf("jobId", "body", "uuid", m.JobID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BackupModel) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *BackupModel) validatePlatformID(formats strfmt.Registry) error {

	if err := validate.Required("platformId", "body", m.PlatformID); err != nil {
		return err
	}

	if err := validate.FormatOf("platformId", "body", "uuid", m.PlatformID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BackupModel) validatePlatformName(formats strfmt.Registry) error {

	if err := validate.Required("platformName", "body", m.PlatformName); err != nil {
		return err
	}

	if err := validate.Required("platformName", "body", m.PlatformName); err != nil {
		return err
	}

	if m.PlatformName != nil {
		if err := m.PlatformName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("platformName")
			}
			return err
		}
	}

	return nil
}

func (m *BackupModel) validateRepositoryID(formats strfmt.Registry) error {

	if err := validate.Required("repositoryId", "body", m.RepositoryID); err != nil {
		return err
	}

	if err := validate.FormatOf("repositoryId", "body", "uuid", m.RepositoryID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this backup model based on the context it is used
func (m *BackupModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePlatformName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupModel) contextValidatePlatformName(ctx context.Context, formats strfmt.Registry) error {

	if m.PlatformName != nil {
		if err := m.PlatformName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("platformName")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupModel) UnmarshalBinary(b []byte) error {
	var res BackupModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
