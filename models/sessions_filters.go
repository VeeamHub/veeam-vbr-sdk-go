// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SessionsFilters sessions filters
//
// swagger:model SessionsFilters
type SessionsFilters struct {

	// created after filter
	// Format: date-time
	CreatedAfterFilter strfmt.DateTime `json:"createdAfterFilter,omitempty"`

	// created before filter
	// Format: date-time
	CreatedBeforeFilter strfmt.DateTime `json:"createdBeforeFilter,omitempty"`

	// ended after filter
	// Format: date-time
	EndedAfterFilter strfmt.DateTime `json:"endedAfterFilter,omitempty"`

	// ended before filter
	// Format: date-time
	EndedBeforeFilter strfmt.DateTime `json:"endedBeforeFilter,omitempty"`

	// job Id filter
	// Format: uuid
	JobIDFilter strfmt.UUID `json:"jobIdFilter,omitempty"`

	// limit
	Limit int32 `json:"limit,omitempty"`

	// name filter
	NameFilter string `json:"nameFilter,omitempty"`

	// order asc
	OrderAsc bool `json:"orderAsc,omitempty"`

	// order column
	OrderColumn ESessionsFiltersOrderColumn `json:"orderColumn,omitempty"`

	// result filter
	ResultFilter ESessionResult `json:"resultFilter,omitempty"`

	// skip
	Skip int32 `json:"skip,omitempty"`

	// state filter
	StateFilter ESessionState `json:"stateFilter,omitempty"`

	// type filter
	TypeFilter ESessionType `json:"typeFilter,omitempty"`
}

// Validate validates this sessions filters
func (m *SessionsFilters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAfterFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBeforeFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndedAfterFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndedBeforeFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobIDFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderColumn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResultFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeFilter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SessionsFilters) validateCreatedAfterFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAfterFilter) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAfterFilter", "body", "date-time", m.CreatedAfterFilter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SessionsFilters) validateCreatedBeforeFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedBeforeFilter) { // not required
		return nil
	}

	if err := validate.FormatOf("createdBeforeFilter", "body", "date-time", m.CreatedBeforeFilter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SessionsFilters) validateEndedAfterFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.EndedAfterFilter) { // not required
		return nil
	}

	if err := validate.FormatOf("endedAfterFilter", "body", "date-time", m.EndedAfterFilter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SessionsFilters) validateEndedBeforeFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.EndedBeforeFilter) { // not required
		return nil
	}

	if err := validate.FormatOf("endedBeforeFilter", "body", "date-time", m.EndedBeforeFilter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SessionsFilters) validateJobIDFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.JobIDFilter) { // not required
		return nil
	}

	if err := validate.FormatOf("jobIdFilter", "body", "uuid", m.JobIDFilter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SessionsFilters) validateOrderColumn(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderColumn) { // not required
		return nil
	}

	if err := m.OrderColumn.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("orderColumn")
		}
		return err
	}

	return nil
}

func (m *SessionsFilters) validateResultFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.ResultFilter) { // not required
		return nil
	}

	if err := m.ResultFilter.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("resultFilter")
		}
		return err
	}

	return nil
}

func (m *SessionsFilters) validateStateFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.StateFilter) { // not required
		return nil
	}

	if err := m.StateFilter.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("stateFilter")
		}
		return err
	}

	return nil
}

func (m *SessionsFilters) validateTypeFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeFilter) { // not required
		return nil
	}

	if err := m.TypeFilter.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("typeFilter")
		}
		return err
	}

	return nil
}

// ContextValidate validate this sessions filters based on the context it is used
func (m *SessionsFilters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrderColumn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResultFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStateFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SessionsFilters) contextValidateOrderColumn(ctx context.Context, formats strfmt.Registry) error {

	if err := m.OrderColumn.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("orderColumn")
		}
		return err
	}

	return nil
}

func (m *SessionsFilters) contextValidateResultFilter(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ResultFilter.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("resultFilter")
		}
		return err
	}

	return nil
}

func (m *SessionsFilters) contextValidateStateFilter(ctx context.Context, formats strfmt.Registry) error {

	if err := m.StateFilter.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("stateFilter")
		}
		return err
	}

	return nil
}

func (m *SessionsFilters) contextValidateTypeFilter(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TypeFilter.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("typeFilter")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SessionsFilters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SessionsFilters) UnmarshalBinary(b []byte) error {
	var res SessionsFilters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
