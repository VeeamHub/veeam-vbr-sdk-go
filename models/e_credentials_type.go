// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ECredentialsType Credentials type.
//
// swagger:model ECredentialsType
type ECredentialsType string

func NewECredentialsType(value ECredentialsType) *ECredentialsType {
	v := value
	return &v
}

const (

	// ECredentialsTypeStandard captures enum value "Standard"
	ECredentialsTypeStandard ECredentialsType = "Standard"

	// ECredentialsTypeLinux captures enum value "Linux"
	ECredentialsTypeLinux ECredentialsType = "Linux"
)

// for schema
var eCredentialsTypeEnum []interface{}

func init() {
	var res []ECredentialsType
	if err := json.Unmarshal([]byte(`["Standard","Linux"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eCredentialsTypeEnum = append(eCredentialsTypeEnum, v)
	}
}

func (m ECredentialsType) validateECredentialsTypeEnum(path, location string, value ECredentialsType) error {
	if err := validate.EnumCase(path, location, value, eCredentialsTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e credentials type
func (m ECredentialsType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateECredentialsTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e credentials type based on context it is used
func (m ECredentialsType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
