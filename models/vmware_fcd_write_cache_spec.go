// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VmwareFcdWriteCacheSpec Write cache for recovered disks.
//
// swagger:model VmwareFcdWriteCacheSpec
type VmwareFcdWriteCacheSpec struct {

	// cache datastore
	CacheDatastore *VmwareObjectModel `json:"cacheDatastore,omitempty"`

	// If *true*, cache redirection is enabled. In this case, all changes made to the recovered disks while the Instant FCD Recovery is active are redirected to the specified `cacheDatastore` associated with the `storagePolicy`.
	// Required: true
	RedirectIsEnabled *bool `json:"redirectIsEnabled"`

	// storage policy
	StoragePolicy *VmwareObjectModel `json:"storagePolicy,omitempty"`
}

// Validate validates this vmware fcd write cache spec
func (m *VmwareFcdWriteCacheSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCacheDatastore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedirectIsEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoragePolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareFcdWriteCacheSpec) validateCacheDatastore(formats strfmt.Registry) error {
	if swag.IsZero(m.CacheDatastore) { // not required
		return nil
	}

	if m.CacheDatastore != nil {
		if err := m.CacheDatastore.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cacheDatastore")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareFcdWriteCacheSpec) validateRedirectIsEnabled(formats strfmt.Registry) error {

	if err := validate.Required("redirectIsEnabled", "body", m.RedirectIsEnabled); err != nil {
		return err
	}

	return nil
}

func (m *VmwareFcdWriteCacheSpec) validateStoragePolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.StoragePolicy) { // not required
		return nil
	}

	if m.StoragePolicy != nil {
		if err := m.StoragePolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storagePolicy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vmware fcd write cache spec based on the context it is used
func (m *VmwareFcdWriteCacheSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCacheDatastore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStoragePolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareFcdWriteCacheSpec) contextValidateCacheDatastore(ctx context.Context, formats strfmt.Registry) error {

	if m.CacheDatastore != nil {
		if err := m.CacheDatastore.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cacheDatastore")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareFcdWriteCacheSpec) contextValidateStoragePolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.StoragePolicy != nil {
		if err := m.StoragePolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storagePolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VmwareFcdWriteCacheSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareFcdWriteCacheSpec) UnmarshalBinary(b []byte) error {
	var res VmwareFcdWriteCacheSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
