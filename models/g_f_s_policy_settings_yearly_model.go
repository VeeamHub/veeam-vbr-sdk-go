// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GFSPolicySettingsYearlyModel Yearly GFS retention policy.
//
// swagger:model GFSPolicySettingsYearlyModel
type GFSPolicySettingsYearlyModel struct {

	// Month when the full backup that will be kept for archival purposes is created.
	DesiredTime EMonth `json:"desiredTime,omitempty"`

	// If *true*, the yearly GFS retention policy is enabled.
	// Required: true
	IsEnabled *bool `json:"isEnabled"`

	// Number of years to keep full backups for archival purposes.
	KeepForNumberOfYears int64 `json:"keepForNumberOfYears,omitempty"`
}

// Validate validates this g f s policy settings yearly model
func (m *GFSPolicySettingsYearlyModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDesiredTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GFSPolicySettingsYearlyModel) validateDesiredTime(formats strfmt.Registry) error {
	if swag.IsZero(m.DesiredTime) { // not required
		return nil
	}

	if err := m.DesiredTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("desiredTime")
		}
		return err
	}

	return nil
}

func (m *GFSPolicySettingsYearlyModel) validateIsEnabled(formats strfmt.Registry) error {

	if err := validate.Required("isEnabled", "body", m.IsEnabled); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this g f s policy settings yearly model based on the context it is used
func (m *GFSPolicySettingsYearlyModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDesiredTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GFSPolicySettingsYearlyModel) contextValidateDesiredTime(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DesiredTime.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("desiredTime")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GFSPolicySettingsYearlyModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GFSPolicySettingsYearlyModel) UnmarshalBinary(b []byte) error {
	var res GFSPolicySettingsYearlyModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
