// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ScaleOutRepositoriesFilters scale out repositories filters
//
// swagger:model ScaleOutRepositoriesFilters
type ScaleOutRepositoriesFilters struct {

	// Maximum number of repositories to return.
	Limit int32 `json:"limit,omitempty"`

	// Filters repositories by the `nameFilter` substring. The substring can be part of any repository parameter.
	NameFilter string `json:"nameFilter,omitempty"`

	// Sorts repositories in the ascending order by the `orderColumn` parameter.
	OrderAsc bool `json:"orderAsc,omitempty"`

	// order column
	OrderColumn EScaleOutRepositoryFiltersOrderColumn `json:"orderColumn,omitempty"`

	// Number of repositories to skip.
	Skip int32 `json:"skip,omitempty"`
}

// Validate validates this scale out repositories filters
func (m *ScaleOutRepositoriesFilters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrderColumn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScaleOutRepositoriesFilters) validateOrderColumn(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderColumn) { // not required
		return nil
	}

	if err := m.OrderColumn.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("orderColumn")
		}
		return err
	}

	return nil
}

// ContextValidate validate this scale out repositories filters based on the context it is used
func (m *ScaleOutRepositoriesFilters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrderColumn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScaleOutRepositoriesFilters) contextValidateOrderColumn(ctx context.Context, formats strfmt.Registry) error {

	if err := m.OrderColumn.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("orderColumn")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScaleOutRepositoriesFilters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScaleOutRepositoriesFilters) UnmarshalBinary(b []byte) error {
	var res ScaleOutRepositoriesFilters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
