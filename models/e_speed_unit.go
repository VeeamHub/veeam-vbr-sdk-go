// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ESpeedUnit Traffic speed unit.
//
// swagger:model ESpeedUnit
type ESpeedUnit string

func NewESpeedUnit(value ESpeedUnit) *ESpeedUnit {
	v := value
	return &v
}

const (

	// ESpeedUnitKbytePerSec captures enum value "KbytePerSec"
	ESpeedUnitKbytePerSec ESpeedUnit = "KbytePerSec"

	// ESpeedUnitMbitPerSpec captures enum value "MbitPerSpec"
	ESpeedUnitMbitPerSpec ESpeedUnit = "MbitPerSpec"

	// ESpeedUnitMbytePerSec captures enum value "MbytePerSec"
	ESpeedUnitMbytePerSec ESpeedUnit = "MbytePerSec"
)

// for schema
var eSpeedUnitEnum []interface{}

func init() {
	var res []ESpeedUnit
	if err := json.Unmarshal([]byte(`["KbytePerSec","MbitPerSpec","MbytePerSec"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eSpeedUnitEnum = append(eSpeedUnitEnum, v)
	}
}

func (m ESpeedUnit) validateESpeedUnitEnum(path, location string, value ESpeedUnit) error {
	if err := validate.EnumCase(path, location, value, eSpeedUnitEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e speed unit
func (m ESpeedUnit) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateESpeedUnitEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e speed unit based on context it is used
func (m ESpeedUnit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
