// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EGuestFSIndexingMode Indexing mode.
//
// swagger:model EGuestFSIndexingMode
type EGuestFSIndexingMode string

func NewEGuestFSIndexingMode(value EGuestFSIndexingMode) *EGuestFSIndexingMode {
	v := value
	return &v
}

const (

	// EGuestFSIndexingModeDisable captures enum value "disable"
	EGuestFSIndexingModeDisable EGuestFSIndexingMode = "disable"

	// EGuestFSIndexingModeIndexAll captures enum value "indexAll"
	EGuestFSIndexingModeIndexAll EGuestFSIndexingMode = "indexAll"

	// EGuestFSIndexingModeIndexAllExcept captures enum value "indexAllExcept"
	EGuestFSIndexingModeIndexAllExcept EGuestFSIndexingMode = "indexAllExcept"

	// EGuestFSIndexingModeIndexOnly captures enum value "indexOnly"
	EGuestFSIndexingModeIndexOnly EGuestFSIndexingMode = "indexOnly"
)

// for schema
var eGuestFSIndexingModeEnum []interface{}

func init() {
	var res []EGuestFSIndexingMode
	if err := json.Unmarshal([]byte(`["disable","indexAll","indexAllExcept","indexOnly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eGuestFSIndexingModeEnum = append(eGuestFSIndexingModeEnum, v)
	}
}

func (m EGuestFSIndexingMode) validateEGuestFSIndexingModeEnum(path, location string, value EGuestFSIndexingMode) error {
	if err := validate.EnumCase(path, location, value, eGuestFSIndexingModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e guest f s indexing mode
func (m EGuestFSIndexingMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEGuestFSIndexingModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e guest f s indexing mode based on context it is used
func (m EGuestFSIndexingMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
