// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ECompressionLevel Compression level.
//
// swagger:model ECompressionLevel
type ECompressionLevel string

func NewECompressionLevel(value ECompressionLevel) *ECompressionLevel {
	v := value
	return &v
}

const (

	// ECompressionLevelAuto captures enum value "Auto"
	ECompressionLevelAuto ECompressionLevel = "Auto"

	// ECompressionLevelNone captures enum value "None"
	ECompressionLevelNone ECompressionLevel = "None"

	// ECompressionLevelDedupFriendly captures enum value "DedupFriendly"
	ECompressionLevelDedupFriendly ECompressionLevel = "DedupFriendly"

	// ECompressionLevelOptimal captures enum value "Optimal"
	ECompressionLevelOptimal ECompressionLevel = "Optimal"

	// ECompressionLevelHigh captures enum value "High"
	ECompressionLevelHigh ECompressionLevel = "High"

	// ECompressionLevelExtreme captures enum value "Extreme"
	ECompressionLevelExtreme ECompressionLevel = "Extreme"
)

// for schema
var eCompressionLevelEnum []interface{}

func init() {
	var res []ECompressionLevel
	if err := json.Unmarshal([]byte(`["Auto","None","DedupFriendly","Optimal","High","Extreme"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eCompressionLevelEnum = append(eCompressionLevelEnum, v)
	}
}

func (m ECompressionLevel) validateECompressionLevelEnum(path, location string, value ECompressionLevel) error {
	if err := validate.EnumCase(path, location, value, eCompressionLevelEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e compression level
func (m ECompressionLevel) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateECompressionLevelEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e compression level based on context it is used
func (m ECompressionLevel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
