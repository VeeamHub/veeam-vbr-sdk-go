// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EmailNotificationSettingsModel Email notification settings for the backup job.
//
// swagger:model EmailNotificationSettingsModel
type EmailNotificationSettingsModel struct {

	// custom notification settings
	CustomNotificationSettings *EmailCustomNotificationType `json:"customNotificationSettings,omitempty"`

	// If *true*, email notifications are enabled for this job.
	// Required: true
	IsEnabled *bool `json:"isEnabled"`

	// notification type
	NotificationType EEmailNotificationType `json:"notificationType,omitempty"`

	// Array of recipientâ€™s email addresses.
	// Unique: true
	Recipients []string `json:"recipients"`
}

// Validate validates this email notification settings model
func (m *EmailNotificationSettingsModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomNotificationSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotificationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipients(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmailNotificationSettingsModel) validateCustomNotificationSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomNotificationSettings) { // not required
		return nil
	}

	if m.CustomNotificationSettings != nil {
		if err := m.CustomNotificationSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customNotificationSettings")
			}
			return err
		}
	}

	return nil
}

func (m *EmailNotificationSettingsModel) validateIsEnabled(formats strfmt.Registry) error {

	if err := validate.Required("isEnabled", "body", m.IsEnabled); err != nil {
		return err
	}

	return nil
}

func (m *EmailNotificationSettingsModel) validateNotificationType(formats strfmt.Registry) error {
	if swag.IsZero(m.NotificationType) { // not required
		return nil
	}

	if err := m.NotificationType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("notificationType")
		}
		return err
	}

	return nil
}

func (m *EmailNotificationSettingsModel) validateRecipients(formats strfmt.Registry) error {
	if swag.IsZero(m.Recipients) { // not required
		return nil
	}

	if err := validate.UniqueItems("recipients", "body", m.Recipients); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this email notification settings model based on the context it is used
func (m *EmailNotificationSettingsModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCustomNotificationSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNotificationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EmailNotificationSettingsModel) contextValidateCustomNotificationSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.CustomNotificationSettings != nil {
		if err := m.CustomNotificationSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customNotificationSettings")
			}
			return err
		}
	}

	return nil
}

func (m *EmailNotificationSettingsModel) contextValidateNotificationType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.NotificationType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("notificationType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EmailNotificationSettingsModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EmailNotificationSettingsModel) UnmarshalBinary(b []byte) error {
	var res EmailNotificationSettingsModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
