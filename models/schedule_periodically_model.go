// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SchedulePeriodicallyModel Periodic scheduling options.
//
// swagger:model SchedulePeriodicallyModel
type SchedulePeriodicallyModel struct {

	// backup window
	BackupWindow *BackupWindowSettingModel `json:"backupWindow,omitempty"`

	// Number of time units that defines the time interval.
	Frequency int64 `json:"frequency,omitempty"`

	// If *true*, periodic schedule is enabled.
	// Required: true
	IsEnabled bool `json:"isEnabled"`

	// periodically kind
	PeriodicallyKind EPeriodicallyKinds `json:"periodicallyKind,omitempty"`
}

// Validate validates this schedule periodically model
func (m *SchedulePeriodicallyModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupWindow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriodicallyKind(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchedulePeriodicallyModel) validateBackupWindow(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupWindow) { // not required
		return nil
	}

	if m.BackupWindow != nil {
		if err := m.BackupWindow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupWindow")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulePeriodicallyModel) validateIsEnabled(formats strfmt.Registry) error {

	if err := validate.Required("isEnabled", "body", bool(m.IsEnabled)); err != nil {
		return err
	}

	return nil
}

func (m *SchedulePeriodicallyModel) validatePeriodicallyKind(formats strfmt.Registry) error {
	if swag.IsZero(m.PeriodicallyKind) { // not required
		return nil
	}

	if err := m.PeriodicallyKind.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("periodicallyKind")
		}
		return err
	}

	return nil
}

// ContextValidate validate this schedule periodically model based on the context it is used
func (m *SchedulePeriodicallyModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBackupWindow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePeriodicallyKind(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchedulePeriodicallyModel) contextValidateBackupWindow(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupWindow != nil {
		if err := m.BackupWindow.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupWindow")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulePeriodicallyModel) contextValidatePeriodicallyKind(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PeriodicallyKind.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("periodicallyKind")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SchedulePeriodicallyModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SchedulePeriodicallyModel) UnmarshalBinary(b []byte) error {
	var res SchedulePeriodicallyModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
