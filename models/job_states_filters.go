// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobStatesFilters Filters jobs by the specified parameters.
//
// swagger:model JobStatesFilters
type JobStatesFilters struct {

	// id filter
	// Format: uuid
	IDFilter strfmt.UUID `json:"idFilter,omitempty"`

	// is high priority job filter
	IsHighPriorityJobFilter bool `json:"isHighPriorityJobFilter,omitempty"`

	// last result filter
	LastResultFilter ESessionResult `json:"lastResultFilter,omitempty"`

	// last run after filter
	// Format: date-time
	LastRunAfterFilter strfmt.DateTime `json:"lastRunAfterFilter,omitempty"`

	// last run before filter
	// Format: date-time
	LastRunBeforeFilter strfmt.DateTime `json:"lastRunBeforeFilter,omitempty"`

	// Returns the specified number of jobs.
	Limit int32 `json:"limit,omitempty"`

	// Filters jobs by the `nameFilter` pattern. The pattern can match any job state parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	NameFilter string `json:"nameFilter,omitempty"`

	// objects count filter
	ObjectsCountFilter int64 `json:"objectsCountFilter,omitempty"`

	// Sorts jobs in the ascending order by the `orderColumn` parameter.
	OrderAsc bool `json:"orderAsc,omitempty"`

	// order column
	OrderColumn EJobStatesFiltersOrderColumn `json:"orderColumn,omitempty"`

	// repository Id filter
	// Format: uuid
	RepositoryIDFilter strfmt.UUID `json:"repositoryIdFilter,omitempty"`

	// Skips the specified number of jobs.
	Skip int32 `json:"skip,omitempty"`

	// status filter
	StatusFilter EJobStatus `json:"statusFilter,omitempty"`

	// type filter
	TypeFilter EJobType `json:"typeFilter,omitempty"`

	// workload filter
	WorkloadFilter EJobWorkload `json:"workloadFilter,omitempty"`
}

// Validate validates this job states filters
func (m *JobStatesFilters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIDFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastResultFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastRunAfterFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastRunBeforeFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderColumn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepositoryIDFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkloadFilter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobStatesFilters) validateIDFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.IDFilter) { // not required
		return nil
	}

	if err := validate.FormatOf("idFilter", "body", "uuid", m.IDFilter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *JobStatesFilters) validateLastResultFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.LastResultFilter) { // not required
		return nil
	}

	if err := m.LastResultFilter.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lastResultFilter")
		}
		return err
	}

	return nil
}

func (m *JobStatesFilters) validateLastRunAfterFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.LastRunAfterFilter) { // not required
		return nil
	}

	if err := validate.FormatOf("lastRunAfterFilter", "body", "date-time", m.LastRunAfterFilter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *JobStatesFilters) validateLastRunBeforeFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.LastRunBeforeFilter) { // not required
		return nil
	}

	if err := validate.FormatOf("lastRunBeforeFilter", "body", "date-time", m.LastRunBeforeFilter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *JobStatesFilters) validateOrderColumn(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderColumn) { // not required
		return nil
	}

	if err := m.OrderColumn.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("orderColumn")
		}
		return err
	}

	return nil
}

func (m *JobStatesFilters) validateRepositoryIDFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.RepositoryIDFilter) { // not required
		return nil
	}

	if err := validate.FormatOf("repositoryIdFilter", "body", "uuid", m.RepositoryIDFilter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *JobStatesFilters) validateStatusFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusFilter) { // not required
		return nil
	}

	if err := m.StatusFilter.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("statusFilter")
		}
		return err
	}

	return nil
}

func (m *JobStatesFilters) validateTypeFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeFilter) { // not required
		return nil
	}

	if err := m.TypeFilter.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("typeFilter")
		}
		return err
	}

	return nil
}

func (m *JobStatesFilters) validateWorkloadFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.WorkloadFilter) { // not required
		return nil
	}

	if err := m.WorkloadFilter.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("workloadFilter")
		}
		return err
	}

	return nil
}

// ContextValidate validate this job states filters based on the context it is used
func (m *JobStatesFilters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLastResultFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderColumn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkloadFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobStatesFilters) contextValidateLastResultFilter(ctx context.Context, formats strfmt.Registry) error {

	if err := m.LastResultFilter.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("lastResultFilter")
		}
		return err
	}

	return nil
}

func (m *JobStatesFilters) contextValidateOrderColumn(ctx context.Context, formats strfmt.Registry) error {

	if err := m.OrderColumn.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("orderColumn")
		}
		return err
	}

	return nil
}

func (m *JobStatesFilters) contextValidateStatusFilter(ctx context.Context, formats strfmt.Registry) error {

	if err := m.StatusFilter.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("statusFilter")
		}
		return err
	}

	return nil
}

func (m *JobStatesFilters) contextValidateTypeFilter(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TypeFilter.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("typeFilter")
		}
		return err
	}

	return nil
}

func (m *JobStatesFilters) contextValidateWorkloadFilter(ctx context.Context, formats strfmt.Registry) error {

	if err := m.WorkloadFilter.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("workloadFilter")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobStatesFilters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobStatesFilters) UnmarshalBinary(b []byte) error {
	var res JobStatesFilters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
