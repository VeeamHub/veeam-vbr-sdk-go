// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobImportSpec job import spec
//
// swagger:model JobImportSpec
type JobImportSpec struct {

	// Description of the job.
	// Required: true
	Description *string `json:"description"`

	// guest processing
	// Required: true
	GuestProcessing *BackupJobGuestProcessingImportModel `json:"guestProcessing"`

	// If *true*, the job has a high priority in getting backup infrastructure resources.
	// Required: true
	IsHighPriority *bool `json:"isHighPriority"`

	// Name of the job.
	// Required: true
	Name *string `json:"name"`

	// schedule
	// Required: true
	Schedule *BackupScheduleModel `json:"schedule"`

	// storage
	// Required: true
	Storage *BackupJobStorageImportModel `json:"storage"`

	// type
	// Required: true
	Type *EJobType `json:"type"`

	// virtual machines
	// Required: true
	VirtualMachines *BackupJobVirtualMachinesSpec `json:"virtualMachines"`
}

// Validate validates this job import spec
func (m *JobImportSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuestProcessing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsHighPriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualMachines(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobImportSpec) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *JobImportSpec) validateGuestProcessing(formats strfmt.Registry) error {

	if err := validate.Required("guestProcessing", "body", m.GuestProcessing); err != nil {
		return err
	}

	if m.GuestProcessing != nil {
		if err := m.GuestProcessing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guestProcessing")
			}
			return err
		}
	}

	return nil
}

func (m *JobImportSpec) validateIsHighPriority(formats strfmt.Registry) error {

	if err := validate.Required("isHighPriority", "body", m.IsHighPriority); err != nil {
		return err
	}

	return nil
}

func (m *JobImportSpec) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *JobImportSpec) validateSchedule(formats strfmt.Registry) error {

	if err := validate.Required("schedule", "body", m.Schedule); err != nil {
		return err
	}

	if m.Schedule != nil {
		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

func (m *JobImportSpec) validateStorage(formats strfmt.Registry) error {

	if err := validate.Required("storage", "body", m.Storage); err != nil {
		return err
	}

	if m.Storage != nil {
		if err := m.Storage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage")
			}
			return err
		}
	}

	return nil
}

func (m *JobImportSpec) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *JobImportSpec) validateVirtualMachines(formats strfmt.Registry) error {

	if err := validate.Required("virtualMachines", "body", m.VirtualMachines); err != nil {
		return err
	}

	if m.VirtualMachines != nil {
		if err := m.VirtualMachines.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtualMachines")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this job import spec based on the context it is used
func (m *JobImportSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGuestProcessing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVirtualMachines(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobImportSpec) contextValidateGuestProcessing(ctx context.Context, formats strfmt.Registry) error {

	if m.GuestProcessing != nil {
		if err := m.GuestProcessing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guestProcessing")
			}
			return err
		}
	}

	return nil
}

func (m *JobImportSpec) contextValidateSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.Schedule != nil {
		if err := m.Schedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

func (m *JobImportSpec) contextValidateStorage(ctx context.Context, formats strfmt.Registry) error {

	if m.Storage != nil {
		if err := m.Storage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage")
			}
			return err
		}
	}

	return nil
}

func (m *JobImportSpec) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *JobImportSpec) contextValidateVirtualMachines(ctx context.Context, formats strfmt.Registry) error {

	if m.VirtualMachines != nil {
		if err := m.VirtualMachines.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtualMachines")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobImportSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobImportSpec) UnmarshalBinary(b []byte) error {
	var res JobImportSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
