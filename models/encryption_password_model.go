// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EncryptionPasswordModel encryption password model
//
// swagger:model EncryptionPasswordModel
type EncryptionPasswordModel struct {

	// Hint for the encryption password.
	// Required: true
	Hint *string `json:"hint"`

	// ID of the encryption password.
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// Date and time the password was last modified.
	// Format: date-time
	ModificationTime strfmt.DateTime `json:"modificationTime,omitempty"`

	// Tag for the encryption password.
	Tag string `json:"tag,omitempty"`
}

// Validate validates this encryption password model
func (m *EncryptionPasswordModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModificationTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EncryptionPasswordModel) validateHint(formats strfmt.Registry) error {

	if err := validate.Required("hint", "body", m.Hint); err != nil {
		return err
	}

	return nil
}

func (m *EncryptionPasswordModel) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EncryptionPasswordModel) validateModificationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ModificationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("modificationTime", "body", "date-time", m.ModificationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this encryption password model based on context it is used
func (m *EncryptionPasswordModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EncryptionPasswordModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EncryptionPasswordModel) UnmarshalBinary(b []byte) error {
	var res EncryptionPasswordModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
