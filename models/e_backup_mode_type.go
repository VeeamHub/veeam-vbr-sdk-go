// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EBackupModeType Type of the backup method used to create a restore point.
//
// swagger:model EBackupModeType
type EBackupModeType string

func NewEBackupModeType(value EBackupModeType) *EBackupModeType {
	v := value
	return &v
}

const (

	// EBackupModeTypeFull captures enum value "Full"
	EBackupModeTypeFull EBackupModeType = "Full"

	// EBackupModeTypeIncremental captures enum value "Incremental"
	EBackupModeTypeIncremental EBackupModeType = "Incremental"

	// EBackupModeTypeReverseIncremental captures enum value "ReverseIncremental"
	EBackupModeTypeReverseIncremental EBackupModeType = "ReverseIncremental"

	// EBackupModeTypeTransofrm captures enum value "Transofrm"
	EBackupModeTypeTransofrm EBackupModeType = "Transofrm"

	// EBackupModeTypeTransformForeverIncremental captures enum value "TransformForeverIncremental"
	EBackupModeTypeTransformForeverIncremental EBackupModeType = "TransformForeverIncremental"
)

// for schema
var eBackupModeTypeEnum []interface{}

func init() {
	var res []EBackupModeType
	if err := json.Unmarshal([]byte(`["Full","Incremental","ReverseIncremental","Transofrm","TransformForeverIncremental"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eBackupModeTypeEnum = append(eBackupModeTypeEnum, v)
	}
}

func (m EBackupModeType) validateEBackupModeTypeEnum(path, location string, value EBackupModeType) error {
	if err := validate.EnumCase(path, location, value, eBackupModeTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e backup mode type
func (m EBackupModeType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEBackupModeTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e backup mode type based on context it is used
func (m EBackupModeType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
