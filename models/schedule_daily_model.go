// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScheduleDailyModel Daily scheduling options.
//
// swagger:model ScheduleDailyModel
type ScheduleDailyModel struct {

	// daily kind
	DailyKind EDailyKinds `json:"dailyKind,omitempty"`

	// Days of the week when the job must start.
	// Unique: true
	Days []EDayOfWeek `json:"days"`

	// If *true*, daily schedule is enabled.
	// Required: true
	IsEnabled bool `json:"isEnabled"`

	// Local time when the job must start.
	LocalTime string `json:"localTime,omitempty"`
}

// Validate validates this schedule daily model
func (m *ScheduleDailyModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDailyKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleDailyModel) validateDailyKind(formats strfmt.Registry) error {
	if swag.IsZero(m.DailyKind) { // not required
		return nil
	}

	if err := m.DailyKind.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dailyKind")
		}
		return err
	}

	return nil
}

func (m *ScheduleDailyModel) validateDays(formats strfmt.Registry) error {
	if swag.IsZero(m.Days) { // not required
		return nil
	}

	if err := validate.UniqueItems("days", "body", m.Days); err != nil {
		return err
	}

	for i := 0; i < len(m.Days); i++ {

		if err := m.Days[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("days" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ScheduleDailyModel) validateIsEnabled(formats strfmt.Registry) error {

	if err := validate.Required("isEnabled", "body", bool(m.IsEnabled)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this schedule daily model based on the context it is used
func (m *ScheduleDailyModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDailyKind(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDays(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleDailyModel) contextValidateDailyKind(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DailyKind.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("dailyKind")
		}
		return err
	}

	return nil
}

func (m *ScheduleDailyModel) contextValidateDays(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Days); i++ {

		if err := m.Days[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("days" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScheduleDailyModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduleDailyModel) UnmarshalBinary(b []byte) error {
	var res ScheduleDailyModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
