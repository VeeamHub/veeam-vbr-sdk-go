// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupJobImportProxiesModel Backup proxies.
//
// swagger:model BackupJobImportProxiesModel
type BackupJobImportProxiesModel struct {

	// If *true*, backup proxies are detected and assigned automatically.
	// Required: true
	AutomaticSelection bool `json:"automaticSelection"`

	// Array of backup proxies.
	Proxies []*BackupProxyImportModel `json:"proxies"`
}

// Validate validates this backup job import proxies model
func (m *BackupJobImportProxiesModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutomaticSelection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxies(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupJobImportProxiesModel) validateAutomaticSelection(formats strfmt.Registry) error {

	if err := validate.Required("automaticSelection", "body", bool(m.AutomaticSelection)); err != nil {
		return err
	}

	return nil
}

func (m *BackupJobImportProxiesModel) validateProxies(formats strfmt.Registry) error {
	if swag.IsZero(m.Proxies) { // not required
		return nil
	}

	for i := 0; i < len(m.Proxies); i++ {
		if swag.IsZero(m.Proxies[i]) { // not required
			continue
		}

		if m.Proxies[i] != nil {
			if err := m.Proxies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("proxies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this backup job import proxies model based on the context it is used
func (m *BackupJobImportProxiesModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProxies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupJobImportProxiesModel) contextValidateProxies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Proxies); i++ {

		if m.Proxies[i] != nil {
			if err := m.Proxies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("proxies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupJobImportProxiesModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupJobImportProxiesModel) UnmarshalBinary(b []byte) error {
	var res BackupJobImportProxiesModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
