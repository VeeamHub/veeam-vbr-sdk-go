// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EDiskInfoProcessState Process state of the disk.
//
// swagger:model EDiskInfoProcessState
type EDiskInfoProcessState string

func NewEDiskInfoProcessState(value EDiskInfoProcessState) *EDiskInfoProcessState {
	v := value
	return &v
}

const (

	// EDiskInfoProcessStateNotProcessed captures enum value "NotProcessed"
	EDiskInfoProcessStateNotProcessed EDiskInfoProcessState = "NotProcessed"

	// EDiskInfoProcessStateInProcessing captures enum value "InProcessing"
	EDiskInfoProcessStateInProcessing EDiskInfoProcessState = "InProcessing"

	// EDiskInfoProcessStatePartiallyProcessed captures enum value "PartiallyProcessed"
	EDiskInfoProcessStatePartiallyProcessed EDiskInfoProcessState = "PartiallyProcessed"

	// EDiskInfoProcessStateProcessed captures enum value "Processed"
	EDiskInfoProcessStateProcessed EDiskInfoProcessState = "Processed"
)

// for schema
var eDiskInfoProcessStateEnum []interface{}

func init() {
	var res []EDiskInfoProcessState
	if err := json.Unmarshal([]byte(`["NotProcessed","InProcessing","PartiallyProcessed","Processed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eDiskInfoProcessStateEnum = append(eDiskInfoProcessStateEnum, v)
	}
}

func (m EDiskInfoProcessState) validateEDiskInfoProcessStateEnum(path, location string, value EDiskInfoProcessState) error {
	if err := validate.EnumCase(path, location, value, eDiskInfoProcessStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e disk info process state
func (m EDiskInfoProcessState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEDiskInfoProcessStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e disk info process state based on context it is used
func (m EDiskInfoProcessState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
