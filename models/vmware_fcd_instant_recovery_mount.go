// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VmwareFcdInstantRecoveryMount vmware fcd instant recovery mount
//
// swagger:model VmwareFcdInstantRecoveryMount
type VmwareFcdInstantRecoveryMount struct {

	// error message
	ErrorMessage string `json:"errorMessage,omitempty"`

	// Mount ID.
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// Array of mounted disks.
	MountedDisks []*VmwareFcdInstantRecoveryDiskInfo `json:"mountedDisks"`

	// ID of the restore session. Use the ID to track the progress. For details, see [Get Session](#operation/GetSession).
	// Required: true
	// Format: uuid
	SessionID *strfmt.UUID `json:"sessionId"`

	// spec
	// Required: true
	Spec *VmwareFcdInstantRecoverySpec `json:"spec"`

	// state
	// Required: true
	State *EInstantRecoveryMountState `json:"state"`
}

// Validate validates this vmware fcd instant recovery mount
func (m *VmwareFcdInstantRecoveryMount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountedDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareFcdInstantRecoveryMount) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VmwareFcdInstantRecoveryMount) validateMountedDisks(formats strfmt.Registry) error {
	if swag.IsZero(m.MountedDisks) { // not required
		return nil
	}

	for i := 0; i < len(m.MountedDisks); i++ {
		if swag.IsZero(m.MountedDisks[i]) { // not required
			continue
		}

		if m.MountedDisks[i] != nil {
			if err := m.MountedDisks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mountedDisks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VmwareFcdInstantRecoveryMount) validateSessionID(formats strfmt.Registry) error {

	if err := validate.Required("sessionId", "body", m.SessionID); err != nil {
		return err
	}

	if err := validate.FormatOf("sessionId", "body", "uuid", m.SessionID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VmwareFcdInstantRecoveryMount) validateSpec(formats strfmt.Registry) error {

	if err := validate.Required("spec", "body", m.Spec); err != nil {
		return err
	}

	if m.Spec != nil {
		if err := m.Spec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareFcdInstantRecoveryMount) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vmware fcd instant recovery mount based on the context it is used
func (m *VmwareFcdInstantRecoveryMount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMountedDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareFcdInstantRecoveryMount) contextValidateMountedDisks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MountedDisks); i++ {

		if m.MountedDisks[i] != nil {
			if err := m.MountedDisks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mountedDisks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VmwareFcdInstantRecoveryMount) contextValidateSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.Spec != nil {
		if err := m.Spec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareFcdInstantRecoveryMount) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {
		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VmwareFcdInstantRecoveryMount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareFcdInstantRecoveryMount) UnmarshalBinary(b []byte) error {
	var res VmwareFcdInstantRecoveryMount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
