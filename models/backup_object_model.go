// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupObjectModel backup object model
//
// swagger:model BackupObjectModel
type BackupObjectModel struct {

	// ID of the object.
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// Name of the object.
	Name string `json:"name,omitempty"`

	// Id of the platform where the object was created.
	// Format: uuid
	PlatformID strfmt.UUID `json:"platformId,omitempty"`

	// platform name
	// Required: true
	PlatformName *EPlatformType `json:"platformName"`

	// Number of restore points.
	RestorePointsCount int64 `json:"restorePointsCount,omitempty"`

	// Type of the object.
	Type string `json:"type,omitempty"`
}

// Validate validates this backup object model
func (m *BackupObjectModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupObjectModel) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BackupObjectModel) validatePlatformID(formats strfmt.Registry) error {
	if swag.IsZero(m.PlatformID) { // not required
		return nil
	}

	if err := validate.FormatOf("platformId", "body", "uuid", m.PlatformID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BackupObjectModel) validatePlatformName(formats strfmt.Registry) error {

	if err := validate.Required("platformName", "body", m.PlatformName); err != nil {
		return err
	}

	if err := validate.Required("platformName", "body", m.PlatformName); err != nil {
		return err
	}

	if m.PlatformName != nil {
		if err := m.PlatformName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("platformName")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this backup object model based on the context it is used
func (m *BackupObjectModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePlatformName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupObjectModel) contextValidatePlatformName(ctx context.Context, formats strfmt.Registry) error {

	if m.PlatformName != nil {
		if err := m.PlatformName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("platformName")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupObjectModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupObjectModel) UnmarshalBinary(b []byte) error {
	var res BackupObjectModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
