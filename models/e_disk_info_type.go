// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EDiskInfoType Type of the disk.
//
// swagger:model EDiskInfoType
type EDiskInfoType string

func NewEDiskInfoType(value EDiskInfoType) *EDiskInfoType {
	v := value
	return &v
}

const (

	// EDiskInfoTypeUnknown captures enum value "Unknown"
	EDiskInfoTypeUnknown EDiskInfoType = "Unknown"

	// EDiskInfoTypeSimple captures enum value "Simple"
	EDiskInfoTypeSimple EDiskInfoType = "Simple"

	// EDiskInfoTypeVi captures enum value "Vi"
	EDiskInfoTypeVi EDiskInfoType = "Vi"

	// EDiskInfoTypeHv captures enum value "Hv"
	EDiskInfoTypeHv EDiskInfoType = "Hv"

	// EDiskInfoTypeHvRawDiskFile captures enum value "HvRawDiskFile"
	EDiskInfoTypeHvRawDiskFile EDiskInfoType = "HvRawDiskFile"

	// EDiskInfoTypeEndPoint captures enum value "EndPoint"
	EDiskInfoTypeEndPoint EDiskInfoType = "EndPoint"
)

// for schema
var eDiskInfoTypeEnum []interface{}

func init() {
	var res []EDiskInfoType
	if err := json.Unmarshal([]byte(`["Unknown","Simple","Vi","Hv","HvRawDiskFile","EndPoint"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eDiskInfoTypeEnum = append(eDiskInfoTypeEnum, v)
	}
}

func (m EDiskInfoType) validateEDiskInfoTypeEnum(path, location string, value EDiskInfoType) error {
	if err := validate.EnumCase(path, location, value, eDiskInfoTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e disk info type
func (m EDiskInfoType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEDiskInfoTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e disk info type based on context it is used
func (m EDiskInfoType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
