// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProxyDatastoreSettingsModel Datastores to which the backup proxy has a direct SAN or NFS connection.
//
// swagger:model ProxyDatastoreSettingsModel
type ProxyDatastoreSettingsModel struct {

	// If *true*, all datastores that the backup proxy can access are detected automatically.
	// Required: true
	AutoSelect *bool `json:"autoSelect"`

	// Array of datastores to which the backup proxy has a direct SAN or NFS connection.
	Datastores []*ProxyDatastoreModel `json:"datastores"`
}

// Validate validates this proxy datastore settings model
func (m *ProxyDatastoreSettingsModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoSelect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatastores(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProxyDatastoreSettingsModel) validateAutoSelect(formats strfmt.Registry) error {

	if err := validate.Required("autoSelect", "body", m.AutoSelect); err != nil {
		return err
	}

	return nil
}

func (m *ProxyDatastoreSettingsModel) validateDatastores(formats strfmt.Registry) error {
	if swag.IsZero(m.Datastores) { // not required
		return nil
	}

	for i := 0; i < len(m.Datastores); i++ {
		if swag.IsZero(m.Datastores[i]) { // not required
			continue
		}

		if m.Datastores[i] != nil {
			if err := m.Datastores[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datastores" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this proxy datastore settings model based on the context it is used
func (m *ProxyDatastoreSettingsModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDatastores(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProxyDatastoreSettingsModel) contextValidateDatastores(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Datastores); i++ {

		if m.Datastores[i] != nil {
			if err := m.Datastores[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("datastores" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProxyDatastoreSettingsModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProxyDatastoreSettingsModel) UnmarshalBinary(b []byte) error {
	var res ProxyDatastoreSettingsModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
