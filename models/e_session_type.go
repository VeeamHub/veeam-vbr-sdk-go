// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ESessionType Type of the session.
//
// swagger:model ESessionType
type ESessionType string

func NewESessionType(value ESessionType) *ESessionType {
	v := value
	return &v
}

const (

	// ESessionTypeInfrastructure captures enum value "Infrastructure"
	ESessionTypeInfrastructure ESessionType = "Infrastructure"

	// ESessionTypeJob captures enum value "Job"
	ESessionTypeJob ESessionType = "Job"

	// ESessionTypeAutomation captures enum value "Automation"
	ESessionTypeAutomation ESessionType = "Automation"

	// ESessionTypeConfigurationBackup captures enum value "ConfigurationBackup"
	ESessionTypeConfigurationBackup ESessionType = "ConfigurationBackup"

	// ESessionTypeRepositoryMaintenance captures enum value "RepositoryMaintenance"
	ESessionTypeRepositoryMaintenance ESessionType = "RepositoryMaintenance"

	// ESessionTypeRepositoryEvacuate captures enum value "RepositoryEvacuate"
	ESessionTypeRepositoryEvacuate ESessionType = "RepositoryEvacuate"

	// ESessionTypeInfrastructureItemDeletion captures enum value "InfrastructureItemDeletion"
	ESessionTypeInfrastructureItemDeletion ESessionType = "InfrastructureItemDeletion"
)

// for schema
var eSessionTypeEnum []interface{}

func init() {
	var res []ESessionType
	if err := json.Unmarshal([]byte(`["Infrastructure","Job","Automation","ConfigurationBackup","RepositoryMaintenance","RepositoryEvacuate","InfrastructureItemDeletion"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eSessionTypeEnum = append(eSessionTypeEnum, v)
	}
}

func (m ESessionType) validateESessionTypeEnum(path, location string, value ESessionType) error {
	if err := validate.EnumCase(path, location, value, eSessionTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e session type
func (m ESessionType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateESessionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e session type based on context it is used
func (m ESessionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
