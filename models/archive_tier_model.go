// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ArchiveTierModel Archive tier.
//
// swagger:model ArchiveTierModel
type ArchiveTierModel struct {

	// advanced settings
	AdvancedSettings *ArchiveTierAdvancedSettingsModel `json:"advancedSettings,omitempty"`

	// Number of days after which backup chains on the capacity extent are moved to the archive extent. Specify *0* to offload inactive backup chains on the same day they are created.
	ArchivePeriodDays int64 `json:"archivePeriodDays,omitempty"`

	// ID of an object storage repository added as an archive extent.
	// Format: uuid
	ExtentID strfmt.UUID `json:"extentId,omitempty"`

	// If *true*, the archive tier is enabled.
	// Required: true
	IsEnabled *bool `json:"isEnabled"`
}

// Validate validates this archive tier model
func (m *ArchiveTierModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdvancedSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArchiveTierModel) validateAdvancedSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.AdvancedSettings) { // not required
		return nil
	}

	if m.AdvancedSettings != nil {
		if err := m.AdvancedSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("advancedSettings")
			}
			return err
		}
	}

	return nil
}

func (m *ArchiveTierModel) validateExtentID(formats strfmt.Registry) error {
	if swag.IsZero(m.ExtentID) { // not required
		return nil
	}

	if err := validate.FormatOf("extentId", "body", "uuid", m.ExtentID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ArchiveTierModel) validateIsEnabled(formats strfmt.Registry) error {

	if err := validate.Required("isEnabled", "body", m.IsEnabled); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this archive tier model based on the context it is used
func (m *ArchiveTierModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdvancedSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArchiveTierModel) contextValidateAdvancedSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.AdvancedSettings != nil {
		if err := m.AdvancedSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("advancedSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArchiveTierModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArchiveTierModel) UnmarshalBinary(b []byte) error {
	var res ArchiveTierModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
