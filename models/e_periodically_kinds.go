// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EPeriodicallyKinds Time unit for periodic job scheduling.
//
// swagger:model EPeriodicallyKinds
type EPeriodicallyKinds string

func NewEPeriodicallyKinds(value EPeriodicallyKinds) *EPeriodicallyKinds {
	v := value
	return &v
}

const (

	// EPeriodicallyKindsHours captures enum value "Hours"
	EPeriodicallyKindsHours EPeriodicallyKinds = "Hours"

	// EPeriodicallyKindsMinutes captures enum value "Minutes"
	EPeriodicallyKindsMinutes EPeriodicallyKinds = "Minutes"

	// EPeriodicallyKindsSeconds captures enum value "Seconds"
	EPeriodicallyKindsSeconds EPeriodicallyKinds = "Seconds"

	// EPeriodicallyKindsDays captures enum value "Days"
	EPeriodicallyKindsDays EPeriodicallyKinds = "Days"
)

// for schema
var ePeriodicallyKindsEnum []interface{}

func init() {
	var res []EPeriodicallyKinds
	if err := json.Unmarshal([]byte(`["Hours","Minutes","Seconds","Days"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ePeriodicallyKindsEnum = append(ePeriodicallyKindsEnum, v)
	}
}

func (m EPeriodicallyKinds) validateEPeriodicallyKindsEnum(path, location string, value EPeriodicallyKinds) error {
	if err := validate.EnumCase(path, location, value, ePeriodicallyKindsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e periodically kinds
func (m EPeriodicallyKinds) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEPeriodicallyKindsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e periodically kinds based on context it is used
func (m EPeriodicallyKinds) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
