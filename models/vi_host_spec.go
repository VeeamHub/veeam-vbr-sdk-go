// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ViHostSpec vi host spec
//
// swagger:model ViHostSpec
type ViHostSpec struct {
	ManagedServerSpec

	// [Optional] Certificate thumbprint used to verify the server identity. For details on how to get the thumbprint, see [Get TLS Certificate or SSH Fingerprint](#operation/GetConnectionCertificate).
	//
	CertificateThumbprint string `json:"certificateThumbprint,omitempty"`

	// Port used to communicate with the server.
	Port int64 `json:"port,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ViHostSpec) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ManagedServerSpec
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ManagedServerSpec = aO0

	// AO1
	var dataAO1 struct {
		CertificateThumbprint string `json:"certificateThumbprint,omitempty"`

		Port int64 `json:"port,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CertificateThumbprint = dataAO1.CertificateThumbprint

	m.Port = dataAO1.Port

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ViHostSpec) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ManagedServerSpec)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		CertificateThumbprint string `json:"certificateThumbprint,omitempty"`

		Port int64 `json:"port,omitempty"`
	}

	dataAO1.CertificateThumbprint = m.CertificateThumbprint

	dataAO1.Port = m.Port

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this vi host spec
func (m *ViHostSpec) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ManagedServerSpec
	if err := m.ManagedServerSpec.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this vi host spec based on the context it is used
func (m *ViHostSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ManagedServerSpec
	if err := m.ManagedServerSpec.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ViHostSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViHostSpec) UnmarshalBinary(b []byte) error {
	var res ViHostSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
