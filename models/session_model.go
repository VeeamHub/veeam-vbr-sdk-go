// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SessionModel session model
//
// swagger:model SessionModel
type SessionModel struct {

	// ID of the activity.
	// Required: true
	// Format: uuid
	ActivityID *strfmt.UUID `json:"activityId"`

	// Date and time the session was created.
	// Required: true
	// Format: date-time
	CreationTime *strfmt.DateTime `json:"creationTime"`

	// Date and time the session was ended.
	// Format: date-time
	EndTime strfmt.DateTime `json:"endTime,omitempty"`

	// ID of the session.
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// Name of the session.
	// Required: true
	Name *string `json:"name"`

	// ID of the parent session.
	// Format: uuid
	ParentSessionID strfmt.UUID `json:"parentSessionId,omitempty"`

	// Progress percentage of the session.
	ProgressPercent int64 `json:"progressPercent,omitempty"`

	// ID of the resource.
	// Format: uuid
	ResourceID strfmt.UUID `json:"resourceId,omitempty"`

	// URI of the resource.
	ResourceReference string `json:"resourceReference,omitempty"`

	// result
	Result *SessionResultModel `json:"result,omitempty"`

	// session type
	// Required: true
	SessionType *ESessionType `json:"sessionType"`

	// state
	// Required: true
	State *ESessionState `json:"state"`

	// Update sequence number.
	// Required: true
	Usn *int64 `json:"usn"`
}

// Validate validates this session model
func (m *SessionModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentSessionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SessionModel) validateActivityID(formats strfmt.Registry) error {

	if err := validate.Required("activityId", "body", m.ActivityID); err != nil {
		return err
	}

	if err := validate.FormatOf("activityId", "body", "uuid", m.ActivityID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SessionModel) validateCreationTime(formats strfmt.Registry) error {

	if err := validate.Required("creationTime", "body", m.CreationTime); err != nil {
		return err
	}

	if err := validate.FormatOf("creationTime", "body", "date-time", m.CreationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SessionModel) validateEndTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("endTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SessionModel) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SessionModel) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *SessionModel) validateParentSessionID(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentSessionID) { // not required
		return nil
	}

	if err := validate.FormatOf("parentSessionId", "body", "uuid", m.ParentSessionID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SessionModel) validateResourceID(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceID) { // not required
		return nil
	}

	if err := validate.FormatOf("resourceId", "body", "uuid", m.ResourceID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SessionModel) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(m.Result) { // not required
		return nil
	}

	if m.Result != nil {
		if err := m.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

func (m *SessionModel) validateSessionType(formats strfmt.Registry) error {

	if err := validate.Required("sessionType", "body", m.SessionType); err != nil {
		return err
	}

	if err := validate.Required("sessionType", "body", m.SessionType); err != nil {
		return err
	}

	if m.SessionType != nil {
		if err := m.SessionType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sessionType")
			}
			return err
		}
	}

	return nil
}

func (m *SessionModel) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *SessionModel) validateUsn(formats strfmt.Registry) error {

	if err := validate.Required("usn", "body", m.Usn); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this session model based on the context it is used
func (m *SessionModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSessionType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SessionModel) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	if m.Result != nil {
		if err := m.Result.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

func (m *SessionModel) contextValidateSessionType(ctx context.Context, formats strfmt.Registry) error {

	if m.SessionType != nil {
		if err := m.SessionType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sessionType")
			}
			return err
		}
	}

	return nil
}

func (m *SessionModel) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {
		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SessionModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SessionModel) UnmarshalBinary(b []byte) error {
	var res SessionModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
