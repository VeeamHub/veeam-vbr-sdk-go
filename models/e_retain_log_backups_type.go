// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ERetainLogBackupsType Retention policy for the logs stored in the backup repository.
//
// swagger:model ERetainLogBackupsType
type ERetainLogBackupsType string

func NewERetainLogBackupsType(value ERetainLogBackupsType) *ERetainLogBackupsType {
	v := value
	return &v
}

const (

	// ERetainLogBackupsTypeUntilBackupDeleted captures enum value "untilBackupDeleted"
	ERetainLogBackupsTypeUntilBackupDeleted ERetainLogBackupsType = "untilBackupDeleted"

	// ERetainLogBackupsTypeKeepOnlyDays captures enum value "KeepOnlyDays"
	ERetainLogBackupsTypeKeepOnlyDays ERetainLogBackupsType = "KeepOnlyDays"
)

// for schema
var eRetainLogBackupsTypeEnum []interface{}

func init() {
	var res []ERetainLogBackupsType
	if err := json.Unmarshal([]byte(`["untilBackupDeleted","KeepOnlyDays"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eRetainLogBackupsTypeEnum = append(eRetainLogBackupsTypeEnum, v)
	}
}

func (m ERetainLogBackupsType) validateERetainLogBackupsTypeEnum(path, location string, value ERetainLogBackupsType) error {
	if err := validate.EnumCase(path, location, value, eRetainLogBackupsTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e retain log backups type
func (m ERetainLogBackupsType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateERetainLogBackupsTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e retain log backups type based on context it is used
func (m ERetainLogBackupsType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
