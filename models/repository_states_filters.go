// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RepositoryStatesFilters Filters repositories by the specified parameters.
//
// swagger:model RepositoryStatesFilters
type RepositoryStatesFilters struct {

	// Filters repositories by repository capacity.
	CapacityFilter float64 `json:"capacityFilter,omitempty"`

	// Filters repositories by repository free space.
	FreeSpaceFilter float64 `json:"freeSpaceFilter,omitempty"`

	// id filter
	// Format: uuid
	IDFilter strfmt.UUID `json:"idFilter,omitempty"`

	// Returns the specified number of repositories.
	Limit int32 `json:"limit,omitempty"`

	// Filters repositories by the `nameFilter` pattern. The pattern can match any repository parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	NameFilter string `json:"nameFilter,omitempty"`

	// Sorts repositories in the ascending order by the `orderColumn` parameter.
	OrderAsc bool `json:"orderAsc,omitempty"`

	// order column
	OrderColumn ERepositoryStatesFiltersOrderColumn `json:"orderColumn,omitempty"`

	// Skips the specified number of repositories.
	Skip int32 `json:"skip,omitempty"`

	// type filter
	TypeFilter ERepositoryType `json:"typeFilter,omitempty"`

	// Filters repositories by repository used space.
	UsedSpaceFilter float64 `json:"usedSpaceFilter,omitempty"`
}

// Validate validates this repository states filters
func (m *RepositoryStatesFilters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIDFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderColumn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeFilter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryStatesFilters) validateIDFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.IDFilter) { // not required
		return nil
	}

	if err := validate.FormatOf("idFilter", "body", "uuid", m.IDFilter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RepositoryStatesFilters) validateOrderColumn(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderColumn) { // not required
		return nil
	}

	if err := m.OrderColumn.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("orderColumn")
		}
		return err
	}

	return nil
}

func (m *RepositoryStatesFilters) validateTypeFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeFilter) { // not required
		return nil
	}

	if err := m.TypeFilter.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("typeFilter")
		}
		return err
	}

	return nil
}

// ContextValidate validate this repository states filters based on the context it is used
func (m *RepositoryStatesFilters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrderColumn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryStatesFilters) contextValidateOrderColumn(ctx context.Context, formats strfmt.Registry) error {

	if err := m.OrderColumn.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("orderColumn")
		}
		return err
	}

	return nil
}

func (m *RepositoryStatesFilters) contextValidateTypeFilter(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TypeFilter.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("typeFilter")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RepositoryStatesFilters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepositoryStatesFilters) UnmarshalBinary(b []byte) error {
	var res RepositoryStatesFilters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
