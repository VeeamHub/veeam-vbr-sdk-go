// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EJobStatus Current status of the job.
//
// swagger:model EJobStatus
type EJobStatus string

func NewEJobStatus(value EJobStatus) *EJobStatus {
	v := value
	return &v
}

const (

	// EJobStatusRunning captures enum value "running"
	EJobStatusRunning EJobStatus = "running"

	// EJobStatusInactive captures enum value "inactive"
	EJobStatusInactive EJobStatus = "inactive"

	// EJobStatusDisabled captures enum value "disabled"
	EJobStatusDisabled EJobStatus = "disabled"
)

// for schema
var eJobStatusEnum []interface{}

func init() {
	var res []EJobStatus
	if err := json.Unmarshal([]byte(`["running","inactive","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eJobStatusEnum = append(eJobStatusEnum, v)
	}
}

func (m EJobStatus) validateEJobStatusEnum(path, location string, value EJobStatus) error {
	if err := validate.EnumCase(path, location, value, eJobStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e job status
func (m EJobStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEJobStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e job status based on context it is used
func (m EJobStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
