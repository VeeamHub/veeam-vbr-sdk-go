// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EInstantRecoveryMountState Mount state.
//
// swagger:model EInstantRecoveryMountState
type EInstantRecoveryMountState string

func NewEInstantRecoveryMountState(value EInstantRecoveryMountState) *EInstantRecoveryMountState {
	v := value
	return &v
}

const (

	// EInstantRecoveryMountStateFailed captures enum value "Failed"
	EInstantRecoveryMountStateFailed EInstantRecoveryMountState = "Failed"

	// EInstantRecoveryMountStateMounting captures enum value "Mounting"
	EInstantRecoveryMountStateMounting EInstantRecoveryMountState = "Mounting"

	// EInstantRecoveryMountStateMounted captures enum value "Mounted"
	EInstantRecoveryMountStateMounted EInstantRecoveryMountState = "Mounted"

	// EInstantRecoveryMountStateDismounting captures enum value "Dismounting"
	EInstantRecoveryMountStateDismounting EInstantRecoveryMountState = "Dismounting"
)

// for schema
var eInstantRecoveryMountStateEnum []interface{}

func init() {
	var res []EInstantRecoveryMountState
	if err := json.Unmarshal([]byte(`["Failed","Mounting","Mounted","Dismounting"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eInstantRecoveryMountStateEnum = append(eInstantRecoveryMountStateEnum, v)
	}
}

func (m EInstantRecoveryMountState) validateEInstantRecoveryMountStateEnum(path, location string, value EInstantRecoveryMountState) error {
	if err := validate.EnumCase(path, location, value, eInstantRecoveryMountStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e instant recovery mount state
func (m EInstantRecoveryMountState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEInstantRecoveryMountStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e instant recovery mount state based on context it is used
func (m EInstantRecoveryMountState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
