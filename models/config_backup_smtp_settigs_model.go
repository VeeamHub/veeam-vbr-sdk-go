// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigBackupSMTPSettigsModel Email notification settings.
//
// swagger:model ConfigBackupSMTPSettigsModel
type ConfigBackupSMTPSettigsModel struct {

	// If *true*, email notifications are enabled for this job.
	// Required: true
	IsEnabled *bool `json:"isEnabled"`

	// If *true*, email notifications are sent when the job fails.
	// Required: true
	NotifyOnError *bool `json:"notifyOnError"`

	// If *true*, email notifications are sent when the job completes successfully.
	// Required: true
	NotifyOnSuccess *bool `json:"notifyOnSuccess"`

	// If *true*, email notifications are sent when the job completes with a warning.
	// Required: true
	NotifyOnWarning *bool `json:"notifyOnWarning"`

	// Array of recipients' email addresses.
	// Required: true
	Recipients []string `json:"recipients"`

	// settings type
	// Required: true
	SettingsType *EConfigBackupSMTPSettingsType `json:"settingsType"`

	// Notification subject. Use the following variables in the subject: *%JobResult%*, *%JobName%*, *%Time%* (completion time).
	//
	// Required: true
	Subject *string `json:"subject"`
}

// Validate validates this config backup SMTP settigs model
func (m *ConfigBackupSMTPSettigsModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIsEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotifyOnError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotifyOnSuccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotifyOnWarning(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipients(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettingsType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigBackupSMTPSettigsModel) validateIsEnabled(formats strfmt.Registry) error {

	if err := validate.Required("isEnabled", "body", m.IsEnabled); err != nil {
		return err
	}

	return nil
}

func (m *ConfigBackupSMTPSettigsModel) validateNotifyOnError(formats strfmt.Registry) error {

	if err := validate.Required("notifyOnError", "body", m.NotifyOnError); err != nil {
		return err
	}

	return nil
}

func (m *ConfigBackupSMTPSettigsModel) validateNotifyOnSuccess(formats strfmt.Registry) error {

	if err := validate.Required("notifyOnSuccess", "body", m.NotifyOnSuccess); err != nil {
		return err
	}

	return nil
}

func (m *ConfigBackupSMTPSettigsModel) validateNotifyOnWarning(formats strfmt.Registry) error {

	if err := validate.Required("notifyOnWarning", "body", m.NotifyOnWarning); err != nil {
		return err
	}

	return nil
}

func (m *ConfigBackupSMTPSettigsModel) validateRecipients(formats strfmt.Registry) error {

	if err := validate.Required("recipients", "body", m.Recipients); err != nil {
		return err
	}

	return nil
}

func (m *ConfigBackupSMTPSettigsModel) validateSettingsType(formats strfmt.Registry) error {

	if err := validate.Required("settingsType", "body", m.SettingsType); err != nil {
		return err
	}

	if err := validate.Required("settingsType", "body", m.SettingsType); err != nil {
		return err
	}

	if m.SettingsType != nil {
		if err := m.SettingsType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settingsType")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigBackupSMTPSettigsModel) validateSubject(formats strfmt.Registry) error {

	if err := validate.Required("subject", "body", m.Subject); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this config backup SMTP settigs model based on the context it is used
func (m *ConfigBackupSMTPSettigsModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSettingsType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigBackupSMTPSettigsModel) contextValidateSettingsType(ctx context.Context, formats strfmt.Registry) error {

	if m.SettingsType != nil {
		if err := m.SettingsType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("settingsType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigBackupSMTPSettigsModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigBackupSMTPSettigsModel) UnmarshalBinary(b []byte) error {
	var res ConfigBackupSMTPSettigsModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
