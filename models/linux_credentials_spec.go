// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LinuxCredentialsSpec linux credentials spec
//
// swagger:model LinuxCredentialsSpec
type LinuxCredentialsSpec struct {
	CredentialsSpec

	// SSH port used to connect to a Linux server.
	SSHPort int64 `json:"SSHPort,omitempty"`

	// If *true*, the account is automatically added to the sudoers file.
	AddToSudoers bool `json:"addToSudoers,omitempty"`

	// If *true*, the permissions of the account are automatically elevated to the root user.
	AutoElevated bool `json:"autoElevated,omitempty"`

	// Passphrase that protects the private key.
	Passphrase string `json:"passphrase,omitempty"`

	// Private key.
	PrivateKey string `json:"privateKey,omitempty"`

	// Password for the root account.
	RootPassword string `json:"rootPassword,omitempty"`

	// Tag used to identify the credentials record.
	Tag string `json:"tag,omitempty"`

	// If *true*, the `su` command is used for Linux distributions where the `sudo` command is not available.
	UseSu bool `json:"useSu,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *LinuxCredentialsSpec) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CredentialsSpec
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CredentialsSpec = aO0

	// AO1
	var dataAO1 struct {
		SSHPort int64 `json:"SSHPort,omitempty"`

		AddToSudoers bool `json:"addToSudoers,omitempty"`

		AutoElevated bool `json:"autoElevated,omitempty"`

		Passphrase string `json:"passphrase,omitempty"`

		PrivateKey string `json:"privateKey,omitempty"`

		RootPassword string `json:"rootPassword,omitempty"`

		Tag string `json:"tag,omitempty"`

		UseSu bool `json:"useSu,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.SSHPort = dataAO1.SSHPort

	m.AddToSudoers = dataAO1.AddToSudoers

	m.AutoElevated = dataAO1.AutoElevated

	m.Passphrase = dataAO1.Passphrase

	m.PrivateKey = dataAO1.PrivateKey

	m.RootPassword = dataAO1.RootPassword

	m.Tag = dataAO1.Tag

	m.UseSu = dataAO1.UseSu

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m LinuxCredentialsSpec) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CredentialsSpec)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		SSHPort int64 `json:"SSHPort,omitempty"`

		AddToSudoers bool `json:"addToSudoers,omitempty"`

		AutoElevated bool `json:"autoElevated,omitempty"`

		Passphrase string `json:"passphrase,omitempty"`

		PrivateKey string `json:"privateKey,omitempty"`

		RootPassword string `json:"rootPassword,omitempty"`

		Tag string `json:"tag,omitempty"`

		UseSu bool `json:"useSu,omitempty"`
	}

	dataAO1.SSHPort = m.SSHPort

	dataAO1.AddToSudoers = m.AddToSudoers

	dataAO1.AutoElevated = m.AutoElevated

	dataAO1.Passphrase = m.Passphrase

	dataAO1.PrivateKey = m.PrivateKey

	dataAO1.RootPassword = m.RootPassword

	dataAO1.Tag = m.Tag

	dataAO1.UseSu = m.UseSu

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this linux credentials spec
func (m *LinuxCredentialsSpec) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CredentialsSpec
	if err := m.CredentialsSpec.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this linux credentials spec based on the context it is used
func (m *LinuxCredentialsSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CredentialsSpec
	if err := m.CredentialsSpec.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *LinuxCredentialsSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LinuxCredentialsSpec) UnmarshalBinary(b []byte) error {
	var res LinuxCredentialsSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
