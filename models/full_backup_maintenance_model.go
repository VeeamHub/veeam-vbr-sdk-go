// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FullBackupMaintenanceModel Maintenance settings for full backup files.
//
// swagger:model FullBackupMaintenanceModel
type FullBackupMaintenanceModel struct {

	// remove data
	RemoveData *FullBackupMaintenanceRemoveDataModel `json:"RemoveData,omitempty"`

	// defragment and compact
	DefragmentAndCompact *FullBackupMaintenanceDefragmentAndCompactModel `json:"defragmentAndCompact,omitempty"`
}

// Validate validates this full backup maintenance model
func (m *FullBackupMaintenanceModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRemoveData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefragmentAndCompact(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FullBackupMaintenanceModel) validateRemoveData(formats strfmt.Registry) error {
	if swag.IsZero(m.RemoveData) { // not required
		return nil
	}

	if m.RemoveData != nil {
		if err := m.RemoveData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RemoveData")
			}
			return err
		}
	}

	return nil
}

func (m *FullBackupMaintenanceModel) validateDefragmentAndCompact(formats strfmt.Registry) error {
	if swag.IsZero(m.DefragmentAndCompact) { // not required
		return nil
	}

	if m.DefragmentAndCompact != nil {
		if err := m.DefragmentAndCompact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defragmentAndCompact")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this full backup maintenance model based on the context it is used
func (m *FullBackupMaintenanceModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRemoveData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefragmentAndCompact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FullBackupMaintenanceModel) contextValidateRemoveData(ctx context.Context, formats strfmt.Registry) error {

	if m.RemoveData != nil {
		if err := m.RemoveData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RemoveData")
			}
			return err
		}
	}

	return nil
}

func (m *FullBackupMaintenanceModel) contextValidateDefragmentAndCompact(ctx context.Context, formats strfmt.Registry) error {

	if m.DefragmentAndCompact != nil {
		if err := m.DefragmentAndCompact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defragmentAndCompact")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FullBackupMaintenanceModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FullBackupMaintenanceModel) UnmarshalBinary(b []byte) error {
	var res FullBackupMaintenanceModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
