// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EncryptionPasswordExportSpec encryption password export spec
//
// swagger:model EncryptionPasswordExportSpec
type EncryptionPasswordExportSpec struct {

	// Array of password hints.
	// Unique: true
	Hints []string `json:"hints"`

	// Array of password IDs.
	// Unique: true
	Ids []strfmt.UUID `json:"ids"`

	// Date and time the password was last modified.
	// Format: date-time
	ModificationTimeFrom strfmt.DateTime `json:"modificationTimeFrom,omitempty"`

	// Array of password tags.
	// Unique: true
	Tags []string `json:"tags"`
}

// Validate validates this encryption password export spec
func (m *EncryptionPasswordExportSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModificationTimeFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EncryptionPasswordExportSpec) validateHints(formats strfmt.Registry) error {
	if swag.IsZero(m.Hints) { // not required
		return nil
	}

	if err := validate.UniqueItems("hints", "body", m.Hints); err != nil {
		return err
	}

	return nil
}

func (m *EncryptionPasswordExportSpec) validateIds(formats strfmt.Registry) error {
	if swag.IsZero(m.Ids) { // not required
		return nil
	}

	if err := validate.UniqueItems("ids", "body", m.Ids); err != nil {
		return err
	}

	for i := 0; i < len(m.Ids); i++ {

		if err := validate.FormatOf("ids"+"."+strconv.Itoa(i), "body", "uuid", m.Ids[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *EncryptionPasswordExportSpec) validateModificationTimeFrom(formats strfmt.Registry) error {
	if swag.IsZero(m.ModificationTimeFrom) { // not required
		return nil
	}

	if err := validate.FormatOf("modificationTimeFrom", "body", "date-time", m.ModificationTimeFrom.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EncryptionPasswordExportSpec) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if err := validate.UniqueItems("tags", "body", m.Tags); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this encryption password export spec based on context it is used
func (m *EncryptionPasswordExportSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EncryptionPasswordExportSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EncryptionPasswordExportSpec) UnmarshalBinary(b []byte) error {
	var res EncryptionPasswordExportSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
