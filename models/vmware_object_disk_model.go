// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VmwareObjectDiskModel vmware object disk model
//
// swagger:model VmwareObjectDiskModel
type VmwareObjectDiskModel struct {

	// Array of disks.
	// Required: true
	Disks []string `json:"disks"`

	// disks to process
	// Required: true
	DisksToProcess *EVmwareDisksTypeToProcess `json:"disksToProcess"`

	// If *true*, the disk is removed from VM configuration.
	RemoveFromVMConfiguration bool `json:"removeFromVMConfiguration,omitempty"`

	// vm object
	// Required: true
	VMObject *VmwareObjectModel `json:"vmObject"`
}

// Validate validates this vmware object disk model
func (m *VmwareObjectDiskModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisksToProcess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMObject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareObjectDiskModel) validateDisks(formats strfmt.Registry) error {

	if err := validate.Required("disks", "body", m.Disks); err != nil {
		return err
	}

	return nil
}

func (m *VmwareObjectDiskModel) validateDisksToProcess(formats strfmt.Registry) error {

	if err := validate.Required("disksToProcess", "body", m.DisksToProcess); err != nil {
		return err
	}

	if err := validate.Required("disksToProcess", "body", m.DisksToProcess); err != nil {
		return err
	}

	if m.DisksToProcess != nil {
		if err := m.DisksToProcess.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disksToProcess")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareObjectDiskModel) validateVMObject(formats strfmt.Registry) error {

	if err := validate.Required("vmObject", "body", m.VMObject); err != nil {
		return err
	}

	if m.VMObject != nil {
		if err := m.VMObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmObject")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vmware object disk model based on the context it is used
func (m *VmwareObjectDiskModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDisksToProcess(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmwareObjectDiskModel) contextValidateDisksToProcess(ctx context.Context, formats strfmt.Registry) error {

	if m.DisksToProcess != nil {
		if err := m.DisksToProcess.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disksToProcess")
			}
			return err
		}
	}

	return nil
}

func (m *VmwareObjectDiskModel) contextValidateVMObject(ctx context.Context, formats strfmt.Registry) error {

	if m.VMObject != nil {
		if err := m.VMObject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmObject")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VmwareObjectDiskModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareObjectDiskModel) UnmarshalBinary(b []byte) error {
	var res VmwareObjectDiskModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
