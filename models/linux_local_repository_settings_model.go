// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LinuxLocalRepositorySettingsModel Repository settings.
//
// swagger:model LinuxLocalRepositorySettingsModel
type LinuxLocalRepositorySettingsModel struct {

	// advanced settings
	AdvancedSettings *RepositoryAdvancedSettingsModel `json:"advancedSettings,omitempty"`

	// Number of days to keep immutable backups.
	MakeRecentBackupsImmutableDays int64 `json:"makeRecentBackupsImmutableDays,omitempty"`

	// Maximum number of concurrent tasks.
	MaxTaskCount int64 `json:"maxTaskCount,omitempty"`

	// Path to the folder where backup files are stored.
	Path string `json:"path,omitempty"`

	// Maximum rate that restricts the total speed of reading and writing data to the backup repository disk.
	ReadWriteRate int64 `json:"readWriteRate,omitempty"`

	// [For Linux repository] If *true*, fast cloning on XFS volumes is used.
	//
	UseFastCloningOnXFSVolumes bool `json:"useFastCloningOnXFSVolumes,omitempty"`

	// If *true*, the Object Lock feature is used to protect recent backups.
	UseImmutableBackups bool `json:"useImmutableBackups,omitempty"`
}

// Validate validates this linux local repository settings model
func (m *LinuxLocalRepositorySettingsModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdvancedSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LinuxLocalRepositorySettingsModel) validateAdvancedSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.AdvancedSettings) { // not required
		return nil
	}

	if m.AdvancedSettings != nil {
		if err := m.AdvancedSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("advancedSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this linux local repository settings model based on the context it is used
func (m *LinuxLocalRepositorySettingsModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdvancedSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LinuxLocalRepositorySettingsModel) contextValidateAdvancedSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.AdvancedSettings != nil {
		if err := m.AdvancedSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("advancedSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LinuxLocalRepositorySettingsModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LinuxLocalRepositorySettingsModel) UnmarshalBinary(b []byte) error {
	var res LinuxLocalRepositorySettingsModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
