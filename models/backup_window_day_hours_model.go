// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupWindowDayHoursModel Hourly scheme for a day.
//
// swagger:model BackupWindowDayHoursModel
type BackupWindowDayHoursModel struct {

	// day
	// Required: true
	Day *EDayOfWeek `json:"day"`

	// String of hours in the following format:
	// *1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1*
	// where *1* means enabled, *0* means disabled.
	//
	// Required: true
	Hours *string `json:"hours"`
}

// Validate validates this backup window day hours model
func (m *BackupWindowDayHoursModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHours(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupWindowDayHoursModel) validateDay(formats strfmt.Registry) error {

	if err := validate.Required("day", "body", m.Day); err != nil {
		return err
	}

	if err := validate.Required("day", "body", m.Day); err != nil {
		return err
	}

	if m.Day != nil {
		if err := m.Day.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("day")
			}
			return err
		}
	}

	return nil
}

func (m *BackupWindowDayHoursModel) validateHours(formats strfmt.Registry) error {

	if err := validate.Required("hours", "body", m.Hours); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this backup window day hours model based on the context it is used
func (m *BackupWindowDayHoursModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupWindowDayHoursModel) contextValidateDay(ctx context.Context, formats strfmt.Registry) error {

	if m.Day != nil {
		if err := m.Day.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("day")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupWindowDayHoursModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupWindowDayHoursModel) UnmarshalBinary(b []byte) error {
	var res BackupWindowDayHoursModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
