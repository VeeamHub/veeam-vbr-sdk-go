// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ETaskLogRecordStatus e task log record status
//
// swagger:model ETaskLogRecordStatus
type ETaskLogRecordStatus string

func NewETaskLogRecordStatus(value ETaskLogRecordStatus) *ETaskLogRecordStatus {
	v := value
	return &v
}

const (

	// ETaskLogRecordStatusNone captures enum value "None"
	ETaskLogRecordStatusNone ETaskLogRecordStatus = "None"

	// ETaskLogRecordStatusSucceeded captures enum value "Succeeded"
	ETaskLogRecordStatusSucceeded ETaskLogRecordStatus = "Succeeded"

	// ETaskLogRecordStatusWarning captures enum value "Warning"
	ETaskLogRecordStatusWarning ETaskLogRecordStatus = "Warning"

	// ETaskLogRecordStatusFailed captures enum value "Failed"
	ETaskLogRecordStatusFailed ETaskLogRecordStatus = "Failed"
)

// for schema
var eTaskLogRecordStatusEnum []interface{}

func init() {
	var res []ETaskLogRecordStatus
	if err := json.Unmarshal([]byte(`["None","Succeeded","Warning","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eTaskLogRecordStatusEnum = append(eTaskLogRecordStatusEnum, v)
	}
}

func (m ETaskLogRecordStatus) validateETaskLogRecordStatusEnum(path, location string, value ETaskLogRecordStatus) error {
	if err := validate.EnumCase(path, location, value, eTaskLogRecordStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e task log record status
func (m ETaskLogRecordStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateETaskLogRecordStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e task log record status based on context it is used
func (m ETaskLogRecordStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
