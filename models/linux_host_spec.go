// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LinuxHostSpec linux host spec
//
// swagger:model LinuxHostSpec
type LinuxHostSpec struct {
	ManagedServerSpec

	// SSH key fingerprint used to verify the server identity. For details on how to get the fingerprint, see [Get TLS Certificate or SSH Fingerprint](#operation/GetConnectionCertificate).
	//
	// Required: true
	SSHFingerprint *string `json:"sshFingerprint"`

	// ssh settings
	SSHSettings *LinuxHostSSHSettingsModel `json:"sshSettings,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *LinuxHostSpec) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ManagedServerSpec
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ManagedServerSpec = aO0

	// now for regular properties
	var propsLinuxHostSpec struct {
		SSHFingerprint *string `json:"sshFingerprint"`

		SSHSettings *LinuxHostSSHSettingsModel `json:"sshSettings,omitempty"`
	}
	if err := swag.ReadJSON(raw, &propsLinuxHostSpec); err != nil {
		return err
	}
	m.SSHFingerprint = propsLinuxHostSpec.SSHFingerprint

	m.SSHSettings = propsLinuxHostSpec.SSHSettings

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m LinuxHostSpec) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.ManagedServerSpec)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsLinuxHostSpec struct {
		SSHFingerprint *string `json:"sshFingerprint"`

		SSHSettings *LinuxHostSSHSettingsModel `json:"sshSettings,omitempty"`
	}
	propsLinuxHostSpec.SSHFingerprint = m.SSHFingerprint

	propsLinuxHostSpec.SSHSettings = m.SSHSettings

	jsonDataPropsLinuxHostSpec, errLinuxHostSpec := swag.WriteJSON(propsLinuxHostSpec)
	if errLinuxHostSpec != nil {
		return nil, errLinuxHostSpec
	}
	_parts = append(_parts, jsonDataPropsLinuxHostSpec)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this linux host spec
func (m *LinuxHostSpec) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ManagedServerSpec
	if err := m.ManagedServerSpec.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHFingerprint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LinuxHostSpec) validateSSHFingerprint(formats strfmt.Registry) error {

	if err := validate.Required("sshFingerprint", "body", m.SSHFingerprint); err != nil {
		return err
	}

	return nil
}

func (m *LinuxHostSpec) validateSSHSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.SSHSettings) { // not required
		return nil
	}

	if m.SSHSettings != nil {
		if err := m.SSHSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshSettings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this linux host spec based on the context it is used
func (m *LinuxHostSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ManagedServerSpec
	if err := m.ManagedServerSpec.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSSHSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LinuxHostSpec) contextValidateSSHSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.SSHSettings != nil {
		if err := m.SSHSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LinuxHostSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LinuxHostSpec) UnmarshalBinary(b []byte) error {
	var res LinuxHostSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
