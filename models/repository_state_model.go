// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RepositoryStateModel repository state model
//
// swagger:model RepositoryStateModel
type RepositoryStateModel struct {

	// Repository capacity in GB.
	// Required: true
	CapacityGB *float64 `json:"capacityGB"`

	// description
	// Required: true
	Description *string `json:"description"`

	// Repository free space in GB.
	// Required: true
	FreeGB *float64 `json:"freeGB"`

	// ID of the server that is used as a backup repository.
	// Format: uuid
	HostID strfmt.UUID `json:"hostId,omitempty"`

	// Name of the server that is used as a backup repository.
	HostName string `json:"hostName,omitempty"`

	// ID of the backup repository.
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// Name of the backup repository.
	// Required: true
	Name *string `json:"name"`

	// Path to the folder where backup files are stored.
	Path string `json:"path,omitempty"`

	// type
	// Required: true
	Type *ERepositoryType `json:"type"`

	// Repository used space in GB.
	// Required: true
	UsedSpaceGB *float64 `json:"usedSpaceGB"`
}

// Validate validates this repository state model
func (m *RepositoryStateModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapacityGB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFreeGB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsedSpaceGB(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryStateModel) validateCapacityGB(formats strfmt.Registry) error {

	if err := validate.Required("capacityGB", "body", m.CapacityGB); err != nil {
		return err
	}

	return nil
}

func (m *RepositoryStateModel) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *RepositoryStateModel) validateFreeGB(formats strfmt.Registry) error {

	if err := validate.Required("freeGB", "body", m.FreeGB); err != nil {
		return err
	}

	return nil
}

func (m *RepositoryStateModel) validateHostID(formats strfmt.Registry) error {
	if swag.IsZero(m.HostID) { // not required
		return nil
	}

	if err := validate.FormatOf("hostId", "body", "uuid", m.HostID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RepositoryStateModel) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RepositoryStateModel) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RepositoryStateModel) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *RepositoryStateModel) validateUsedSpaceGB(formats strfmt.Registry) error {

	if err := validate.Required("usedSpaceGB", "body", m.UsedSpaceGB); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this repository state model based on the context it is used
func (m *RepositoryStateModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryStateModel) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RepositoryStateModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepositoryStateModel) UnmarshalBinary(b []byte) error {
	var res RepositoryStateModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
