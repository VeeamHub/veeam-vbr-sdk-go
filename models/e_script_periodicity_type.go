// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EScriptPeriodicityType Type of script periodicity.
//
// swagger:model EScriptPeriodicityType
type EScriptPeriodicityType string

func NewEScriptPeriodicityType(value EScriptPeriodicityType) *EScriptPeriodicityType {
	v := value
	return &v
}

const (

	// EScriptPeriodicityTypeDays captures enum value "Days"
	EScriptPeriodicityTypeDays EScriptPeriodicityType = "Days"

	// EScriptPeriodicityTypeBackupSessions captures enum value "BackupSessions"
	EScriptPeriodicityTypeBackupSessions EScriptPeriodicityType = "BackupSessions"
)

// for schema
var eScriptPeriodicityTypeEnum []interface{}

func init() {
	var res []EScriptPeriodicityType
	if err := json.Unmarshal([]byte(`["Days","BackupSessions"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eScriptPeriodicityTypeEnum = append(eScriptPeriodicityTypeEnum, v)
	}
}

func (m EScriptPeriodicityType) validateEScriptPeriodicityTypeEnum(path, location string, value EScriptPeriodicityType) error {
	if err := validate.EnumCase(path, location, value, eScriptPeriodicityTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e script periodicity type
func (m EScriptPeriodicityType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEScriptPeriodicityTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e script periodicity type based on context it is used
func (m EScriptPeriodicityType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
