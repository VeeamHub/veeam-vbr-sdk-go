// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SyntheticFullSettingsModel Synthetic full backup settings.
//
// swagger:model SyntheticFullSettingsModel
type SyntheticFullSettingsModel struct {

	// Days of the week when Veeam Backup & Replication creates a synthetic full backup.
	// Unique: true
	Days []EDayOfWeek `json:"days"`

	// If *true*, synthetic full backups are enabled.
	// Required: true
	IsEnabled *bool `json:"isEnabled"`
}

// Validate validates this synthetic full settings model
func (m *SyntheticFullSettingsModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SyntheticFullSettingsModel) validateDays(formats strfmt.Registry) error {
	if swag.IsZero(m.Days) { // not required
		return nil
	}

	if err := validate.UniqueItems("days", "body", m.Days); err != nil {
		return err
	}

	for i := 0; i < len(m.Days); i++ {

		if err := m.Days[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("days" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *SyntheticFullSettingsModel) validateIsEnabled(formats strfmt.Registry) error {

	if err := validate.Required("isEnabled", "body", m.IsEnabled); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this synthetic full settings model based on the context it is used
func (m *SyntheticFullSettingsModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDays(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SyntheticFullSettingsModel) contextValidateDays(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Days); i++ {

		if err := m.Days[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("days" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SyntheticFullSettingsModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SyntheticFullSettingsModel) UnmarshalBinary(b []byte) error {
	var res SyntheticFullSettingsModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
