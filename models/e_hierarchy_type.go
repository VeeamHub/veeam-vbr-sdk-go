// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EHierarchyType Hierarchy type.
//
// swagger:model EHierarchyType
type EHierarchyType string

func NewEHierarchyType(value EHierarchyType) *EHierarchyType {
	v := value
	return &v
}

const (

	// EHierarchyTypeHostsAndClusters captures enum value "HostsAndClusters"
	EHierarchyTypeHostsAndClusters EHierarchyType = "HostsAndClusters"

	// EHierarchyTypeDatastoresAndVms captures enum value "DatastoresAndVms"
	EHierarchyTypeDatastoresAndVms EHierarchyType = "DatastoresAndVms"

	// EHierarchyTypeHostsAndDatastores captures enum value "HostsAndDatastores"
	EHierarchyTypeHostsAndDatastores EHierarchyType = "HostsAndDatastores"

	// EHierarchyTypeVmsAndTemplates captures enum value "VmsAndTemplates"
	EHierarchyTypeVmsAndTemplates EHierarchyType = "VmsAndTemplates"

	// EHierarchyTypeVmsAndTags captures enum value "VmsAndTags"
	EHierarchyTypeVmsAndTags EHierarchyType = "VmsAndTags"
)

// for schema
var eHierarchyTypeEnum []interface{}

func init() {
	var res []EHierarchyType
	if err := json.Unmarshal([]byte(`["HostsAndClusters","DatastoresAndVms","HostsAndDatastores","VmsAndTemplates","VmsAndTags"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eHierarchyTypeEnum = append(eHierarchyTypeEnum, v)
	}
}

func (m EHierarchyType) validateEHierarchyTypeEnum(path, location string, value EHierarchyType) error {
	if err := validate.EnumCase(path, location, value, eHierarchyTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e hierarchy type
func (m EHierarchyType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEHierarchyTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e hierarchy type based on context it is used
func (m EHierarchyType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
