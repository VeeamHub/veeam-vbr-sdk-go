// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NotificationVMAttributeSettingsModel VM attribute settings.
//
// swagger:model NotificationVmAttributeSettingsModel
type NotificationVMAttributeSettingsModel struct {

	// If *true*, information about successfully performed backup is appended to the existing value of the attribute added by the user.
	AppendToExisitingValue bool `json:"appendToExisitingValue,omitempty"`

	// If *true*, information about successfully performed backup is written to a VM attribute.
	// Required: true
	IsEnabled *bool `json:"isEnabled"`

	// Name of the VM attribute.
	Notes string `json:"notes,omitempty"`
}

// Validate validates this notification Vm attribute settings model
func (m *NotificationVMAttributeSettingsModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIsEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NotificationVMAttributeSettingsModel) validateIsEnabled(formats strfmt.Registry) error {

	if err := validate.Required("isEnabled", "body", m.IsEnabled); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this notification Vm attribute settings model based on context it is used
func (m *NotificationVMAttributeSettingsModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NotificationVMAttributeSettingsModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NotificationVMAttributeSettingsModel) UnmarshalBinary(b []byte) error {
	var res NotificationVMAttributeSettingsModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
