// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrafficRuleModel traffic rule model
//
// swagger:model TrafficRuleModel
type TrafficRuleModel struct {

	// If *true*, traffic encryption is enabled.
	EncryptionEnabled bool `json:"encryptionEnabled,omitempty"`

	// ID of the rule.
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// Name of the rule.
	// Required: true
	Name *string `json:"name"`

	// End IP address of the range for the backup infrastructure components on the source side.
	// Required: true
	SourceIPEnd *string `json:"sourceIPEnd"`

	// Start IP address of the range for the backup infrastructure components on the source side.
	// Required: true
	SourceIPStart *string `json:"sourceIPStart"`

	// End IP address of the range for the backup infrastructure components on the target side.
	// Required: true
	TargetIPEnd *string `json:"targetIPEnd"`

	// Start IP address of the range for the backup infrastructure components on the target side.
	// Required: true
	TargetIPStart *string `json:"targetIPStart"`

	// If *true*, traffic throttling is enabled.
	ThrottlingEnabled bool `json:"throttlingEnabled,omitempty"`

	// throttling unit
	ThrottlingUnit ESpeedUnit `json:"throttlingUnit,omitempty"`

	// Maximum speed that must be used to transfer data from source to target.
	ThrottlingValue int32 `json:"throttlingValue,omitempty"`

	// If *true*, throttling window during which the speed must be limited is enabled.
	ThrottlingWindowEnabled bool `json:"throttlingWindowEnabled,omitempty"`

	// throttling window options
	ThrottlingWindowOptions *BackupWindowSettingModel `json:"throttlingWindowOptions,omitempty"`
}

// Validate validates this traffic rule model
func (m *TrafficRuleModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceIPEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceIPStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetIPEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetIPStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThrottlingUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThrottlingWindowOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficRuleModel) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TrafficRuleModel) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TrafficRuleModel) validateSourceIPEnd(formats strfmt.Registry) error {

	if err := validate.Required("sourceIPEnd", "body", m.SourceIPEnd); err != nil {
		return err
	}

	return nil
}

func (m *TrafficRuleModel) validateSourceIPStart(formats strfmt.Registry) error {

	if err := validate.Required("sourceIPStart", "body", m.SourceIPStart); err != nil {
		return err
	}

	return nil
}

func (m *TrafficRuleModel) validateTargetIPEnd(formats strfmt.Registry) error {

	if err := validate.Required("targetIPEnd", "body", m.TargetIPEnd); err != nil {
		return err
	}

	return nil
}

func (m *TrafficRuleModel) validateTargetIPStart(formats strfmt.Registry) error {

	if err := validate.Required("targetIPStart", "body", m.TargetIPStart); err != nil {
		return err
	}

	return nil
}

func (m *TrafficRuleModel) validateThrottlingUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.ThrottlingUnit) { // not required
		return nil
	}

	if err := m.ThrottlingUnit.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("throttlingUnit")
		}
		return err
	}

	return nil
}

func (m *TrafficRuleModel) validateThrottlingWindowOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.ThrottlingWindowOptions) { // not required
		return nil
	}

	if m.ThrottlingWindowOptions != nil {
		if err := m.ThrottlingWindowOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throttlingWindowOptions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this traffic rule model based on the context it is used
func (m *TrafficRuleModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateThrottlingUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThrottlingWindowOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrafficRuleModel) contextValidateThrottlingUnit(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ThrottlingUnit.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("throttlingUnit")
		}
		return err
	}

	return nil
}

func (m *TrafficRuleModel) contextValidateThrottlingWindowOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.ThrottlingWindowOptions != nil {
		if err := m.ThrottlingWindowOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throttlingWindowOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrafficRuleModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrafficRuleModel) UnmarshalBinary(b []byte) error {
	var res TrafficRuleModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
