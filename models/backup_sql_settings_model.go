// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupSQLSettingsModel Microsoft SQL Server transaction log settings.
//
// swagger:model BackupSQLSettingsModel
type BackupSQLSettingsModel struct {

	// Frequency of transaction log backup, in minutes.
	BackupMinsCount int64 `json:"backupMinsCount,omitempty"`

	// Number of days to keep transaction logs in the backup repository.
	KeepDaysCount int64 `json:"keepDaysCount,omitempty"`

	// log shipping servers
	LogShippingServers *BackupLogShippingServersModel `json:"logShippingServers,omitempty"`

	// logs processing
	// Required: true
	LogsProcessing *ESQLLogsProcessing `json:"logsProcessing"`

	// retain log backups
	RetainLogBackups ERetainLogBackupsType `json:"retainLogBackups,omitempty"`
}

// Validate validates this backup SQL settings model
func (m *BackupSQLSettingsModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLogShippingServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogsProcessing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetainLogBackups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupSQLSettingsModel) validateLogShippingServers(formats strfmt.Registry) error {
	if swag.IsZero(m.LogShippingServers) { // not required
		return nil
	}

	if m.LogShippingServers != nil {
		if err := m.LogShippingServers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logShippingServers")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSQLSettingsModel) validateLogsProcessing(formats strfmt.Registry) error {

	if err := validate.Required("logsProcessing", "body", m.LogsProcessing); err != nil {
		return err
	}

	if err := validate.Required("logsProcessing", "body", m.LogsProcessing); err != nil {
		return err
	}

	if m.LogsProcessing != nil {
		if err := m.LogsProcessing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logsProcessing")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSQLSettingsModel) validateRetainLogBackups(formats strfmt.Registry) error {
	if swag.IsZero(m.RetainLogBackups) { // not required
		return nil
	}

	if err := m.RetainLogBackups.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("retainLogBackups")
		}
		return err
	}

	return nil
}

// ContextValidate validate this backup SQL settings model based on the context it is used
func (m *BackupSQLSettingsModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLogShippingServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogsProcessing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRetainLogBackups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupSQLSettingsModel) contextValidateLogShippingServers(ctx context.Context, formats strfmt.Registry) error {

	if m.LogShippingServers != nil {
		if err := m.LogShippingServers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logShippingServers")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSQLSettingsModel) contextValidateLogsProcessing(ctx context.Context, formats strfmt.Registry) error {

	if m.LogsProcessing != nil {
		if err := m.LogsProcessing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logsProcessing")
			}
			return err
		}
	}

	return nil
}

func (m *BackupSQLSettingsModel) contextValidateRetainLogBackups(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RetainLogBackups.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("retainLogBackups")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupSQLSettingsModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupSQLSettingsModel) UnmarshalBinary(b []byte) error {
	var res BackupSQLSettingsModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
