// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EStorageOptimization Storage optimization that depends on the target type.
//
// swagger:model EStorageOptimization
type EStorageOptimization string

func NewEStorageOptimization(value EStorageOptimization) *EStorageOptimization {
	v := value
	return &v
}

const (

	// EStorageOptimizationAuto captures enum value "Auto"
	EStorageOptimizationAuto EStorageOptimization = "Auto"

	// EStorageOptimizationLocalTargetLarge captures enum value "LocalTargetLarge"
	EStorageOptimizationLocalTargetLarge EStorageOptimization = "LocalTargetLarge"

	// EStorageOptimizationLocalTarget captures enum value "LocalTarget"
	EStorageOptimizationLocalTarget EStorageOptimization = "LocalTarget"

	// EStorageOptimizationLANTarget captures enum value "LANTarget"
	EStorageOptimizationLANTarget EStorageOptimization = "LANTarget"

	// EStorageOptimizationWANTarget captures enum value "WANTarget"
	EStorageOptimizationWANTarget EStorageOptimization = "WANTarget"
)

// for schema
var eStorageOptimizationEnum []interface{}

func init() {
	var res []EStorageOptimization
	if err := json.Unmarshal([]byte(`["Auto","LocalTargetLarge","LocalTarget","LANTarget","WANTarget"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eStorageOptimizationEnum = append(eStorageOptimizationEnum, v)
	}
}

func (m EStorageOptimization) validateEStorageOptimizationEnum(path, location string, value EStorageOptimization) error {
	if err := validate.EnumCase(path, location, value, eStorageOptimizationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e storage optimization
func (m EStorageOptimization) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEStorageOptimizationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e storage optimization based on context it is used
func (m EStorageOptimization) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
