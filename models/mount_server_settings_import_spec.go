// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MountServerSettingsImportSpec mount server settings import spec
//
// swagger:model MountServerSettingsImportSpec
type MountServerSettingsImportSpec struct {

	// Name of the mount server.
	// Required: true
	MountServerName *string `json:"mountServerName"`

	// If *true*, the vPower NFS Service is enabled on the mount server.
	// Required: true
	VPowerNFSEnabled *bool `json:"vPowerNFSEnabled"`

	// v power n f s port settings
	VPowerNFSPortSettings *VPowerNFSPortSettingsModel `json:"vPowerNFSPortSettings,omitempty"`

	// Path to the folder used for writing cache during mount operations.
	// Required: true
	WriteCacheFolder *string `json:"writeCacheFolder"`
}

// Validate validates this mount server settings import spec
func (m *MountServerSettingsImportSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMountServerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVPowerNFSEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVPowerNFSPortSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWriteCacheFolder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MountServerSettingsImportSpec) validateMountServerName(formats strfmt.Registry) error {

	if err := validate.Required("mountServerName", "body", m.MountServerName); err != nil {
		return err
	}

	return nil
}

func (m *MountServerSettingsImportSpec) validateVPowerNFSEnabled(formats strfmt.Registry) error {

	if err := validate.Required("vPowerNFSEnabled", "body", m.VPowerNFSEnabled); err != nil {
		return err
	}

	return nil
}

func (m *MountServerSettingsImportSpec) validateVPowerNFSPortSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.VPowerNFSPortSettings) { // not required
		return nil
	}

	if m.VPowerNFSPortSettings != nil {
		if err := m.VPowerNFSPortSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vPowerNFSPortSettings")
			}
			return err
		}
	}

	return nil
}

func (m *MountServerSettingsImportSpec) validateWriteCacheFolder(formats strfmt.Registry) error {

	if err := validate.Required("writeCacheFolder", "body", m.WriteCacheFolder); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this mount server settings import spec based on the context it is used
func (m *MountServerSettingsImportSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVPowerNFSPortSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MountServerSettingsImportSpec) contextValidateVPowerNFSPortSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.VPowerNFSPortSettings != nil {
		if err := m.VPowerNFSPortSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vPowerNFSPortSettings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MountServerSettingsImportSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MountServerSettingsImportSpec) UnmarshalBinary(b []byte) error {
	var res MountServerSettingsImportSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
