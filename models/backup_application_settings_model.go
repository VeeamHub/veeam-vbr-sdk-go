// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupApplicationSettingsModel backup application settings model
//
// swagger:model BackupApplicationSettingsModel
type BackupApplicationSettingsModel struct {

	// exclusions
	Exclusions *BackupFSExclusionsModel `json:"exclusions,omitempty"`

	// oracle
	Oracle *BackupOracleSettingsModel `json:"oracle,omitempty"`

	// scripts
	Scripts *BackupScriptSettingsModel `json:"scripts,omitempty"`

	// sql
	SQL *BackupSQLSettingsModel `json:"sql,omitempty"`

	// transaction logs
	TransactionLogs ETransactionLogsSettings `json:"transactionLogs,omitempty"`

	// If *true*, persistent guest agent is used.
	UsePersistentGuestAgent bool `json:"usePersistentGuestAgent,omitempty"`

	// vm object
	// Required: true
	VMObject *VmwareObjectModel `json:"vmObject"`

	// vss
	// Required: true
	Vss *EApplicationSettingsVSS `json:"vss"`
}

// Validate validates this backup application settings model
func (m *BackupApplicationSettingsModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExclusions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScripts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSQL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMObject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVss(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupApplicationSettingsModel) validateExclusions(formats strfmt.Registry) error {
	if swag.IsZero(m.Exclusions) { // not required
		return nil
	}

	if m.Exclusions != nil {
		if err := m.Exclusions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exclusions")
			}
			return err
		}
	}

	return nil
}

func (m *BackupApplicationSettingsModel) validateOracle(formats strfmt.Registry) error {
	if swag.IsZero(m.Oracle) { // not required
		return nil
	}

	if m.Oracle != nil {
		if err := m.Oracle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracle")
			}
			return err
		}
	}

	return nil
}

func (m *BackupApplicationSettingsModel) validateScripts(formats strfmt.Registry) error {
	if swag.IsZero(m.Scripts) { // not required
		return nil
	}

	if m.Scripts != nil {
		if err := m.Scripts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scripts")
			}
			return err
		}
	}

	return nil
}

func (m *BackupApplicationSettingsModel) validateSQL(formats strfmt.Registry) error {
	if swag.IsZero(m.SQL) { // not required
		return nil
	}

	if m.SQL != nil {
		if err := m.SQL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sql")
			}
			return err
		}
	}

	return nil
}

func (m *BackupApplicationSettingsModel) validateTransactionLogs(formats strfmt.Registry) error {
	if swag.IsZero(m.TransactionLogs) { // not required
		return nil
	}

	if err := m.TransactionLogs.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("transactionLogs")
		}
		return err
	}

	return nil
}

func (m *BackupApplicationSettingsModel) validateVMObject(formats strfmt.Registry) error {

	if err := validate.Required("vmObject", "body", m.VMObject); err != nil {
		return err
	}

	if m.VMObject != nil {
		if err := m.VMObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmObject")
			}
			return err
		}
	}

	return nil
}

func (m *BackupApplicationSettingsModel) validateVss(formats strfmt.Registry) error {

	if err := validate.Required("vss", "body", m.Vss); err != nil {
		return err
	}

	if err := validate.Required("vss", "body", m.Vss); err != nil {
		return err
	}

	if m.Vss != nil {
		if err := m.Vss.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vss")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this backup application settings model based on the context it is used
func (m *BackupApplicationSettingsModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExclusions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScripts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSQL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransactionLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVss(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupApplicationSettingsModel) contextValidateExclusions(ctx context.Context, formats strfmt.Registry) error {

	if m.Exclusions != nil {
		if err := m.Exclusions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exclusions")
			}
			return err
		}
	}

	return nil
}

func (m *BackupApplicationSettingsModel) contextValidateOracle(ctx context.Context, formats strfmt.Registry) error {

	if m.Oracle != nil {
		if err := m.Oracle.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracle")
			}
			return err
		}
	}

	return nil
}

func (m *BackupApplicationSettingsModel) contextValidateScripts(ctx context.Context, formats strfmt.Registry) error {

	if m.Scripts != nil {
		if err := m.Scripts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scripts")
			}
			return err
		}
	}

	return nil
}

func (m *BackupApplicationSettingsModel) contextValidateSQL(ctx context.Context, formats strfmt.Registry) error {

	if m.SQL != nil {
		if err := m.SQL.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sql")
			}
			return err
		}
	}

	return nil
}

func (m *BackupApplicationSettingsModel) contextValidateTransactionLogs(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TransactionLogs.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("transactionLogs")
		}
		return err
	}

	return nil
}

func (m *BackupApplicationSettingsModel) contextValidateVMObject(ctx context.Context, formats strfmt.Registry) error {

	if m.VMObject != nil {
		if err := m.VMObject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmObject")
			}
			return err
		}
	}

	return nil
}

func (m *BackupApplicationSettingsModel) contextValidateVss(ctx context.Context, formats strfmt.Registry) error {

	if m.Vss != nil {
		if err := m.Vss.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vss")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupApplicationSettingsModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupApplicationSettingsModel) UnmarshalBinary(b []byte) error {
	var res BackupApplicationSettingsModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
