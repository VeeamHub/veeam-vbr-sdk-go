// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GlobalNetworkTrafficRulesModel global network traffic rules model
//
// swagger:model GlobalNetworkTrafficRulesModel
type GlobalNetworkTrafficRulesModel struct {

	// preferred networks
	PreferredNetworks *PreferredNetworksModel `json:"preferredNetworks,omitempty"`

	// Array of traffic rules.
	TrafficRules []*TrafficRuleModel `json:"trafficRules"`

	// Number of TCP/IP connections per job.
	UploadStreamsCount int64 `json:"uploadStreamsCount,omitempty"`

	// If *true*, Veeam Backup & Replication uses multiple TCP/IP transfer connection for every job session.
	// Required: true
	UseMultipleStreamsPerJob *bool `json:"useMultipleStreamsPerJob"`
}

// Validate validates this global network traffic rules model
func (m *GlobalNetworkTrafficRulesModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePreferredNetworks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrafficRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUseMultipleStreamsPerJob(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GlobalNetworkTrafficRulesModel) validatePreferredNetworks(formats strfmt.Registry) error {
	if swag.IsZero(m.PreferredNetworks) { // not required
		return nil
	}

	if m.PreferredNetworks != nil {
		if err := m.PreferredNetworks.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preferredNetworks")
			}
			return err
		}
	}

	return nil
}

func (m *GlobalNetworkTrafficRulesModel) validateTrafficRules(formats strfmt.Registry) error {
	if swag.IsZero(m.TrafficRules) { // not required
		return nil
	}

	for i := 0; i < len(m.TrafficRules); i++ {
		if swag.IsZero(m.TrafficRules[i]) { // not required
			continue
		}

		if m.TrafficRules[i] != nil {
			if err := m.TrafficRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("trafficRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GlobalNetworkTrafficRulesModel) validateUseMultipleStreamsPerJob(formats strfmt.Registry) error {

	if err := validate.Required("useMultipleStreamsPerJob", "body", m.UseMultipleStreamsPerJob); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this global network traffic rules model based on the context it is used
func (m *GlobalNetworkTrafficRulesModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePreferredNetworks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrafficRules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GlobalNetworkTrafficRulesModel) contextValidatePreferredNetworks(ctx context.Context, formats strfmt.Registry) error {

	if m.PreferredNetworks != nil {
		if err := m.PreferredNetworks.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preferredNetworks")
			}
			return err
		}
	}

	return nil
}

func (m *GlobalNetworkTrafficRulesModel) contextValidateTrafficRules(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TrafficRules); i++ {

		if m.TrafficRules[i] != nil {
			if err := m.TrafficRules[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("trafficRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GlobalNetworkTrafficRulesModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GlobalNetworkTrafficRulesModel) UnmarshalBinary(b []byte) error {
	var res GlobalNetworkTrafficRulesModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
