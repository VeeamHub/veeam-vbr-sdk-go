// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupStorageSettingModel Storage settings.
//
// swagger:model BackupStorageSettingModel
type BackupStorageSettingModel struct {

	// compression level
	CompressionLevel ECompressionLevel `json:"compressionLevel,omitempty"`

	// If *true*, Veeam Backup & Replication deduplicates VM data before storing it in the backup repository.
	EnableInlineDataDedup bool `json:"enableInlineDataDedup,omitempty"`

	// encryption
	Encryption *BackupStorageSettingsEncryptionModel `json:"encryption,omitempty"`

	// If *true*, Veeam Backup & Replication does not copy deleted file blocks.
	ExcludeDeletedFileBlocks bool `json:"excludeDeletedFileBlocks,omitempty"`

	// If *true*, Veeam Backup & Replication excludes swap file blocks from processing.
	ExcludeSwapFileBlocks bool `json:"excludeSwapFileBlocks,omitempty"`

	// storage optimization
	StorageOptimization EStorageOptimization `json:"storageOptimization,omitempty"`
}

// Validate validates this backup storage setting model
func (m *BackupStorageSettingModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompressionLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageOptimization(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupStorageSettingModel) validateCompressionLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.CompressionLevel) { // not required
		return nil
	}

	if err := m.CompressionLevel.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("compressionLevel")
		}
		return err
	}

	return nil
}

func (m *BackupStorageSettingModel) validateEncryption(formats strfmt.Registry) error {
	if swag.IsZero(m.Encryption) { // not required
		return nil
	}

	if m.Encryption != nil {
		if err := m.Encryption.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryption")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStorageSettingModel) validateStorageOptimization(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageOptimization) { // not required
		return nil
	}

	if err := m.StorageOptimization.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("storageOptimization")
		}
		return err
	}

	return nil
}

// ContextValidate validate this backup storage setting model based on the context it is used
func (m *BackupStorageSettingModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCompressionLevel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEncryption(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageOptimization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupStorageSettingModel) contextValidateCompressionLevel(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CompressionLevel.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("compressionLevel")
		}
		return err
	}

	return nil
}

func (m *BackupStorageSettingModel) contextValidateEncryption(ctx context.Context, formats strfmt.Registry) error {

	if m.Encryption != nil {
		if err := m.Encryption.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryption")
			}
			return err
		}
	}

	return nil
}

func (m *BackupStorageSettingModel) contextValidateStorageOptimization(ctx context.Context, formats strfmt.Registry) error {

	if err := m.StorageOptimization.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("storageOptimization")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupStorageSettingModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupStorageSettingModel) UnmarshalBinary(b []byte) error {
	var res BackupStorageSettingModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
