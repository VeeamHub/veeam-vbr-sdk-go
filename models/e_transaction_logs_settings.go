// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ETransactionLogsSettings Transaction logs settings that define whether copy-only backups must be created or transaction logs for Microsoft Exchange, Microsoft SQL and Oracle VMs must be processed.</br>
// If transaction log processing is selected, specify the following parameters:</br>
// <ul>
// <li>[For Microsoft SQL Server VMs] Microsoft SQL Server transaction log settings</li>
// <li>[For Oracle VMs] Oracle archived log settings</li>
// </ul>
//
//
// swagger:model ETransactionLogsSettings
type ETransactionLogsSettings string

func NewETransactionLogsSettings(value ETransactionLogsSettings) *ETransactionLogsSettings {
	v := value
	return &v
}

const (

	// ETransactionLogsSettingsProcess captures enum value "process"
	ETransactionLogsSettingsProcess ETransactionLogsSettings = "process"

	// ETransactionLogsSettingsCopyOnly captures enum value "copyOnly"
	ETransactionLogsSettingsCopyOnly ETransactionLogsSettings = "copyOnly"
)

// for schema
var eTransactionLogsSettingsEnum []interface{}

func init() {
	var res []ETransactionLogsSettings
	if err := json.Unmarshal([]byte(`["process","copyOnly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eTransactionLogsSettingsEnum = append(eTransactionLogsSettingsEnum, v)
	}
}

func (m ETransactionLogsSettings) validateETransactionLogsSettingsEnum(path, location string, value ETransactionLogsSettings) error {
	if err := validate.EnumCase(path, location, value, eTransactionLogsSettingsEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e transaction logs settings
func (m ETransactionLogsSettings) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateETransactionLogsSettingsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e transaction logs settings based on context it is used
func (m ETransactionLogsSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
