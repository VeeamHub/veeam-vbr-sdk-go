// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ERepositoryType Repository type.
//
// swagger:model ERepositoryType
type ERepositoryType string

func NewERepositoryType(value ERepositoryType) *ERepositoryType {
	v := value
	return &v
}

const (

	// ERepositoryTypeWinLocal captures enum value "WinLocal"
	ERepositoryTypeWinLocal ERepositoryType = "WinLocal"

	// ERepositoryTypeLinuxLocal captures enum value "LinuxLocal"
	ERepositoryTypeLinuxLocal ERepositoryType = "LinuxLocal"

	// ERepositoryTypeSmb captures enum value "Smb"
	ERepositoryTypeSmb ERepositoryType = "Smb"

	// ERepositoryTypeNfs captures enum value "Nfs"
	ERepositoryTypeNfs ERepositoryType = "Nfs"

	// ERepositoryTypeAzureBlob captures enum value "AzureBlob"
	ERepositoryTypeAzureBlob ERepositoryType = "AzureBlob"

	// ERepositoryTypeAzureArchive captures enum value "AzureArchive"
	ERepositoryTypeAzureArchive ERepositoryType = "AzureArchive"

	// ERepositoryTypeAmazonS3 captures enum value "AmazonS3"
	ERepositoryTypeAmazonS3 ERepositoryType = "AmazonS3"

	// ERepositoryTypeAmazonS3Glacier captures enum value "AmazonS3Glacier"
	ERepositoryTypeAmazonS3Glacier ERepositoryType = "AmazonS3Glacier"

	// ERepositoryTypeS3Compatible captures enum value "S3Compatible"
	ERepositoryTypeS3Compatible ERepositoryType = "S3Compatible"

	// ERepositoryTypeGoogleCloud captures enum value "GoogleCloud"
	ERepositoryTypeGoogleCloud ERepositoryType = "GoogleCloud"

	// ERepositoryTypeIBMCloud captures enum value "IBMCloud"
	ERepositoryTypeIBMCloud ERepositoryType = "IBMCloud"
)

// for schema
var eRepositoryTypeEnum []interface{}

func init() {
	var res []ERepositoryType
	if err := json.Unmarshal([]byte(`["WinLocal","LinuxLocal","Smb","Nfs","AzureBlob","AzureArchive","AmazonS3","AmazonS3Glacier","S3Compatible","GoogleCloud","IBMCloud"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eRepositoryTypeEnum = append(eRepositoryTypeEnum, v)
	}
}

func (m ERepositoryType) validateERepositoryTypeEnum(path, location string, value ERepositoryType) error {
	if err := validate.EnumCase(path, location, value, eRepositoryTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e repository type
func (m ERepositoryType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateERepositoryTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e repository type based on context it is used
func (m ERepositoryType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
