// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VmbAPIFilterModel vmb Api filter model
//
// swagger:model VmbApiFilterModel
type VmbAPIFilterModel struct {

	// assembly version
	// Required: true
	AssemblyVersion *string `json:"assemblyVersion"`

	// product Id
	// Required: true
	// Format: uuid
	ProductID *strfmt.UUID `json:"productId"`

	// protocol version
	// Required: true
	ProtocolVersion *int64 `json:"protocolVersion"`

	// version flags
	// Required: true
	VersionFlags *int64 `json:"versionFlags"`
}

// Validate validates this vmb Api filter model
func (m *VmbAPIFilterModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssemblyVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocolVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersionFlags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VmbAPIFilterModel) validateAssemblyVersion(formats strfmt.Registry) error {

	if err := validate.Required("assemblyVersion", "body", m.AssemblyVersion); err != nil {
		return err
	}

	return nil
}

func (m *VmbAPIFilterModel) validateProductID(formats strfmt.Registry) error {

	if err := validate.Required("productId", "body", m.ProductID); err != nil {
		return err
	}

	if err := validate.FormatOf("productId", "body", "uuid", m.ProductID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VmbAPIFilterModel) validateProtocolVersion(formats strfmt.Registry) error {

	if err := validate.Required("protocolVersion", "body", m.ProtocolVersion); err != nil {
		return err
	}

	return nil
}

func (m *VmbAPIFilterModel) validateVersionFlags(formats strfmt.Registry) error {

	if err := validate.Required("versionFlags", "body", m.VersionFlags); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vmb Api filter model based on context it is used
func (m *VmbAPIFilterModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VmbAPIFilterModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmbAPIFilterModel) UnmarshalBinary(b []byte) error {
	var res VmbAPIFilterModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
