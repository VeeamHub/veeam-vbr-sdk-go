// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TokenModel token model
//
// swagger:model TokenModel
type TokenModel struct {

	// Date and time the access token expires.
	// Required: true
	// Format: date-time
	Expires *strfmt.DateTime `json:".expires"`

	// Date and time the access token is issued.
	// Required: true
	// Format: date-time
	Issued *strfmt.DateTime `json:".issued"`

	// String that represents authorization issued to the client. It must be specified in all requests. An access token can be used multiple times, but its lifetime is 15 minutes.
	// Required: true
	AccessToken *string `json:"access_token"`

	// Lifetime of the access token, in seconds.
	// Required: true
	ExpiresIn *int32 `json:"expires_in"`

	// String that is used to obtain a new access token if the current access token expires or becomes lost. A refresh token can be used only once, and its default lifetime is 14 days.
	// Required: true
	RefreshToken *string `json:"refresh_token"`

	// Type of the access token.
	// Required: true
	TokenType *string `json:"token_type"`
}

// Validate validates this token model
func (m *TokenModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpires(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssued(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccessToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiresIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefreshToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TokenModel) validateExpires(formats strfmt.Registry) error {

	if err := validate.Required(".expires", "body", m.Expires); err != nil {
		return err
	}

	if err := validate.FormatOf(".expires", "body", "date-time", m.Expires.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TokenModel) validateIssued(formats strfmt.Registry) error {

	if err := validate.Required(".issued", "body", m.Issued); err != nil {
		return err
	}

	if err := validate.FormatOf(".issued", "body", "date-time", m.Issued.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TokenModel) validateAccessToken(formats strfmt.Registry) error {

	if err := validate.Required("access_token", "body", m.AccessToken); err != nil {
		return err
	}

	return nil
}

func (m *TokenModel) validateExpiresIn(formats strfmt.Registry) error {

	if err := validate.Required("expires_in", "body", m.ExpiresIn); err != nil {
		return err
	}

	return nil
}

func (m *TokenModel) validateRefreshToken(formats strfmt.Registry) error {

	if err := validate.Required("refresh_token", "body", m.RefreshToken); err != nil {
		return err
	}

	return nil
}

func (m *TokenModel) validateTokenType(formats strfmt.Registry) error {

	if err := validate.Required("token_type", "body", m.TokenType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this token model based on context it is used
func (m *TokenModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TokenModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TokenModel) UnmarshalBinary(b []byte) error {
	var res TokenModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
