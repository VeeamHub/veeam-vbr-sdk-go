// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProxyServerSettingsModel Server settings for the backup proxy.
//
// swagger:model ProxyServerSettingsModel
type ProxyServerSettingsModel struct {

	// connected datastores
	ConnectedDatastores *ProxyDatastoreSettingsModel `json:"connectedDatastores,omitempty"`

	// [For the Direct storage access and Virtual appliance transport modes] If *true*, Veeam Backup & Replication failovers to the network transport mode in case the primary mode fails or is unavailable.
	//
	FailoverToNetwork bool `json:"failoverToNetwork,omitempty"`

	// ID of the server.
	// Required: true
	// Format: uuid
	HostID *strfmt.UUID `json:"hostId"`

	// [For the Network mode] If *true*, VM data is transferred over an encrypted TLS connection.
	//
	HostToProxyEncryption bool `json:"hostToProxyEncryption,omitempty"`

	// Maximum number of concurrent tasks.
	MaxTaskCount int64 `json:"maxTaskCount,omitempty"`

	// transport mode
	TransportMode EBackupProxyTransportMode `json:"transportMode,omitempty"`
}

// Validate validates this proxy server settings model
func (m *ProxyServerSettingsModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectedDatastores(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransportMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProxyServerSettingsModel) validateConnectedDatastores(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectedDatastores) { // not required
		return nil
	}

	if m.ConnectedDatastores != nil {
		if err := m.ConnectedDatastores.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectedDatastores")
			}
			return err
		}
	}

	return nil
}

func (m *ProxyServerSettingsModel) validateHostID(formats strfmt.Registry) error {

	if err := validate.Required("hostId", "body", m.HostID); err != nil {
		return err
	}

	if err := validate.FormatOf("hostId", "body", "uuid", m.HostID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProxyServerSettingsModel) validateTransportMode(formats strfmt.Registry) error {
	if swag.IsZero(m.TransportMode) { // not required
		return nil
	}

	if err := m.TransportMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("transportMode")
		}
		return err
	}

	return nil
}

// ContextValidate validate this proxy server settings model based on the context it is used
func (m *ProxyServerSettingsModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnectedDatastores(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransportMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProxyServerSettingsModel) contextValidateConnectedDatastores(ctx context.Context, formats strfmt.Registry) error {

	if m.ConnectedDatastores != nil {
		if err := m.ConnectedDatastores.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectedDatastores")
			}
			return err
		}
	}

	return nil
}

func (m *ProxyServerSettingsModel) contextValidateTransportMode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TransportMode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("transportMode")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProxyServerSettingsModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProxyServerSettingsModel) UnmarshalBinary(b []byte) error {
	var res ProxyServerSettingsModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
