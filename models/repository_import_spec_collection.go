// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RepositoryImportSpecCollection repository import spec collection
//
// swagger:model RepositoryImportSpecCollection
type RepositoryImportSpecCollection struct {

	// Array of linux local storages.
	// Unique: true
	LinuxLocalRepositories []*LinuxLocalStorageImportSpec `json:"LinuxLocalRepositories"`

	// Array of network attached storages.
	// Unique: true
	NfsRepositories []*NfsStorageImportSpec `json:"NfsRepositories"`

	// Array of network attached storages.
	// Unique: true
	SmbRepositories []*SmbStorageImportSpec `json:"SmbRepositories"`

	// Array of windows local storages.
	// Unique: true
	WindowsLocalRepositories []*WindowsLocalStorageImportSpec `json:"WindowsLocalRepositories"`
}

// Validate validates this repository import spec collection
func (m *RepositoryImportSpecCollection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinuxLocalRepositories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsRepositories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmbRepositories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWindowsLocalRepositories(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryImportSpecCollection) validateLinuxLocalRepositories(formats strfmt.Registry) error {
	if swag.IsZero(m.LinuxLocalRepositories) { // not required
		return nil
	}

	if err := validate.UniqueItems("LinuxLocalRepositories", "body", m.LinuxLocalRepositories); err != nil {
		return err
	}

	for i := 0; i < len(m.LinuxLocalRepositories); i++ {
		if swag.IsZero(m.LinuxLocalRepositories[i]) { // not required
			continue
		}

		if m.LinuxLocalRepositories[i] != nil {
			if err := m.LinuxLocalRepositories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LinuxLocalRepositories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RepositoryImportSpecCollection) validateNfsRepositories(formats strfmt.Registry) error {
	if swag.IsZero(m.NfsRepositories) { // not required
		return nil
	}

	if err := validate.UniqueItems("NfsRepositories", "body", m.NfsRepositories); err != nil {
		return err
	}

	for i := 0; i < len(m.NfsRepositories); i++ {
		if swag.IsZero(m.NfsRepositories[i]) { // not required
			continue
		}

		if m.NfsRepositories[i] != nil {
			if err := m.NfsRepositories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NfsRepositories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RepositoryImportSpecCollection) validateSmbRepositories(formats strfmt.Registry) error {
	if swag.IsZero(m.SmbRepositories) { // not required
		return nil
	}

	if err := validate.UniqueItems("SmbRepositories", "body", m.SmbRepositories); err != nil {
		return err
	}

	for i := 0; i < len(m.SmbRepositories); i++ {
		if swag.IsZero(m.SmbRepositories[i]) { // not required
			continue
		}

		if m.SmbRepositories[i] != nil {
			if err := m.SmbRepositories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SmbRepositories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RepositoryImportSpecCollection) validateWindowsLocalRepositories(formats strfmt.Registry) error {
	if swag.IsZero(m.WindowsLocalRepositories) { // not required
		return nil
	}

	if err := validate.UniqueItems("WindowsLocalRepositories", "body", m.WindowsLocalRepositories); err != nil {
		return err
	}

	for i := 0; i < len(m.WindowsLocalRepositories); i++ {
		if swag.IsZero(m.WindowsLocalRepositories[i]) { // not required
			continue
		}

		if m.WindowsLocalRepositories[i] != nil {
			if err := m.WindowsLocalRepositories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("WindowsLocalRepositories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this repository import spec collection based on the context it is used
func (m *RepositoryImportSpecCollection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinuxLocalRepositories(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNfsRepositories(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSmbRepositories(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWindowsLocalRepositories(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RepositoryImportSpecCollection) contextValidateLinuxLocalRepositories(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LinuxLocalRepositories); i++ {

		if m.LinuxLocalRepositories[i] != nil {
			if err := m.LinuxLocalRepositories[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LinuxLocalRepositories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RepositoryImportSpecCollection) contextValidateNfsRepositories(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NfsRepositories); i++ {

		if m.NfsRepositories[i] != nil {
			if err := m.NfsRepositories[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NfsRepositories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RepositoryImportSpecCollection) contextValidateSmbRepositories(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SmbRepositories); i++ {

		if m.SmbRepositories[i] != nil {
			if err := m.SmbRepositories[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SmbRepositories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RepositoryImportSpecCollection) contextValidateWindowsLocalRepositories(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.WindowsLocalRepositories); i++ {

		if m.WindowsLocalRepositories[i] != nil {
			if err := m.WindowsLocalRepositories[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("WindowsLocalRepositories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RepositoryImportSpecCollection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepositoryImportSpecCollection) UnmarshalBinary(b []byte) error {
	var res RepositoryImportSpecCollection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
