// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupOracleSettingsImportModel Oracle archived log settings.
//
// swagger:model BackupOracleSettingsImportModel
type BackupOracleSettingsImportModel struct {

	// archive logs
	// Required: true
	ArchiveLogs *EBackupOracleLogsSettings `json:"archiveLogs"`

	// If *true*, archived logs are backed up.
	BackupLogs bool `json:"backupLogs,omitempty"`

	// Frequency of archived log backup, in minutes.
	BackupMinsCount int64 `json:"backupMinsCount,omitempty"`

	// credentials
	Credentials *CredentialsImportModel `json:"credentials,omitempty"`

	// Maximum size for archived logs in GB. This parameter should be specified if the `EBackupOracleLogsSettings` value is *deleteExpiredGBs*.
	DeleteGBsCount int64 `json:"deleteGBsCount,omitempty"`

	// Time period in hours to keep archived logs. This parameter should be specified if the `EBackupOracleLogsSettings` value is *deleteExpiredHours*.
	DeleteHoursCount int64 `json:"deleteHoursCount,omitempty"`

	// Number of days to keep archived logs.
	KeepDaysCount int64 `json:"keepDaysCount,omitempty"`

	// log shipping servers
	LogShippingServers *BackupLogShippingServersImportModel `json:"logShippingServers,omitempty"`

	// retain log backups
	RetainLogBackups ERetainLogBackupsType `json:"retainLogBackups,omitempty"`

	// If *true*, Veeam Backup & Replication uses credentials specified in the guest processing settings.
	// Required: true
	UseGuestCredentials *bool `json:"useGuestCredentials"`
}

// Validate validates this backup oracle settings import model
func (m *BackupOracleSettingsImportModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchiveLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogShippingServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetainLogBackups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUseGuestCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupOracleSettingsImportModel) validateArchiveLogs(formats strfmt.Registry) error {

	if err := validate.Required("archiveLogs", "body", m.ArchiveLogs); err != nil {
		return err
	}

	if err := validate.Required("archiveLogs", "body", m.ArchiveLogs); err != nil {
		return err
	}

	if m.ArchiveLogs != nil {
		if err := m.ArchiveLogs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archiveLogs")
			}
			return err
		}
	}

	return nil
}

func (m *BackupOracleSettingsImportModel) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *BackupOracleSettingsImportModel) validateLogShippingServers(formats strfmt.Registry) error {
	if swag.IsZero(m.LogShippingServers) { // not required
		return nil
	}

	if m.LogShippingServers != nil {
		if err := m.LogShippingServers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logShippingServers")
			}
			return err
		}
	}

	return nil
}

func (m *BackupOracleSettingsImportModel) validateRetainLogBackups(formats strfmt.Registry) error {
	if swag.IsZero(m.RetainLogBackups) { // not required
		return nil
	}

	if err := m.RetainLogBackups.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("retainLogBackups")
		}
		return err
	}

	return nil
}

func (m *BackupOracleSettingsImportModel) validateUseGuestCredentials(formats strfmt.Registry) error {

	if err := validate.Required("useGuestCredentials", "body", m.UseGuestCredentials); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this backup oracle settings import model based on the context it is used
func (m *BackupOracleSettingsImportModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArchiveLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogShippingServers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRetainLogBackups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupOracleSettingsImportModel) contextValidateArchiveLogs(ctx context.Context, formats strfmt.Registry) error {

	if m.ArchiveLogs != nil {
		if err := m.ArchiveLogs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archiveLogs")
			}
			return err
		}
	}

	return nil
}

func (m *BackupOracleSettingsImportModel) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.Credentials != nil {
		if err := m.Credentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *BackupOracleSettingsImportModel) contextValidateLogShippingServers(ctx context.Context, formats strfmt.Registry) error {

	if m.LogShippingServers != nil {
		if err := m.LogShippingServers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logShippingServers")
			}
			return err
		}
	}

	return nil
}

func (m *BackupOracleSettingsImportModel) contextValidateRetainLogBackups(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RetainLogBackups.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("retainLogBackups")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupOracleSettingsImportModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupOracleSettingsImportModel) UnmarshalBinary(b []byte) error {
	var res BackupOracleSettingsImportModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
