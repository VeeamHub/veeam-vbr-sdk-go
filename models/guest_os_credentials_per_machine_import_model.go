// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GuestOsCredentialsPerMachineImportModel guest os credentials per machine import model
//
// swagger:model GuestOsCredentialsPerMachineImportModel
type GuestOsCredentialsPerMachineImportModel struct {

	// linux creds
	LinuxCreds *CredentialsImportModel `json:"linuxCreds,omitempty"`

	// vm object
	// Required: true
	VMObject *VmwareObjectModel `json:"vmObject"`

	// windows creds
	WindowsCreds *CredentialsImportModel `json:"windowsCreds,omitempty"`
}

// Validate validates this guest os credentials per machine import model
func (m *GuestOsCredentialsPerMachineImportModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinuxCreds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMObject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWindowsCreds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GuestOsCredentialsPerMachineImportModel) validateLinuxCreds(formats strfmt.Registry) error {
	if swag.IsZero(m.LinuxCreds) { // not required
		return nil
	}

	if m.LinuxCreds != nil {
		if err := m.LinuxCreds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("linuxCreds")
			}
			return err
		}
	}

	return nil
}

func (m *GuestOsCredentialsPerMachineImportModel) validateVMObject(formats strfmt.Registry) error {

	if err := validate.Required("vmObject", "body", m.VMObject); err != nil {
		return err
	}

	if m.VMObject != nil {
		if err := m.VMObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmObject")
			}
			return err
		}
	}

	return nil
}

func (m *GuestOsCredentialsPerMachineImportModel) validateWindowsCreds(formats strfmt.Registry) error {
	if swag.IsZero(m.WindowsCreds) { // not required
		return nil
	}

	if m.WindowsCreds != nil {
		if err := m.WindowsCreds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("windowsCreds")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this guest os credentials per machine import model based on the context it is used
func (m *GuestOsCredentialsPerMachineImportModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinuxCreds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWindowsCreds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GuestOsCredentialsPerMachineImportModel) contextValidateLinuxCreds(ctx context.Context, formats strfmt.Registry) error {

	if m.LinuxCreds != nil {
		if err := m.LinuxCreds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("linuxCreds")
			}
			return err
		}
	}

	return nil
}

func (m *GuestOsCredentialsPerMachineImportModel) contextValidateVMObject(ctx context.Context, formats strfmt.Registry) error {

	if m.VMObject != nil {
		if err := m.VMObject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmObject")
			}
			return err
		}
	}

	return nil
}

func (m *GuestOsCredentialsPerMachineImportModel) contextValidateWindowsCreds(ctx context.Context, formats strfmt.Registry) error {

	if m.WindowsCreds != nil {
		if err := m.WindowsCreds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("windowsCreds")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GuestOsCredentialsPerMachineImportModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GuestOsCredentialsPerMachineImportModel) UnmarshalBinary(b []byte) error {
	var res GuestOsCredentialsPerMachineImportModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
