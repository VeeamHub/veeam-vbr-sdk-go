// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ManageServerImportSpecCollection manage server import spec collection
//
// swagger:model ManageServerImportSpecCollection
type ManageServerImportSpecCollection struct {

	// Array of managed Linux servers.
	// Unique: true
	LinuxHosts []*LinuxHostImportSpec `json:"linuxHosts"`

	// Array of VMware vSphere servers.
	// Unique: true
	ViHosts []*ViHostImportSpec `json:"viHosts"`

	// Array of managed Microsoft Windows servers.
	// Unique: true
	WindowsHosts []*WindowsHostImportSpec `json:"windowsHosts"`
}

// Validate validates this manage server import spec collection
func (m *ManageServerImportSpecCollection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinuxHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWindowsHosts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ManageServerImportSpecCollection) validateLinuxHosts(formats strfmt.Registry) error {
	if swag.IsZero(m.LinuxHosts) { // not required
		return nil
	}

	if err := validate.UniqueItems("linuxHosts", "body", m.LinuxHosts); err != nil {
		return err
	}

	for i := 0; i < len(m.LinuxHosts); i++ {
		if swag.IsZero(m.LinuxHosts[i]) { // not required
			continue
		}

		if m.LinuxHosts[i] != nil {
			if err := m.LinuxHosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("linuxHosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ManageServerImportSpecCollection) validateViHosts(formats strfmt.Registry) error {
	if swag.IsZero(m.ViHosts) { // not required
		return nil
	}

	if err := validate.UniqueItems("viHosts", "body", m.ViHosts); err != nil {
		return err
	}

	for i := 0; i < len(m.ViHosts); i++ {
		if swag.IsZero(m.ViHosts[i]) { // not required
			continue
		}

		if m.ViHosts[i] != nil {
			if err := m.ViHosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("viHosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ManageServerImportSpecCollection) validateWindowsHosts(formats strfmt.Registry) error {
	if swag.IsZero(m.WindowsHosts) { // not required
		return nil
	}

	if err := validate.UniqueItems("windowsHosts", "body", m.WindowsHosts); err != nil {
		return err
	}

	for i := 0; i < len(m.WindowsHosts); i++ {
		if swag.IsZero(m.WindowsHosts[i]) { // not required
			continue
		}

		if m.WindowsHosts[i] != nil {
			if err := m.WindowsHosts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("windowsHosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this manage server import spec collection based on the context it is used
func (m *ManageServerImportSpecCollection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinuxHosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViHosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWindowsHosts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ManageServerImportSpecCollection) contextValidateLinuxHosts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LinuxHosts); i++ {

		if m.LinuxHosts[i] != nil {
			if err := m.LinuxHosts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("linuxHosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ManageServerImportSpecCollection) contextValidateViHosts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ViHosts); i++ {

		if m.ViHosts[i] != nil {
			if err := m.ViHosts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("viHosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ManageServerImportSpecCollection) contextValidateWindowsHosts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.WindowsHosts); i++ {

		if m.WindowsHosts[i] != nil {
			if err := m.WindowsHosts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("windowsHosts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ManageServerImportSpecCollection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ManageServerImportSpecCollection) UnmarshalBinary(b []byte) error {
	var res ManageServerImportSpecCollection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
