// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EPlatform e platform
//
// swagger:model EPlatform
type EPlatform string

func NewEPlatform(value EPlatform) *EPlatform {
	v := value
	return &v
}

const (

	// EPlatformVmware captures enum value "Vmware"
	EPlatformVmware EPlatform = "Vmware"

	// EPlatformHyperV captures enum value "HyperV"
	EPlatformHyperV EPlatform = "HyperV"

	// EPlatformTest captures enum value "Test"
	EPlatformTest EPlatform = "Test"

	// EPlatformVcd captures enum value "Vcd"
	EPlatformVcd EPlatform = "Vcd"

	// EPlatformTape captures enum value "Tape"
	EPlatformTape EPlatform = "Tape"

	// EPlatformEndPoint captures enum value "EndPoint"
	EPlatformEndPoint EPlatform = "EndPoint"

	// EPlatformLinuxPhysical captures enum value "LinuxPhysical"
	EPlatformLinuxPhysical EPlatform = "LinuxPhysical"

	// EPlatformCustomPlatform captures enum value "CustomPlatform"
	EPlatformCustomPlatform EPlatform = "CustomPlatform"

	// EPlatformConf captures enum value "Conf"
	EPlatformConf EPlatform = "Conf"

	// EPlatformNasBackup captures enum value "NasBackup"
	EPlatformNasBackup EPlatform = "NasBackup"

	// EPlatformEmulatedVMWare captures enum value "EmulatedVmWare"
	EPlatformEmulatedVMWare EPlatform = "EmulatedVmWare"

	// EPlatformExtension0 captures enum value "Extension0"
	EPlatformExtension0 EPlatform = "Extension0"

	// EPlatformExtension1 captures enum value "Extension1"
	EPlatformExtension1 EPlatform = "Extension1"

	// EPlatformExtension captures enum value "Extension"
	EPlatformExtension EPlatform = "Extension"
)

// for schema
var ePlatformEnum []interface{}

func init() {
	var res []EPlatform
	if err := json.Unmarshal([]byte(`["Vmware","HyperV","Test","Vcd","Tape","EndPoint","LinuxPhysical","CustomPlatform","Conf","NasBackup","EmulatedVmWare","Extension0","Extension1","Extension"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ePlatformEnum = append(ePlatformEnum, v)
	}
}

func (m EPlatform) validateEPlatformEnum(path, location string, value EPlatform) error {
	if err := validate.EnumCase(path, location, value, ePlatformEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e platform
func (m EPlatform) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEPlatformEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e platform based on context it is used
func (m EPlatform) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
