// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupJobSpec backup job spec
//
// swagger:model BackupJobSpec
type BackupJobSpec struct {
	JobSpec

	// guest processing
	// Required: true
	GuestProcessing *BackupJobGuestProcessingModel `json:"guestProcessing"`

	// If *true*, the job has a high priority in getting backup infrastructure resources.
	// Required: true
	IsHighPriority bool `json:"isHighPriority"`

	// schedule
	// Required: true
	Schedule *BackupScheduleModel `json:"schedule"`

	// storage
	// Required: true
	Storage *BackupJobStorageModel `json:"storage"`

	// virtual machines
	// Required: true
	VirtualMachines *BackupJobVirtualMachinesSpec `json:"virtualMachines"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *BackupJobSpec) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 JobSpec
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.JobSpec = aO0

	// AO1
	var dataAO1 struct {
		GuestProcessing *BackupJobGuestProcessingModel `json:"guestProcessing"`

		IsHighPriority bool `json:"isHighPriority"`

		Schedule *BackupScheduleModel `json:"schedule"`

		Storage *BackupJobStorageModel `json:"storage"`

		VirtualMachines *BackupJobVirtualMachinesSpec `json:"virtualMachines"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.GuestProcessing = dataAO1.GuestProcessing

	m.IsHighPriority = dataAO1.IsHighPriority

	m.Schedule = dataAO1.Schedule

	m.Storage = dataAO1.Storage

	m.VirtualMachines = dataAO1.VirtualMachines

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m BackupJobSpec) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.JobSpec)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		GuestProcessing *BackupJobGuestProcessingModel `json:"guestProcessing"`

		IsHighPriority bool `json:"isHighPriority"`

		Schedule *BackupScheduleModel `json:"schedule"`

		Storage *BackupJobStorageModel `json:"storage"`

		VirtualMachines *BackupJobVirtualMachinesSpec `json:"virtualMachines"`
	}

	dataAO1.GuestProcessing = m.GuestProcessing

	dataAO1.IsHighPriority = m.IsHighPriority

	dataAO1.Schedule = m.Schedule

	dataAO1.Storage = m.Storage

	dataAO1.VirtualMachines = m.VirtualMachines

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this backup job spec
func (m *BackupJobSpec) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with JobSpec
	if err := m.JobSpec.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuestProcessing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsHighPriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualMachines(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupJobSpec) validateGuestProcessing(formats strfmt.Registry) error {

	if err := validate.Required("guestProcessing", "body", m.GuestProcessing); err != nil {
		return err
	}

	if m.GuestProcessing != nil {
		if err := m.GuestProcessing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guestProcessing")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobSpec) validateIsHighPriority(formats strfmt.Registry) error {

	if err := validate.Required("isHighPriority", "body", bool(m.IsHighPriority)); err != nil {
		return err
	}

	return nil
}

func (m *BackupJobSpec) validateSchedule(formats strfmt.Registry) error {

	if err := validate.Required("schedule", "body", m.Schedule); err != nil {
		return err
	}

	if m.Schedule != nil {
		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobSpec) validateStorage(formats strfmt.Registry) error {

	if err := validate.Required("storage", "body", m.Storage); err != nil {
		return err
	}

	if m.Storage != nil {
		if err := m.Storage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobSpec) validateVirtualMachines(formats strfmt.Registry) error {

	if err := validate.Required("virtualMachines", "body", m.VirtualMachines); err != nil {
		return err
	}

	if m.VirtualMachines != nil {
		if err := m.VirtualMachines.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtualMachines")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this backup job spec based on the context it is used
func (m *BackupJobSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with JobSpec
	if err := m.JobSpec.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGuestProcessing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVirtualMachines(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupJobSpec) contextValidateGuestProcessing(ctx context.Context, formats strfmt.Registry) error {

	if m.GuestProcessing != nil {
		if err := m.GuestProcessing.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("guestProcessing")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobSpec) contextValidateSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.Schedule != nil {
		if err := m.Schedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobSpec) contextValidateStorage(ctx context.Context, formats strfmt.Registry) error {

	if m.Storage != nil {
		if err := m.Storage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobSpec) contextValidateVirtualMachines(ctx context.Context, formats strfmt.Registry) error {

	if m.VirtualMachines != nil {
		if err := m.VirtualMachines.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtualMachines")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupJobSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupJobSpec) UnmarshalBinary(b []byte) error {
	var res BackupJobSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
