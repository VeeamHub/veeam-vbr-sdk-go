// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupJobStorageImportModel Backup storage settings.
//
// swagger:model BackupJobStorageImportModel
type BackupJobStorageImportModel struct {

	// advanced settings
	AdvancedSettings *BackupJobAdvancedSettingsModel `json:"advancedSettings,omitempty"`

	// backup proxies
	// Required: true
	BackupProxies *BackupJobImportProxiesModel `json:"backupProxies"`

	// backup repository
	// Required: true
	BackupRepository *BackupRepositoryImportModel `json:"backupRepository"`

	// gfs policy
	GfsPolicy *GFSPolicySettingsModel `json:"gfsPolicy,omitempty"`

	// retention policy
	// Required: true
	RetentionPolicy *BackupJobRetentionPolicySettingsModel `json:"retentionPolicy"`
}

// Validate validates this backup job storage import model
func (m *BackupJobStorageImportModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdvancedSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupProxies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGfsPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetentionPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupJobStorageImportModel) validateAdvancedSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.AdvancedSettings) { // not required
		return nil
	}

	if m.AdvancedSettings != nil {
		if err := m.AdvancedSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("advancedSettings")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobStorageImportModel) validateBackupProxies(formats strfmt.Registry) error {

	if err := validate.Required("backupProxies", "body", m.BackupProxies); err != nil {
		return err
	}

	if m.BackupProxies != nil {
		if err := m.BackupProxies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupProxies")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobStorageImportModel) validateBackupRepository(formats strfmt.Registry) error {

	if err := validate.Required("backupRepository", "body", m.BackupRepository); err != nil {
		return err
	}

	if m.BackupRepository != nil {
		if err := m.BackupRepository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupRepository")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobStorageImportModel) validateGfsPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.GfsPolicy) { // not required
		return nil
	}

	if m.GfsPolicy != nil {
		if err := m.GfsPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gfsPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobStorageImportModel) validateRetentionPolicy(formats strfmt.Registry) error {

	if err := validate.Required("retentionPolicy", "body", m.RetentionPolicy); err != nil {
		return err
	}

	if m.RetentionPolicy != nil {
		if err := m.RetentionPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retentionPolicy")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this backup job storage import model based on the context it is used
func (m *BackupJobStorageImportModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdvancedSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupProxies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupRepository(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGfsPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRetentionPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupJobStorageImportModel) contextValidateAdvancedSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.AdvancedSettings != nil {
		if err := m.AdvancedSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("advancedSettings")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobStorageImportModel) contextValidateBackupProxies(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupProxies != nil {
		if err := m.BackupProxies.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupProxies")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobStorageImportModel) contextValidateBackupRepository(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupRepository != nil {
		if err := m.BackupRepository.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupRepository")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobStorageImportModel) contextValidateGfsPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.GfsPolicy != nil {
		if err := m.GfsPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gfsPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobStorageImportModel) contextValidateRetentionPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.RetentionPolicy != nil {
		if err := m.RetentionPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retentionPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupJobStorageImportModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupJobStorageImportModel) UnmarshalBinary(b []byte) error {
	var res BackupJobStorageImportModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
