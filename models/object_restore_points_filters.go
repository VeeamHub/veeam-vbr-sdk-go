// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ObjectRestorePointsFilters object restore points filters
//
// swagger:model ObjectRestorePointsFilters
type ObjectRestorePointsFilters struct {

	// backup Id filter
	// Format: uuid
	BackupIDFilter strfmt.UUID `json:"backupIdFilter,omitempty"`

	// backup object Id filter
	// Format: uuid
	BackupObjectIDFilter strfmt.UUID `json:"backupObjectIdFilter,omitempty"`

	// created after filter
	// Format: date-time
	CreatedAfterFilter strfmt.DateTime `json:"createdAfterFilter,omitempty"`

	// created before filter
	// Format: date-time
	CreatedBeforeFilter strfmt.DateTime `json:"createdBeforeFilter,omitempty"`

	// limit
	Limit int32 `json:"limit,omitempty"`

	// name filter
	NameFilter string `json:"nameFilter,omitempty"`

	// order asc
	OrderAsc bool `json:"orderAsc,omitempty"`

	// order column
	OrderColumn EObjectRestorePointsFiltersOrderColumn `json:"orderColumn,omitempty"`

	// platform Id filter
	// Format: uuid
	PlatformIDFilter strfmt.UUID `json:"platformIdFilter,omitempty"`

	// platform name filter
	PlatformNameFilter EPlatformType `json:"platformNameFilter,omitempty"`

	// skip
	Skip int32 `json:"skip,omitempty"`
}

// Validate validates this object restore points filters
func (m *ObjectRestorePointsFilters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupIDFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupObjectIDFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAfterFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBeforeFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderColumn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformIDFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatformNameFilter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectRestorePointsFilters) validateBackupIDFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupIDFilter) { // not required
		return nil
	}

	if err := validate.FormatOf("backupIdFilter", "body", "uuid", m.BackupIDFilter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ObjectRestorePointsFilters) validateBackupObjectIDFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupObjectIDFilter) { // not required
		return nil
	}

	if err := validate.FormatOf("backupObjectIdFilter", "body", "uuid", m.BackupObjectIDFilter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ObjectRestorePointsFilters) validateCreatedAfterFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAfterFilter) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAfterFilter", "body", "date-time", m.CreatedAfterFilter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ObjectRestorePointsFilters) validateCreatedBeforeFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedBeforeFilter) { // not required
		return nil
	}

	if err := validate.FormatOf("createdBeforeFilter", "body", "date-time", m.CreatedBeforeFilter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ObjectRestorePointsFilters) validateOrderColumn(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderColumn) { // not required
		return nil
	}

	if err := m.OrderColumn.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("orderColumn")
		}
		return err
	}

	return nil
}

func (m *ObjectRestorePointsFilters) validatePlatformIDFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.PlatformIDFilter) { // not required
		return nil
	}

	if err := validate.FormatOf("platformIdFilter", "body", "uuid", m.PlatformIDFilter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ObjectRestorePointsFilters) validatePlatformNameFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.PlatformNameFilter) { // not required
		return nil
	}

	if err := m.PlatformNameFilter.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("platformNameFilter")
		}
		return err
	}

	return nil
}

// ContextValidate validate this object restore points filters based on the context it is used
func (m *ObjectRestorePointsFilters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrderColumn(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlatformNameFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectRestorePointsFilters) contextValidateOrderColumn(ctx context.Context, formats strfmt.Registry) error {

	if err := m.OrderColumn.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("orderColumn")
		}
		return err
	}

	return nil
}

func (m *ObjectRestorePointsFilters) contextValidatePlatformNameFilter(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PlatformNameFilter.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("platformNameFilter")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ObjectRestorePointsFilters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectRestorePointsFilters) UnmarshalBinary(b []byte) error {
	var res ObjectRestorePointsFilters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
