// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EDayNumberInMonth e day number in month
//
// swagger:model EDayNumberInMonth
type EDayNumberInMonth string

func NewEDayNumberInMonth(value EDayNumberInMonth) *EDayNumberInMonth {
	v := value
	return &v
}

const (

	// EDayNumberInMonthFirst captures enum value "First"
	EDayNumberInMonthFirst EDayNumberInMonth = "First"

	// EDayNumberInMonthSecond captures enum value "Second"
	EDayNumberInMonthSecond EDayNumberInMonth = "Second"

	// EDayNumberInMonthThird captures enum value "Third"
	EDayNumberInMonthThird EDayNumberInMonth = "Third"

	// EDayNumberInMonthFourth captures enum value "Fourth"
	EDayNumberInMonthFourth EDayNumberInMonth = "Fourth"

	// EDayNumberInMonthLast captures enum value "Last"
	EDayNumberInMonthLast EDayNumberInMonth = "Last"

	// EDayNumberInMonthOnDay captures enum value "OnDay"
	EDayNumberInMonthOnDay EDayNumberInMonth = "OnDay"
)

// for schema
var eDayNumberInMonthEnum []interface{}

func init() {
	var res []EDayNumberInMonth
	if err := json.Unmarshal([]byte(`["First","Second","Third","Fourth","Last","OnDay"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eDayNumberInMonthEnum = append(eDayNumberInMonthEnum, v)
	}
}

func (m EDayNumberInMonth) validateEDayNumberInMonthEnum(path, location string, value EDayNumberInMonth) error {
	if err := validate.EnumCase(path, location, value, eDayNumberInMonthEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e day number in month
func (m EDayNumberInMonth) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEDayNumberInMonthEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e day number in month based on context it is used
func (m EDayNumberInMonth) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
