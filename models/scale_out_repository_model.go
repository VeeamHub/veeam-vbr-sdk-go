// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScaleOutRepositoryModel scale out repository model
//
// swagger:model ScaleOutRepositoryModel
type ScaleOutRepositoryModel struct {

	// archive tier
	ArchiveTier *ArchiveTierModel `json:"archiveTier,omitempty"`

	// capacity tier
	CapacityTier *CapacityTierModel `json:"capacityTier,omitempty"`

	// Description of the scale-out backup repository.
	// Required: true
	Description *string `json:"description"`

	// ID of the scale-out backup repository.
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// Name of the scale-out backup repository.
	// Required: true
	Name *string `json:"name"`

	// performance tier
	// Required: true
	PerformanceTier *PerformanceTierModel `json:"performanceTier"`

	// placement policy
	PlacementPolicy *PlacementPolicyModel `json:"placementPolicy,omitempty"`

	// Tag assigned to of the scale-out backup repository.
	// Required: true
	Tag *string `json:"tag"`
}

// Validate validates this scale out repository model
func (m *ScaleOutRepositoryModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchiveTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapacityTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerformanceTier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlacementPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScaleOutRepositoryModel) validateArchiveTier(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchiveTier) { // not required
		return nil
	}

	if m.ArchiveTier != nil {
		if err := m.ArchiveTier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archiveTier")
			}
			return err
		}
	}

	return nil
}

func (m *ScaleOutRepositoryModel) validateCapacityTier(formats strfmt.Registry) error {
	if swag.IsZero(m.CapacityTier) { // not required
		return nil
	}

	if m.CapacityTier != nil {
		if err := m.CapacityTier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capacityTier")
			}
			return err
		}
	}

	return nil
}

func (m *ScaleOutRepositoryModel) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ScaleOutRepositoryModel) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ScaleOutRepositoryModel) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ScaleOutRepositoryModel) validatePerformanceTier(formats strfmt.Registry) error {

	if err := validate.Required("performanceTier", "body", m.PerformanceTier); err != nil {
		return err
	}

	if m.PerformanceTier != nil {
		if err := m.PerformanceTier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("performanceTier")
			}
			return err
		}
	}

	return nil
}

func (m *ScaleOutRepositoryModel) validatePlacementPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.PlacementPolicy) { // not required
		return nil
	}

	if m.PlacementPolicy != nil {
		if err := m.PlacementPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("placementPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *ScaleOutRepositoryModel) validateTag(formats strfmt.Registry) error {

	if err := validate.Required("tag", "body", m.Tag); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this scale out repository model based on the context it is used
func (m *ScaleOutRepositoryModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArchiveTier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCapacityTier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePerformanceTier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlacementPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScaleOutRepositoryModel) contextValidateArchiveTier(ctx context.Context, formats strfmt.Registry) error {

	if m.ArchiveTier != nil {
		if err := m.ArchiveTier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archiveTier")
			}
			return err
		}
	}

	return nil
}

func (m *ScaleOutRepositoryModel) contextValidateCapacityTier(ctx context.Context, formats strfmt.Registry) error {

	if m.CapacityTier != nil {
		if err := m.CapacityTier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capacityTier")
			}
			return err
		}
	}

	return nil
}

func (m *ScaleOutRepositoryModel) contextValidatePerformanceTier(ctx context.Context, formats strfmt.Registry) error {

	if m.PerformanceTier != nil {
		if err := m.PerformanceTier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("performanceTier")
			}
			return err
		}
	}

	return nil
}

func (m *ScaleOutRepositoryModel) contextValidatePlacementPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.PlacementPolicy != nil {
		if err := m.PlacementPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("placementPolicy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScaleOutRepositoryModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScaleOutRepositoryModel) UnmarshalBinary(b []byte) error {
	var res ScaleOutRepositoryModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
