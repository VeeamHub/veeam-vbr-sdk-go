// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupScheduleModel Job scheduling options.
//
// swagger:model BackupScheduleModel
type BackupScheduleModel struct {

	// after this job
	AfterThisJob *ScheduleAfterThisJobModel `json:"afterThisJob,omitempty"`

	// backup window
	BackupWindow *ScheduleBackupWindowModel `json:"backupWindow,omitempty"`

	// continuously
	Continuously *ScheduleBackupWindowModel `json:"continuously,omitempty"`

	// daily
	Daily *ScheduleDailyModel `json:"daily,omitempty"`

	// monthly
	Monthly *ScheduleMonthlyModel `json:"monthly,omitempty"`

	// periodically
	Periodically *SchedulePeriodicallyModel `json:"periodically,omitempty"`

	// retry
	Retry *ScheduleRetryModel `json:"retry,omitempty"`

	// If *true*, job scheduling is enabled.
	// Required: true
	RunAutomatically bool `json:"runAutomatically"`
}

// Validate validates this backup schedule model
func (m *BackupScheduleModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAfterThisJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupWindow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContinuously(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDaily(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonthly(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriodically(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunAutomatically(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupScheduleModel) validateAfterThisJob(formats strfmt.Registry) error {
	if swag.IsZero(m.AfterThisJob) { // not required
		return nil
	}

	if m.AfterThisJob != nil {
		if err := m.AfterThisJob.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("afterThisJob")
			}
			return err
		}
	}

	return nil
}

func (m *BackupScheduleModel) validateBackupWindow(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupWindow) { // not required
		return nil
	}

	if m.BackupWindow != nil {
		if err := m.BackupWindow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupWindow")
			}
			return err
		}
	}

	return nil
}

func (m *BackupScheduleModel) validateContinuously(formats strfmt.Registry) error {
	if swag.IsZero(m.Continuously) { // not required
		return nil
	}

	if m.Continuously != nil {
		if err := m.Continuously.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("continuously")
			}
			return err
		}
	}

	return nil
}

func (m *BackupScheduleModel) validateDaily(formats strfmt.Registry) error {
	if swag.IsZero(m.Daily) { // not required
		return nil
	}

	if m.Daily != nil {
		if err := m.Daily.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("daily")
			}
			return err
		}
	}

	return nil
}

func (m *BackupScheduleModel) validateMonthly(formats strfmt.Registry) error {
	if swag.IsZero(m.Monthly) { // not required
		return nil
	}

	if m.Monthly != nil {
		if err := m.Monthly.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monthly")
			}
			return err
		}
	}

	return nil
}

func (m *BackupScheduleModel) validatePeriodically(formats strfmt.Registry) error {
	if swag.IsZero(m.Periodically) { // not required
		return nil
	}

	if m.Periodically != nil {
		if err := m.Periodically.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("periodically")
			}
			return err
		}
	}

	return nil
}

func (m *BackupScheduleModel) validateRetry(formats strfmt.Registry) error {
	if swag.IsZero(m.Retry) { // not required
		return nil
	}

	if m.Retry != nil {
		if err := m.Retry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retry")
			}
			return err
		}
	}

	return nil
}

func (m *BackupScheduleModel) validateRunAutomatically(formats strfmt.Registry) error {

	if err := validate.Required("runAutomatically", "body", bool(m.RunAutomatically)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this backup schedule model based on the context it is used
func (m *BackupScheduleModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAfterThisJob(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupWindow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContinuously(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDaily(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMonthly(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePeriodically(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRetry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupScheduleModel) contextValidateAfterThisJob(ctx context.Context, formats strfmt.Registry) error {

	if m.AfterThisJob != nil {
		if err := m.AfterThisJob.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("afterThisJob")
			}
			return err
		}
	}

	return nil
}

func (m *BackupScheduleModel) contextValidateBackupWindow(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupWindow != nil {
		if err := m.BackupWindow.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupWindow")
			}
			return err
		}
	}

	return nil
}

func (m *BackupScheduleModel) contextValidateContinuously(ctx context.Context, formats strfmt.Registry) error {

	if m.Continuously != nil {
		if err := m.Continuously.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("continuously")
			}
			return err
		}
	}

	return nil
}

func (m *BackupScheduleModel) contextValidateDaily(ctx context.Context, formats strfmt.Registry) error {

	if m.Daily != nil {
		if err := m.Daily.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("daily")
			}
			return err
		}
	}

	return nil
}

func (m *BackupScheduleModel) contextValidateMonthly(ctx context.Context, formats strfmt.Registry) error {

	if m.Monthly != nil {
		if err := m.Monthly.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monthly")
			}
			return err
		}
	}

	return nil
}

func (m *BackupScheduleModel) contextValidatePeriodically(ctx context.Context, formats strfmt.Registry) error {

	if m.Periodically != nil {
		if err := m.Periodically.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("periodically")
			}
			return err
		}
	}

	return nil
}

func (m *BackupScheduleModel) contextValidateRetry(ctx context.Context, formats strfmt.Registry) error {

	if m.Retry != nil {
		if err := m.Retry.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retry")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupScheduleModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupScheduleModel) UnmarshalBinary(b []byte) error {
	var res BackupScheduleModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
