// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupJobAdvancedSettingsModel Advanced settings of the backup job.
//
// swagger:model BackupJobAdvancedSettingsModel
type BackupJobAdvancedSettingsModel struct {

	// active fulls
	ActiveFulls *ActiveFullSettingsModel `json:"activeFulls,omitempty"`

	// backup health
	BackupHealth *BackupHealthCheckSettingsModels `json:"backupHealth,omitempty"`

	// backup mode type
	// Required: true
	BackupModeType *EBackupModeType `json:"backupModeType"`

	// full backup maintenance
	FullBackupMaintenance *FullBackupMaintenanceModel `json:"fullBackupMaintenance,omitempty"`

	// notifications
	Notifications *NotificationSettingsModel `json:"notifications,omitempty"`

	// scripts
	Scripts *JobScriptsSettingsModel `json:"scripts,omitempty"`

	// storage data
	StorageData *BackupStorageSettingModel `json:"storageData,omitempty"`

	// storage integration
	StorageIntegration *PrimaryStorageIntegrationSettingsModel `json:"storageIntegration,omitempty"`

	// synthentic fulls
	SynthenticFulls *SyntheticFullSettingsModel `json:"synthenticFulls,omitempty"`

	// v sphere
	VSphere *BackupJobAdvancedSettingsVSphereModel `json:"vSphere,omitempty"`
}

// Validate validates this backup job advanced settings model
func (m *BackupJobAdvancedSettingsModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveFulls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackupModeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFullBackupMaintenance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScripts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageIntegration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSynthenticFulls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVSphere(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupJobAdvancedSettingsModel) validateActiveFulls(formats strfmt.Registry) error {
	if swag.IsZero(m.ActiveFulls) { // not required
		return nil
	}

	if m.ActiveFulls != nil {
		if err := m.ActiveFulls.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activeFulls")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobAdvancedSettingsModel) validateBackupHealth(formats strfmt.Registry) error {
	if swag.IsZero(m.BackupHealth) { // not required
		return nil
	}

	if m.BackupHealth != nil {
		if err := m.BackupHealth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupHealth")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobAdvancedSettingsModel) validateBackupModeType(formats strfmt.Registry) error {

	if err := validate.Required("backupModeType", "body", m.BackupModeType); err != nil {
		return err
	}

	if err := validate.Required("backupModeType", "body", m.BackupModeType); err != nil {
		return err
	}

	if m.BackupModeType != nil {
		if err := m.BackupModeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupModeType")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobAdvancedSettingsModel) validateFullBackupMaintenance(formats strfmt.Registry) error {
	if swag.IsZero(m.FullBackupMaintenance) { // not required
		return nil
	}

	if m.FullBackupMaintenance != nil {
		if err := m.FullBackupMaintenance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fullBackupMaintenance")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobAdvancedSettingsModel) validateNotifications(formats strfmt.Registry) error {
	if swag.IsZero(m.Notifications) { // not required
		return nil
	}

	if m.Notifications != nil {
		if err := m.Notifications.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notifications")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobAdvancedSettingsModel) validateScripts(formats strfmt.Registry) error {
	if swag.IsZero(m.Scripts) { // not required
		return nil
	}

	if m.Scripts != nil {
		if err := m.Scripts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scripts")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobAdvancedSettingsModel) validateStorageData(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageData) { // not required
		return nil
	}

	if m.StorageData != nil {
		if err := m.StorageData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageData")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobAdvancedSettingsModel) validateStorageIntegration(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageIntegration) { // not required
		return nil
	}

	if m.StorageIntegration != nil {
		if err := m.StorageIntegration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageIntegration")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobAdvancedSettingsModel) validateSynthenticFulls(formats strfmt.Registry) error {
	if swag.IsZero(m.SynthenticFulls) { // not required
		return nil
	}

	if m.SynthenticFulls != nil {
		if err := m.SynthenticFulls.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("synthenticFulls")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobAdvancedSettingsModel) validateVSphere(formats strfmt.Registry) error {
	if swag.IsZero(m.VSphere) { // not required
		return nil
	}

	if m.VSphere != nil {
		if err := m.VSphere.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vSphere")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this backup job advanced settings model based on the context it is used
func (m *BackupJobAdvancedSettingsModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActiveFulls(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupHealth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBackupModeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFullBackupMaintenance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNotifications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScripts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageIntegration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSynthenticFulls(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVSphere(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupJobAdvancedSettingsModel) contextValidateActiveFulls(ctx context.Context, formats strfmt.Registry) error {

	if m.ActiveFulls != nil {
		if err := m.ActiveFulls.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activeFulls")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobAdvancedSettingsModel) contextValidateBackupHealth(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupHealth != nil {
		if err := m.BackupHealth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupHealth")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobAdvancedSettingsModel) contextValidateBackupModeType(ctx context.Context, formats strfmt.Registry) error {

	if m.BackupModeType != nil {
		if err := m.BackupModeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("backupModeType")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobAdvancedSettingsModel) contextValidateFullBackupMaintenance(ctx context.Context, formats strfmt.Registry) error {

	if m.FullBackupMaintenance != nil {
		if err := m.FullBackupMaintenance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fullBackupMaintenance")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobAdvancedSettingsModel) contextValidateNotifications(ctx context.Context, formats strfmt.Registry) error {

	if m.Notifications != nil {
		if err := m.Notifications.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notifications")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobAdvancedSettingsModel) contextValidateScripts(ctx context.Context, formats strfmt.Registry) error {

	if m.Scripts != nil {
		if err := m.Scripts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scripts")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobAdvancedSettingsModel) contextValidateStorageData(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageData != nil {
		if err := m.StorageData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageData")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobAdvancedSettingsModel) contextValidateStorageIntegration(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageIntegration != nil {
		if err := m.StorageIntegration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageIntegration")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobAdvancedSettingsModel) contextValidateSynthenticFulls(ctx context.Context, formats strfmt.Registry) error {

	if m.SynthenticFulls != nil {
		if err := m.SynthenticFulls.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("synthenticFulls")
			}
			return err
		}
	}

	return nil
}

func (m *BackupJobAdvancedSettingsModel) contextValidateVSphere(ctx context.Context, formats strfmt.Registry) error {

	if m.VSphere != nil {
		if err := m.VSphere.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vSphere")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupJobAdvancedSettingsModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupJobAdvancedSettingsModel) UnmarshalBinary(b []byte) error {
	var res BackupJobAdvancedSettingsModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
