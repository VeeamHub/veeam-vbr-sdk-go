// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EManagedServerType Type of the server.
//
// swagger:model EManagedServerType
type EManagedServerType string

func NewEManagedServerType(value EManagedServerType) *EManagedServerType {
	v := value
	return &v
}

const (

	// EManagedServerTypeWindowsHost captures enum value "WindowsHost"
	EManagedServerTypeWindowsHost EManagedServerType = "WindowsHost"

	// EManagedServerTypeLinuxHost captures enum value "LinuxHost"
	EManagedServerTypeLinuxHost EManagedServerType = "LinuxHost"

	// EManagedServerTypeViHost captures enum value "ViHost"
	EManagedServerTypeViHost EManagedServerType = "ViHost"
)

// for schema
var eManagedServerTypeEnum []interface{}

func init() {
	var res []EManagedServerType
	if err := json.Unmarshal([]byte(`["WindowsHost","LinuxHost","ViHost"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eManagedServerTypeEnum = append(eManagedServerTypeEnum, v)
	}
}

func (m EManagedServerType) validateEManagedServerTypeEnum(path, location string, value EManagedServerType) error {
	if err := validate.EnumCase(path, location, value, eManagedServerTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e managed server type
func (m EManagedServerType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEManagedServerTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e managed server type based on context it is used
func (m EManagedServerType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
