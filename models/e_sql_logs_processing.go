// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ESQLLogsProcessing Type of transaction logs processing.
//
// swagger:model ESQLLogsProcessing
type ESQLLogsProcessing string

func NewESQLLogsProcessing(value ESQLLogsProcessing) *ESQLLogsProcessing {
	v := value
	return &v
}

const (

	// ESQLLogsProcessingTruncate captures enum value "truncate"
	ESQLLogsProcessingTruncate ESQLLogsProcessing = "truncate"

	// ESQLLogsProcessingPreserve captures enum value "preserve"
	ESQLLogsProcessingPreserve ESQLLogsProcessing = "preserve"

	// ESQLLogsProcessingBackup captures enum value "backup"
	ESQLLogsProcessingBackup ESQLLogsProcessing = "backup"

	// ESQLLogsProcessingNeverTruncate captures enum value "neverTruncate"
	ESQLLogsProcessingNeverTruncate ESQLLogsProcessing = "neverTruncate"
)

// for schema
var eSqlLogsProcessingEnum []interface{}

func init() {
	var res []ESQLLogsProcessing
	if err := json.Unmarshal([]byte(`["truncate","preserve","backup","neverTruncate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eSqlLogsProcessingEnum = append(eSqlLogsProcessingEnum, v)
	}
}

func (m ESQLLogsProcessing) validateESQLLogsProcessingEnum(path, location string, value ESQLLogsProcessing) error {
	if err := validate.EnumCase(path, location, value, eSqlLogsProcessingEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e SQL logs processing
func (m ESQLLogsProcessing) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateESQLLogsProcessingEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e SQL logs processing based on context it is used
func (m ESQLLogsProcessing) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
