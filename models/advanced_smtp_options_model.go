// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdvancedSMTPOptionsModel advanced global email notification settings.
//
// swagger:model AdvancedSmtpOptionsModel
type AdvancedSMTPOptionsModel struct {

	// If *true*, secure connection for email operations is used.
	// Required: true
	SSLEnabled *bool `json:"SSLEnabled"`

	// If *true*, the `credentialsId` credentials are used to connect to the SMTP server.
	// Required: true
	AuthRequred *bool `json:"authRequred"`

	// ID of the credentials used to connect to the server.
	// Format: uuid
	CredentialsID strfmt.UUID `json:"credentialsId,omitempty"`

	// Port number for the SMTP server.
	// Required: true
	Port *int32 `json:"port"`

	// Connection timeout for the SMTP server.
	// Required: true
	TimeoutMs *int32 `json:"timeoutMs"`
}

// Validate validates this advanced Smtp options model
func (m *AdvancedSMTPOptionsModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSSLEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthRequred(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentialsID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeoutMs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdvancedSMTPOptionsModel) validateSSLEnabled(formats strfmt.Registry) error {

	if err := validate.Required("SSLEnabled", "body", m.SSLEnabled); err != nil {
		return err
	}

	return nil
}

func (m *AdvancedSMTPOptionsModel) validateAuthRequred(formats strfmt.Registry) error {

	if err := validate.Required("authRequred", "body", m.AuthRequred); err != nil {
		return err
	}

	return nil
}

func (m *AdvancedSMTPOptionsModel) validateCredentialsID(formats strfmt.Registry) error {
	if swag.IsZero(m.CredentialsID) { // not required
		return nil
	}

	if err := validate.FormatOf("credentialsId", "body", "uuid", m.CredentialsID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AdvancedSMTPOptionsModel) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

func (m *AdvancedSMTPOptionsModel) validateTimeoutMs(formats strfmt.Registry) error {

	if err := validate.Required("timeoutMs", "body", m.TimeoutMs); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this advanced Smtp options model based on context it is used
func (m *AdvancedSMTPOptionsModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AdvancedSMTPOptionsModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdvancedSMTPOptionsModel) UnmarshalBinary(b []byte) error {
	var res AdvancedSMTPOptionsModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
