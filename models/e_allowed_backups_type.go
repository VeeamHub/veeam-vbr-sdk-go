// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EAllowedBackupsType Type of backup files that can be stored on the extent.
//
// swagger:model EAllowedBackupsType
type EAllowedBackupsType string

func NewEAllowedBackupsType(value EAllowedBackupsType) *EAllowedBackupsType {
	v := value
	return &v
}

const (

	// EAllowedBackupsTypeAll captures enum value "All"
	EAllowedBackupsTypeAll EAllowedBackupsType = "All"

	// EAllowedBackupsTypeFullsOnly captures enum value "FullsOnly"
	EAllowedBackupsTypeFullsOnly EAllowedBackupsType = "FullsOnly"

	// EAllowedBackupsTypeIncrementsOnly captures enum value "IncrementsOnly"
	EAllowedBackupsTypeIncrementsOnly EAllowedBackupsType = "IncrementsOnly"
)

// for schema
var eAllowedBackupsTypeEnum []interface{}

func init() {
	var res []EAllowedBackupsType
	if err := json.Unmarshal([]byte(`["All","FullsOnly","IncrementsOnly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eAllowedBackupsTypeEnum = append(eAllowedBackupsTypeEnum, v)
	}
}

func (m EAllowedBackupsType) validateEAllowedBackupsTypeEnum(path, location string, value EAllowedBackupsType) error {
	if err := validate.EnumCase(path, location, value, eAllowedBackupsTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e allowed backups type
func (m EAllowedBackupsType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEAllowedBackupsTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e allowed backups type based on context it is used
func (m EAllowedBackupsType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
