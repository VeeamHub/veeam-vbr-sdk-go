// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CredentialsImportSpec credentials import spec
//
// swagger:model CredentialsImportSpec
type CredentialsImportSpec struct {

	// Description of the credentials record.
	Description string `json:"description,omitempty"`

	// linux additional settings
	LinuxAdditionalSettings *CredentialsLinuxSettingsImportModel `json:"linuxAdditionalSettings,omitempty"`

	// Password.
	Password string `json:"password,omitempty"`

	// Tag used to identify the credentials record.
	// Required: true
	Tag *string `json:"tag"`

	// type
	// Required: true
	Type *ECredentialsType `json:"type"`

	// User name.
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this credentials import spec
func (m *CredentialsImportSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinuxAdditionalSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialsImportSpec) validateLinuxAdditionalSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.LinuxAdditionalSettings) { // not required
		return nil
	}

	if m.LinuxAdditionalSettings != nil {
		if err := m.LinuxAdditionalSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("linuxAdditionalSettings")
			}
			return err
		}
	}

	return nil
}

func (m *CredentialsImportSpec) validateTag(formats strfmt.Registry) error {

	if err := validate.Required("tag", "body", m.Tag); err != nil {
		return err
	}

	return nil
}

func (m *CredentialsImportSpec) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

func (m *CredentialsImportSpec) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this credentials import spec based on the context it is used
func (m *CredentialsImportSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinuxAdditionalSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialsImportSpec) contextValidateLinuxAdditionalSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.LinuxAdditionalSettings != nil {
		if err := m.LinuxAdditionalSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("linuxAdditionalSettings")
			}
			return err
		}
	}

	return nil
}

func (m *CredentialsImportSpec) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CredentialsImportSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CredentialsImportSpec) UnmarshalBinary(b []byte) error {
	var res CredentialsImportSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
