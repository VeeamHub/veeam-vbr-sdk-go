// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EPlacementPolicyType Type of placement policy.
//
// swagger:model EPlacementPolicyType
type EPlacementPolicyType string

func NewEPlacementPolicyType(value EPlacementPolicyType) *EPlacementPolicyType {
	v := value
	return &v
}

const (

	// EPlacementPolicyTypeDataLocality captures enum value "DataLocality"
	EPlacementPolicyTypeDataLocality EPlacementPolicyType = "DataLocality"

	// EPlacementPolicyTypePerformance captures enum value "Performance"
	EPlacementPolicyTypePerformance EPlacementPolicyType = "Performance"
)

// for schema
var ePlacementPolicyTypeEnum []interface{}

func init() {
	var res []EPlacementPolicyType
	if err := json.Unmarshal([]byte(`["DataLocality","Performance"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ePlacementPolicyTypeEnum = append(ePlacementPolicyTypeEnum, v)
	}
}

func (m EPlacementPolicyType) validateEPlacementPolicyTypeEnum(path, location string, value EPlacementPolicyType) error {
	if err := validate.EnumCase(path, location, value, ePlacementPolicyTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this e placement policy type
func (m EPlacementPolicyType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEPlacementPolicyTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this e placement policy type based on context it is used
func (m EPlacementPolicyType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
