// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package client

import (
	"encoding/json"
	"fmt"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for EAllowedBackupsType.
const (
	EAllowedBackupsTypeAll            EAllowedBackupsType = "All"
	EAllowedBackupsTypeFullsOnly      EAllowedBackupsType = "FullsOnly"
	EAllowedBackupsTypeIncrementsOnly EAllowedBackupsType = "IncrementsOnly"
	EAllowedBackupsTypeNone           EAllowedBackupsType = "None"
)

// Defines values for EAmazonRegionType.
const (
	EAmazonRegionTypeChina      EAmazonRegionType = "China"
	EAmazonRegionTypeGlobal     EAmazonRegionType = "Global"
	EAmazonRegionTypeGovernment EAmazonRegionType = "Government"
)

// Defines values for EApplicationSettingsVSS.
const (
	EApplicationSettingsVSSDisabled       EApplicationSettingsVSS = "disabled"
	EApplicationSettingsVSSIgnoreFailures EApplicationSettingsVSS = "ignoreFailures"
	EApplicationSettingsVSSRequireSuccess EApplicationSettingsVSS = "requireSuccess"
)

// Defines values for EAzureComputeCredentialsCreationMode.
const (
	ExistingAccount EAzureComputeCredentialsCreationMode = "ExistingAccount"
	NewAccount      EAzureComputeCredentialsCreationMode = "NewAccount"
)

// Defines values for EAzureComputeCredentialsDeploymentType.
const (
	MicrosoftAzure      EAzureComputeCredentialsDeploymentType = "MicrosoftAzure"
	MicrosoftAzureStack EAzureComputeCredentialsDeploymentType = "MicrosoftAzureStack"
)

// Defines values for EAzureRegionType.
const (
	EAzureRegionTypeChina      EAzureRegionType = "China"
	EAzureRegionTypeGermany    EAzureRegionType = "Germany"
	EAzureRegionTypeGlobal     EAzureRegionType = "Global"
	EAzureRegionTypeGovernment EAzureRegionType = "Government"
)

// Defines values for EBackupExclusionPolicy.
const (
	EBackupExclusionPolicyDisabled    EBackupExclusionPolicy = "disabled"
	EBackupExclusionPolicyExcludeOnly EBackupExclusionPolicy = "excludeOnly"
	EBackupExclusionPolicyIncludeOnly EBackupExclusionPolicy = "includeOnly"
)

// Defines values for EBackupModeType.
const (
	Full                        EBackupModeType = "Full"
	Incremental                 EBackupModeType = "Incremental"
	ReverseIncremental          EBackupModeType = "ReverseIncremental"
	TransformForeverIncremental EBackupModeType = "TransformForeverIncremental"
	Transofrm                   EBackupModeType = "Transofrm"
)

// Defines values for EBackupObjectsFiltersOrderColumn.
const (
	EBackupObjectsFiltersOrderColumnName       EBackupObjectsFiltersOrderColumn = "Name"
	EBackupObjectsFiltersOrderColumnObjectId   EBackupObjectsFiltersOrderColumn = "ObjectId"
	EBackupObjectsFiltersOrderColumnPlatformId EBackupObjectsFiltersOrderColumn = "PlatformId"
	EBackupObjectsFiltersOrderColumnType       EBackupObjectsFiltersOrderColumn = "Type"
)

// Defines values for EBackupOracleLogsSettings.
const (
	EBackupOracleLogsSettingsDeleteExpiredGBs   EBackupOracleLogsSettings = "deleteExpiredGBs"
	EBackupOracleLogsSettingsDeleteExpiredHours EBackupOracleLogsSettings = "deleteExpiredHours"
	EBackupOracleLogsSettingsPreserve           EBackupOracleLogsSettings = "preserve"
)

// Defines values for EBackupProxyImportType.
const (
	Vmware EBackupProxyImportType = "vmware"
)

// Defines values for EBackupProxyTransportMode.
const (
	EBackupProxyTransportModeAuto             EBackupProxyTransportMode = "auto"
	EBackupProxyTransportModeDirectAccess     EBackupProxyTransportMode = "directAccess"
	EBackupProxyTransportModeNetwork          EBackupProxyTransportMode = "network"
	EBackupProxyTransportModeVirtualAppliance EBackupProxyTransportMode = "virtualAppliance"
)

// Defines values for EBackupScriptProcessingMode.
const (
	DisableExec        EBackupScriptProcessingMode = "disableExec"
	IgnoreExecFailures EBackupScriptProcessingMode = "ignoreExecFailures"
	RequireSuccess     EBackupScriptProcessingMode = "requireSuccess"
)

// Defines values for EBackupsFiltersOrderColumn.
const (
	EBackupsFiltersOrderColumnCreationTime EBackupsFiltersOrderColumn = "CreationTime"
	EBackupsFiltersOrderColumnJobId        EBackupsFiltersOrderColumn = "JobId"
	EBackupsFiltersOrderColumnName         EBackupsFiltersOrderColumn = "Name"
	EBackupsFiltersOrderColumnPlatformId   EBackupsFiltersOrderColumn = "PlatformId"
	EBackupsFiltersOrderColumnPolicyTag    EBackupsFiltersOrderColumn = "PolicyTag"
)

// Defines values for ECertificateFileFormatType.
const (
	Pfx ECertificateFileFormatType = "pfx"
)

// Defines values for ECloudBrowserFolderType.
const (
	ECloudBrowserFolderTypeArchive ECloudBrowserFolderType = "archive"
	ECloudBrowserFolderTypeBackup  ECloudBrowserFolderType = "backup"
)

// Defines values for ECloudCredentialsFiltersOrderColumn.
const (
	ECloudCredentialsFiltersOrderColumnDescription ECloudCredentialsFiltersOrderColumn = "Description"
	ECloudCredentialsFiltersOrderColumnName        ECloudCredentialsFiltersOrderColumn = "Name"
)

// Defines values for ECloudCredentialsType.
const (
	ECloudCredentialsTypeAmazon       ECloudCredentialsType = "Amazon"
	ECloudCredentialsTypeAzureCompute ECloudCredentialsType = "AzureCompute"
	ECloudCredentialsTypeAzureStorage ECloudCredentialsType = "AzureStorage"
	ECloudCredentialsTypeGoogle       ECloudCredentialsType = "Google"
)

// Defines values for ECloudServiceType.
const (
	ECloudServiceTypeAmazonEC2          ECloudServiceType = "AmazonEC2"
	ECloudServiceTypeAmazonS3           ECloudServiceType = "AmazonS3"
	ECloudServiceTypeAmazonSnowballEdge ECloudServiceType = "AmazonSnowballEdge"
	ECloudServiceTypeAzureBlob          ECloudServiceType = "AzureBlob"
	ECloudServiceTypeAzureCompute       ECloudServiceType = "AzureCompute"
	ECloudServiceTypeAzureDataBox       ECloudServiceType = "AzureDataBox"
	ECloudServiceTypeGoogleCloud        ECloudServiceType = "GoogleCloud"
	ECloudServiceTypeIBMCloud           ECloudServiceType = "IBMCloud"
	ECloudServiceTypeS3Compatible       ECloudServiceType = "S3Compatible"
	ECloudServiceTypeWasabiCloud        ECloudServiceType = "WasabiCloud"
)

// Defines values for ECompressionLevel.
const (
	ECompressionLevelDedupFriendly ECompressionLevel = "DedupFriendly"
	ECompressionLevelExtreme       ECompressionLevel = "Extreme"
	ECompressionLevelHigh          ECompressionLevel = "High"
	ECompressionLevelNone          ECompressionLevel = "None"
	ECompressionLevelOptimal       ECompressionLevel = "Optimal"
)

// Defines values for EComputerRecoveryTokenFiltersOrderColumn.
const (
	EComputerRecoveryTokenFiltersOrderColumnExpirationDate EComputerRecoveryTokenFiltersOrderColumn = "ExpirationDate"
	EComputerRecoveryTokenFiltersOrderColumnName           EComputerRecoveryTokenFiltersOrderColumn = "Name"
)

// Defines values for EConfigBackupSMTPSettingsType.
const (
	Custom EConfigBackupSMTPSettingsType = "Custom"
	Global EConfigBackupSMTPSettingsType = "Global"
)

// Defines values for EConsumptionLimitKind.
const (
	PB EConsumptionLimitKind = "PB"
	TB EConsumptionLimitKind = "TB"
)

// Defines values for ECredentialsFiltersOrderColumn.
const (
	ECredentialsFiltersOrderColumnDescription ECredentialsFiltersOrderColumn = "Description"
	ECredentialsFiltersOrderColumnUsername    ECredentialsFiltersOrderColumn = "Username"
)

// Defines values for ECredentialsStorageType.
const (
	Permanent ECredentialsStorageType = "Permanent"
	SingleUse ECredentialsStorageType = "SingleUse"
)

// Defines values for ECredentialsType.
const (
	Linux    ECredentialsType = "Linux"
	Standard ECredentialsType = "Standard"
)

// Defines values for EDailyKinds.
const (
	Everyday     EDailyKinds = "Everyday"
	SelectedDays EDailyKinds = "SelectedDays"
	WeekDays     EDailyKinds = "WeekDays"
)

// Defines values for EDayNumberInMonth.
const (
	EDayNumberInMonthFirst  EDayNumberInMonth = "First"
	EDayNumberInMonthFourth EDayNumberInMonth = "Fourth"
	EDayNumberInMonthLast   EDayNumberInMonth = "Last"
	EDayNumberInMonthOnDay  EDayNumberInMonth = "OnDay"
	EDayNumberInMonthSecond EDayNumberInMonth = "Second"
	EDayNumberInMonthThird  EDayNumberInMonth = "Third"
)

// Defines values for EDayOfWeek.
const (
	Friday    EDayOfWeek = "friday"
	Monday    EDayOfWeek = "monday"
	Saturday  EDayOfWeek = "saturday"
	Sunday    EDayOfWeek = "sunday"
	Thursday  EDayOfWeek = "thursday"
	Tuesday   EDayOfWeek = "tuesday"
	Wednesday EDayOfWeek = "wednesday"
)

// Defines values for EDiskCreationMode.
const (
	Source           EDiskCreationMode = "Source"
	Thick            EDiskCreationMode = "Thick"
	ThickEagerZeroed EDiskCreationMode = "ThickEagerZeroed"
	Thin             EDiskCreationMode = "Thin"
)

// Defines values for EDiskInfoProcessState.
const (
	InProcessing       EDiskInfoProcessState = "InProcessing"
	NotProcessed       EDiskInfoProcessState = "NotProcessed"
	PartiallyProcessed EDiskInfoProcessState = "PartiallyProcessed"
	Processed          EDiskInfoProcessState = "Processed"
)

// Defines values for EDiskInfoType.
const (
	EDiskInfoTypeEndPoint      EDiskInfoType = "EndPoint"
	EDiskInfoTypeHv            EDiskInfoType = "Hv"
	EDiskInfoTypeHvRawDiskFile EDiskInfoType = "HvRawDiskFile"
	EDiskInfoTypeSimple        EDiskInfoType = "Simple"
	EDiskInfoTypeUnknown       EDiskInfoType = "Unknown"
	EDiskInfoTypeVi            EDiskInfoType = "Vi"
)

// Defines values for EEmailNotificationType.
const (
	UseCustomNotificationSettings EEmailNotificationType = "UseCustomNotificationSettings"
	UseGlobalNotificationSettings EEmailNotificationType = "UseGlobalNotificationSettings"
)

// Defines values for EEncryptionPasswordsFiltersOrderColumn.
const (
	Hint             EEncryptionPasswordsFiltersOrderColumn = "Hint"
	ModificationTime EEncryptionPasswordsFiltersOrderColumn = "ModificationTime"
)

// Defines values for EEntireVMRestoreModeType.
const (
	EEntireVMRestoreModeTypeCustomized       EEntireVMRestoreModeType = "Customized"
	EEntireVMRestoreModeTypeOriginalLocation EEntireVMRestoreModeType = "OriginalLocation"
)

// Defines values for EGuestFSIndexingMode.
const (
	Disable        EGuestFSIndexingMode = "disable"
	IndexAll       EGuestFSIndexingMode = "indexAll"
	IndexAllExcept EGuestFSIndexingMode = "indexAllExcept"
	IndexOnly      EGuestFSIndexingMode = "indexOnly"
)

// Defines values for EHierarchyType.
const (
	EHierarchyTypeDatastoresAndVms   EHierarchyType = "DatastoresAndVms"
	EHierarchyTypeHostsAndClusters   EHierarchyType = "HostsAndClusters"
	EHierarchyTypeHostsAndDatastores EHierarchyType = "HostsAndDatastores"
	EHierarchyTypeNetwork            EHierarchyType = "Network"
	EHierarchyTypeVmsAndTags         EHierarchyType = "VmsAndTags"
	EHierarchyTypeVmsAndTemplates    EHierarchyType = "VmsAndTemplates"
)

// Defines values for EInstantRecoveryMountState.
const (
	EInstantRecoveryMountStateDismounting EInstantRecoveryMountState = "Dismounting"
	EInstantRecoveryMountStateFailed      EInstantRecoveryMountState = "Failed"
	EInstantRecoveryMountStateMounted     EInstantRecoveryMountState = "Mounted"
	EInstantRecoveryMountStateMounting    EInstantRecoveryMountState = "Mounting"
)

// Defines values for EInstantVMRecoveryModeType.
const (
	EInstantVMRecoveryModeTypeCustomized       EInstantVMRecoveryModeType = "Customized"
	EInstantVMRecoveryModeTypeOriginalLocation EInstantVMRecoveryModeType = "OriginalLocation"
)

// Defines values for EInstantViVMRecoveryMountsFiltersOrderColumn.
const (
	EInstantViVMRecoveryMountsFiltersOrderColumnName  EInstantViVMRecoveryMountsFiltersOrderColumn = "name"
	EInstantViVMRecoveryMountsFiltersOrderColumnState EInstantViVMRecoveryMountsFiltersOrderColumn = "state"
)

// Defines values for EInstantViVmRecoveryBiosUuidPolicyType.
const (
	EInstantViVmRecoveryBiosUuidPolicyTypeGenerateNew EInstantViVmRecoveryBiosUuidPolicyType = "generateNew"
	EInstantViVmRecoveryBiosUuidPolicyTypePreserve    EInstantViVmRecoveryBiosUuidPolicyType = "preserve"
)

// Defines values for EJobFiltersOrderColumn.
const (
	EJobFiltersOrderColumnDescription EJobFiltersOrderColumn = "Description"
	EJobFiltersOrderColumnName        EJobFiltersOrderColumn = "Name"
	EJobFiltersOrderColumnType        EJobFiltersOrderColumn = "Type"
)

// Defines values for EJobStatesFiltersOrderColumn.
const (
	EJobStatesFiltersOrderColumnDescription  EJobStatesFiltersOrderColumn = "Description"
	EJobStatesFiltersOrderColumnLastResult   EJobStatesFiltersOrderColumn = "LastResult"
	EJobStatesFiltersOrderColumnLastRun      EJobStatesFiltersOrderColumn = "LastRun"
	EJobStatesFiltersOrderColumnName         EJobStatesFiltersOrderColumn = "Name"
	EJobStatesFiltersOrderColumnNextRun      EJobStatesFiltersOrderColumn = "NextRun"
	EJobStatesFiltersOrderColumnObjectsCount EJobStatesFiltersOrderColumn = "ObjectsCount"
	EJobStatesFiltersOrderColumnRepositoryId EJobStatesFiltersOrderColumn = "RepositoryId"
	EJobStatesFiltersOrderColumnStatus       EJobStatesFiltersOrderColumn = "Status"
	EJobStatesFiltersOrderColumnType         EJobStatesFiltersOrderColumn = "Type"
)

// Defines values for EJobStatus.
const (
	EJobStatusDisabled EJobStatus = "disabled"
	EJobStatusInactive EJobStatus = "inactive"
	EJobStatusRunning  EJobStatus = "running"
)

// Defines values for EJobType.
const (
	EJobTypeBackup EJobType = "Backup"
)

// Defines values for EJobWorkload.
const (
	Application EJobWorkload = "application"
	CloudVm     EJobWorkload = "cloudVm"
	File        EJobWorkload = "file"
	Server      EJobWorkload = "server"
	Vm          EJobWorkload = "vm"
	Workstation EJobWorkload = "workstation"
)

// Defines values for ELoginGrantType.
const (
	AuthorizationCode ELoginGrantType = "authorization_code"
	Password          ELoginGrantType = "password"
	RefreshToken      ELoginGrantType = "refresh_token"
	VbrToken          ELoginGrantType = "vbr_token"
)

// Defines values for EManagedServerType.
const (
	LinuxHost   EManagedServerType = "LinuxHost"
	ViHost      EManagedServerType = "ViHost"
	WindowsHost EManagedServerType = "WindowsHost"
)

// Defines values for EManagedServersFiltersOrderColumn.
const (
	EManagedServersFiltersOrderColumnDescription EManagedServersFiltersOrderColumn = "Description"
	EManagedServersFiltersOrderColumnName        EManagedServersFiltersOrderColumn = "Name"
	EManagedServersFiltersOrderColumnType        EManagedServersFiltersOrderColumn = "Type"
)

// Defines values for EMonth.
const (
	April     EMonth = "April"
	August    EMonth = "August"
	December  EMonth = "December"
	February  EMonth = "February"
	January   EMonth = "January"
	July      EMonth = "July"
	June      EMonth = "June"
	March     EMonth = "March"
	May       EMonth = "May"
	November  EMonth = "November"
	October   EMonth = "October"
	September EMonth = "September"
)

// Defines values for EObjectRestorePointOperation.
const (
	VmwareInstantRecoveryFcd EObjectRestorePointOperation = "VmwareInstantRecoveryFcd"
)

// Defines values for EObjectRestorePointsFiltersOrderColumn.
const (
	EObjectRestorePointsFiltersOrderColumnBackupId     EObjectRestorePointsFiltersOrderColumn = "BackupId"
	EObjectRestorePointsFiltersOrderColumnCreationTime EObjectRestorePointsFiltersOrderColumn = "CreationTime"
	EObjectRestorePointsFiltersOrderColumnPlatformId   EObjectRestorePointsFiltersOrderColumn = "PlatformId"
)

// Defines values for EPeriodicallyKinds.
const (
	EPeriodicallyKindsDays    EPeriodicallyKinds = "Days"
	EPeriodicallyKindsHours   EPeriodicallyKinds = "Hours"
	EPeriodicallyKindsMinutes EPeriodicallyKinds = "Minutes"
	EPeriodicallyKindsSeconds EPeriodicallyKinds = "Seconds"
)

// Defines values for EPlacementPolicyType.
const (
	DataLocality EPlacementPolicyType = "DataLocality"
	Performance  EPlacementPolicyType = "Performance"
)

// Defines values for EPlatformType.
const (
	EPlatformTypeCustomPlatform  EPlatformType = "CustomPlatform"
	EPlatformTypeHyperV          EPlatformType = "HyperV"
	EPlatformTypeLinuxPhysical   EPlatformType = "LinuxPhysical"
	EPlatformTypeNasBackup       EPlatformType = "NasBackup"
	EPlatformTypeTape            EPlatformType = "Tape"
	EPlatformTypeVMware          EPlatformType = "VMware"
	EPlatformTypeVcd             EPlatformType = "Vcd"
	EPlatformTypeWindowsPhysical EPlatformType = "WindowsPhysical"
)

// Defines values for EProxiesFiltersOrderColumn.
const (
	EProxiesFiltersOrderColumnDescription EProxiesFiltersOrderColumn = "Description"
	EProxiesFiltersOrderColumnName        EProxiesFiltersOrderColumn = "Name"
	EProxiesFiltersOrderColumnType        EProxiesFiltersOrderColumn = "Type"
)

// Defines values for EProxyType.
const (
	ViProxy EProxyType = "ViProxy"
)

// Defines values for ERepositoryAccessType.
const (
	AllowAll      ERepositoryAccessType = "AllowAll"
	AllowExplicit ERepositoryAccessType = "AllowExplicit"
	DenyAll       ERepositoryAccessType = "DenyAll"
)

// Defines values for ERepositoryConnectionType.
const (
	Direct          ERepositoryConnectionType = "Direct"
	SelectedGateway ERepositoryConnectionType = "SelectedGateway"
)

// Defines values for ERepositoryExtentStatusType.
const (
	Evacuate         ERepositoryExtentStatusType = "Evacuate"
	Maintenance      ERepositoryExtentStatusType = "Maintenance"
	Normal           ERepositoryExtentStatusType = "Normal"
	Pending          ERepositoryExtentStatusType = "Pending"
	ResyncRequired   ERepositoryExtentStatusType = "ResyncRequired"
	Sealed           ERepositoryExtentStatusType = "Sealed"
	TenantEvacuating ERepositoryExtentStatusType = "TenantEvacuating"
)

// Defines values for ERepositoryFiltersOrderColumn.
const (
	ERepositoryFiltersOrderColumnDescription ERepositoryFiltersOrderColumn = "Description"
	ERepositoryFiltersOrderColumnHost        ERepositoryFiltersOrderColumn = "Host"
	ERepositoryFiltersOrderColumnName        ERepositoryFiltersOrderColumn = "Name"
	ERepositoryFiltersOrderColumnPath        ERepositoryFiltersOrderColumn = "Path"
	ERepositoryFiltersOrderColumnType        ERepositoryFiltersOrderColumn = "Type"
)

// Defines values for ERepositoryStatesFiltersOrderColumn.
const (
	ERepositoryStatesFiltersOrderColumnCapacityGB  ERepositoryStatesFiltersOrderColumn = "CapacityGB"
	ERepositoryStatesFiltersOrderColumnDescription ERepositoryStatesFiltersOrderColumn = "Description"
	ERepositoryStatesFiltersOrderColumnFreeGB      ERepositoryStatesFiltersOrderColumn = "FreeGB"
	ERepositoryStatesFiltersOrderColumnHost        ERepositoryStatesFiltersOrderColumn = "Host"
	ERepositoryStatesFiltersOrderColumnName        ERepositoryStatesFiltersOrderColumn = "Name"
	ERepositoryStatesFiltersOrderColumnPath        ERepositoryStatesFiltersOrderColumn = "Path"
	ERepositoryStatesFiltersOrderColumnType        ERepositoryStatesFiltersOrderColumn = "Type"
	ERepositoryStatesFiltersOrderColumnUsedSpaceGB ERepositoryStatesFiltersOrderColumn = "UsedSpaceGB"
)

// Defines values for ERepositoryType.
const (
	AmazonS3               ERepositoryType = "AmazonS3"
	AmazonS3Glacier        ERepositoryType = "AmazonS3Glacier"
	AmazonSnowballEdge     ERepositoryType = "AmazonSnowballEdge"
	AzureArchive           ERepositoryType = "AzureArchive"
	AzureBlob              ERepositoryType = "AzureBlob"
	AzureDataBox           ERepositoryType = "AzureDataBox"
	DDBoost                ERepositoryType = "DDBoost"
	ExaGrid                ERepositoryType = "ExaGrid"
	ExtendableRepository   ERepositoryType = "ExtendableRepository"
	Fujitsu                ERepositoryType = "Fujitsu"
	GoogleCloud            ERepositoryType = "GoogleCloud"
	HPStoreOnceIntegration ERepositoryType = "HPStoreOnceIntegration"
	IBMCloud               ERepositoryType = "IBMCloud"
	Infinidat              ERepositoryType = "Infinidat"
	LinuxHardened          ERepositoryType = "LinuxHardened"
	LinuxLocal             ERepositoryType = "LinuxLocal"
	Nfs                    ERepositoryType = "Nfs"
	Quantum                ERepositoryType = "Quantum"
	S3Compatible           ERepositoryType = "S3Compatible"
	Smb                    ERepositoryType = "Smb"
	WasabiCloud            ERepositoryType = "WasabiCloud"
	WinLocal               ERepositoryType = "WinLocal"
)

// Defines values for ERetainLogBackupsType.
const (
	KeepOnlyDays       ERetainLogBackupsType = "KeepOnlyDays"
	UntilBackupDeleted ERetainLogBackupsType = "untilBackupDeleted"
)

// Defines values for ERetentionPolicyType.
const (
	ERetentionPolicyTypeDays          ERetentionPolicyType = "Days"
	ERetentionPolicyTypeRestorePoints ERetentionPolicyType = "RestorePoints"
)

// Defines values for ERotatedDriveCleanupMode.
const (
	ERotatedDriveCleanupModeClearBackupFolder     ERotatedDriveCleanupMode = "ClearBackupFolder"
	ERotatedDriveCleanupModeClearRepositoryFolder ERotatedDriveCleanupMode = "ClearRepositoryFolder"
	ERotatedDriveCleanupModeDisabled              ERotatedDriveCleanupMode = "Disabled"
)

// Defines values for ESQLLogsProcessing.
const (
	Backup        ESQLLogsProcessing = "backup"
	NeverTruncate ESQLLogsProcessing = "neverTruncate"
	Preserve      ESQLLogsProcessing = "preserve"
	Truncate      ESQLLogsProcessing = "truncate"
)

// Defines values for EScaleOutRepositoryFiltersOrderColumn.
const (
	EScaleOutRepositoryFiltersOrderColumnDescription EScaleOutRepositoryFiltersOrderColumn = "Description"
	EScaleOutRepositoryFiltersOrderColumnHost        EScaleOutRepositoryFiltersOrderColumn = "Host"
	EScaleOutRepositoryFiltersOrderColumnName        EScaleOutRepositoryFiltersOrderColumn = "Name"
	EScaleOutRepositoryFiltersOrderColumnPath        EScaleOutRepositoryFiltersOrderColumn = "Path"
	EScaleOutRepositoryFiltersOrderColumnType        EScaleOutRepositoryFiltersOrderColumn = "Type"
)

// Defines values for EScriptPeriodicityType.
const (
	BackupSessions EScriptPeriodicityType = "BackupSessions"
	Days           EScriptPeriodicityType = "Days"
)

// Defines values for ESennightOfMonth.
const (
	ESennightOfMonthFifth  ESennightOfMonth = "Fifth"
	ESennightOfMonthFirst  ESennightOfMonth = "First"
	ESennightOfMonthFourth ESennightOfMonth = "Fourth"
	ESennightOfMonthLast   ESennightOfMonth = "Last"
	ESennightOfMonthSecond ESennightOfMonth = "Second"
	ESennightOfMonthThird  ESennightOfMonth = "Third"
)

// Defines values for EServicesFiltersOrderColumn.
const (
	EServicesFiltersOrderColumnName EServicesFiltersOrderColumn = "Name"
	EServicesFiltersOrderColumnPort EServicesFiltersOrderColumn = "Port"
)

// Defines values for ESessionResult.
const (
	ESessionResultFailed  ESessionResult = "Failed"
	ESessionResultNone    ESessionResult = "None"
	ESessionResultSuccess ESessionResult = "Success"
	ESessionResultWarning ESessionResult = "Warning"
)

// Defines values for ESessionState.
const (
	Idle              ESessionState = "Idle"
	Pausing           ESessionState = "Pausing"
	Postprocessing    ESessionState = "Postprocessing"
	Resuming          ESessionState = "Resuming"
	Starting          ESessionState = "Starting"
	Stopped           ESessionState = "Stopped"
	Stopping          ESessionState = "Stopping"
	WaitingRepository ESessionState = "WaitingRepository"
	WaitingSlot       ESessionState = "WaitingSlot"
	WaitingTape       ESessionState = "WaitingTape"
	Working           ESessionState = "Working"
)

// Defines values for ESessionType.
const (
	Automation                   ESessionType = "Automation"
	AzureApplianceDeploy         ESessionType = "AzureApplianceDeploy"
	ConfigurationBackup          ESessionType = "ConfigurationBackup"
	FirstClassDiskInstantRestore ESessionType = "FirstClassDiskInstantRestore"
	Infrastructure               ESessionType = "Infrastructure"
	InfrastructureItemDeletion   ESessionType = "InfrastructureItemDeletion"
	InstantRecovery              ESessionType = "InstantRecovery"
	Job                          ESessionType = "Job"
	QuickMigration               ESessionType = "QuickMigration"
	RepositoryEvacuate           ESessionType = "RepositoryEvacuate"
	RepositoryMaintenance        ESessionType = "RepositoryMaintenance"
	RestoreVm                    ESessionType = "RestoreVm"
)

// Defines values for ESessionsFiltersOrderColumn.
const (
	ESessionsFiltersOrderColumnCreationTime ESessionsFiltersOrderColumn = "CreationTime"
	ESessionsFiltersOrderColumnEndTime      ESessionsFiltersOrderColumn = "EndTime"
	ESessionsFiltersOrderColumnName         ESessionsFiltersOrderColumn = "Name"
	ESessionsFiltersOrderColumnResult       ESessionsFiltersOrderColumn = "Result"
	ESessionsFiltersOrderColumnSessionType  ESessionsFiltersOrderColumn = "SessionType"
	ESessionsFiltersOrderColumnState        ESessionsFiltersOrderColumn = "State"
)

// Defines values for ESpeedUnit.
const (
	KbytePerSec ESpeedUnit = "KbytePerSec"
	MbitPerSpec ESpeedUnit = "MbitPerSpec"
	MbytePerSec ESpeedUnit = "MbytePerSec"
)

// Defines values for EStorageOptimization.
const (
	LANTarget            EStorageOptimization = "LANTarget"
	LocalTarget          EStorageOptimization = "LocalTarget"
	LocalTargetLarge     EStorageOptimization = "LocalTargetLarge"
	LocalTargetLarge4096 EStorageOptimization = "LocalTargetLarge4096"
	LocalTargetLarge8192 EStorageOptimization = "LocalTargetLarge8192"
	WANTarget            EStorageOptimization = "WANTarget"
)

// Defines values for ETaskLogRecordStatus.
const (
	Failed    ETaskLogRecordStatus = "Failed"
	None      ETaskLogRecordStatus = "None"
	Succeeded ETaskLogRecordStatus = "Succeeded"
	Warning   ETaskLogRecordStatus = "Warning"
)

// Defines values for ETransactionLogsSettings.
const (
	CopyOnly ETransactionLogsSettings = "copyOnly"
	Process  ETransactionLogsSettings = "process"
)

// Defines values for EViHostType.
const (
	ESX  EViHostType = "ESX"
	ESXi EViHostType = "ESXi"
	VC   EViHostType = "VC"
)

// Defines values for EViRootFiltersOrderColumn.
const (
	EViRootFiltersOrderColumnName EViRootFiltersOrderColumn = "Name"
	EViRootFiltersOrderColumnType EViRootFiltersOrderColumn = "Type"
)

// Defines values for EVirusDetectionAction.
const (
	AbortRecovery  EVirusDetectionAction = "AbortRecovery"
	DisableNetwork EVirusDetectionAction = "DisableNetwork"
	Ignore         EVirusDetectionAction = "Ignore"
)

// Defines values for EVmwareDisksTypeToProcess.
const (
	AllDisks      EVmwareDisksTypeToProcess = "AllDisks"
	SelectedDisks EVmwareDisksTypeToProcess = "SelectedDisks"
	SystemOnly    EVmwareDisksTypeToProcess = "SystemOnly"
)

// Defines values for EVmwareFcdInstantRecoveryMountsFiltersOrderColumn.
const (
	EVmwareFcdInstantRecoveryMountsFiltersOrderColumnName  EVmwareFcdInstantRecoveryMountsFiltersOrderColumn = "name"
	EVmwareFcdInstantRecoveryMountsFiltersOrderColumnState EVmwareFcdInstantRecoveryMountsFiltersOrderColumn = "state"
)

// Defines values for EVmwareInventoryType.
const (
	EVmwareInventoryTypeCategory         EVmwareInventoryType = "Category"
	EVmwareInventoryTypeCluster          EVmwareInventoryType = "Cluster"
	EVmwareInventoryTypeComputeResource  EVmwareInventoryType = "ComputeResource"
	EVmwareInventoryTypeDatacenter       EVmwareInventoryType = "Datacenter"
	EVmwareInventoryTypeDatastore        EVmwareInventoryType = "Datastore"
	EVmwareInventoryTypeDatastoreCluster EVmwareInventoryType = "DatastoreCluster"
	EVmwareInventoryTypeFolder           EVmwareInventoryType = "Folder"
	EVmwareInventoryTypeHost             EVmwareInventoryType = "Host"
	EVmwareInventoryTypeMultitag         EVmwareInventoryType = "Multitag"
	EVmwareInventoryTypeNetwork          EVmwareInventoryType = "Network"
	EVmwareInventoryTypeResourcePool     EVmwareInventoryType = "ResourcePool"
	EVmwareInventoryTypeStoragePolicy    EVmwareInventoryType = "StoragePolicy"
	EVmwareInventoryTypeTag              EVmwareInventoryType = "Tag"
	EVmwareInventoryTypeTemplate         EVmwareInventoryType = "Template"
	EVmwareInventoryTypeUnknown          EVmwareInventoryType = "Unknown"
	EVmwareInventoryTypeVCenterServer    EVmwareInventoryType = "vCenterServer"
	EVmwareInventoryTypeVirtualApp       EVmwareInventoryType = "VirtualApp"
	EVmwareInventoryTypeVirtualMachine   EVmwareInventoryType = "VirtualMachine"
)

// Defines values for EWindowsHostComponentType.
const (
	EWindowsHostComponentTypeAgentConfigureService          EWindowsHostComponentType = "AgentConfigureService"
	EWindowsHostComponentTypeCdp                            EWindowsHostComponentType = "Cdp"
	EWindowsHostComponentTypeCloudGate                      EWindowsHostComponentType = "CloudGate"
	EWindowsHostComponentTypeCloudServiceInvoker            EWindowsHostComponentType = "CloudServiceInvoker"
	EWindowsHostComponentTypeCloudServiceRemoting           EWindowsHostComponentType = "CloudServiceRemoting"
	EWindowsHostComponentTypeDeployerSvc                    EWindowsHostComponentType = "DeployerSvc"
	EWindowsHostComponentTypeEpAgent                        EWindowsHostComponentType = "EpAgent"
	EWindowsHostComponentTypeEpAgentSharedManagementObjects EWindowsHostComponentType = "EpAgentSharedManagementObjects"
	EWindowsHostComponentTypeEpAgentSqlLocalDB              EWindowsHostComponentType = "EpAgentSqlLocalDB"
	EWindowsHostComponentTypeEpAgentSqlSysClrTypes          EWindowsHostComponentType = "EpAgentSqlSysClrTypes"
	EWindowsHostComponentTypeFileSystemVssIntegration       EWindowsHostComponentType = "FileSystemVssIntegration"
	EWindowsHostComponentTypeGuestControl                   EWindowsHostComponentType = "GuestControl"
	EWindowsHostComponentTypeHvIntegration                  EWindowsHostComponentType = "HvIntegration"
	EWindowsHostComponentTypeNfs                            EWindowsHostComponentType = "Nfs"
	EWindowsHostComponentTypeRestoreProxy                   EWindowsHostComponentType = "RestoreProxy"
	EWindowsHostComponentTypeTape                           EWindowsHostComponentType = "Tape"
	EWindowsHostComponentTypeTransport                      EWindowsHostComponentType = "Transport"
	EWindowsHostComponentTypeValRedist                      EWindowsHostComponentType = "ValRedist"
	EWindowsHostComponentTypeVamRedist                      EWindowsHostComponentType = "VamRedist"
	EWindowsHostComponentTypeVawRedist                      EWindowsHostComponentType = "VawRedist"
	EWindowsHostComponentTypeVssHwSnapshotProvider          EWindowsHostComponentType = "VssHwSnapshotProvider"
	EWindowsHostComponentTypeWanAccelerator                 EWindowsHostComponentType = "WanAccelerator"
)

// Defines values for ErrorErrorCode.
const (
	ErrorErrorCodeAccessDenied       ErrorErrorCode = "AccessDenied"
	ErrorErrorCodeExpiredToken       ErrorErrorCode = "ExpiredToken"
	ErrorErrorCodeInvalidToken       ErrorErrorCode = "InvalidToken"
	ErrorErrorCodeInvalidURI         ErrorErrorCode = "InvalidURI"
	ErrorErrorCodeMethodNotAllowed   ErrorErrorCode = "MethodNotAllowed"
	ErrorErrorCodeNotFound           ErrorErrorCode = "NotFound"
	ErrorErrorCodeNotImplemented     ErrorErrorCode = "NotImplemented"
	ErrorErrorCodeServiceUnavailable ErrorErrorCode = "ServiceUnavailable"
	ErrorErrorCodeUnexpectedContent  ErrorErrorCode = "UnexpectedContent"
	ErrorErrorCodeUnknownError       ErrorErrorCode = "UnknownError"
)

// Defines values for EvCentersInventoryFiltersOrderColumn.
const (
	Name     EvCentersInventoryFiltersOrderColumn = "Name"
	ObjectId EvCentersInventoryFiltersOrderColumn = "ObjectId"
	Type     EvCentersInventoryFiltersOrderColumn = "Type"
)

// ActiveFullSettingsModel Active full backup settings.
type ActiveFullSettingsModel struct {
	// IsEnabled If *true*, active full backups are enabled.
	IsEnabled bool `json:"isEnabled"`

	// Monthly Monthly schedule settings.
	Monthly *AdvancedStorageScheduleMonthlyModel `json:"monthly,omitempty"`

	// Weekly Weekly schedule settings.
	Weekly *AdvancedStorageScheduleWeeklyModel `json:"weekly,omitempty"`
}

// AdvancedSmtpOptionsModel Advanced global email notification settings.
type AdvancedSmtpOptionsModel struct {
	// SSLEnabled If *true*, secure connection for email operations is used.
	SSLEnabled bool `json:"SSLEnabled"`

	// AuthRequired If *true*, the `credentialsId` credentials are used to connect to the SMTP server.
	AuthRequired bool `json:"authRequired"`

	// CredentialsId ID of the credentials used to connect to the server.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// Port Port number for the SMTP server.
	Port int32 `json:"port"`

	// TimeoutMs Connection timeout for the SMTP server.
	TimeoutMs int32 `json:"timeoutMs"`
}

// AdvancedStorageScheduleMonthlyModel Monthly schedule settings.
type AdvancedStorageScheduleMonthlyModel struct {
	// DayNumberInMonth Week day number in the month.
	DayNumberInMonth *EDayNumberInMonth `json:"dayNumberInMonth,omitempty"`

	// DayOfMonths Day of the month when the operation is performed.
	DayOfMonths *int `json:"dayOfMonths,omitempty"`

	// DayOfWeek Day of the week.
	DayOfWeek *EDayOfWeek `json:"dayOfWeek,omitempty"`

	// IsEnabled If *true*, the monthly schedule is enabled.
	IsEnabled bool `json:"isEnabled"`

	// Months Months when the operation is performed.
	Months *[]EMonth `json:"months,omitempty"`
}

// AdvancedStorageScheduleWeeklyModel Weekly schedule settings.
type AdvancedStorageScheduleWeeklyModel struct {
	// Days Days of the week when the operation is performed.
	Days *[]EDayOfWeek `json:"days,omitempty"`

	// IsEnabled If *true*, the weekly schedule is enabled.
	IsEnabled bool `json:"isEnabled"`
}

// AmazonCloudCredentialsImportSpec defines model for AmazonCloudCredentialsImportSpec.
type AmazonCloudCredentialsImportSpec struct {
	// AccessKey ID of the access key.
	AccessKey string `json:"accessKey"`

	// Description Description of the cloud credentials record.
	Description *string `json:"description,omitempty"`

	// SecretKey Secret key.
	SecretKey string `json:"secretKey"`

	// Tag Tag used to identify the cloud credentials record.
	Tag string `json:"tag"`

	// Type Cloud credentials type.
	Type ECloudCredentialsType `json:"type"`
}

// AmazonCloudCredentialsModel defines model for AmazonCloudCredentialsModel.
type AmazonCloudCredentialsModel struct {
	// AccessKey ID of the access key.
	AccessKey string `json:"accessKey"`

	// Description Description of the cloud credentials record.
	Description *string `json:"description,omitempty"`

	// Id ID of the cloud credentials record.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Tag Tag used to identify the cloud credentials record.
	Tag *string `json:"tag,omitempty"`

	// Type Cloud credentials type.
	Type *ECloudCredentialsType `json:"type,omitempty"`
}

// AmazonCloudCredentialsSpec defines model for AmazonCloudCredentialsSpec.
type AmazonCloudCredentialsSpec struct {
	// AccessKey ID of the access key.
	AccessKey string `json:"accessKey"`

	// Description Description of the cloud credentials record.
	Description *string `json:"description,omitempty"`

	// SecretKey Secret key.
	SecretKey string `json:"secretKey"`

	// Tag Tag used to identify the cloud credentials record.
	Tag *string `json:"tag,omitempty"`

	// Type Cloud credentials type.
	Type *ECloudCredentialsType `json:"type,omitempty"`
}

// AmazonEC2BrowserFilters Amazon EC2 hierarchy filters.
type AmazonEC2BrowserFilters struct {
	// RegionId Filters Amazon EC2 resources by AWS region.
	RegionId string `json:"regionId"`
}

// AmazonEC2BrowserModel defines model for AmazonEC2BrowserModel.
type AmazonEC2BrowserModel struct {
	// CredentialsId ID of the cloud credentials record.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// HostId ID of a server used to connect to the object storage.
	HostId openapi_types.UUID `json:"hostId"`

	// RegionType AWS region type.
	RegionType EAmazonRegionType `json:"regionType"`

	// Regions Array of regions.
	Regions []AmazonEC2RegionBrowserModel `json:"regions"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// AmazonEC2BrowserSpec defines model for AmazonEC2BrowserSpec.
type AmazonEC2BrowserSpec struct {
	// CredentialsId ID of the object storage account (for browsing either storage or compute infrastructure).
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// Filters Amazon EC2 hierarchy filters.
	Filters *AmazonEC2BrowserFilters `json:"filters,omitempty"`

	// RegionType AWS region type.
	RegionType EAmazonRegionType `json:"regionType"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// AmazonEC2RegionBrowserModel defines model for AmazonEC2RegionBrowserModel.
type AmazonEC2RegionBrowserModel struct {
	// InstanceTypes Array of Amazon instance types.
	InstanceTypes *[]string `json:"instanceTypes,omitempty"`

	// RegionId Region ID.
	RegionId *string `json:"regionId,omitempty"`

	// Vpcs Array of Amazon Virtual Private Cloud (Amazon VPC) networks.
	Vpcs *[]AmazonVPCBrowserModel `json:"vpcs,omitempty"`
}

// AmazonS3BrowserDestinationSpec defines model for AmazonS3BrowserDestinationSpec.
type AmazonS3BrowserDestinationSpec struct {
	// BucketName Name of the bucket where you want to store your backup data.
	BucketName string `json:"bucketName"`

	// CredentialsId ID of a cloud credentials record requiered to connect to the object storage.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// FolderType Folder type.
	FolderType *ECloudBrowserFolderType `json:"folderType,omitempty"`

	// HostId ID of a server you want to use to connect to the object storage. You can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.
	HostId *openapi_types.UUID `json:"hostId,omitempty"`

	// NewFolderName Name of the new folder.
	NewFolderName *string `json:"newFolderName,omitempty"`

	// RegionId AWS region where the Amazon S3 bucket is located.
	RegionId string `json:"regionId"`

	// RegionType AWS region type.
	RegionType EAmazonRegionType `json:"regionType"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// AmazonS3BrowserModel defines model for AmazonS3BrowserModel.
type AmazonS3BrowserModel struct {
	// CredentialsId ID of the cloud credentials record.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// HostId ID of a server used to connect to the object storage.
	HostId openapi_types.UUID `json:"hostId"`

	// RegionType AWS region type.
	RegionType EAmazonRegionType `json:"regionType"`

	// Regions Array of AWS regions belonged to the region type.
	Regions *[]AmazonS3RegionBrowserModel `json:"regions,omitempty"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// AmazonS3BrowserSpec defines model for AmazonS3BrowserSpec.
type AmazonS3BrowserSpec struct {
	// CredentialsId ID of the object storage account (for browsing either storage or compute infrastructure).
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// Filters Amazon S3 hierarchy filters.
	Filters *AmazonS3CloudBrowserFilters `json:"filters,omitempty"`

	// FolderType Folder type.
	FolderType *ECloudBrowserFolderType `json:"folderType,omitempty"`

	// GatewayServerId ID of a gateway server you want to use to connect to the object storage. Specify this parameter to check internet connection of the server. As a gateway server you can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.
	GatewayServerId *openapi_types.UUID `json:"gatewayServerId,omitempty"`

	// RegionType AWS region type.
	RegionType EAmazonRegionType `json:"regionType"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// AmazonS3BucketBrowserModel defines model for AmazonS3BucketBrowserModel.
type AmazonS3BucketBrowserModel struct {
	// Folders Array of folders located in the bucket.
	Folders *[]string `json:"folders,omitempty"`

	// Name Bucket name.
	Name *string `json:"name,omitempty"`
}

// AmazonS3CloudBrowserFilters Amazon S3 hierarchy filters.
type AmazonS3CloudBrowserFilters struct {
	// BucketName Filters buckets by bucket name.
	BucketName *string `json:"bucketName,omitempty"`

	// RegionId Filters buckets by AWS region where an Amazon S3 data center is located.
	RegionId string `json:"regionId"`
}

// AmazonS3GlacierStorageBucketModel Amazon S3 Glacier bucket where backup data is stored.
type AmazonS3GlacierStorageBucketModel struct {
	// BucketName Name of an Amazon S3 Glacier bucket.
	BucketName string `json:"bucketName"`

	// FolderName Name of the folder that the object storage repository is mapped to.
	FolderName string `json:"folderName"`

	// ImmutabilityEnabled If *true*, storage immutability is enabled.
	ImmutabilityEnabled *bool `json:"immutabilityEnabled,omitempty"`

	// RegionId ID of a region where the Amazon S3 bucket is located.
	RegionId string `json:"regionId"`

	// UseDeepArchive If *true*, Glacier Deep Archive is used for backups with the retention policy over 180 days.
	UseDeepArchive *bool `json:"useDeepArchive,omitempty"`
}

// AmazonS3GlacierStorageImportSpec defines model for AmazonS3GlacierStorageImportSpec.
type AmazonS3GlacierStorageImportSpec struct {
	// Account Account used to access the Amazon S3 storage.
	Account AmazonS3StorageAccountImportModel `json:"account"`

	// Bucket Amazon S3 Glacier bucket where backup data is stored.
	Bucket AmazonS3GlacierStorageBucketModel `json:"bucket"`

	// Description Description of the object storage repository.
	Description string `json:"description"`

	// Name Name of the object storage repository.
	Name string `json:"name"`

	// ProxyAppliance Amazon S3 proxy appliance.
	ProxyAppliance *AmazonS3StorageProxyApplianceModel `json:"proxyAppliance,omitempty"`

	// Tag Tag that identifies the object storage repository.
	Tag string `json:"tag"`

	// Type Repository type.
	Type ERepositoryType `json:"type"`
}

// AmazonS3GlacierStorageModel defines model for AmazonS3GlacierStorageModel.
type AmazonS3GlacierStorageModel struct {
	// Account Account used to access the Amazon S3 storage.
	Account AmazonS3StorageAccountModel `json:"account"`

	// Bucket Amazon S3 Glacier bucket where backup data is stored.
	Bucket AmazonS3GlacierStorageBucketModel `json:"bucket"`

	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// Id ID of the backup repository.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// ProxyAppliance Amazon S3 proxy appliance.
	ProxyAppliance *AmazonS3StorageProxyApplianceModel `json:"proxyAppliance,omitempty"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// AmazonS3GlacierStorageSpec defines model for AmazonS3GlacierStorageSpec.
type AmazonS3GlacierStorageSpec struct {
	// Account Account used to access the Amazon S3 storage.
	Account AmazonS3StorageAccountModel `json:"account"`

	// Bucket Amazon S3 Glacier bucket where backup data is stored.
	Bucket AmazonS3GlacierStorageBucketModel `json:"bucket"`

	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// ProxyAppliance Amazon S3 proxy appliance.
	ProxyAppliance *AmazonS3StorageProxyApplianceModel `json:"proxyAppliance,omitempty"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// AmazonS3IAStorageModel Standard Infrequent Access.
type AmazonS3IAStorageModel struct {
	// IsEnabled If *true*, Standard Infrequent Access is enabled.
	IsEnabled *bool `json:"isEnabled,omitempty"`

	// SingleZoneEnabled If *true*, Amazon S3 One Zone-Infrequent Access is enabled.
	SingleZoneEnabled *bool `json:"singleZoneEnabled,omitempty"`
}

// AmazonS3RegionBrowserModel AWS region.
type AmazonS3RegionBrowserModel struct {
	// Buckets Array of buckets located in the region.
	Buckets *[]AmazonS3BucketBrowserModel `json:"buckets,omitempty"`

	// Id Region ID.
	Id *string `json:"id,omitempty"`

	// Name Region name.
	Name *string `json:"name,omitempty"`
}

// AmazonS3StorageAccountImportModel Account used to access the Amazon S3 storage.
type AmazonS3StorageAccountImportModel struct {
	// ConnectionSettings Object storage connection settings.
	ConnectionSettings ObjectStorageConnectionImportSpec `json:"connectionSettings"`

	// Credentials Cloud credentials used for connection.
	Credentials CloudCredentialsImportModel `json:"credentials"`

	// RegionType AWS region type.
	RegionType EAmazonRegionType `json:"regionType"`
}

// AmazonS3StorageAccountModel Account used to access the Amazon S3 storage.
type AmazonS3StorageAccountModel struct {
	// ConnectionSettings Object storage connection settings.
	ConnectionSettings *ObjectStorageConnectionModel `json:"connectionSettings,omitempty"`

	// CredentialsId ID of the cloud credentials record.
	CredentialsId openapi_types.UUID `json:"credentialsId"`

	// RegionType AWS region type.
	RegionType EAmazonRegionType `json:"regionType"`
}

// AmazonS3StorageBucketModel Amazon S3 bucket where backup data is stored.
type AmazonS3StorageBucketModel struct {
	// BucketName Name of an Amazon S3 bucket.
	BucketName string `json:"bucketName"`

	// FolderName Name of the folder that the object storage repository is mapped to.
	FolderName string `json:"folderName"`

	// Immutability Object storage immutability.
	Immutability *ObjectStorageImmutabilityModel `json:"immutability,omitempty"`

	// InfrequentAccessStorage Standard Infrequent Access.
	InfrequentAccessStorage *AmazonS3IAStorageModel `json:"infrequentAccessStorage,omitempty"`

	// RegionId ID of a region where the Amazon S3 bucket is located.
	RegionId string `json:"regionId"`

	// StorageConsumptionLimit Soft consumption limit for the storage. The limit can be exceeded temporarily.
	StorageConsumptionLimit *ObjectStorageConsumptionLimitModel `json:"storageConsumptionLimit,omitempty"`
}

// AmazonS3StorageImportSpec defines model for AmazonS3StorageImportSpec.
type AmazonS3StorageImportSpec struct {
	// Account Account used to access the Amazon S3 storage.
	Account AmazonS3StorageAccountImportModel `json:"account"`

	// Bucket Amazon S3 bucket where backup data is stored.
	Bucket AmazonS3StorageBucketModel `json:"bucket"`

	// Description Description of the object storage repository.
	Description string `json:"description"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsImportSpec `json:"mountServer"`

	// Name Name of the object storage repository.
	Name string `json:"name"`

	// ProxyAppliance Amazon S3 proxy appliance.
	ProxyAppliance *AmazonS3StorageProxyApplianceModel `json:"proxyAppliance,omitempty"`

	// Tag Tag that identifies the object storage repository.
	Tag string `json:"tag"`

	// Type Repository type.
	Type ERepositoryType `json:"type"`
}

// AmazonS3StorageModel defines model for AmazonS3StorageModel.
type AmazonS3StorageModel struct {
	// Account Account used to access the Amazon S3 storage.
	Account AmazonS3StorageAccountModel `json:"account"`

	// Bucket Amazon S3 bucket where backup data is stored.
	Bucket AmazonS3StorageBucketModel `json:"bucket"`

	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// Id ID of the backup repository.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsModel `json:"mountServer"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// ProxyAppliance Amazon S3 proxy appliance.
	ProxyAppliance *AmazonS3StorageProxyApplianceModel `json:"proxyAppliance,omitempty"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// AmazonS3StorageProxyApplianceModel Amazon S3 proxy appliance.
type AmazonS3StorageProxyApplianceModel struct {
	// Ec2InstanceType EC2 instance type for the proxy appliance.
	Ec2InstanceType *string `json:"ec2InstanceType,omitempty"`

	// RedirectorPort TCP port used to route requests between the proxy appliance and backup infrastructure components.
	RedirectorPort *int `json:"redirectorPort,omitempty"`

	// SecurityGroup Security group associated with the proxy appliance.
	SecurityGroup *string `json:"securityGroup,omitempty"`

	// Subnet Subnet for the proxy appliance.
	Subnet *string `json:"subnet,omitempty"`

	// Vpc Amazon VPC where Veeam Backup & Replication launches the target instance.
	Vpc *string `json:"vpc,omitempty"`
}

// AmazonS3StorageSpec defines model for AmazonS3StorageSpec.
type AmazonS3StorageSpec struct {
	// Account Account used to access the Amazon S3 storage.
	Account AmazonS3StorageAccountModel `json:"account"`

	// Bucket Amazon S3 bucket where backup data is stored.
	Bucket AmazonS3StorageBucketModel `json:"bucket"`

	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsModel `json:"mountServer"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// ProxyAppliance Amazon S3 proxy appliance.
	ProxyAppliance *AmazonS3StorageProxyApplianceModel `json:"proxyAppliance,omitempty"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// AmazonSnowballEdgeBrowserDestinationSpec defines model for AmazonSnowballEdgeBrowserDestinationSpec.
type AmazonSnowballEdgeBrowserDestinationSpec struct {
	// BucketName Name of the bucket where you want to store your backup data.
	BucketName string `json:"bucketName"`

	// ConnectionPoint Service point address and port number of the AWS Snowball Edge device.
	ConnectionPoint string `json:"connectionPoint"`

	// CredentialsId ID of a cloud credentials record requiered to connect to the object storage.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// HostId ID of a server you want to use to connect to the object storage. You can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.
	HostId *openapi_types.UUID `json:"hostId,omitempty"`

	// NewFolderName Name of the new folder.
	NewFolderName *string `json:"newFolderName,omitempty"`

	// RegionId For AWS Snowball Edge, the region is *snow*.
	RegionId string `json:"regionId"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// AmazonSnowballEdgeBrowserModel defines model for AmazonSnowballEdgeBrowserModel.
type AmazonSnowballEdgeBrowserModel struct {
	// ConnectionPoint Service point address and port number of the AWS Snowball Edge device.
	ConnectionPoint *string `json:"connectionPoint,omitempty"`

	// CredentialsId ID of the cloud credentials record.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// HostId ID of a server used to connect to the AWS Snowball Edge device.
	HostId *openapi_types.UUID `json:"hostId,omitempty"`

	// Regions Array of regions.
	Regions *[]AmazonSnowballEdgeRegionBrowserModel `json:"regions,omitempty"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// AmazonSnowballEdgeBrowserSpec defines model for AmazonSnowballEdgeBrowserSpec.
type AmazonSnowballEdgeBrowserSpec struct {
	// CredentialsId ID of the object storage account (for browsing either storage or compute infrastructure).
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// GatewayServerId ID of a gateway server you want to use to connect to the object storage. Specify this parameter to check internet connection of the server. As a gateway server you can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.
	GatewayServerId *openapi_types.UUID `json:"gatewayServerId,omitempty"`

	// RegionId To connect to the AWS Snowball Edge device, specify the `snow` value.
	RegionId *string `json:"regionId,omitempty"`

	// ServicePoint Service point address and port number of the AWS Snowball Edge device.
	ServicePoint *string `json:"servicePoint,omitempty"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// AmazonSnowballEdgeBucketBrowserModel defines model for AmazonSnowballEdgeBucketBrowserModel.
type AmazonSnowballEdgeBucketBrowserModel struct {
	// Folders Array of folders located in the bucket.
	Folders *[]string `json:"folders,omitempty"`

	// Name Bucket name.
	Name *string `json:"name,omitempty"`
}

// AmazonSnowballEdgeRegionBrowserModel defines model for AmazonSnowballEdgeRegionBrowserModel.
type AmazonSnowballEdgeRegionBrowserModel struct {
	// Buckets Array of buckets located in the region.
	Buckets *[]AmazonSnowballEdgeBucketBrowserModel `json:"buckets,omitempty"`

	// Id Region ID.
	Id *string `json:"id,omitempty"`

	// Name Region name.
	Name *string `json:"name,omitempty"`
}

// AmazonSnowballEdgeStorageAccountImportModel AWS account used to access the AWS Snowball Edge storage.
type AmazonSnowballEdgeStorageAccountImportModel struct {
	// ConnectionSettings Object storage connection settings.
	ConnectionSettings ObjectStorageConnectionImportSpec `json:"connectionSettings"`

	// Credentials Cloud credentials used for connection.
	Credentials CloudCredentialsImportModel `json:"credentials"`

	// RegionId For AWS Snowball Edge, the region is *snow*.
	RegionId string `json:"regionId"`

	// ServicePoint Service point address and port number of the AWS Snowball Edge device.
	ServicePoint string `json:"servicePoint"`
}

// AmazonSnowballEdgeStorageAccountModel AWS account used to access the AWS Snowball Edge storage.
type AmazonSnowballEdgeStorageAccountModel struct {
	// ConnectionSettings Object storage connection settings.
	ConnectionSettings *ObjectStorageConnectionModel `json:"connectionSettings,omitempty"`

	// CredentialsId ID of the cloud credentials record.
	CredentialsId openapi_types.UUID `json:"credentialsId"`

	// RegionId For AWS Snowball Edge, the region is `snow`.
	RegionId string `json:"regionId"`

	// ServicePoint Service point address and port number of the AWS Snowball Edge device.
	ServicePoint string `json:"servicePoint"`
}

// AmazonSnowballEdgeStorageBucketModel Amazon S3 bucket.
type AmazonSnowballEdgeStorageBucketModel struct {
	// BucketName Name of the Amazon S3 bucket.
	BucketName *string `json:"bucketName,omitempty"`

	// FolderName Name of the folder that the object storage repository is mapped to.
	FolderName *string `json:"folderName,omitempty"`

	// StorageConsumptionLimit Soft consumption limit for the storage. The limit can be exceeded temporarily.
	StorageConsumptionLimit *ObjectStorageConsumptionLimitModel `json:"storageConsumptionLimit,omitempty"`
}

// AmazonSnowballEdgeStorageImportSpec defines model for AmazonSnowballEdgeStorageImportSpec.
type AmazonSnowballEdgeStorageImportSpec struct {
	// Account AWS account used to access the AWS Snowball Edge storage.
	Account AmazonSnowballEdgeStorageAccountImportModel `json:"account"`

	// Bucket Amazon S3 bucket.
	Bucket AmazonSnowballEdgeStorageBucketModel `json:"bucket"`

	// Description Description of the object storage repository.
	Description string `json:"description"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsImportSpec `json:"mountServer"`

	// Name Name of the object storage repository.
	Name string `json:"name"`

	// Tag Tag that identifies the object storage repository.
	Tag string `json:"tag"`

	// Type Repository type.
	Type ERepositoryType `json:"type"`
}

// AmazonSnowballEdgeStorageModel defines model for AmazonSnowballEdgeStorageModel.
type AmazonSnowballEdgeStorageModel struct {
	// Account AWS account used to access the AWS Snowball Edge storage.
	Account AmazonSnowballEdgeStorageAccountModel `json:"account"`

	// Bucket Amazon S3 bucket.
	Bucket AmazonSnowballEdgeStorageBucketModel `json:"bucket"`

	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// Id ID of the backup repository.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsModel `json:"mountServer"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// AmazonSnowballEdgeStorageSpec defines model for AmazonSnowballEdgeStorageSpec.
type AmazonSnowballEdgeStorageSpec struct {
	// Account AWS account used to access the AWS Snowball Edge storage.
	Account AmazonSnowballEdgeStorageAccountModel `json:"account"`

	// Bucket Amazon S3 bucket.
	Bucket AmazonSnowballEdgeStorageBucketModel `json:"bucket"`

	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsModel `json:"mountServer"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// AmazonVPCBrowserModel defines model for AmazonVPCBrowserModel.
type AmazonVPCBrowserModel struct {
	// SecurityGroups Array of security groups.
	SecurityGroups *[]string `json:"securityGroups,omitempty"`

	// Subnets Array of VPC subnets.
	Subnets *[]string `json:"subnets,omitempty"`

	// VpcName VPC name.
	VpcName *string `json:"vpcName,omitempty"`
}

// ArchiveTierAdvancedSettingsModel Advanced settings of the archive tier.
type ArchiveTierAdvancedSettingsModel struct {
	// ArchiveDeduplicationEnabled If *true*, each backup is stored as a delta to the previous one.
	ArchiveDeduplicationEnabled *bool `json:"archiveDeduplicationEnabled,omitempty"`

	// CostOptimizedArchiveEnabled If *true*, backups are archived as soon as the remaining retention time is above minimum storage period for the repository.
	CostOptimizedArchiveEnabled *bool `json:"costOptimizedArchiveEnabled,omitempty"`
}

// ArchiveTierModel Archive tier.
type ArchiveTierModel struct {
	// AdvancedSettings Advanced settings of the archive tier.
	AdvancedSettings *ArchiveTierAdvancedSettingsModel `json:"advancedSettings,omitempty"`

	// ArchivePeriodDays Number of days after which backup chains on the capacity extent are moved to the archive extent. Specify *0* to offload inactive backup chains on the same day they are created.
	ArchivePeriodDays *int `json:"archivePeriodDays,omitempty"`

	// ExtentId ID of an object storage repository added as an archive extent.
	ExtentId *openapi_types.UUID `json:"extentId,omitempty"`

	// IsEnabled If *true*, the archive tier is enabled.
	IsEnabled bool `json:"isEnabled"`
}

// AuthorizationCodeModel defines model for AuthorizationCodeModel.
type AuthorizationCodeModel struct {
	// Code String that is used to obtain an access token. Lifetime of the authorization code is 60 seconds.
	Code string `json:"code"`
}

// AzureArchiveStorageAccountImportModel Account used to access the Azure Archive storage.
type AzureArchiveStorageAccountImportModel struct {
	// ConnectionSettings Object storage connection settings.
	ConnectionSettings *ObjectStorageConnectionImportSpec `json:"connectionSettings,omitempty"`

	// Credentials Cloud credentials used for connection.
	Credentials CloudCredentialsImportModel `json:"credentials"`

	// RegionType Region where your Microsoft Azure container is located.
	RegionType EAzureRegionType `json:"regionType"`
}

// AzureArchiveStorageAccountModel Account used to access the Azure Archive storage.
type AzureArchiveStorageAccountModel struct {
	// ConnectionSettings Object storage connection settings.
	ConnectionSettings ObjectStorageConnectionModel `json:"connectionSettings"`

	// CredentialsId ID of a cloud credentials record used to access the storage.
	CredentialsId openapi_types.UUID `json:"credentialsId"`

	// RegionType Region where your Microsoft Azure container is located.
	RegionType EAzureRegionType `json:"regionType"`
}

// AzureArchiveStorageContainerModel Azure Archive container where backup data is stored.
type AzureArchiveStorageContainerModel struct {
	// ContainerName Name of an Azure Archive container.
	ContainerName string `json:"containerName"`

	// FolderName Name of the folder that the object storage repository is mapped to.
	FolderName string `json:"folderName"`
}

// AzureArchiveStorageImportSpec defines model for AzureArchiveStorageImportSpec.
type AzureArchiveStorageImportSpec struct {
	// Account Account used to access the Azure Archive storage.
	Account AzureArchiveStorageAccountImportModel `json:"account"`

	// Container Azure Archive container where backup data is stored.
	Container AzureArchiveStorageContainerModel `json:"container"`

	// Description Description of the object storage repository.
	Description string `json:"description"`

	// Name Name of the object storage repository.
	Name string `json:"name"`

	// ProxyAppliance Azure storage proxy appliance.
	ProxyAppliance *AzureStorageProxyModel `json:"proxyAppliance,omitempty"`

	// Tag Tag that identifies the object storage repository.
	Tag string `json:"tag"`

	// Type Repository type.
	Type ERepositoryType `json:"type"`
}

// AzureArchiveStorageModel defines model for AzureArchiveStorageModel.
type AzureArchiveStorageModel struct {
	// Account Account used to access the Azure Archive storage.
	Account AzureArchiveStorageAccountModel `json:"account"`

	// Container Azure Archive container where backup data is stored.
	Container AzureArchiveStorageContainerModel `json:"container"`

	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// Id ID of the backup repository.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// ProxyAppliance Azure storage proxy appliance.
	ProxyAppliance AzureStorageProxyModel `json:"proxyAppliance"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// AzureArchiveStorageSpec defines model for AzureArchiveStorageSpec.
type AzureArchiveStorageSpec struct {
	// Account Account used to access the Azure Archive storage.
	Account AzureArchiveStorageAccountModel `json:"account"`

	// Container Azure Archive container where backup data is stored.
	Container AzureArchiveStorageContainerModel `json:"container"`

	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// ProxyAppliance Azure storage proxy appliance.
	ProxyAppliance AzureStorageProxyModel `json:"proxyAppliance"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// AzureBlobBrowserDestinationSpec defines model for AzureBlobBrowserDestinationSpec.
type AzureBlobBrowserDestinationSpec struct {
	// ContainerName Name of the container where you want to store your backup data.
	ContainerName string `json:"containerName"`

	// CredentialsId ID of a cloud credentials record requiered to connect to the object storage.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// FolderType Folder type.
	FolderType *ECloudBrowserFolderType `json:"folderType,omitempty"`

	// HostId ID of a server you want to use to connect to the object storage. You can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.
	HostId *openapi_types.UUID `json:"hostId,omitempty"`

	// NewFolderName Name of the new folder.
	NewFolderName *string `json:"newFolderName,omitempty"`

	// RegionType Region where your Microsoft Azure container is located.
	RegionType EAzureRegionType `json:"regionType"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// AzureBlobBrowserModel defines model for AzureBlobBrowserModel.
type AzureBlobBrowserModel struct {
	// Containers Array of containers that reside in the Azure storage account.
	Containers *[]AzureBlobContainerBrowserModel `json:"containers,omitempty"`

	// CredentialsId ID of the cloud credentials record.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// HostId ID of a server used to connect to the object storage.
	HostId *openapi_types.UUID `json:"hostId,omitempty"`

	// RegionType Region where your Microsoft Azure container is located.
	RegionType *EAzureRegionType `json:"regionType,omitempty"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// AzureBlobBrowserSpec defines model for AzureBlobBrowserSpec.
type AzureBlobBrowserSpec struct {
	// CredentialsId ID of the object storage account (for browsing either storage or compute infrastructure).
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// FolderType Folder type.
	FolderType *ECloudBrowserFolderType `json:"folderType,omitempty"`

	// GatewayServerId ID of a gateway server you want to use to connect to the object storage. Specify this parameter to check internet connection of the server. As a gateway server you can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.
	GatewayServerId *openapi_types.UUID `json:"gatewayServerId,omitempty"`

	// RegionType Region where your Microsoft Azure container is located.
	RegionType *EAzureRegionType `json:"regionType,omitempty"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// AzureBlobContainerBrowserModel defines model for AzureBlobContainerBrowserModel.
type AzureBlobContainerBrowserModel struct {
	// Folders Array of folders loated in the container.
	Folders *[]string `json:"folders,omitempty"`

	// Name Container name.
	Name *string `json:"name,omitempty"`
}

// AzureBlobStorageAccountImportModel Account used to access the Azure Blob storage.
type AzureBlobStorageAccountImportModel struct {
	// ConnectionSettings Object storage connection settings.
	ConnectionSettings *ObjectStorageConnectionImportSpec `json:"connectionSettings,omitempty"`

	// Credentials Cloud credentials used for connection.
	Credentials CloudCredentialsImportModel `json:"credentials"`

	// RegionType Region where your Microsoft Azure container is located.
	RegionType EAzureRegionType `json:"regionType"`
}

// AzureBlobStorageAccountModel Account used to access the Azure Blob storage.
type AzureBlobStorageAccountModel struct {
	// ConnectionSettings Object storage connection settings.
	ConnectionSettings ObjectStorageConnectionModel `json:"connectionSettings"`

	// CredentialsId ID of the cloud credentials record.
	CredentialsId openapi_types.UUID `json:"credentialsId"`

	// RegionType Region where your Microsoft Azure container is located.
	RegionType EAzureRegionType `json:"regionType"`
}

// AzureBlobStorageContainerModel Azure Blob storage container.
type AzureBlobStorageContainerModel struct {
	// ContainerName Container name.
	ContainerName string `json:"containerName"`

	// FolderName Name of the folder that the object storage repository is mapped to.
	FolderName string `json:"folderName"`

	// StorageConsumptionLimit Soft consumption limit for the storage. The limit can be exceeded temporarily.
	StorageConsumptionLimit *ObjectStorageConsumptionLimitModel `json:"storageConsumptionLimit,omitempty"`
}

// AzureBlobStorageImportSpec defines model for AzureBlobStorageImportSpec.
type AzureBlobStorageImportSpec struct {
	// Account Account used to access the Azure Blob storage.
	Account AzureBlobStorageAccountImportModel `json:"account"`

	// Container Azure Blob storage container.
	Container AzureBlobStorageContainerModel `json:"container"`

	// Description Description of the object storage repository.
	Description string `json:"description"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsImportSpec `json:"mountServer"`

	// Name Name of the object storage repository.
	Name string `json:"name"`

	// ProxyAppliance Azure storage proxy appliance.
	ProxyAppliance *AzureStorageProxyModel `json:"proxyAppliance,omitempty"`

	// Tag Tag that identifies the object storage repository.
	Tag string `json:"tag"`

	// Type Repository type.
	Type ERepositoryType `json:"type"`
}

// AzureBlobStorageModel defines model for AzureBlobStorageModel.
type AzureBlobStorageModel struct {
	// Account Account used to access the Azure Blob storage.
	Account AzureBlobStorageAccountModel `json:"account"`

	// Container Azure Blob storage container.
	Container AzureBlobStorageContainerModel `json:"container"`

	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// Id ID of the backup repository.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsModel `json:"mountServer"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// ProxyAppliance Azure storage proxy appliance.
	ProxyAppliance *AzureStorageProxyModel `json:"proxyAppliance,omitempty"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// AzureBlobStorageSpec defines model for AzureBlobStorageSpec.
type AzureBlobStorageSpec struct {
	// Account Account used to access the Azure Blob storage.
	Account AzureBlobStorageAccountModel `json:"account"`

	// Container Azure Blob storage container.
	Container AzureBlobStorageContainerModel `json:"container"`

	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsModel `json:"mountServer"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// ProxyAppliance Azure storage proxy appliance.
	ProxyAppliance *AzureStorageProxyModel `json:"proxyAppliance,omitempty"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// AzureComputeBrowserFilters Azure Compute hierarchy filters.
type AzureComputeBrowserFilters struct {
	// HasNetworks If *true*, the result contains Azure resource groups with virtual networks only.
	HasNetworks *bool `json:"hasNetworks,omitempty"`

	// Location Filters compute resorces by Azure location name.
	Location *string `json:"location,omitempty"`

	// ShowAllStorageAccounts If *true*, the result contains compute resorces for all storage accounts. If *false*, the result contains compute resorces available for the specified storage account only.
	ShowAllStorageAccounts *bool `json:"showAllStorageAccounts,omitempty"`

	// SubscriptionId Filters compute resorces by ID that Veeam Backup & Replication assigned to the Azure subscription.
	SubscriptionId *string `json:"subscriptionId,omitempty"`
}

// AzureComputeBrowserModel defines model for AzureComputeBrowserModel.
type AzureComputeBrowserModel struct {
	// CredentialsId ID of the cloud credentials record.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// RegionType Azure region type.
	RegionType *string `json:"regionType,omitempty"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`

	// Subscriptions Array of Azure subscriptions associated with the account.
	Subscriptions *[]AzureSubscriptionBrowserModel `json:"subscriptions,omitempty"`
}

// AzureComputeBrowserSpec defines model for AzureComputeBrowserSpec.
type AzureComputeBrowserSpec struct {
	// CredentialsId ID of the object storage account (for browsing either storage or compute infrastructure).
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// Filters Azure Compute hierarchy filters.
	Filters *AzureComputeBrowserFilters `json:"filters,omitempty"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// AzureComputeCloudCredentialsDeploymentModel Environment to restore workloads to.
type AzureComputeCloudCredentialsDeploymentModel struct {
	// DeploymentType Deployment type (global Microsoft Azure or Microsoft Azure Stack Hub).
	DeploymentType EAzureComputeCredentialsDeploymentType `json:"deploymentType"`

	// Region Region where your Microsoft Azure container is located.
	Region *EAzureRegionType `json:"region,omitempty"`
}

// AzureComputeCloudCredentialsImportSpec defines model for AzureComputeCloudCredentialsImportSpec.
type AzureComputeCloudCredentialsImportSpec struct {
	// ConnectionName Name under which the cloud credentials record is shown in Veeam Backup & Replication.
	ConnectionName string `json:"connectionName"`

	// Description Description of the cloud credentials record.
	Description *string `json:"description,omitempty"`

	// ExistingAccount Existing Azure Active Directory application.
	ExistingAccount AzureComputeCredentialsExistingAccountSpec `json:"existingAccount"`

	// Tag Tag used to identify the cloud credentials record.
	Tag string `json:"tag"`

	// Type Cloud credentials type.
	Type ECloudCredentialsType `json:"type"`
}

// AzureComputeCloudCredentialsModel defines model for AzureComputeCloudCredentialsModel.
type AzureComputeCloudCredentialsModel struct {
	// ConnectionName Name under which the cloud credentials record is shown in Veeam Backup & Replication.
	ConnectionName string `json:"connectionName"`

	// Deployment Environment to restore workloads to.
	Deployment AzureComputeCloudCredentialsDeploymentModel `json:"deployment"`

	// Description Description of the cloud credentials record.
	Description *string `json:"description,omitempty"`

	// Id ID of the cloud credentials record.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Subscription Microsoft Azure tenant settings.
	Subscription AzureComputeCloudCredentialsSubscriptionModel `json:"subscription"`

	// Tag Tag used to identify the cloud credentials record.
	Tag *string `json:"tag,omitempty"`

	// Type Cloud credentials type.
	Type *ECloudCredentialsType `json:"type,omitempty"`
}

// AzureComputeCloudCredentialsSpec defines model for AzureComputeCloudCredentialsSpec.
type AzureComputeCloudCredentialsSpec struct {
	// ConnectionName Name under which the cloud credentials record will be shown in Veeam Backup & Replication.
	ConnectionName string `json:"connectionName"`

	// CreationMode Mode that defines whether you want to connect to Azure Active Directory using an existing or a newly created Azure Active Directory application.
	CreationMode EAzureComputeCredentialsCreationMode `json:"creationMode"`

	// Description Description of the cloud credentials record.
	Description *string `json:"description,omitempty"`

	// ExistingAccount Existing Azure Active Directory application.
	ExistingAccount *AzureComputeCredentialsExistingAccountSpec `json:"existingAccount,omitempty"`

	// NewAccount New Azure Active Directory application.
	NewAccount *AzureComputeCredentialsNewAccountSpec `json:"newAccount,omitempty"`

	// Tag Tag used to identify the cloud credentials record.
	Tag *string `json:"tag,omitempty"`

	// Type Cloud credentials type.
	Type *ECloudCredentialsType `json:"type,omitempty"`
}

// AzureComputeCloudCredentialsSubscriptionInfo defines model for AzureComputeCloudCredentialsSubscriptionInfo.
type AzureComputeCloudCredentialsSubscriptionInfo struct {
	// AzureSubscriptionId Original Azure subscription ID.
	AzureSubscriptionId string `json:"azureSubscriptionId"`

	// AzureSubscriptionName Azure subscription name.
	AzureSubscriptionName *string `json:"azureSubscriptionName,omitempty"`

	// Id ID that Veeam Backup & Replication assigned to the Azure subscription.
	Id openapi_types.UUID `json:"id"`
}

// AzureComputeCloudCredentialsSubscriptionModel Microsoft Azure tenant settings.
type AzureComputeCloudCredentialsSubscriptionModel struct {
	// ApplicationId Client ID assigned to the Azure Active Directory application.
	ApplicationId string `json:"applicationId"`

	// Secret (For password-based authentication) Client secret assigned to the Azure Active Directory application.
	Secret *string `json:"secret,omitempty"`

	// Subscriptions Array of Azure subscriptions associated with the account.
	Subscriptions *[]AzureComputeCloudCredentialsSubscriptionInfo `json:"subscriptions,omitempty"`

	// TenantId ID of a tenant where the Azure Active Directory application is registered in.
	TenantId string `json:"tenantId"`
}

// AzureComputeCloudCredentialsSubscriptionSpec Microsoft Azure compute account. For password-based authentication, specify client secret. For certificate-based authentication, specify certificate and password.
type AzureComputeCloudCredentialsSubscriptionSpec struct {
	// ApplicationId Client ID assigned to the Azure Active Directory application.
	ApplicationId string `json:"applicationId"`

	// Certificate Certificate settings (for certificate-based authentication).
	Certificate *CertificateUploadSpec `json:"certificate,omitempty"`

	// Secret (For password-based authentication) Client secret assigned to the Azure Active Directory application.
	Secret *string `json:"secret,omitempty"`

	// TenantId ID of a tenant where the Azure Active Directory application is registered in.
	TenantId string `json:"tenantId"`
}

// AzureComputeCloudDeviceCodeModel defines model for AzureComputeCloudDeviceCodeModel.
type AzureComputeCloudDeviceCodeModel struct {
	// ExpirationTime Expiration date and time of the verification code. By default, the code is valid for 15 minutes.
	ExpirationTime time.Time `json:"expirationTime"`

	// Type Cloud credentials type.
	Type *ECloudCredentialsType `json:"type,omitempty"`

	// Url Verification URI.
	Url string `json:"url"`

	// VerificationCode Verification code.
	VerificationCode string `json:"verificationCode"`
}

// AzureComputeCloudDeviceCodeSpec defines model for AzureComputeCloudDeviceCodeSpec.
type AzureComputeCloudDeviceCodeSpec struct {
	// Region Region where your Microsoft Azure container is located.
	Region EAzureRegionType `json:"region"`

	// Type Cloud credentials type.
	Type *ECloudCredentialsType `json:"type,omitempty"`
}

// AzureComputeCloudNativeApplicationModel defines model for AzureComputeCloudNativeApplicationModel.
type AzureComputeCloudNativeApplicationModel struct {
	// ApplicationId Client ID assigned to the Azure Active Directory application.
	ApplicationId string `json:"applicationId"`

	// Secret Client secret assigned to the Azure Active Directory application.
	Secret string `json:"secret"`

	// TenantId ID of a tenant where the Azure Active Directory application is registered in.
	TenantId string `json:"tenantId"`

	// Type Cloud credentials type.
	Type *ECloudCredentialsType `json:"type,omitempty"`
}

// AzureComputeCredentialsExistingAccountSpec Existing Azure Active Directory application.
type AzureComputeCredentialsExistingAccountSpec struct {
	// Deployment Environment to restore workloads to.
	Deployment AzureComputeCloudCredentialsDeploymentModel `json:"deployment"`

	// Subscription Microsoft Azure compute account. For password-based authentication, specify client secret. For certificate-based authentication, specify certificate and password.
	Subscription AzureComputeCloudCredentialsSubscriptionSpec `json:"subscription"`
}

// AzureComputeCredentialsNewAccountSpec New Azure Active Directory application.
type AzureComputeCredentialsNewAccountSpec struct {
	// Region Region where your Microsoft Azure container is located.
	Region EAzureRegionType `json:"region"`

	// VerificationCode Single-use verification code. Use this code to sign in on the https://microsoft.com/devicelogin page.
	VerificationCode string `json:"verificationCode"`
}

// AzureDataBoxBrowserDestinationSpec defines model for AzureDataBoxBrowserDestinationSpec.
type AzureDataBoxBrowserDestinationSpec struct {
	// ContainerName Name of the container where you want to store your backup data.
	ContainerName string `json:"containerName"`

	// CredentialsId ID of a cloud credentials record requiered to connect to the object storage.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// HostId ID of a server you want to use to connect to the object storage. You can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.
	HostId *openapi_types.UUID `json:"hostId,omitempty"`

	// NewFolderName Name of the new folder.
	NewFolderName *string `json:"newFolderName,omitempty"`

	// ServicePoint Service endpoint address of the Azure Data Box device.
	ServicePoint string `json:"servicePoint"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// AzureDataBoxBrowserModel defines model for AzureDataBoxBrowserModel.
type AzureDataBoxBrowserModel struct {
	// Containers Array of containers that reside in the Azure storage account.
	Containers *[]AzureDataBoxContainerBrowserModel `json:"containers,omitempty"`

	// CredentialsId ID of the cloud credentials record.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// HostId ID of a server used to connect to the object storage.
	HostId *openapi_types.UUID `json:"hostId,omitempty"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// AzureDataBoxBrowserSpec defines model for AzureDataBoxBrowserSpec.
type AzureDataBoxBrowserSpec struct {
	// CredentialsId ID of the object storage account (for browsing either storage or compute infrastructure).
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// GatewayServerId ID of a gateway server you want to use to connect to the object storage. Specify this parameter to check internet connection of the server. As a gateway server you can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.
	GatewayServerId *openapi_types.UUID `json:"gatewayServerId,omitempty"`

	// ServicePoint Service endpoint used to connect to the Azure Data Box object storage.
	ServicePoint *string `json:"servicePoint,omitempty"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// AzureDataBoxContainerBrowserModel defines model for AzureDataBoxContainerBrowserModel.
type AzureDataBoxContainerBrowserModel struct {
	// Folders Array of folders located in the container.
	Folders *[]string `json:"folders,omitempty"`

	// Name Container name.
	Name *string `json:"name,omitempty"`
}

// AzureDataBoxStorageAccountImportModel Account used to access the Azure Data Box storage.
type AzureDataBoxStorageAccountImportModel struct {
	// ConnectionSettings Object storage connection settings.
	ConnectionSettings ObjectStorageConnectionImportSpec `json:"connectionSettings"`

	// Credentials Cloud credentials used for connection.
	Credentials CloudCredentialsImportModel `json:"credentials"`

	// ServiceEndpoint Service endpoint address of the Azure Data Box device.
	ServiceEndpoint string `json:"serviceEndpoint"`
}

// AzureDataBoxStorageAccountModel Account used to access the Azure Data Box storage.
type AzureDataBoxStorageAccountModel struct {
	// ConnectionSettings Object storage connection settings.
	ConnectionSettings *ObjectStorageConnectionModel `json:"connectionSettings,omitempty"`

	// CredentialsId ID of the cloud credentials record.
	CredentialsId openapi_types.UUID `json:"credentialsId"`

	// ServiceEndpoint Service endpoint address of the Azure Data Box device.
	ServiceEndpoint string `json:"serviceEndpoint"`
}

// AzureDataBoxStorageContainerModel Azure Data Box container where backup data is stored.
type AzureDataBoxStorageContainerModel struct {
	// ContainerName Container name.
	ContainerName *string `json:"containerName,omitempty"`

	// FolderName Name of the folder that the object storage repository is mapped to.
	FolderName *string `json:"folderName,omitempty"`
}

// AzureDataBoxStorageImportSpec defines model for AzureDataBoxStorageImportSpec.
type AzureDataBoxStorageImportSpec struct {
	// Account Account used to access the Azure Data Box storage.
	Account AzureDataBoxStorageAccountImportModel `json:"account"`

	// Container Azure Data Box container where backup data is stored.
	Container AzureDataBoxStorageContainerModel `json:"container"`

	// Description Description of the object storage repository.
	Description string `json:"description"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsImportSpec `json:"mountServer"`

	// Name Name of the object storage repository.
	Name string `json:"name"`

	// Tag Tag that identifies the object storage repository.
	Tag string `json:"tag"`

	// Type Repository type.
	Type ERepositoryType `json:"type"`
}

// AzureDataBoxStorageModel defines model for AzureDataBoxStorageModel.
type AzureDataBoxStorageModel struct {
	// Account Account used to access the Azure Data Box storage.
	Account AzureDataBoxStorageAccountModel `json:"account"`

	// Container Azure Data Box container where backup data is stored.
	Container AzureDataBoxStorageContainerModel `json:"container"`

	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// Id ID of the backup repository.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// AzureDataBoxStorageSpec defines model for AzureDataBoxStorageSpec.
type AzureDataBoxStorageSpec struct {
	// Account Account used to access the Azure Data Box storage.
	Account AzureDataBoxStorageAccountModel `json:"account"`

	// Container Azure Data Box container where backup data is stored.
	Container AzureDataBoxStorageContainerModel `json:"container"`

	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// AzureLinuxHelperApplianceModel defines model for AzureLinuxHelperApplianceModel.
type AzureLinuxHelperApplianceModel struct {
	// SSHPort Port over which Veeam Backup & Replication communicates with the helper appliance.
	SSHPort *int `json:"SSHPort,omitempty"`

	// Id Helper appliance ID.
	Id openapi_types.UUID `json:"id"`

	// Location Storage account location where the helper appliance is configured.
	Location *string `json:"location,omitempty"`

	// ResourceGroup Resource group associated with the helper appliance.
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// StorageAccount Azure storage account whose resources are used to store disks of the helper appliance.
	StorageAccount *string `json:"storageAccount,omitempty"`

	// Subnet Subnet for the helper appliance.
	Subnet *string `json:"subnet,omitempty"`

	// SubscriptionId ID that Veeam Backup & Replication assigned to the Azure subscription.
	SubscriptionId openapi_types.UUID `json:"subscriptionId"`

	// Type Cloud credentials type.
	Type *ECloudCredentialsType `json:"type,omitempty"`

	// VirtualNetwork Network to which the helper appliance is connected.
	VirtualNetwork *string `json:"virtualNetwork,omitempty"`

	// VmName VM name of the helper appliance.
	VmName *string `json:"vmName,omitempty"`
}

// AzureLinuxHelperApplianceSpec defines model for AzureLinuxHelperApplianceSpec.
type AzureLinuxHelperApplianceSpec = BaseCloudHelperApplianceSpec

// AzureLocationBrowserModel defines model for AzureLocationBrowserModel.
type AzureLocationBrowserModel struct {
	// Location Location name.
	Location string `json:"location"`

	// ResourceGroups Array of Azure resource groups.
	ResourceGroups []AzureResourceGroupBrowserModel `json:"resourceGroups"`

	// StorageAccounts Array of storage accounts associated with the location.
	StorageAccounts []AzureStorageAccountBrowserModel `json:"storageAccounts"`
}

// AzureResourceGroupBrowserModel defines model for AzureResourceGroupBrowserModel.
type AzureResourceGroupBrowserModel struct {
	// ResourceGroup Resource group name.
	ResourceGroup string `json:"resourceGroup"`

	// VirtualNetworks Array of virtual networks available in the resource group.
	VirtualNetworks []AzureVirtualNetworkBrowserModel `json:"virtualNetworks"`
}

// AzureStorageAccountBrowserModel defines model for AzureStorageAccountBrowserModel.
type AzureStorageAccountBrowserModel struct {
	// InstanceSizes Array of available instance sizes.
	InstanceSizes *[]string `json:"instanceSizes,omitempty"`

	// StorageAccountName Account name.
	StorageAccountName *string `json:"storageAccountName,omitempty"`
}

// AzureStorageCloudCredentialsImportSpec defines model for AzureStorageCloudCredentialsImportSpec.
type AzureStorageCloudCredentialsImportSpec struct {
	// Account Name of the Azure storage account.
	Account string `json:"account"`

	// Description Description of the cloud credentials record.
	Description *string `json:"description,omitempty"`

	// SharedKey Shared key of the Azure storage account.
	SharedKey string `json:"sharedKey"`

	// Tag Tag used to identify the cloud credentials record.
	Tag string `json:"tag"`

	// Type Cloud credentials type.
	Type ECloudCredentialsType `json:"type"`
}

// AzureStorageCloudCredentialsModel defines model for AzureStorageCloudCredentialsModel.
type AzureStorageCloudCredentialsModel struct {
	// Account Name of the Azure storage account.
	Account string `json:"account"`

	// Description Description of the cloud credentials record.
	Description *string `json:"description,omitempty"`

	// Id ID of the cloud credentials record.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Tag Tag used to identify the cloud credentials record.
	Tag *string `json:"tag,omitempty"`

	// Type Cloud credentials type.
	Type *ECloudCredentialsType `json:"type,omitempty"`
}

// AzureStorageCloudCredentialsSpec defines model for AzureStorageCloudCredentialsSpec.
type AzureStorageCloudCredentialsSpec struct {
	// Account Name of the Azure storage account.
	Account string `json:"account"`

	// Description Description of the cloud credentials record.
	Description *string `json:"description,omitempty"`

	// SharedKey Shared key of the Azure storage account.
	SharedKey string `json:"sharedKey"`

	// Tag Tag used to identify the cloud credentials record.
	Tag *string `json:"tag,omitempty"`

	// Type Cloud credentials type.
	Type *ECloudCredentialsType `json:"type,omitempty"`
}

// AzureStorageProxyModel Azure storage proxy appliance.
type AzureStorageProxyModel struct {
	// InstanceSize Size of the appliance.
	InstanceSize *string `json:"instanceSize,omitempty"`

	// RedirectorPort TCP port used to route requests between the proxy appliance and backup infrastructure components.
	RedirectorPort *int `json:"redirectorPort,omitempty"`

	// ResourceGroup Resource group associated with the proxy appliance.
	ResourceGroup *string `json:"resourceGroup,omitempty"`

	// Subnet Subnet for the proxy appliance.
	Subnet *string `json:"subnet,omitempty"`

	// SubscriptionId ID that Veeam Backup & Replication assigned to the Azure subscription.
	SubscriptionId openapi_types.UUID `json:"subscriptionId"`

	// VirtualNetwork Network to which the helper appliance is connected.
	VirtualNetwork *string `json:"virtualNetwork,omitempty"`
}

// AzureSubscriptionBrowserModel defines model for AzureSubscriptionBrowserModel.
type AzureSubscriptionBrowserModel struct {
	// AzureSubscriptionId Original Azure subscription ID.
	AzureSubscriptionId *string `json:"azureSubscriptionId,omitempty"`

	// Id ID that Veeam Backup & Replication assigned to the Azure subscription.
	Id openapi_types.UUID `json:"id"`

	// Locations Array of Azure geographic regions.
	Locations *[]AzureLocationBrowserModel `json:"locations,omitempty"`
}

// AzureVirtualNetworkBrowserModel defines model for AzureVirtualNetworkBrowserModel.
type AzureVirtualNetworkBrowserModel struct {
	// Subnets Array of subnets.
	Subnets *[]string `json:"subnets,omitempty"`

	// VirtualNetworkName Virtual network name.
	VirtualNetworkName *string `json:"virtualNetworkName,omitempty"`
}

// BackupApplicationAwareProcessingImportModel Application-aware processing settings.
type BackupApplicationAwareProcessingImportModel struct {
	// AppSettings Array of VMware vSphere objects and their application settings.
	AppSettings *[]BackupApplicationSettingsImportModel `json:"appSettings,omitempty"`

	// IsEnabled If *true*, application-aware processing is enabled.
	IsEnabled bool `json:"isEnabled"`
}

// BackupApplicationAwareProcessingModel Application-aware processing settings.
type BackupApplicationAwareProcessingModel struct {
	// AppSettings Array of VMware vSphere objects and their application settings.
	AppSettings *[]BackupApplicationSettingsModel `json:"appSettings,omitempty"`

	// IsEnabled If *true*, application-aware processing is enabled.
	IsEnabled bool `json:"isEnabled"`
}

// BackupApplicationSettingsImportModel defines model for BackupApplicationSettingsImportModel.
type BackupApplicationSettingsImportModel struct {
	// Exclusions VM guest OS file exclusion.
	Exclusions *BackupFSExclusionsModel `json:"exclusions,omitempty"`

	// Oracle Oracle archived log settings.
	Oracle *BackupOracleSettingsImportModel `json:"oracle,omitempty"`

	// Scripts Pre-freeze and post-thaw scripts.
	Scripts *BackupScriptSettingsModel `json:"scripts,omitempty"`

	// Sql Microsoft SQL Server transaction log settings.
	Sql *BackupSQLSettingsImportModel `json:"sql,omitempty"`

	// TransactionLogs Transaction logs settings that define whether copy-only backups must be created, or transaction logs for Microsoft Exchange, Microsoft SQL and Oracle VMs must be processed.<br> If transaction log processing is selected, specify the following parameters:<ul> <li>[For Microsoft SQL Server VMs] Microsoft SQL Server transaction log settings</li> <li>[For Oracle VMs] Oracle archived log settings</li></ul>
	TransactionLogs *ETransactionLogsSettings `json:"transactionLogs,omitempty"`

	// UsePersistentGuestAgent If *true*, persistent guest agent is used.
	UsePersistentGuestAgent *bool `json:"usePersistentGuestAgent,omitempty"`

	// VmObject VMware vSphere object.
	VmObject VmwareObjectModel `json:"vmObject"`

	// Vss Behavior scenario for application-aware processing.
	Vss EApplicationSettingsVSS `json:"vss"`
}

// BackupApplicationSettingsModel defines model for BackupApplicationSettingsModel.
type BackupApplicationSettingsModel struct {
	// Exclusions VM guest OS file exclusion.
	Exclusions *BackupFSExclusionsModel `json:"exclusions,omitempty"`

	// Oracle Oracle archived log settings.
	Oracle *BackupOracleSettingsModel `json:"oracle,omitempty"`

	// Scripts Pre-freeze and post-thaw scripts.
	Scripts *BackupScriptSettingsModel `json:"scripts,omitempty"`

	// Sql Microsoft SQL Server transaction log settings.
	Sql *BackupSQLSettingsModel `json:"sql,omitempty"`

	// TransactionLogs Transaction logs settings that define whether copy-only backups must be created, or transaction logs for Microsoft Exchange, Microsoft SQL and Oracle VMs must be processed.<br> If transaction log processing is selected, specify the following parameters:<ul> <li>[For Microsoft SQL Server VMs] Microsoft SQL Server transaction log settings</li> <li>[For Oracle VMs] Oracle archived log settings</li></ul>
	TransactionLogs *ETransactionLogsSettings `json:"transactionLogs,omitempty"`

	// UsePersistentGuestAgent If *true*, persistent guest agent is used.
	UsePersistentGuestAgent *bool `json:"usePersistentGuestAgent,omitempty"`

	// VmObject VMware vSphere object.
	VmObject VmwareObjectModel `json:"vmObject"`

	// Vss Behavior scenario for application-aware processing.
	Vss EApplicationSettingsVSS `json:"vss"`
}

// BackupFSExclusionsModel VM guest OS file exclusion.
type BackupFSExclusionsModel struct {
	// ExclusionPolicy Exclusion policy.
	ExclusionPolicy EBackupExclusionPolicy `json:"exclusionPolicy"`

	// ItemsList Array of files and folders. Full paths to files and folders, environmental variables and file masks with the asterisk (*) and question mark (?) characters can be used.
	ItemsList *[]string `json:"itemsList,omitempty"`
}

// BackupHealthCheckSettingsModels Health check settings for the for the latest restore point in the backup chain.
type BackupHealthCheckSettingsModels struct {
	// IsEnabled If *true*, the health check is enabled.
	IsEnabled bool `json:"isEnabled"`

	// Monthly Monthly schedule settings.
	Monthly *AdvancedStorageScheduleMonthlyModel `json:"monthly,omitempty"`

	// Weekly Weekly schedule settings.
	Weekly *AdvancedStorageScheduleWeeklyModel `json:"weekly,omitempty"`
}

// BackupIndexingSettingsModel defines model for BackupIndexingSettingsModel.
type BackupIndexingSettingsModel struct {
	// LinuxIndexing Guest OS indexing options for the VM.
	LinuxIndexing *BackupObjectIndexingModel `json:"LinuxIndexing,omitempty"`

	// WindowsIndexing Guest OS indexing options for the VM.
	WindowsIndexing *BackupObjectIndexingModel `json:"WindowsIndexing,omitempty"`

	// VmObject VMware vSphere object.
	VmObject VmwareObjectModel `json:"vmObject"`
}

// BackupJobAdvancedSettingsModel Advanced settings of the backup job.
type BackupJobAdvancedSettingsModel struct {
	// ActiveFulls Active full backup settings.
	ActiveFulls *ActiveFullSettingsModel `json:"activeFulls,omitempty"`

	// BackupHealth Health check settings for the for the latest restore point in the backup chain.
	BackupHealth *BackupHealthCheckSettingsModels `json:"backupHealth,omitempty"`

	// BackupModeType Type of the backup method used to create a restore point.
	BackupModeType EBackupModeType `json:"backupModeType"`

	// FullBackupMaintenance Maintenance settings for full backup files.
	FullBackupMaintenance *FullBackupMaintenanceModel `json:"fullBackupMaintenance,omitempty"`

	// Notifications Notification settings for the backup job.
	Notifications *NotificationSettingsModel `json:"notifications,omitempty"`

	// Scripts Script settings.
	Scripts *JobScriptsSettingsModel `json:"scripts,omitempty"`

	// StorageData Storage settings.
	StorageData *BackupStorageSettingModel `json:"storageData,omitempty"`

	// StorageIntegration Primary storage integration settings for the backup job.
	StorageIntegration *PrimaryStorageIntegrationSettingsModel `json:"storageIntegration,omitempty"`

	// SynthenticFulls Synthetic full backup settings.
	SynthenticFulls *SyntheticFullSettingsModel `json:"synthenticFulls,omitempty"`

	// VSphere VMware vSphere settings for the backup job.
	VSphere *BackupJobAdvancedSettingsVSphereModel `json:"vSphere,omitempty"`
}

// BackupJobAdvancedSettingsVSphereModel VMware vSphere settings for the backup job.
type BackupJobAdvancedSettingsVSphereModel struct {
	// ChangedBlockTracking CBT settings for the backup job.
	ChangedBlockTracking *VSphereChangedBlockTrackingSettingsModel `json:"changedBlockTracking,omitempty"`

	// EnableVMWareToolsQuiescence If *true*, VMware Tools quiescence is enabled for freezing the VM file system and application data.
	EnableVMWareToolsQuiescence *bool `json:"enableVMWareToolsQuiescence,omitempty"`
}

// BackupJobExclusions Objects excluded from the backup.
type BackupJobExclusions struct {
	// Disks Array of VM disks excluded from the backup.
	Disks *[]VmwareObjectDiskModel `json:"disks,omitempty"`

	// Templates VM templates exclusion.
	Templates *BackupJobExclusionsTemplates `json:"templates,omitempty"`

	// Vms Array of VMs excluded from the backup.
	Vms *[]VmwareObjectSizeModel `json:"vms,omitempty"`
}

// BackupJobExclusionsSpec Objects that you want to exclude from the backup.
type BackupJobExclusionsSpec struct {
	// Disks Array of disks.
	Disks *[]VmwareObjectDiskModel `json:"disks,omitempty"`

	// Templates VM templates exclusion.
	Templates *BackupJobExclusionsTemplates `json:"templates,omitempty"`

	// Vms Array of VMs.
	Vms *[]VmwareObjectModel `json:"vms,omitempty"`
}

// BackupJobExclusionsTemplates VM templates exclusion.
type BackupJobExclusionsTemplates struct {
	// ExcludeFromIncremental If *true*, VM templates are excluded from the incremental backup.
	ExcludeFromIncremental *bool `json:"excludeFromIncremental,omitempty"`

	// IsEnabled If *true*, VM templates are excluded from the backup.
	IsEnabled *bool `json:"isEnabled,omitempty"`
}

// BackupJobGuestProcessingImportModel Guest processing settings.
type BackupJobGuestProcessingImportModel struct {
	// ApplicationAwareProcessing Application-aware processing settings.
	ApplicationAwareProcessing BackupApplicationAwareProcessingImportModel `json:"applicationAwareProcessing"`

	// GuestCredentials VM custom credentials.
	GuestCredentials *GuestOsCredentialsImportModel `json:"guestCredentials,omitempty"`

	// GuestFileSystemIndexing VM guest OS file indexing.
	GuestFileSystemIndexing GuestFileSystemIndexingModel `json:"guestFileSystemIndexing"`

	// GuestInteractionProxies Guest interaction proxy used to deploy the runtime process on the VM guest OS.
	GuestInteractionProxies *GuestInteractionProxiesSettingsImportModel `json:"guestInteractionProxies,omitempty"`
}

// BackupJobGuestProcessingModel Guest processing settings.
type BackupJobGuestProcessingModel struct {
	// AppAwareProcessing Application-aware processing settings.
	AppAwareProcessing BackupApplicationAwareProcessingModel `json:"appAwareProcessing"`

	// GuestCredentials VM custom credentials.
	GuestCredentials *GuestOsCredentialsModel `json:"guestCredentials,omitempty"`

	// GuestFSIndexing VM guest OS file indexing.
	GuestFSIndexing GuestFileSystemIndexingModel `json:"guestFSIndexing"`

	// GuestInteractionProxies Guest interaction proxy used to deploy the runtime process on the VM guest OS.
	GuestInteractionProxies *GuestInteractionProxiesSettingsModel `json:"guestInteractionProxies,omitempty"`
}

// BackupJobImportProxiesModel Backup proxies.
type BackupJobImportProxiesModel struct {
	// AutomaticSelection If *true*, backup proxies are detected and assigned automatically.
	AutomaticSelection bool `json:"automaticSelection"`

	// Proxies Array of backup proxies.
	Proxies *[]BackupProxyImportModel `json:"proxies,omitempty"`
}

// BackupJobModel defines model for BackupJobModel.
type BackupJobModel struct {
	// Description Description of the job.
	Description *string `json:"description,omitempty"`

	// GuestProcessing Guest processing settings.
	GuestProcessing BackupJobGuestProcessingModel `json:"guestProcessing"`

	// Id ID of the job.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// IsDisabled If *true*, the job is disabled.
	IsDisabled *bool `json:"isDisabled,omitempty"`

	// IsHighPriority If *true*, the job has a high priority in getting backup infrastructure resources.
	IsHighPriority bool `json:"isHighPriority"`

	// Name Name of the job.
	Name *string `json:"name,omitempty"`

	// Schedule Job scheduling options.
	Schedule BackupScheduleModel `json:"schedule"`

	// Storage Backup storage settings.
	Storage BackupJobStorageModel `json:"storage"`

	// Type Type of the job.
	Type *EJobType `json:"type,omitempty"`

	// VirtualMachines Included and excluded objects.
	VirtualMachines BackupJobVirtualMachinesModel `json:"virtualMachines"`
}

// BackupJobRetentionPolicySettingsModel Retention policy settings.
type BackupJobRetentionPolicySettingsModel struct {
	// Quantity Number of restore points or days to keep.
	Quantity int `json:"quantity"`

	// Type Type of the retention policy.
	Type ERetentionPolicyType `json:"type"`
}

// BackupJobSpec defines model for BackupJobSpec.
type BackupJobSpec struct {
	// Description Job description specified at the time of the job creation.
	Description *string `json:"description,omitempty"`

	// GuestProcessing Guest processing settings.
	GuestProcessing BackupJobGuestProcessingModel `json:"guestProcessing"`

	// IsHighPriority If *true*, the job has a high priority in getting backup infrastructure resources.
	IsHighPriority bool `json:"isHighPriority"`

	// Name Name of the job.
	Name *string `json:"name,omitempty"`

	// Schedule Job scheduling options.
	Schedule BackupScheduleModel `json:"schedule"`

	// Storage Backup storage settings.
	Storage BackupJobStorageModel `json:"storage"`

	// Type Type of the job.
	Type *EJobType `json:"type,omitempty"`

	// VirtualMachines Arrays of objects that you want to back up or exclude from the backup.
	VirtualMachines BackupJobVirtualMachinesSpec `json:"virtualMachines"`
}

// BackupJobStorageImportModel Backup storage settings.
type BackupJobStorageImportModel struct {
	// AdvancedSettings Advanced settings of the backup job.
	AdvancedSettings *BackupJobAdvancedSettingsModel `json:"advancedSettings,omitempty"`

	// BackupProxies Backup proxies.
	BackupProxies BackupJobImportProxiesModel `json:"backupProxies"`

	// BackupRepository Backup repository.
	BackupRepository BackupRepositoryImportModel `json:"backupRepository"`

	// GfsPolicy GFS retention policy settings.
	GfsPolicy *GFSPolicySettingsModel `json:"gfsPolicy,omitempty"`

	// RetentionPolicy Retention policy settings.
	RetentionPolicy BackupJobRetentionPolicySettingsModel `json:"retentionPolicy"`
}

// BackupJobStorageModel Backup storage settings.
type BackupJobStorageModel struct {
	// AdvancedSettings Advanced settings of the backup job.
	AdvancedSettings *BackupJobAdvancedSettingsModel `json:"advancedSettings,omitempty"`

	// BackupProxies Backup proxy settings.
	BackupProxies BackupProxiesSettingsModel `json:"backupProxies"`

	// BackupRepositoryId ID of the backup repository.
	BackupRepositoryId openapi_types.UUID `json:"backupRepositoryId"`

	// GfsPolicy GFS retention policy settings.
	GfsPolicy *GFSPolicySettingsModel `json:"gfsPolicy,omitempty"`

	// RetentionPolicy Retention policy settings.
	RetentionPolicy BackupJobRetentionPolicySettingsModel `json:"retentionPolicy"`
}

// BackupJobVirtualMachinesModel Included and excluded objects.
type BackupJobVirtualMachinesModel struct {
	// Excludes Objects excluded from the backup.
	Excludes *BackupJobExclusions `json:"excludes,omitempty"`

	// Includes Array of VMs and VM containers processed by the job.
	Includes []VmwareObjectSizeModel `json:"includes"`
}

// BackupJobVirtualMachinesSpec Arrays of objects that you want to back up or exclude from the backup.
type BackupJobVirtualMachinesSpec struct {
	// Excludes Objects that you want to exclude from the backup.
	Excludes *BackupJobExclusionsSpec `json:"excludes,omitempty"`

	// Includes Array of objects that you want to back up.
	Includes []VmwareObjectModel `json:"includes"`
}

// BackupLinuxScriptModel Paths to pre-freeze and post-thaw scripts for Linux VMs.
type BackupLinuxScriptModel struct {
	// PostThawScript Path to a post-thaw script.
	PostThawScript *string `json:"postThawScript,omitempty"`

	// PreFreezeScript Path to a pre-freeze script.
	PreFreezeScript *string `json:"preFreezeScript,omitempty"`
}

// BackupLogShippingServersImportModel Log shipping server used to transport logs.
type BackupLogShippingServersImportModel struct {
	// AutoSelection If *true*, Veeam Backup & Replication chooses an optimal log shipping server automatically.
	AutoSelection bool `json:"autoSelection"`

	// ShippingServerNames Array of servers that are explicitly selected for log shipping.
	ShippingServerNames *[]string `json:"shippingServerNames,omitempty"`
}

// BackupLogShippingServersModel Log shipping server used to transport logs.
type BackupLogShippingServersModel struct {
	// AutoSelection If *true*, Veeam Backup & Replication chooses an optimal log shipping server automatically.
	AutoSelection bool `json:"autoSelection"`

	// ShippingServerIds Array of servers that are explicitly selected for log shipping.
	ShippingServerIds *[]openapi_types.UUID `json:"shippingServerIds,omitempty"`
}

// BackupModel defines model for BackupModel.
type BackupModel struct {
	// CreationTime Date and time when the backup was created.
	CreationTime time.Time `json:"creationTime"`

	// Id ID of the backup.
	Id openapi_types.UUID `json:"id"`

	// JobId ID of the job that created the backup.
	JobId *openapi_types.UUID `json:"jobId,omitempty"`

	// Name Name of the job that created the backup.
	Name string `json:"name"`

	// PlatformId ID of the platform of the backup resource.
	PlatformId openapi_types.UUID `json:"platformId"`

	// PlatformName Platform name.
	PlatformName EPlatformType `json:"platformName"`

	// PolicyTag Tag that identifies retention policy.
	PolicyTag *string `json:"policyTag,omitempty"`

	// RepositoryId ID of the backup repository where the backup is stored.
	RepositoryId openapi_types.UUID `json:"repositoryId"`
}

// BackupObjectIndexingModel Guest OS indexing options for the VM.
type BackupObjectIndexingModel struct {
	// GuestFSIndexingMode Indexing mode.
	GuestFSIndexingMode EGuestFSIndexingMode `json:"guestFSIndexingMode"`

	// IndexingList Array of folders. Environmental variables and full paths to folders can be used.
	IndexingList *[]string `json:"indexingList,omitempty"`
}

// BackupObjectModel defines model for BackupObjectModel.
type BackupObjectModel struct {
	// Id ID of the object.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Name of the object.
	Name *string `json:"name,omitempty"`

	// PlatformId Id of the platform where the object was created.
	PlatformId *openapi_types.UUID `json:"platformId,omitempty"`

	// PlatformName Platform name.
	PlatformName *EPlatformType `json:"platformName,omitempty"`

	// RestorePointsCount Number of restore points.
	RestorePointsCount *int `json:"restorePointsCount,omitempty"`

	// Type Type of the object.
	Type  *string `json:"type,omitempty"`
	union json.RawMessage
}

// BackupObjectsResult defines model for BackupObjectsResult.
type BackupObjectsResult struct {
	// Data Array of backup objects.
	Data []BackupObjectModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// BackupOracleSettingsImportModel Oracle archived log settings.
type BackupOracleSettingsImportModel struct {
	// ArchiveLogs Type of archived logs processing.
	ArchiveLogs EBackupOracleLogsSettings `json:"archiveLogs"`

	// BackupLogs If *true*, archived logs are backed up.
	BackupLogs *bool `json:"backupLogs,omitempty"`

	// BackupMinsCount Frequency of archived log backup, in minutes.
	BackupMinsCount *int `json:"backupMinsCount,omitempty"`

	// Credentials Credentials used for connection.
	Credentials *CredentialsImportModel `json:"credentials,omitempty"`

	// DeleteGBsCount Maximum size for archived logs in GB. This parameter should be specified if the `EBackupOracleLogsSettings` value is *deleteExpiredGBs*.
	DeleteGBsCount *int `json:"deleteGBsCount,omitempty"`

	// DeleteHoursCount Time period in hours to keep archived logs. This parameter should be specified if the `EBackupOracleLogsSettings` value is *deleteExpiredHours*.
	DeleteHoursCount *int `json:"deleteHoursCount,omitempty"`

	// KeepDaysCount Number of days to keep archived logs.
	KeepDaysCount *int `json:"keepDaysCount,omitempty"`

	// LogShippingServers Log shipping server used to transport logs.
	LogShippingServers *BackupLogShippingServersImportModel `json:"logShippingServers,omitempty"`

	// RetainLogBackups Retention policy for the logs stored in the backup repository.
	RetainLogBackups *ERetainLogBackupsType `json:"retainLogBackups,omitempty"`

	// UseGuestCredentials If *true*, Veeam Backup & Replication uses credentials specified in the guest processing settings.
	UseGuestCredentials bool `json:"useGuestCredentials"`
}

// BackupOracleSettingsModel Oracle archived log settings.
type BackupOracleSettingsModel struct {
	// ArchiveLogs Type of archived logs processing.
	ArchiveLogs EBackupOracleLogsSettings `json:"archiveLogs"`

	// BackupLogs If *true*, archived logs are backed up.
	BackupLogs *bool `json:"backupLogs,omitempty"`

	// BackupMinsCount Frequency of archived log backup, in minutes.
	BackupMinsCount *int `json:"backupMinsCount,omitempty"`

	// CredentialsId ID of the credentials record that is used if `useGuestCredentials` is *false*.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// DeleteGBsCount Maximum size for archived logs in GB. This parameter should be specified if the `EBackupOracleLogsSettings` value is *deleteExpiredGBs*.
	DeleteGBsCount *int `json:"deleteGBsCount,omitempty"`

	// DeleteHoursCount Time period in hours to keep archived logs. This parameter should be specified if the `EBackupOracleLogsSettings` value is *deleteExpiredHours*.
	DeleteHoursCount *int `json:"deleteHoursCount,omitempty"`

	// KeepDaysCount Number of days to keep archived logs.
	KeepDaysCount *int `json:"keepDaysCount,omitempty"`

	// LogShippingServers Log shipping server used to transport logs.
	LogShippingServers *BackupLogShippingServersModel `json:"logShippingServers,omitempty"`

	// RetainLogBackups Retention policy for the logs stored in the backup repository.
	RetainLogBackups *ERetainLogBackupsType `json:"retainLogBackups,omitempty"`

	// UseGuestCredentials If *true*, Veeam Backup & Replication uses credentials specified in the guest processing settings.
	UseGuestCredentials bool `json:"useGuestCredentials"`
}

// BackupPlacementSettingsModel defines model for BackupPlacementSettingsModel.
type BackupPlacementSettingsModel struct {
	// AllowedBackups Type of backup files that can be stored on the extent.
	AllowedBackups EAllowedBackupsType `json:"allowedBackups"`

	// ExtentId ID of a performance extent.
	ExtentId openapi_types.UUID `json:"extentId"`
}

// BackupProxiesSettingsModel Backup proxy settings.
type BackupProxiesSettingsModel struct {
	// AutoSelection If *true*, backup proxies are detected and assigned automatically.
	AutoSelection bool `json:"autoSelection"`

	// ProxyIds Array of proxy IDs.
	ProxyIds *[]openapi_types.UUID `json:"proxyIds,omitempty"`
}

// BackupProxyImportModel defines model for BackupProxyImportModel.
type BackupProxyImportModel struct {
	// Name Name of the backup proxy.
	Name string `json:"name"`

	// Tag Tag assigned to the backup proxy.
	Tag  *string                `json:"tag,omitempty"`
	Type EBackupProxyImportType `json:"type"`
}

// BackupRepositoryImportModel Backup repository.
type BackupRepositoryImportModel struct {
	// Name Name of the backup repository.
	Name string `json:"name"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`
}

// BackupSQLSettingsImportModel Microsoft SQL Server transaction log settings.
type BackupSQLSettingsImportModel struct {
	// BackupMinsCount Frequency of transaction log backup, in minutes.
	BackupMinsCount *int `json:"backupMinsCount,omitempty"`

	// KeepDaysCount Number of days to keep transaction logs in the backup repository.
	KeepDaysCount *int `json:"keepDaysCount,omitempty"`

	// LogShippingServers Log shipping server used to transport logs.
	LogShippingServers *BackupLogShippingServersImportModel `json:"logShippingServers,omitempty"`

	// LogsProcessing Type of transaction logs processing.
	LogsProcessing ESQLLogsProcessing `json:"logsProcessing"`

	// RetainLogBackups Retention policy for the logs stored in the backup repository.
	RetainLogBackups *ERetainLogBackupsType `json:"retainLogBackups,omitempty"`
}

// BackupSQLSettingsModel Microsoft SQL Server transaction log settings.
type BackupSQLSettingsModel struct {
	// BackupMinsCount Frequency of transaction log backup, in minutes.
	BackupMinsCount *int `json:"backupMinsCount,omitempty"`

	// KeepDaysCount Number of days to keep transaction logs in the backup repository.
	KeepDaysCount *int `json:"keepDaysCount,omitempty"`

	// LogShippingServers Log shipping server used to transport logs.
	LogShippingServers *BackupLogShippingServersModel `json:"logShippingServers,omitempty"`

	// LogsProcessing Type of transaction logs processing.
	LogsProcessing ESQLLogsProcessing `json:"logsProcessing"`

	// RetainLogBackups Retention policy for the logs stored in the backup repository.
	RetainLogBackups *ERetainLogBackupsType `json:"retainLogBackups,omitempty"`
}

// BackupScheduleModel Job scheduling options.
type BackupScheduleModel struct {
	// AfterThisJob Job chaining options.
	AfterThisJob *ScheduleAfterThisJobModel `json:"afterThisJob,omitempty"`

	// BackupWindow Backup window settings.
	BackupWindow *ScheduleBackupWindowModel `json:"backupWindow,omitempty"`

	// Continuously Backup window settings.
	Continuously *ScheduleBackupWindowModel `json:"continuously,omitempty"`

	// Daily Daily scheduling options.
	Daily *ScheduleDailyModel `json:"daily,omitempty"`

	// Monthly Monthly scheduling options.
	Monthly *ScheduleMonthlyModel `json:"monthly,omitempty"`

	// Periodically Periodic scheduling options.
	Periodically *SchedulePeriodicallyModel `json:"periodically,omitempty"`

	// Retry Retry options.
	Retry *ScheduleRetryModel `json:"retry,omitempty"`

	// RunAutomatically If *true*, job scheduling is enabled.
	RunAutomatically bool `json:"runAutomatically"`
}

// BackupScriptSettingsModel Pre-freeze and post-thaw scripts.
type BackupScriptSettingsModel struct {
	// LinuxScripts Paths to pre-freeze and post-thaw scripts for Linux VMs.
	LinuxScripts *BackupLinuxScriptModel `json:"linuxScripts,omitempty"`

	// ScriptProcessingMode Scenario for scripts execution.
	ScriptProcessingMode EBackupScriptProcessingMode `json:"scriptProcessingMode"`

	// WindowsScripts Paths to pre-freeze and post-thaw scripts for Microsoft Windows VMs.
	WindowsScripts *BackupWindowsScriptModel `json:"windowsScripts,omitempty"`
}

// BackupStorageSettingModel Storage settings.
type BackupStorageSettingModel struct {
	// CompressionLevel Compression level.
	CompressionLevel *ECompressionLevel `json:"compressionLevel,omitempty"`

	// EnableInlineDataDedup If *true*, Veeam Backup & Replication deduplicates VM data before storing it in the backup repository.
	EnableInlineDataDedup *bool `json:"enableInlineDataDedup,omitempty"`

	// Encryption Encryption of backup files.
	Encryption *BackupStorageSettingsEncryptionModel `json:"encryption,omitempty"`

	// ExcludeDeletedFileBlocks If *true*, Veeam Backup & Replication does not copy deleted file blocks.
	ExcludeDeletedFileBlocks *bool `json:"excludeDeletedFileBlocks,omitempty"`

	// ExcludeSwapFileBlocks If *true*, Veeam Backup & Replication excludes swap file blocks from processing.
	ExcludeSwapFileBlocks *bool `json:"excludeSwapFileBlocks,omitempty"`

	// StorageOptimization Storage optimization that depends on the target type.
	StorageOptimization *EStorageOptimization `json:"storageOptimization,omitempty"`
}

// BackupStorageSettingsEncryptionModel Encryption of backup files.
type BackupStorageSettingsEncryptionModel struct {
	// EncryptionPasswordIdOrNull ID of the password used for encryption. The value is *null* for exported objects.
	EncryptionPasswordIdOrNull *openapi_types.UUID `json:"encryptionPasswordIdOrNull,omitempty"`

	// EncryptionPasswordTag Tag used to identify the password.
	EncryptionPasswordTag *string `json:"encryptionPasswordTag,omitempty"`

	// IsEnabled If *true*, the content of backup files is encrypted.
	IsEnabled bool `json:"isEnabled"`
}

// BackupWindowDayHoursModel Hourly scheme for a day.
type BackupWindowDayHoursModel struct {
	// Day Day of the week.
	Day EDayOfWeek `json:"day"`

	// Hours String of 24 hours in the following format:<br>*1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1*<br>where *1* means permitted, *0* means denied.
	Hours string `json:"hours"`
}

// BackupWindowSettingModel Time scheme that defines permitted days and hours for the job to start.
type BackupWindowSettingModel struct {
	// Days Array of per-day schemes.
	Days []BackupWindowDayHoursModel `json:"days"`
}

// BackupWindowsScriptModel Paths to pre-freeze and post-thaw scripts for Microsoft Windows VMs.
type BackupWindowsScriptModel struct {
	// PostThawScript Path to a post-thaw script.
	PostThawScript *string `json:"postThawScript,omitempty"`

	// PreFreezeScript Path to a pre-freeze script.
	PreFreezeScript *string `json:"preFreezeScript,omitempty"`
}

// BackupsResult defines model for BackupsResult.
type BackupsResult struct {
	// Data Array of backups.
	Data []BackupModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// BaseBackupObjectModel defines model for BaseBackupObjectModel.
type BaseBackupObjectModel struct {
	// Id ID of the object.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Name of the object.
	Name *string `json:"name,omitempty"`

	// PlatformId Id of the platform where the object was created.
	PlatformId *openapi_types.UUID `json:"platformId,omitempty"`

	// PlatformName Platform name.
	PlatformName *EPlatformType `json:"platformName,omitempty"`

	// RestorePointsCount Number of restore points.
	RestorePointsCount *int `json:"restorePointsCount,omitempty"`

	// Type Type of the object.
	Type *string `json:"type,omitempty"`
}

// BaseCloudBrowserModel defines model for BaseCloudBrowserModel.
type BaseCloudBrowserModel struct {
	// CredentialsId ID of the cloud credentials record.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// BaseCloudBrowserNewFolderSpec defines model for BaseCloudBrowserNewFolderSpec.
type BaseCloudBrowserNewFolderSpec struct {
	// CredentialsId ID of a cloud credentials record requiered to connect to the object storage.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// NewFolderName Name of the new folder.
	NewFolderName *string `json:"newFolderName,omitempty"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// BaseCloudBrowserSpec defines model for BaseCloudBrowserSpec.
type BaseCloudBrowserSpec struct {
	// CredentialsId ID of the object storage account (for browsing either storage or compute infrastructure).
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// BaseCloudCredentialsModel defines model for BaseCloudCredentialsModel.
type BaseCloudCredentialsModel struct {
	// Description Description of the cloud credentials record.
	Description *string `json:"description,omitempty"`

	// Id ID of the cloud credentials record.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Type Cloud credentials type.
	Type *ECloudCredentialsType `json:"type,omitempty"`
}

// BaseCloudCredentialsSpec defines model for BaseCloudCredentialsSpec.
type BaseCloudCredentialsSpec struct {
	// Description Description of the cloud credentials record.
	Description *string `json:"description,omitempty"`

	// Type Cloud credentials type.
	Type *ECloudCredentialsType `json:"type,omitempty"`
}

// BaseCloudDeviceCodeModel defines model for BaseCloudDeviceCodeModel.
type BaseCloudDeviceCodeModel struct {
	// Type Cloud credentials type.
	Type *ECloudCredentialsType `json:"type,omitempty"`
}

// BaseCloudDeviceCodeSpec defines model for BaseCloudDeviceCodeSpec.
type BaseCloudDeviceCodeSpec struct {
	// Type Cloud credentials type.
	Type *ECloudCredentialsType `json:"type,omitempty"`
}

// BaseCloudHelperApplianceModel defines model for BaseCloudHelperApplianceModel.
type BaseCloudHelperApplianceModel struct {
	// Type Cloud credentials type.
	Type *ECloudCredentialsType `json:"type,omitempty"`
}

// BaseCloudHelperApplianceSpec defines model for BaseCloudHelperApplianceSpec.
type BaseCloudHelperApplianceSpec struct {
	// Type Cloud credentials type.
	Type *ECloudCredentialsType `json:"type,omitempty"`
}

// BaseCloudNativeApplicationModel defines model for BaseCloudNativeApplicationModel.
type BaseCloudNativeApplicationModel struct {
	// Type Cloud credentials type.
	Type *ECloudCredentialsType `json:"type,omitempty"`
}

// BaseCredentialsModel defines model for BaseCredentialsModel.
type BaseCredentialsModel struct {
	// CreationTime Date and time when the credentials were created.
	CreationTime *time.Time `json:"creationTime,omitempty"`

	// Description Description of the credentials record.
	Description *string `json:"description,omitempty"`

	// Id ID of the credentials record.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Type Credentials type.
	Type *ECredentialsType `json:"type,omitempty"`

	// Username User name.
	Username *string `json:"username,omitempty"`
}

// BaseCredentialsSpec defines model for BaseCredentialsSpec.
type BaseCredentialsSpec struct {
	// Description Description of the credentials record.
	Description *string `json:"description,omitempty"`

	// Password Password.
	Password *string `json:"password,omitempty"`

	// Type Credentials type.
	Type *ECredentialsType `json:"type,omitempty"`

	// Username User name.
	Username *string `json:"username,omitempty"`
}

// BaseEntireViVMRestoreSpec defines model for BaseEntireViVMRestoreSpec.
type BaseEntireViVMRestoreSpec struct {
	// ObjectRestorePointId ID of the restore point.
	ObjectRestorePointId *openapi_types.UUID `json:"objectRestorePointId,omitempty"`

	// PowerUp If *true*, Veeam Backup & Replication starts the restored VM on the target host.
	PowerUp *bool `json:"powerUp,omitempty"`

	// Reason Reason for restoring the VM.
	Reason *string `json:"reason,omitempty"`

	// RestoreProxies Backup proxies for VM data transport.
	RestoreProxies *RestoreProxySpec `json:"restoreProxies,omitempty"`

	// SecureRestore Secure restore settings.
	SecureRestore *SecureRestoreSpec `json:"secureRestore,omitempty"`

	// Type Restore mode.
	Type *EEntireVMRestoreModeType `json:"type,omitempty"`
}

// BaseInstantViVMRecoverySpec defines model for BaseInstantViVMRecoverySpec.
type BaseInstantViVMRecoverySpec struct {
	// VmTagsRestoreEnabled If *true*, Veeam Backup & Replication restores tags that were assigned to the original VM, and assign them to the restored VM.
	VmTagsRestoreEnabled *bool `json:"VmTagsRestoreEnabled,omitempty"`

	// NicsEnabled If *true*, the restored VM is connected to the network.
	NicsEnabled *bool `json:"nicsEnabled,omitempty"`

	// ObjectRestorePointId ID of the restore point.
	ObjectRestorePointId *openapi_types.UUID `json:"objectRestorePointId,omitempty"`

	// PowerUp If *true*, Veeam Backup & Replication starts the restored VM on the target host.
	PowerUp *bool `json:"powerUp,omitempty"`

	// Reason Reason for restoring the VM.
	Reason *string `json:"reason,omitempty"`

	// SecureRestore Secure restore settings.
	SecureRestore *SecureRestoreSpec `json:"secureRestore,omitempty"`

	// Type Restore mode.
	Type *EInstantVMRecoveryModeType `json:"type,omitempty"`
}

// BaseJobModel defines model for BaseJobModel.
type BaseJobModel struct {
	// Description Description of the job.
	Description *string `json:"description,omitempty"`

	// Id ID of the job.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// IsDisabled If *true*, the job is disabled.
	IsDisabled *bool `json:"isDisabled,omitempty"`

	// Name Name of the job.
	Name *string `json:"name,omitempty"`

	// Type Type of the job.
	Type *EJobType `json:"type,omitempty"`
}

// BaseJobSpec defines model for BaseJobSpec.
type BaseJobSpec struct {
	// Description Job description specified at the time of the job creation.
	Description *string `json:"description,omitempty"`

	// Name Name of the job.
	Name *string `json:"name,omitempty"`

	// Type Type of the job.
	Type *EJobType `json:"type,omitempty"`
}

// BaseManagedServerModel defines model for BaseManagedServerModel.
type BaseManagedServerModel struct {
	// CredentialsId ID of a credentials record used to connect to the server.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// Description Description of the server.
	Description *string `json:"description,omitempty"`

	// Id ID of the server.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Full DNS name or IP address of the server.
	Name *string `json:"name,omitempty"`

	// Type Type of the server.
	Type *EManagedServerType `json:"type,omitempty"`
}

// BaseManagedServerSpec defines model for BaseManagedServerSpec.
type BaseManagedServerSpec struct {
	// CredentialsId ID of the credentials used to connect to the server.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// Description Description of the server.
	Description *string `json:"description,omitempty"`

	// Name Full DNS name or IP address of the server.
	Name *string `json:"name,omitempty"`

	// Type Type of the server.
	Type *EManagedServerType `json:"type,omitempty"`
}

// BaseProxyModel defines model for BaseProxyModel.
type BaseProxyModel struct {
	// Description Description of the backup proxy.
	Description *string `json:"description,omitempty"`

	// Id ID of the backup proxy.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Name of the backup proxy.
	Name *string `json:"name,omitempty"`

	// Type Type of the backup proxy.
	Type *EProxyType `json:"type,omitempty"`
}

// BaseProxySpec defines model for BaseProxySpec.
type BaseProxySpec struct {
	// Description Description of the backup proxy.
	Description *string `json:"description,omitempty"`

	// Type Type of the backup proxy.
	Type *EProxyType `json:"type,omitempty"`
}

// BaseRepositoryModel defines model for BaseRepositoryModel.
type BaseRepositoryModel struct {
	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// Id ID of the backup repository.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// BaseRepositorySpec defines model for BaseRepositorySpec.
type BaseRepositorySpec struct {
	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// CapacityExtentModel defines model for CapacityExtentModel.
type CapacityExtentModel struct {
	// Id ID of an object storage repository added as a capacity extent.
	Id openapi_types.UUID `json:"id"`
}

// CapacityTierModel Capacity tier.
type CapacityTierModel struct {
	// CopyPolicyEnabled If *true*, Veeam Backup & Replication copies backups from the performance extents to the capacity extent as soon as the backups are created.
	CopyPolicyEnabled *bool `json:"copyPolicyEnabled,omitempty"`

	// Enabled If *true*, the capacity tier is enabled.
	Enabled bool `json:"enabled"`

	// Encryption Encryption of backup files.
	Encryption *BackupStorageSettingsEncryptionModel `json:"encryption,omitempty"`

	// Extents Array of capacity extents.
	Extents *[]CapacityExtentModel `json:"extents,omitempty"`

	// MovePolicyEnabled If *true*, Veeam Backup & Replication moves backup files that belong to inactive backup chains from the performance extents to the capacity extent.
	MovePolicyEnabled *bool `json:"movePolicyEnabled,omitempty"`

	// OffloadWindow Time scheme that defines permitted days and hours for the job to start.
	OffloadWindow *BackupWindowSettingModel `json:"offloadWindow,omitempty"`

	// OperationalRestorePeriodDays Number of days after which inactive backup chains on the performance extents are moved to the capacity extent. Specify *0* to offload inactive backup chains on the same day they are created.
	OperationalRestorePeriodDays *int `json:"operationalRestorePeriodDays,omitempty"`

	// OverridePolicy Policy that overrides the move policy if the scale-out backup repository is reaching its capacity.
	OverridePolicy *CapacityTierOverridePolicyModel `json:"overridePolicy,omitempty"`
}

// CapacityTierOverridePolicyModel Policy that overrides the move policy if the scale-out backup repository is reaching its capacity.
type CapacityTierOverridePolicyModel struct {
	// IsEnabled If *true*, Veeam Backup & Replication moves oldest backup files sooner if the scale-out backup repository is reaching the threshold.
	IsEnabled bool `json:"isEnabled"`

	// OverrideSpaceThresholdPercents Space threshold of the scale-out backup repository, in percent.
	OverrideSpaceThresholdPercents *int `json:"overrideSpaceThresholdPercents,omitempty"`
}

// CertificateModel Certificate settings.
type CertificateModel struct {
	// IssuedBy Issuer of the certificate.
	IssuedBy string `json:"issuedBy"`

	// IssuedTo Acquirer of the certificate.
	IssuedTo string `json:"issuedTo"`

	// KeyAlgorithm Key algorithm of the certificate.
	KeyAlgorithm string `json:"keyAlgorithm"`

	// KeySize Key size of the certificate.
	KeySize string `json:"keySize"`

	// SerialNumber Serial number of the certificate.
	SerialNumber string `json:"serialNumber"`

	// Subject Subject of the certificate.
	Subject string `json:"subject"`

	// Thumbprint Thumbprint of the certificate.
	Thumbprint string `json:"thumbprint"`

	// ValidBy Expiration date and time of the certificate.
	ValidBy time.Time `json:"validBy"`

	// ValidFrom Date and time the certificate is valid from.
	ValidFrom time.Time `json:"validFrom"`
}

// CertificateUploadSpec Certificate settings (for certificate-based authentication).
type CertificateUploadSpec struct {
	// Certificate Base64-encoded string of the content of a PFX certificate file.
	Certificate string `json:"certificate"`

	// FormatType Certificate file format.
	FormatType ECertificateFileFormatType `json:"formatType"`

	// Password Decryption password for the certificate file.
	Password *string `json:"password,omitempty"`
}

// CloudBrowserModel defines model for CloudBrowserModel.
type CloudBrowserModel struct {
	// CredentialsId ID of the cloud credentials record.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
	union       json.RawMessage
}

// CloudBrowserNewFolderSpec defines model for CloudBrowserNewFolderSpec.
type CloudBrowserNewFolderSpec struct {
	// CredentialsId ID of a cloud credentials record requiered to connect to the object storage.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// NewFolderName Name of the new folder.
	NewFolderName *string `json:"newFolderName,omitempty"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
	union       json.RawMessage
}

// CloudBrowserSpec defines model for CloudBrowserSpec.
type CloudBrowserSpec struct {
	// CredentialsId ID of the object storage account (for browsing either storage or compute infrastructure).
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
	union       json.RawMessage
}

// CloudCredentialsExportSpec defines model for CloudCredentialsExportSpec.
type CloudCredentialsExportSpec struct {
	// Ids Array of cloud credentials IDs that you want to export.
	Ids *[]openapi_types.UUID `json:"ids,omitempty"`

	// Names Array of cloud credentials user names. Wildcard characters are supported.
	Names *[]string `json:"names,omitempty"`

	// Types Array of cloud credentials types that you want to export.
	Types *[]ECloudCredentialsType `json:"types,omitempty"`
}

// CloudCredentialsImportModel Cloud credentials used for connection.
type CloudCredentialsImportModel struct {
	// Name User name, account name or access key.
	Name string `json:"name"`

	// Tag Tag used to identify the cloud credentials record.
	Tag string `json:"tag"`

	// Type Cloud credentials type.
	Type ECloudCredentialsType `json:"type"`
}

// CloudCredentialsImportSpecCollection defines model for CloudCredentialsImportSpecCollection.
type CloudCredentialsImportSpecCollection struct {
	// Amazon Array of AWS accounts.
	Amazon *[]AmazonCloudCredentialsImportSpec `json:"amazon,omitempty"`

	// AzureCompute Array of Azure compute accounts.
	AzureCompute *[]AzureComputeCloudCredentialsImportSpec `json:"azureCompute,omitempty"`

	// AzureStorage Array of Azure storage accounts.
	AzureStorage *[]AzureStorageCloudCredentialsImportSpec `json:"azureStorage,omitempty"`

	// Google Array of Google accounts.
	Google *[]GoogleCloudCredentialsImportSpec `json:"google,omitempty"`
}

// CloudCredentialsModel defines model for CloudCredentialsModel.
type CloudCredentialsModel struct {
	// Description Description of the cloud credentials record.
	Description *string `json:"description,omitempty"`

	// Id ID of the cloud credentials record.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Type Cloud credentials type.
	Type  *ECloudCredentialsType `json:"type,omitempty"`
	union json.RawMessage
}

// CloudCredentialsPasswordSpec defines model for CloudCredentialsPasswordSpec.
type CloudCredentialsPasswordSpec struct {
	// NewSecretKey New secret key.
	NewSecretKey string `json:"newSecretKey"`
}

// CloudCredentialsResult defines model for CloudCredentialsResult.
type CloudCredentialsResult struct {
	// Data Array of cloud credentials.
	Data []CloudCredentialsModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// CloudCredentialsSpec defines model for CloudCredentialsSpec.
type CloudCredentialsSpec struct {
	// Description Description of the cloud credentials record.
	Description *string `json:"description,omitempty"`

	// Type Cloud credentials type.
	Type  *ECloudCredentialsType `json:"type,omitempty"`
	union json.RawMessage
}

// CloudDeviceCodeModel defines model for CloudDeviceCodeModel.
type CloudDeviceCodeModel struct {
	// Type Cloud credentials type.
	Type  *ECloudCredentialsType `json:"type,omitempty"`
	union json.RawMessage
}

// CloudDeviceCodeSpec defines model for CloudDeviceCodeSpec.
type CloudDeviceCodeSpec struct {
	// Type Cloud credentials type.
	Type  *ECloudCredentialsType `json:"type,omitempty"`
	union json.RawMessage
}

// CloudHelperApplianceModel defines model for CloudHelperApplianceModel.
type CloudHelperApplianceModel struct {
	// Type Cloud credentials type.
	Type  *ECloudCredentialsType `json:"type,omitempty"`
	union json.RawMessage
}

// CloudHelperApplianceResult defines model for CloudHelperApplianceResult.
type CloudHelperApplianceResult struct {
	// Data Array of Lunux-based helper appliances.
	Data []CloudHelperApplianceModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// CloudHelperApplianceSpec defines model for CloudHelperApplianceSpec.
type CloudHelperApplianceSpec struct {
	// Type Cloud credentials type.
	Type  *ECloudCredentialsType `json:"type,omitempty"`
	union json.RawMessage
}

// CloudNativeApplicationModel defines model for CloudNativeApplicationModel.
type CloudNativeApplicationModel struct {
	// Type Cloud credentials type.
	Type  *ECloudCredentialsType `json:"type,omitempty"`
	union json.RawMessage
}

// ComputerRecoveryTokenModel defines model for ComputerRecoveryTokenModel.
type ComputerRecoveryTokenModel struct {
	// ExpirationDate Date and time when the recovery token expires.
	ExpirationDate time.Time `json:"expirationDate"`

	// Id ID of the recovery token.
	Id openapi_types.UUID `json:"id"`

	// Name Friendly name of the recovery token.
	Name string `json:"name"`

	// RecoveryToken Recovery token.
	RecoveryToken *string `json:"recoveryToken,omitempty"`
}

// ComputerRecoveryTokenResult defines model for ComputerRecoveryTokenResult.
type ComputerRecoveryTokenResult struct {
	// Data Array of recovery tokens.
	Data []ComputerRecoveryTokenModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// ComputerRecoveryTokenSpec defines model for ComputerRecoveryTokenSpec.
type ComputerRecoveryTokenSpec struct {
	// BackupIds Array of backup IDs whose data you want to restore with the recovery token.
	BackupIds []openapi_types.UUID `json:"backupIds"`

	// ExpirationDate Date and time when the access token expires.
	ExpirationDate time.Time `json:"expirationDate"`
}

// ConfigBackupEncryptionModel Encryption settings.
type ConfigBackupEncryptionModel struct {
	// IsEnabled If *true*, backup encryption is enabled.
	IsEnabled bool `json:"isEnabled"`

	// PasswordId ID of the password used for encryption.
	PasswordId openapi_types.UUID `json:"passwordId"`
}

// ConfigBackupLastSuccessfulModel Last successful backup.
type ConfigBackupLastSuccessfulModel struct {
	// LastSuccessfulTime Date and time when the last successful backup was created.
	LastSuccessfulTime *time.Time `json:"lastSuccessfulTime,omitempty"`

	// SessionId ID of the job session.
	SessionId *openapi_types.UUID `json:"sessionId,omitempty"`
}

// ConfigBackupModel defines model for ConfigBackupModel.
type ConfigBackupModel struct {
	// BackupRepositoryId ID of the backup repository on which the configuration backup is stored.
	BackupRepositoryId openapi_types.UUID `json:"backupRepositoryId"`

	// Encryption Encryption settings.
	Encryption ConfigBackupEncryptionModel `json:"encryption"`

	// IsEnabled If *true*, configuration backup is enabled.
	IsEnabled bool `json:"isEnabled"`

	// LastSuccessfulBackup Last successful backup.
	LastSuccessfulBackup ConfigBackupLastSuccessfulModel `json:"lastSuccessfulBackup"`

	// Notifications Notification settings.
	Notifications ConfigBackupNotificationsModel `json:"notifications"`

	// RestorePointsToKeep Number of restore points to keep in the backup repository.
	RestorePointsToKeep int32 `json:"restorePointsToKeep"`

	// Schedule Scheduling settings.
	Schedule ConfigBackupScheduleModel `json:"schedule"`
}

// ConfigBackupNotificationsModel Notification settings.
type ConfigBackupNotificationsModel struct {
	// SMTPSettings Email notification settings.
	SMTPSettings *ConfigBackupSMTPSettigsModel `json:"SMTPSettings,omitempty"`

	// SNMPEnabled If *true*, SNMP traps are enabled for this job.
	SNMPEnabled bool `json:"SNMPEnabled"`
}

// ConfigBackupSMTPSettigsModel Email notification settings.
type ConfigBackupSMTPSettigsModel struct {
	// IsEnabled If *true*, email notifications are enabled for this job.
	IsEnabled bool `json:"isEnabled"`

	// NotifyOnError If *true*, email notifications are sent when the job fails.
	NotifyOnError bool `json:"notifyOnError"`

	// NotifyOnSuccess If *true*, email notifications are sent when the job completes successfully.
	NotifyOnSuccess bool `json:"notifyOnSuccess"`

	// NotifyOnWarning If *true*, email notifications are sent when the job completes with a warning.
	NotifyOnWarning bool `json:"notifyOnWarning"`

	// Recipients Array of recipients' email addresses.
	Recipients []string `json:"recipients"`

	// SettingsType Type of notification settings.
	SettingsType EConfigBackupSMTPSettingsType `json:"settingsType"`

	// Subject Notification subject. Use the following variables in the subject:<ul> <li>*%Time%* — completion time</li> <li>*%JobName%* — job name</li> <li>*%JobResult%* — job result</li></ul>
	Subject string `json:"subject"`
}

// ConfigBackupScheduleModel Scheduling settings.
type ConfigBackupScheduleModel struct {
	// Daily Daily scheduling options.
	Daily *ScheduleDailyModel `json:"daily,omitempty"`

	// IsEnabled If *true*, backup scheduling is enabled.
	IsEnabled bool `json:"isEnabled"`

	// Monthly Monthly scheduling options.
	Monthly *ScheduleMonthlyModel `json:"monthly,omitempty"`
}

// ConnectionCertificateModel defines model for ConnectionCertificateModel.
type ConnectionCertificateModel struct {
	// Certificate Certificate settings.
	Certificate *CertificateModel `json:"certificate,omitempty"`

	// Fingerprint SSH key fingerprint used to verify the server identity.
	Fingerprint *string `json:"fingerprint,omitempty"`
}

// CredentialsExportSpec defines model for CredentialsExportSpec.
type CredentialsExportSpec struct {
	// Ids Array of credentials IDs.
	Ids *[]openapi_types.UUID `json:"ids,omitempty"`

	// Names Array of credentials user names. Wildcard characters are supported.
	Names *[]string `json:"names,omitempty"`

	// ShowHiddenCreds If *true*, service credentials are exported.
	ShowHiddenCreds *bool `json:"showHiddenCreds,omitempty"`

	// Types Array of credentials types.
	Types *[]ECredentialsType `json:"types,omitempty"`
}

// CredentialsImportModel Credentials used for connection.
type CredentialsImportModel struct {
	// CredentialsName User name, account name or access key.
	CredentialsName string `json:"credentialsName"`

	// CredentialsTag Tag used to identify the credentials record.
	CredentialsTag *string `json:"credentialsTag,omitempty"`
}

// CredentialsImportSpec defines model for CredentialsImportSpec.
type CredentialsImportSpec struct {
	// Description Description of the credentials record.
	Description *string `json:"description,omitempty"`

	// LinuxAdditionalSettings Additional Linux account settings.
	LinuxAdditionalSettings *CredentialsLinuxSettingsImportModel `json:"linuxAdditionalSettings,omitempty"`

	// Password Password.
	Password *string `json:"password,omitempty"`

	// Tag Tag used to identify the credentials record.
	Tag string `json:"tag"`

	// Type Credentials type.
	Type ECredentialsType `json:"type"`

	// Username User name.
	Username string `json:"username"`
}

// CredentialsImportSpecCollection defines model for CredentialsImportSpecCollection.
type CredentialsImportSpecCollection struct {
	// Credentials Array of credentials.
	Credentials []CredentialsImportSpec `json:"credentials"`
}

// CredentialsLinuxSettingsImportModel Additional Linux account settings.
type CredentialsLinuxSettingsImportModel struct {
	// SSHPort SSH port used to connect to a Linux server.
	SSHPort *int `json:"SSHPort,omitempty"`

	// AddToSudoers If *true*, the account is automatically added to the sudoers file.
	AddToSudoers *bool `json:"addToSudoers,omitempty"`

	// AutoElevated If *true*, the permissions of the account are automatically elevated to the root user.
	AutoElevated *bool `json:"autoElevated,omitempty"`

	// Passphrase Passphrase that protects the private key.
	Passphrase *string `json:"passphrase,omitempty"`

	// PrivateKey Private key.
	PrivateKey *string `json:"privateKey,omitempty"`

	// RootPassword Password for the root account.
	RootPassword *string `json:"rootPassword,omitempty"`

	// UseSu If *true*, the `su` command is used for Linux distributions where the `sudo` command is not available.
	UseSu *bool `json:"useSu,omitempty"`
}

// CredentialsModel defines model for CredentialsModel.
type CredentialsModel struct {
	// CreationTime Date and time when the credentials were created.
	CreationTime *time.Time `json:"creationTime,omitempty"`

	// Description Description of the credentials record.
	Description *string `json:"description,omitempty"`

	// Id ID of the credentials record.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Type Credentials type.
	Type *ECredentialsType `json:"type,omitempty"`

	// Username User name.
	Username *string `json:"username,omitempty"`
	union    json.RawMessage
}

// CredentialsPasswordChangeSpec defines model for CredentialsPasswordChangeSpec.
type CredentialsPasswordChangeSpec struct {
	// Password New password.
	Password string `json:"password"`
}

// CredentialsResult defines model for CredentialsResult.
type CredentialsResult struct {
	// Data Array of credentials.
	Data []CredentialsModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// CredentialsSpec defines model for CredentialsSpec.
type CredentialsSpec struct {
	// Description Description of the credentials record.
	Description *string `json:"description,omitempty"`

	// Password Password.
	Password *string `json:"password,omitempty"`

	// Type Credentials type.
	Type *ECredentialsType `json:"type,omitempty"`

	// Username User name.
	Username *string `json:"username,omitempty"`
	union    json.RawMessage
}

// EAllowedBackupsType Type of backup files that can be stored on the extent.
type EAllowedBackupsType string

// EAmazonRegionType AWS region type.
type EAmazonRegionType string

// EApplicationSettingsVSS Behavior scenario for application-aware processing.
type EApplicationSettingsVSS string

// EAzureComputeCredentialsCreationMode Mode that defines whether you want to connect to Azure Active Directory using an existing or a newly created Azure Active Directory application.
type EAzureComputeCredentialsCreationMode string

// EAzureComputeCredentialsDeploymentType Deployment type (global Microsoft Azure or Microsoft Azure Stack Hub).
type EAzureComputeCredentialsDeploymentType string

// EAzureRegionType Region where your Microsoft Azure container is located.
type EAzureRegionType string

// EBackupExclusionPolicy Exclusion policy.
type EBackupExclusionPolicy string

// EBackupModeType Type of the backup method used to create a restore point.
type EBackupModeType string

// EBackupObjectsFiltersOrderColumn defines model for EBackupObjectsFiltersOrderColumn.
type EBackupObjectsFiltersOrderColumn string

// EBackupOracleLogsSettings Type of archived logs processing.
type EBackupOracleLogsSettings string

// EBackupProxyImportType defines model for EBackupProxyImportType.
type EBackupProxyImportType string

// EBackupProxyTransportMode Transport mode of the backup proxy.
type EBackupProxyTransportMode string

// EBackupScriptProcessingMode Scenario for scripts execution.
type EBackupScriptProcessingMode string

// EBackupsFiltersOrderColumn defines model for EBackupsFiltersOrderColumn.
type EBackupsFiltersOrderColumn string

// ECertificateFileFormatType Certificate file format.
type ECertificateFileFormatType string

// ECloudBrowserFolderType Folder type.
type ECloudBrowserFolderType string

// ECloudCredentialsFiltersOrderColumn Sorts cloud credentials by one of the cloud credentials parameters.
type ECloudCredentialsFiltersOrderColumn string

// ECloudCredentialsType Cloud credentials type.
type ECloudCredentialsType string

// ECloudServiceType Type of cloud service.
type ECloudServiceType string

// ECompressionLevel Compression level.
type ECompressionLevel string

// EComputerRecoveryTokenFiltersOrderColumn defines model for EComputerRecoveryTokenFiltersOrderColumn.
type EComputerRecoveryTokenFiltersOrderColumn string

// EConfigBackupSMTPSettingsType Type of notification settings.
type EConfigBackupSMTPSettingsType string

// EConsumptionLimitKind Measurement unit.
type EConsumptionLimitKind string

// ECredentialsFiltersOrderColumn defines model for ECredentialsFiltersOrderColumn.
type ECredentialsFiltersOrderColumn string

// ECredentialsStorageType Credentials type used to connect to the Linux server.
type ECredentialsStorageType string

// ECredentialsType Credentials type.
type ECredentialsType string

// EDailyKinds Kind of daily scheduling scheme.
type EDailyKinds string

// EDayNumberInMonth Week day number in the month.
type EDayNumberInMonth string

// EDayOfWeek Day of the week.
type EDayOfWeek string

// EDiskCreationMode Disk format of the restored VM.
type EDiskCreationMode string

// EDiskInfoProcessState Process state of the disk.
type EDiskInfoProcessState string

// EDiskInfoType Type of the disk.
type EDiskInfoType string

// EEmailNotificationType Type of email notification settings (global notification settings specified for the backup server, or custom notification settings specified for this job).
type EEmailNotificationType string

// EEncryptionPasswordsFiltersOrderColumn defines model for EEncryptionPasswordsFiltersOrderColumn.
type EEncryptionPasswordsFiltersOrderColumn string

// EEntireVMRestoreModeType Restore mode.
type EEntireVMRestoreModeType string

// EGuestFSIndexingMode Indexing mode.
type EGuestFSIndexingMode string

// EHierarchyType Hierarchy type.
type EHierarchyType string

// EInstantRecoveryMountState Mount state.
type EInstantRecoveryMountState string

// EInstantVMRecoveryModeType Restore mode.
type EInstantVMRecoveryModeType string

// EInstantViVMRecoveryMountsFiltersOrderColumn Sorts mounts by one of the mount parameters.
type EInstantViVMRecoveryMountsFiltersOrderColumn string

// EInstantViVmRecoveryBiosUuidPolicyType BIOS UUID policy for the restored VM.
type EInstantViVmRecoveryBiosUuidPolicyType string

// EJobFiltersOrderColumn Orders jobs by the specified column.
type EJobFiltersOrderColumn string

// EJobStatesFiltersOrderColumn Orders job states by the specified column.
type EJobStatesFiltersOrderColumn string

// EJobStatus Current status of the job.
type EJobStatus string

// EJobType Type of the job.
type EJobType string

// EJobWorkload Workload which the job must process.
type EJobWorkload string

// ELoginGrantType Authorization grant type.<br>Available values:<ul> <li>`password` — used to obtain an access token by providing a user name and password.</li> <li>`refresh_token` — used to refresh an expired or lost access token by providing a refresh token.</li> <li>`authorization_code` — used to obtain an access token by providing an authorization code.</li> <li>`vbr_token` — used to obtain an access token by providing a Veeam Backup & Replication token. This grant type is only used in a restricted mode for integration with Veeam Backup & Replication.</li></ul>
type ELoginGrantType string

// EManagedServerType Type of the server.
type EManagedServerType string

// EManagedServersFiltersOrderColumn defines model for EManagedServersFiltersOrderColumn.
type EManagedServersFiltersOrderColumn string

// EMonth Month.
type EMonth string

// EObjectRestorePointOperation defines model for EObjectRestorePointOperation.
type EObjectRestorePointOperation string

// EObjectRestorePointsFiltersOrderColumn defines model for EObjectRestorePointsFiltersOrderColumn.
type EObjectRestorePointsFiltersOrderColumn string

// EPeriodicallyKinds Time unit for periodic job scheduling.
type EPeriodicallyKinds string

// EPlacementPolicyType Type of placement policy.
type EPlacementPolicyType string

// EPlatformType Platform name.
type EPlatformType string

// EProxiesFiltersOrderColumn defines model for EProxiesFiltersOrderColumn.
type EProxiesFiltersOrderColumn string

// EProxyType Type of the backup proxy.
type EProxyType string

// ERepositoryAccessType Access type.
type ERepositoryAccessType string

// ERepositoryConnectionType Repository connection type (direct or through a gateway server).
type ERepositoryConnectionType string

// ERepositoryExtentStatusType Performance extent status.
type ERepositoryExtentStatusType string

// ERepositoryFiltersOrderColumn Sorts repositories by one of the repository parameters.
type ERepositoryFiltersOrderColumn string

// ERepositoryStatesFiltersOrderColumn Orders repositories by the specified column.
type ERepositoryStatesFiltersOrderColumn string

// ERepositoryType Repository type.
type ERepositoryType string

// ERetainLogBackupsType Retention policy for the logs stored in the backup repository.
type ERetainLogBackupsType string

// ERetentionPolicyType Type of the retention policy.
type ERetentionPolicyType string

// ERotatedDriveCleanupMode Cleanup mode:<ul> <li>`Disabled` — continue the backup chain on an inserted drive.</li> <li>`ClearBackupFolder` — delete existing backups belonging to the job.</li> <li>`ClearRepositoryFolder` — delete all existing backups from repository.</li></ul>
type ERotatedDriveCleanupMode string

// ESQLLogsProcessing Type of transaction logs processing.
type ESQLLogsProcessing string

// EScaleOutRepositoryFiltersOrderColumn defines model for EScaleOutRepositoryFiltersOrderColumn.
type EScaleOutRepositoryFiltersOrderColumn string

// EScriptPeriodicityType Type of script periodicity.
type EScriptPeriodicityType string

// ESennightOfMonth Sennight of the month.
type ESennightOfMonth string

// EServicesFiltersOrderColumn defines model for EServicesFiltersOrderColumn.
type EServicesFiltersOrderColumn string

// ESessionResult Result status.
type ESessionResult string

// ESessionState State of the session.
type ESessionState string

// ESessionType Type of the session.
type ESessionType string

// ESessionsFiltersOrderColumn defines model for ESessionsFiltersOrderColumn.
type ESessionsFiltersOrderColumn string

// ESpeedUnit Traffic speed unit.
type ESpeedUnit string

// EStorageOptimization Storage optimization that depends on the target type.
type EStorageOptimization string

// ETaskLogRecordStatus defines model for ETaskLogRecordStatus.
type ETaskLogRecordStatus string

// ETransactionLogsSettings Transaction logs settings that define whether copy-only backups must be created, or transaction logs for Microsoft Exchange, Microsoft SQL and Oracle VMs must be processed.<br> If transaction log processing is selected, specify the following parameters:<ul> <li>[For Microsoft SQL Server VMs] Microsoft SQL Server transaction log settings</li> <li>[For Oracle VMs] Oracle archived log settings</li></ul>
type ETransactionLogsSettings string

// EViHostType Type of the VMware vSphere server.
type EViHostType string

// EViRootFiltersOrderColumn Sorts VMware vSphere servers by one of the VMware vSphere server parameters.
type EViRootFiltersOrderColumn string

// EVirusDetectionAction Action that Veeam Backup & Replication takes if the antivirus software finds a threat.
type EVirusDetectionAction string

// EVmwareDisksTypeToProcess Type of disk selection.
type EVmwareDisksTypeToProcess string

// EVmwareFcdInstantRecoveryMountsFiltersOrderColumn defines model for EVmwareFcdInstantRecoveryMountsFiltersOrderColumn.
type EVmwareFcdInstantRecoveryMountsFiltersOrderColumn string

// EVmwareInventoryType Type of the VMware vSphere object.
type EVmwareInventoryType string

// EWindowsHostComponentType Veeam Backup & Replication component.
type EWindowsHostComponentType string

// EmailCustomNotificationType Custom notification settings.
type EmailCustomNotificationType struct {
	// SuppressNotificationUntilLastRetry If *true*, email notifications are sent about the final job status only (not per every job retry).
	SuppressNotificationUntilLastRetry *bool `json:"SuppressNotificationUntilLastRetry,omitempty"`

	// NotifyOnError If *true*, email notifications are sent when the job fails.
	NotifyOnError *bool `json:"notifyOnError,omitempty"`

	// NotifyOnSuccess If *true*, email notifications are sent when the job completes successfully.
	NotifyOnSuccess *bool `json:"notifyOnSuccess,omitempty"`

	// NotifyOnWarning If *true*, email notifications are sent when the job completes with a warning.
	NotifyOnWarning *bool `json:"notifyOnWarning,omitempty"`

	// Subject Notification subject. Use the following variables in the subject:<ul> <li>*%Time%* — completion time</li> <li>*%JobName%* — job name</li> <li>*%JobResult%* — job result</li> <li>*%ObjectCount%* — number of VMs in the job</li> <li>*%Issues%* — number of VMs in the job that have finished with the Warning or Failed status</li></ul>
	Subject *string `json:"subject,omitempty"`
}

// EmailNotificationSettingsModel Email notification settings for the backup job.
type EmailNotificationSettingsModel struct {
	// CustomNotificationSettings Custom notification settings.
	CustomNotificationSettings *EmailCustomNotificationType `json:"customNotificationSettings,omitempty"`

	// IsEnabled If *true*, email notifications are enabled for this job.
	IsEnabled bool `json:"isEnabled"`

	// NotificationType Type of email notification settings (global notification settings specified for the backup server, or custom notification settings specified for this job).
	NotificationType *EEmailNotificationType `json:"notificationType,omitempty"`

	// Recipients Array of recipient’s email addresses.
	Recipients *[]string `json:"recipients,omitempty"`
}

// EmptySuccessResponse Empty success response (200, 201, 204).
type EmptySuccessResponse = map[string]interface{}

// EncryptionPasswordExportSpec defines model for EncryptionPasswordExportSpec.
type EncryptionPasswordExportSpec struct {
	// Hints Array of password hints.
	Hints *[]string `json:"hints,omitempty"`

	// Ids Array of password IDs.
	Ids *[]openapi_types.UUID `json:"ids,omitempty"`

	// ModificationTimeFrom Date and time when the password was last modified.
	ModificationTimeFrom *time.Time `json:"modificationTimeFrom,omitempty"`

	// Tags Array of password tags.
	Tags *[]string `json:"tags,omitempty"`
}

// EncryptionPasswordImportSpec defines model for EncryptionPasswordImportSpec.
type EncryptionPasswordImportSpec struct {
	// Hint Hint for the encryption password.
	Hint string `json:"hint"`

	// Password Password.
	Password string `json:"password"`

	// Tag Tag for the encryption password.
	Tag *string `json:"tag,omitempty"`
}

// EncryptionPasswordImportSpecCollection defines model for EncryptionPasswordImportSpecCollection.
type EncryptionPasswordImportSpecCollection struct {
	// EncryptionPasswords Array of encryption passwords.
	EncryptionPasswords *[]EncryptionPasswordImportSpec `json:"encryptionPasswords,omitempty"`
}

// EncryptionPasswordModel defines model for EncryptionPasswordModel.
type EncryptionPasswordModel struct {
	// Hint Hint for the encryption password.
	Hint string `json:"hint"`

	// Id ID of the encryption password.
	Id openapi_types.UUID `json:"id"`

	// ModificationTime Date and time when the password was last modified.
	ModificationTime *time.Time `json:"modificationTime,omitempty"`

	// Tag Tag for the encryption password.
	Tag *string `json:"tag,omitempty"`
}

// EncryptionPasswordSpec defines model for EncryptionPasswordSpec.
type EncryptionPasswordSpec struct {
	// Hint Hint for the encryption password. Provide a meaningful hint that will help you recall the password.
	Hint string `json:"hint"`

	// Password Password for data encryption. If you lose the password, you will not be able to restore it.
	Password string `json:"password"`

	// Tag Tag for the encryption password.
	Tag *string `json:"tag,omitempty"`
}

// EncryptionPasswordsResult defines model for EncryptionPasswordsResult.
type EncryptionPasswordsResult struct {
	// Data Array of encryption passwords.
	Data []EncryptionPasswordModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// EntireViVMCustomizedRestoreSpec defines model for EntireViVMCustomizedRestoreSpec.
type EntireViVMCustomizedRestoreSpec struct {
	// Datastore Destination datastore.
	Datastore *RestoreTargetDatastoreSpec `json:"datastore,omitempty"`

	// DestinationHost VMware vSphere object.
	DestinationHost *VmwareObjectModel `json:"destinationHost,omitempty"`

	// Folder Destination VM folder.
	Folder *RestoreTargetFolderSpec `json:"folder,omitempty"`

	// Network Network to which the restored VM is connected.
	Network *RestoreTargetNetworkSpec `json:"network,omitempty"`

	// ObjectRestorePointId ID of the restore point.
	ObjectRestorePointId *openapi_types.UUID `json:"objectRestorePointId,omitempty"`

	// PowerUp If *true*, Veeam Backup & Replication starts the restored VM on the target host.
	PowerUp *bool `json:"powerUp,omitempty"`

	// Reason Reason for restoring the VM.
	Reason *string `json:"reason,omitempty"`

	// ResourcePool VMware vSphere object.
	ResourcePool *VmwareObjectModel `json:"resourcePool,omitempty"`

	// RestoreProxies Backup proxies for VM data transport.
	RestoreProxies *RestoreProxySpec `json:"restoreProxies,omitempty"`

	// SecureRestore Secure restore settings.
	SecureRestore *SecureRestoreSpec `json:"secureRestore,omitempty"`

	// Type Restore mode.
	Type *EEntireVMRestoreModeType `json:"type,omitempty"`
}

// EntireViVMOriginalLocationRestoreSpec defines model for EntireViVMOriginalLocationRestoreSpec.
type EntireViVMOriginalLocationRestoreSpec struct {
	// ObjectRestorePointId ID of the restore point.
	ObjectRestorePointId *openapi_types.UUID `json:"objectRestorePointId,omitempty"`

	// PowerUp If *true*, Veeam Backup & Replication starts the restored VM on the target host.
	PowerUp *bool `json:"powerUp,omitempty"`

	// QuickRollback If *true*, Veeam Backup & Replication performs incremental restore.
	QuickRollback *bool `json:"quickRollback,omitempty"`

	// Reason Reason for restoring the VM.
	Reason *string `json:"reason,omitempty"`

	// RestoreProxies Backup proxies for VM data transport.
	RestoreProxies *RestoreProxySpec `json:"restoreProxies,omitempty"`

	// SecureRestore Secure restore settings.
	SecureRestore *SecureRestoreSpec `json:"secureRestore,omitempty"`

	// Type Restore mode.
	Type *EEntireVMRestoreModeType `json:"type,omitempty"`
}

// EntireViVMRestoreSpec defines model for EntireViVMRestoreSpec.
type EntireViVMRestoreSpec struct {
	// ObjectRestorePointId ID of the restore point.
	ObjectRestorePointId *openapi_types.UUID `json:"objectRestorePointId,omitempty"`

	// PowerUp If *true*, Veeam Backup & Replication starts the restored VM on the target host.
	PowerUp *bool `json:"powerUp,omitempty"`

	// Reason Reason for restoring the VM.
	Reason *string `json:"reason,omitempty"`

	// RestoreProxies Backup proxies for VM data transport.
	RestoreProxies *RestoreProxySpec `json:"restoreProxies,omitempty"`

	// SecureRestore Secure restore settings.
	SecureRestore *SecureRestoreSpec `json:"secureRestore,omitempty"`

	// Type Restore mode.
	Type  *EEntireVMRestoreModeType `json:"type,omitempty"`
	union json.RawMessage
}

// Error defines model for Error.
type Error struct {
	// ErrorCode The error code is a string that uniquely identifies an error condition and should be understood by programs that detect and handle errors by type
	ErrorCode ErrorErrorCode `json:"errorCode"`

	// Message The error message contains a generic description of the error condition in English. It is intended for a human audience
	Message string `json:"message"`

	// ResourceId ID of the object that is involved in the error (or empty)
	ResourceId *string `json:"resourceId,omitempty"`
}

// ErrorErrorCode The error code is a string that uniquely identifies an error condition and should be understood by programs that detect and handle errors by type
type ErrorErrorCode string

// EvCentersInventoryFiltersOrderColumn Sorts vCenter Servers by one of the job parameters.
type EvCentersInventoryFiltersOrderColumn string

// FullBackupMaintenanceDefragmentAndCompactModel Compact operation settings.
type FullBackupMaintenanceDefragmentAndCompactModel struct {
	// IsEnabled If *true*, Veeam Backup & Replication compacts full backup files.
	IsEnabled bool `json:"isEnabled"`

	// Monthly Monthly schedule settings.
	Monthly *AdvancedStorageScheduleMonthlyModel `json:"monthly,omitempty"`

	// Weekly Weekly schedule settings.
	Weekly *AdvancedStorageScheduleWeeklyModel `json:"weekly,omitempty"`
}

// FullBackupMaintenanceModel Maintenance settings for full backup files.
type FullBackupMaintenanceModel struct {
	// RemoveData Backup data setting for deleted VMs.
	RemoveData *FullBackupMaintenanceRemoveDataModel `json:"RemoveData,omitempty"`

	// DefragmentAndCompact Compact operation settings.
	DefragmentAndCompact *FullBackupMaintenanceDefragmentAndCompactModel `json:"defragmentAndCompact,omitempty"`
}

// FullBackupMaintenanceRemoveDataModel Backup data setting for deleted VMs.
type FullBackupMaintenanceRemoveDataModel struct {
	// AfterDays Number of days.
	AfterDays *int `json:"afterDays,omitempty"`

	// IsEnabled If *true*, Veeam Backup & Replication keeps the backup data of deleted VMs for the `afterDays` number of days.
	IsEnabled bool `json:"isEnabled"`
}

// GFSPolicySettingsModel GFS retention policy settings.
type GFSPolicySettingsModel struct {
	// IsEnabled If *true*, the long-term (GFS) retention policy is enabled.
	IsEnabled bool `json:"isEnabled"`

	// Monthly Monthly GFS retention policy.
	Monthly *GFSPolicySettingsMonthlyModel `json:"monthly,omitempty"`

	// Weekly Weekly GFS retention policy.
	Weekly *GFSPolicySettingsWeeklyModel `json:"weekly,omitempty"`

	// Yearly Yearly GFS retention policy.
	Yearly *GFSPolicySettingsYearlyModel `json:"yearly,omitempty"`
}

// GFSPolicySettingsMonthlyModel Monthly GFS retention policy.
type GFSPolicySettingsMonthlyModel struct {
	// DesiredTime Sennight of the month.
	DesiredTime *ESennightOfMonth `json:"desiredTime,omitempty"`

	// IsEnabled If *true*, the monthly GFS retention policy is enabled.
	IsEnabled bool `json:"isEnabled"`

	// KeepForNumberOfMonths Number of months to keep full backups for archival purposes. Possible values are from 1 through 999.
	KeepForNumberOfMonths *int `json:"keepForNumberOfMonths,omitempty"`
}

// GFSPolicySettingsWeeklyModel Weekly GFS retention policy.
type GFSPolicySettingsWeeklyModel struct {
	// DesiredTime Day of the week.
	DesiredTime *EDayOfWeek `json:"desiredTime,omitempty"`

	// IsEnabled If *true*, the weekly GFS retention policy is enabled.
	IsEnabled bool `json:"isEnabled"`

	// KeepForNumberOfWeeks Number of weeks to keep full backups for archival purposes. Possible values are from 1 through 9999.
	KeepForNumberOfWeeks *int `json:"keepForNumberOfWeeks,omitempty"`
}

// GFSPolicySettingsYearlyModel Yearly GFS retention policy.
type GFSPolicySettingsYearlyModel struct {
	// DesiredTime Month.
	DesiredTime *EMonth `json:"desiredTime,omitempty"`

	// IsEnabled If *true*, the yearly GFS retention policy is enabled.
	IsEnabled bool `json:"isEnabled"`

	// KeepForNumberOfYears Number of years to keep full backups for archival purposes. Possible values are from 1 through 999.
	KeepForNumberOfYears *int `json:"keepForNumberOfYears,omitempty"`
}

// GeneralOptionsEmailNotificationsModel Global email notification settings and job notifications.
type GeneralOptionsEmailNotificationsModel struct {
	// AdvancedSmtpOptions Advanced global email notification settings.
	AdvancedSmtpOptions AdvancedSmtpOptionsModel `json:"advancedSmtpOptions"`

	// From Email address from which email notifications must be sent.
	From string `json:"from"`

	// IsEnabled If *true*, global email notification settings are enabled.
	IsEnabled bool `json:"isEnabled"`

	// NotifyOnFailure If *true*, email notifications are sent when the job fails.
	NotifyOnFailure bool `json:"notifyOnFailure"`

	// NotifyOnLastRetry If *true*, email notifications are sent about the final job status only (not per every job retry).
	NotifyOnLastRetry bool `json:"notifyOnLastRetry"`

	// NotifyOnSuccess If *true*, email notifications are sent when the job completes successfully.
	NotifyOnSuccess bool `json:"notifyOnSuccess"`

	// NotifyOnWarning If *true*, email notifications are sent when the job completes with a warning.
	NotifyOnWarning bool `json:"notifyOnWarning"`

	// SendDailyReportsAt Time when Veeam Backup & Replication sends daily email reports.
	SendDailyReportsAt time.Time `json:"sendDailyReportsAt"`

	// SmtpServerName Full DNS name or IP address of the SMTP server.
	SmtpServerName string `json:"smtpServerName"`

	// Subject Notification subject. Use the following variables in the subject:<ul> <li>%Time% — completion time</li> <li>%JobName% — job name</li> <li>%JobResult% — job result</li> <li>%ObjectCount% — number of VMs in the job</li> <li>%Issues% — number of VMs in the job that have been processed with the Warning or Failed status</li></ul>
	Subject string `json:"subject"`

	// To Recipient email addresses. Use a semicolon to separate multiple addresses.
	To string `json:"to"`
}

// GeneralOptionsModel defines model for GeneralOptionsModel.
type GeneralOptionsModel struct {
	// EmailSettings Global email notification settings and job notifications.
	EmailSettings *GeneralOptionsEmailNotificationsModel `json:"emailSettings,omitempty"`

	// Notifications Other notifications such as notifications on low disk space, support contract expiration, and available updates.
	Notifications *GeneralOptionsNotificationsModel `json:"notifications,omitempty"`
}

// GeneralOptionsNotificationsModel Other notifications such as notifications on low disk space, support contract expiration, and available updates.
type GeneralOptionsNotificationsModel struct {
	// DatastoreSpaceThreshold Space threshold of production datastore, in percent.
	DatastoreSpaceThreshold int32 `json:"datastoreSpaceThreshold"`

	// DatastoreSpaceThresholdEnabled If *true*, notifications about critical amount of free space in production datastore are enabled.
	DatastoreSpaceThresholdEnabled bool `json:"datastoreSpaceThresholdEnabled"`

	// NotifyOnSupportExpiration If *true*, notifications about support contract expiration are enabled.
	NotifyOnSupportExpiration bool `json:"notifyOnSupportExpiration"`

	// NotifyOnUpdates If *true*, notifications about updates are enabled.
	NotifyOnUpdates bool `json:"notifyOnUpdates"`

	// SkipVMSpaceThreshold Space threshold of production datastore, in percent.
	SkipVMSpaceThreshold int32 `json:"skipVMSpaceThreshold"`

	// SkipVMSpaceThresholdEnabled If *true* and the `skipVMSpaceThreshold` threshold is reached, Veeam Backup & Replication terminates backup and replication jobs working with production datastores before VM snapshots are taken.
	SkipVMSpaceThresholdEnabled bool `json:"skipVMSpaceThresholdEnabled"`

	// StorageSpaceThreshold Space threshold of backup storage, in percent.
	StorageSpaceThreshold int32 `json:"storageSpaceThreshold"`

	// StorageSpaceThresholdEnabled If *true*, notifications about critical amount of free space in backup storage are enabled.
	StorageSpaceThresholdEnabled bool `json:"storageSpaceThresholdEnabled"`
}

// GlobalNetworkTrafficRulesModel defines model for GlobalNetworkTrafficRulesModel.
type GlobalNetworkTrafficRulesModel struct {
	// PreferredNetworks Preferred networks used for backup and replication traffic.
	PreferredNetworks *PreferredNetworksModel `json:"preferredNetworks,omitempty"`

	// TrafficRules Array of traffic rules.
	TrafficRules *[]TrafficRuleModel `json:"trafficRules,omitempty"`

	// UploadStreamsCount Number of TCP/IP connections per job.
	UploadStreamsCount *int `json:"uploadStreamsCount,omitempty"`

	// UseMultipleStreamsPerJob If *true*, Veeam Backup & Replication uses multiple TCP/IP transfer connection for every job session.
	UseMultipleStreamsPerJob bool `json:"useMultipleStreamsPerJob"`
}

// GoogleCloudCredentialsImportSpec defines model for GoogleCloudCredentialsImportSpec.
type GoogleCloudCredentialsImportSpec struct {
	// AccessKey Access ID of a Google HMAC key.
	AccessKey string `json:"accessKey"`

	// Description Description of the cloud credentials record.
	Description *string `json:"description,omitempty"`

	// SecretKey Secret linked to the access ID.
	SecretKey string `json:"secretKey"`

	// Tag Tag used to identify the cloud credentials record.
	Tag string `json:"tag"`

	// Type Cloud credentials type.
	Type ECloudCredentialsType `json:"type"`
}

// GoogleCloudCredentialsModel defines model for GoogleCloudCredentialsModel.
type GoogleCloudCredentialsModel struct {
	// AccessKey Access ID of a Google HMAC key.
	AccessKey string `json:"accessKey"`

	// Description Description of the cloud credentials record.
	Description *string `json:"description,omitempty"`

	// Id ID of the cloud credentials record.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Tag Tag used to identify the cloud credentials record.
	Tag *string `json:"tag,omitempty"`

	// Type Cloud credentials type.
	Type *ECloudCredentialsType `json:"type,omitempty"`
}

// GoogleCloudCredentialsSpec defines model for GoogleCloudCredentialsSpec.
type GoogleCloudCredentialsSpec struct {
	// AccessKey Access ID of a Google HMAC key.
	AccessKey string `json:"accessKey"`

	// Description Description of the cloud credentials record.
	Description *string `json:"description,omitempty"`

	// SecretKey Secret linked to the access ID.
	SecretKey string `json:"secretKey"`

	// Tag Tag used to identify the cloud credentials record.
	Tag *string `json:"tag,omitempty"`

	// Type Cloud credentials type.
	Type *ECloudCredentialsType `json:"type,omitempty"`
}

// GoogleCloudStorageAccountImportModel Account used to access the Google Cloud storage.
type GoogleCloudStorageAccountImportModel struct {
	// ConnectionSettings Object storage connection settings.
	ConnectionSettings ObjectStorageConnectionImportSpec `json:"connectionSettings"`

	// Credentials Cloud credentials used for connection.
	Credentials CloudCredentialsImportModel `json:"credentials"`

	// RegionId ID of a region where the storage bucket is located.
	RegionId string `json:"regionId"`
}

// GoogleCloudStorageAccountModel Account used to access the Google Cloud storage.
type GoogleCloudStorageAccountModel struct {
	// ConnectionSettings Object storage connection settings.
	ConnectionSettings ObjectStorageConnectionModel `json:"connectionSettings"`

	// CredentialsId ID of a cloud credentials record used to access the storage.
	CredentialsId openapi_types.UUID `json:"credentialsId"`

	// RegionId ID of a region where the storage bucket is located.
	RegionId string `json:"regionId"`
}

// GoogleCloudStorageBrowserDestinationSpec defines model for GoogleCloudStorageBrowserDestinationSpec.
type GoogleCloudStorageBrowserDestinationSpec struct {
	// BucketName Name of the bucket where you want to store your backup data.
	BucketName string `json:"bucketName"`

	// CredentialsId ID of a cloud credentials record requiered to connect to the object storage.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// HostId ID of a server you want to use to connect to the object storage. You can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.
	HostId *openapi_types.UUID `json:"hostId,omitempty"`

	// NewFolderName Name of the new folder.
	NewFolderName *string `json:"newFolderName,omitempty"`

	// RegionId Data center region where the bucket is located.
	RegionId string `json:"regionId"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// GoogleCloudStorageBrowserFilters Google Cloud hierarchy filters.
type GoogleCloudStorageBrowserFilters struct {
	// BucketName Bucket name.
	BucketName *string `json:"bucketName,omitempty"`

	// RegionId Google Cloud data center region.
	RegionId string `json:"regionId"`
}

// GoogleCloudStorageBrowserModel defines model for GoogleCloudStorageBrowserModel.
type GoogleCloudStorageBrowserModel struct {
	// CredentialsId ID of the cloud credentials record.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// HostId ID of a server used to connect to the object storage.
	HostId *openapi_types.UUID `json:"hostId,omitempty"`

	// Regions Array of regions.
	Regions *[]GoogleCloudStorageRegionBrowserModel `json:"regions,omitempty"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// GoogleCloudStorageBrowserSpec defines model for GoogleCloudStorageBrowserSpec.
type GoogleCloudStorageBrowserSpec struct {
	// CredentialsId ID of the object storage account (for browsing either storage or compute infrastructure).
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// Filters Google Cloud hierarchy filters.
	Filters *GoogleCloudStorageBrowserFilters `json:"filters,omitempty"`

	// GatewayServerId ID of a gateway server you want to use to connect to the object storage. Specify this parameter to check internet connection of the server. As a gateway server you can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.
	GatewayServerId *openapi_types.UUID `json:"gatewayServerId,omitempty"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// GoogleCloudStorageBucketBrowserModel defines model for GoogleCloudStorageBucketBrowserModel.
type GoogleCloudStorageBucketBrowserModel struct {
	// Folders Array of folders located in the bucket.
	Folders *[]string `json:"folders,omitempty"`

	// Name Bucket name.
	Name *string `json:"name,omitempty"`
}

// GoogleCloudStorageBucketModel Google Cloud object storage bucket where backup data is stored.
type GoogleCloudStorageBucketModel struct {
	// BucketName Name of a Google Cloud bucket.
	BucketName string `json:"bucketName"`

	// FolderName Name of the folder that the object storage repository is mapped to.
	FolderName string `json:"folderName"`

	// NearlineStorageEnabled If *true*, the nearline storage class is used.
	NearlineStorageEnabled *bool `json:"nearlineStorageEnabled,omitempty"`

	// StorageConsumptionLimit Soft consumption limit for the storage. The limit can be exceeded temporarily.
	StorageConsumptionLimit *ObjectStorageConsumptionLimitModel `json:"storageConsumptionLimit,omitempty"`
}

// GoogleCloudStorageImportSpec defines model for GoogleCloudStorageImportSpec.
type GoogleCloudStorageImportSpec struct {
	// Account Account used to access the Google Cloud storage.
	Account GoogleCloudStorageAccountImportModel `json:"account"`

	// Bucket Google Cloud object storage bucket where backup data is stored.
	Bucket GoogleCloudStorageBucketModel `json:"bucket"`

	// Description Description of the object storage repository.
	Description string `json:"description"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsImportSpec `json:"mountServer"`

	// Name Name of the object storage repository.
	Name string `json:"name"`

	// Tag Tag that identifies the object storage repository.
	Tag string `json:"tag"`

	// Type Repository type.
	Type ERepositoryType `json:"type"`
}

// GoogleCloudStorageModel defines model for GoogleCloudStorageModel.
type GoogleCloudStorageModel struct {
	// Account Account used to access the Google Cloud storage.
	Account GoogleCloudStorageAccountModel `json:"account"`

	// Bucket Google Cloud object storage bucket where backup data is stored.
	Bucket GoogleCloudStorageBucketModel `json:"bucket"`

	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// Id ID of the backup repository.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsModel `json:"mountServer"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// GoogleCloudStorageRegionBrowserModel defines model for GoogleCloudStorageRegionBrowserModel.
type GoogleCloudStorageRegionBrowserModel struct {
	// Buckets Array of buckets located in the region.
	Buckets *[]GoogleCloudStorageBucketBrowserModel `json:"buckets,omitempty"`

	// Id Region ID.
	Id *string `json:"id,omitempty"`

	// Name Region name.
	Name *string `json:"name,omitempty"`
}

// GoogleCloudStorageSpec defines model for GoogleCloudStorageSpec.
type GoogleCloudStorageSpec struct {
	// Account Account used to access the Google Cloud storage.
	Account GoogleCloudStorageAccountModel `json:"account"`

	// Bucket Google Cloud object storage bucket where backup data is stored.
	Bucket GoogleCloudStorageBucketModel `json:"bucket"`

	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsModel `json:"mountServer"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// GuestFileSystemIndexingModel VM guest OS file indexing.
type GuestFileSystemIndexingModel struct {
	// IndexingSettings Array of VMs with guest OS file indexing options.
	IndexingSettings *[]BackupIndexingSettingsModel `json:"indexingSettings,omitempty"`

	// IsEnabled If *true*, file indexing is enabled.
	IsEnabled bool `json:"isEnabled"`
}

// GuestInteractionProxiesSettingsImportModel Guest interaction proxy used to deploy the runtime process on the VM guest OS.
type GuestInteractionProxiesSettingsImportModel struct {
	// AutomaticSelection If *true*, Veeam Backup & Replication automatically selects the guest interaction proxy.
	AutomaticSelection bool `json:"automaticSelection"`

	// Proxies Array of proxies specified explicitly. The array must contain Microsoft Windows servers added to the backup infrastructure only.
	Proxies *[]string `json:"proxies,omitempty"`
}

// GuestInteractionProxiesSettingsModel Guest interaction proxy used to deploy the runtime process on the VM guest OS.
type GuestInteractionProxiesSettingsModel struct {
	// AutoSelection If *true*, Veeam Backup & Replication automatically selects the guest interaction proxy.
	AutoSelection bool `json:"autoSelection"`

	// ProxyIds Array of proxies specified explicitly. The array must contain Microsoft Windows servers added to the backup infrastructure only.
	ProxyIds *[]openapi_types.UUID `json:"proxyIds,omitempty"`
}

// GuestOsCredentialsImportModel VM custom credentials.
type GuestOsCredentialsImportModel struct {
	// CredentialsPerMachine Individual credentials for VMs.
	CredentialsPerMachine *[]GuestOsCredentialsPerMachineImportModel `json:"credentialsPerMachine,omitempty"`

	// Creds Credentials used for connection.
	Creds *CredentialsImportModel `json:"creds,omitempty"`
}

// GuestOsCredentialsModel VM custom credentials.
type GuestOsCredentialsModel struct {
	// CredentialsPerMachine Individual credentials for VMs.
	CredentialsPerMachine *[]GuestOsCredentialsPerMachineModel `json:"credentialsPerMachine,omitempty"`

	// CredsId Credentials ID for Microsoft Windows VMs.
	CredsId openapi_types.UUID `json:"credsId"`

	// CredsType Credentials type.
	CredsType ECredentialsType `json:"credsType"`
}

// GuestOsCredentialsPerMachineImportModel defines model for GuestOsCredentialsPerMachineImportModel.
type GuestOsCredentialsPerMachineImportModel struct {
	// LinuxCreds Credentials used for connection.
	LinuxCreds *CredentialsImportModel `json:"linuxCreds,omitempty"`

	// VmObject VMware vSphere object.
	VmObject VmwareObjectModel `json:"vmObject"`

	// WindowsCreds Credentials used for connection.
	WindowsCreds *CredentialsImportModel `json:"windowsCreds,omitempty"`
}

// GuestOsCredentialsPerMachineModel defines model for GuestOsCredentialsPerMachineModel.
type GuestOsCredentialsPerMachineModel struct {
	// LinuxCredsId Credentials ID for a Linux VM.
	LinuxCredsId *openapi_types.UUID `json:"linuxCredsId,omitempty"`

	// VmObject VMware vSphere object.
	VmObject VmwareObjectModel `json:"vmObject"`

	// WindowsCredsId Credentials ID for a Microsoft Windows VM.
	WindowsCredsId *openapi_types.UUID `json:"windowsCredsId,omitempty"`
}

// HostConnectionSpec defines model for HostConnectionSpec.
type HostConnectionSpec struct {
	// CredentialsId ID of a credentials record used to connect to the server.
	CredentialsId openapi_types.UUID `json:"credentialsId"`

	// Port Port used to communicate with the server.
	Port *int `json:"port,omitempty"`

	// ServerName Full DNS name or IP address of the server.
	ServerName string `json:"serverName"`

	// Type Type of the server.
	Type EManagedServerType `json:"type"`
}

// IBMCloudStorageAccountImportModel Account used to access the IBM Cloud storage.
type IBMCloudStorageAccountImportModel struct {
	// ConnectionSettings Object storage connection settings.
	ConnectionSettings ObjectStorageConnectionImportSpec `json:"connectionSettings"`

	// Credentials Cloud credentials used for connection.
	Credentials CloudCredentialsImportModel `json:"credentials"`

	// RegionId ID of a region where the storage is located.
	RegionId string `json:"regionId"`

	// ServicePoint Endpoint address of the storage.
	ServicePoint string `json:"servicePoint"`
}

// IBMCloudStorageAccountModel Account used to access the IBM Cloud storage.
type IBMCloudStorageAccountModel struct {
	// ConnectionSettings Object storage connection settings.
	ConnectionSettings ObjectStorageConnectionModel `json:"connectionSettings"`

	// CredentialsId ID of a cloud credentials record used to access the storage.
	CredentialsId openapi_types.UUID `json:"credentialsId"`

	// RegionId ID of a region where the storage is located.
	RegionId string `json:"regionId"`

	// ServicePoint Endpoint address and port number of the storage.
	ServicePoint string `json:"servicePoint"`
}

// IBMCloudStorageBrowserDestinationSpec defines model for IBMCloudStorageBrowserDestinationSpec.
type IBMCloudStorageBrowserDestinationSpec struct {
	// BucketName Name of the bucket where you want to store your backup data.
	BucketName string `json:"bucketName"`

	// ConnectionPoint Endpoint address and port number of the IBM Cloud object storage.
	ConnectionPoint string `json:"connectionPoint"`

	// CredentialsId ID of a cloud credentials record requiered to connect to the object storage.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// HostId ID of a server you want to use to connect to the object storage. You can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.
	HostId *openapi_types.UUID `json:"hostId,omitempty"`

	// NewFolderName Name of the new folder.
	NewFolderName *string `json:"newFolderName,omitempty"`

	// RegionId Region where the bucket is located.
	RegionId string `json:"regionId"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// IBMCloudStorageBrowserModel defines model for IBMCloudStorageBrowserModel.
type IBMCloudStorageBrowserModel struct {
	// CredentialsId ID of the cloud credentials record.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// HostId ID of a server used to connect to the object storage.
	HostId *openapi_types.UUID `json:"hostId,omitempty"`

	// Regions Array of regions.
	Regions *[]IBMCloudStorageRegionBrowserModel `json:"regions,omitempty"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// IBMCloudStorageBrowserSpec defines model for IBMCloudStorageBrowserSpec.
type IBMCloudStorageBrowserSpec struct {
	// CredentialsId ID of the object storage account (for browsing either storage or compute infrastructure).
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// GatewayServerId ID of a gateway server you want to use to connect to the object storage. Specify this parameter to check internet connection of the server. As a gateway server you can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.
	GatewayServerId *openapi_types.UUID `json:"gatewayServerId,omitempty"`

	// RegionId Region of the IBM Cloud object storage.
	RegionId string `json:"regionId"`

	// ServicePoint Endpoint address and port number of the IBM Cloud object storage.
	ServicePoint string `json:"servicePoint"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// IBMCloudStorageBucketBrowserModel defines model for IBMCloudStorageBucketBrowserModel.
type IBMCloudStorageBucketBrowserModel struct {
	// Folders Array of folders located in the bucket.
	Folders *[]string `json:"folders,omitempty"`

	// Name Bucket name.
	Name *string `json:"name,omitempty"`
}

// IBMCloudStorageBucketModel IBM Cloud bucket where backup data is stored.
type IBMCloudStorageBucketModel struct {
	// BucketName Name of an IBM Cloud bucket.
	BucketName string `json:"bucketName"`

	// FolderName Name of the folder that the object storage repository is mapped to.
	FolderName string `json:"folderName"`

	// Immutability Object storage immutability.
	Immutability *ObjectStorageImmutabilityModel `json:"immutability,omitempty"`

	// StorageConsumptionLimit Soft consumption limit for the storage. The limit can be exceeded temporarily.
	StorageConsumptionLimit *ObjectStorageConsumptionLimitModel `json:"storageConsumptionLimit,omitempty"`
}

// IBMCloudStorageImportSpec defines model for IBMCloudStorageImportSpec.
type IBMCloudStorageImportSpec struct {
	// Account Account used to access the IBM Cloud storage.
	Account IBMCloudStorageAccountImportModel `json:"account"`

	// Bucket IBM Cloud bucket where backup data is stored.
	Bucket IBMCloudStorageBucketModel `json:"bucket"`

	// Description Description of the object storage repository.
	Description string `json:"description"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsImportSpec `json:"mountServer"`

	// Name Name of the object storage repository.
	Name string `json:"name"`

	// ProxyAppliance Proxy appliance for the S3 compatible storage.
	ProxyAppliance *S3CompatibleProxyModel `json:"proxyAppliance,omitempty"`

	// Tag Tag that identifies the object storage repository.
	Tag string `json:"tag"`

	// Type Repository type.
	Type ERepositoryType `json:"type"`
}

// IBMCloudStorageModel defines model for IBMCloudStorageModel.
type IBMCloudStorageModel struct {
	// Account Account used to access the IBM Cloud storage.
	Account IBMCloudStorageAccountModel `json:"account"`

	// Bucket IBM Cloud bucket where backup data is stored.
	Bucket IBMCloudStorageBucketModel `json:"bucket"`

	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// Id ID of the backup repository.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsModel `json:"mountServer"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// ProxyAppliance Proxy appliance for the S3 compatible storage.
	ProxyAppliance *S3CompatibleProxyModel `json:"proxyAppliance,omitempty"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// IBMCloudStorageRegionBrowserModel defines model for IBMCloudStorageRegionBrowserModel.
type IBMCloudStorageRegionBrowserModel struct {
	// Buckets Array of buckets located in the region.
	Buckets *[]IBMCloudStorageBucketBrowserModel `json:"buckets,omitempty"`

	// Id Region ID.
	Id *string `json:"id,omitempty"`

	// Name Region name.
	Name *string `json:"name,omitempty"`
}

// IBMCloudStorageSpec defines model for IBMCloudStorageSpec.
type IBMCloudStorageSpec struct {
	// Account Account used to access the IBM Cloud storage.
	Account IBMCloudStorageAccountModel `json:"account"`

	// Bucket IBM Cloud bucket where backup data is stored.
	Bucket IBMCloudStorageBucketModel `json:"bucket"`

	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsModel `json:"mountServer"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// ProxyAppliance Proxy appliance for the S3 compatible storage.
	ProxyAppliance *S3CompatibleProxyModel `json:"proxyAppliance,omitempty"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// InstantViVMCustomizedRecoveryDatastoreSpec Datastore that keeps redo logs with changes that take place while a VM is running from a backup.
type InstantViVMCustomizedRecoveryDatastoreSpec struct {
	// CacheDatastore VMware vSphere object.
	CacheDatastore *VmwareObjectModel `json:"cacheDatastore,omitempty"`

	// RedirectIsEnabled If *true*, redo logs are redirected to `cacheDatastore`.
	RedirectIsEnabled bool `json:"redirectIsEnabled"`
}

// InstantViVMCustomizedRecoveryDestinationSpec Destination where the recovered VM resides. To get models of the destination host, folder and resource pool, use the [Get VMware vSphere Server Objects](#tag/Inventory-Browser/operation/GetVmwareHostObject) request.
type InstantViVMCustomizedRecoveryDestinationSpec struct {
	// BiosUuidPolicy BIOS UUID policy for the restored VM.
	BiosUuidPolicy EInstantViVmRecoveryBiosUuidPolicyType `json:"biosUuidPolicy"`

	// DestinationHost VMware vSphere object.
	DestinationHost VmwareObjectModel `json:"destinationHost"`

	// Folder VMware vSphere object.
	Folder VmwareObjectModel `json:"folder"`

	// ResourcePool VMware vSphere object.
	ResourcePool VmwareObjectModel `json:"resourcePool"`

	// RestoredVmName Restored VM name.
	RestoredVmName string `json:"restoredVmName"`
}

// InstantViVMCustomizedRecoverySpec defines model for InstantViVMCustomizedRecoverySpec.
type InstantViVMCustomizedRecoverySpec struct {
	// VmTagsRestoreEnabled If *true*, Veeam Backup & Replication restores tags that were assigned to the original VM, and assign them to the restored VM.
	VmTagsRestoreEnabled *bool `json:"VmTagsRestoreEnabled,omitempty"`

	// Datastore Datastore that keeps redo logs with changes that take place while a VM is running from a backup.
	Datastore InstantViVMCustomizedRecoveryDatastoreSpec `json:"datastore"`

	// Destination Destination where the recovered VM resides. To get models of the destination host, folder and resource pool, use the [Get VMware vSphere Server Objects](#tag/Inventory-Browser/operation/GetVmwareHostObject) request.
	Destination InstantViVMCustomizedRecoveryDestinationSpec `json:"destination"`

	// NicsEnabled If *true*, the restored VM is connected to the network.
	NicsEnabled *bool `json:"nicsEnabled,omitempty"`

	// ObjectRestorePointId ID of the restore point.
	ObjectRestorePointId *openapi_types.UUID `json:"objectRestorePointId,omitempty"`

	// Overwrite If *true*, Veeam Backup & Replication overwrites the existing VM that has the same name.
	Overwrite *bool `json:"overwrite,omitempty"`

	// PowerUp If *true*, Veeam Backup & Replication starts the restored VM on the target host.
	PowerUp *bool `json:"powerUp,omitempty"`

	// Reason Reason for restoring the VM.
	Reason *string `json:"reason,omitempty"`

	// SecureRestore Secure restore settings.
	SecureRestore *SecureRestoreSpec `json:"secureRestore,omitempty"`

	// Type Restore mode.
	Type *EInstantVMRecoveryModeType `json:"type,omitempty"`
}

// InstantViVMOriginalLocationRecoverySpec defines model for InstantViVMOriginalLocationRecoverySpec.
type InstantViVMOriginalLocationRecoverySpec = BaseInstantViVMRecoverySpec

// InstantViVMRecoveryMount VM mount.
type InstantViVMRecoveryMount struct {
	// ErrorMessage Error message.
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// Id Mount ID.
	Id openapi_types.UUID `json:"id"`

	// SessionId ID of the restore session. Use the ID to track the progress. For details, see [Get Session](#tag/Sessions/operation/GetSession).
	SessionId openapi_types.UUID      `json:"sessionId"`
	Spec      InstantViVMRecoverySpec `json:"spec"`

	// State Mount state.
	State EInstantRecoveryMountState `json:"state"`

	// VmName Name of the recovered VM.
	VmName string `json:"vmName"`
}

// InstantViVMRecoveryMountsResult defines model for InstantViVMRecoveryMountsResult.
type InstantViVMRecoveryMountsResult struct {
	// Data Array of VM mounts.
	Data []InstantViVMRecoveryMount `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// InstantViVMRecoverySpec defines model for InstantViVMRecoverySpec.
type InstantViVMRecoverySpec struct {
	// VmTagsRestoreEnabled If *true*, Veeam Backup & Replication restores tags that were assigned to the original VM, and assign them to the restored VM.
	VmTagsRestoreEnabled *bool `json:"VmTagsRestoreEnabled,omitempty"`

	// NicsEnabled If *true*, the restored VM is connected to the network.
	NicsEnabled *bool `json:"nicsEnabled,omitempty"`

	// ObjectRestorePointId ID of the restore point.
	ObjectRestorePointId *openapi_types.UUID `json:"objectRestorePointId,omitempty"`

	// PowerUp If *true*, Veeam Backup & Replication starts the restored VM on the target host.
	PowerUp *bool `json:"powerUp,omitempty"`

	// Reason Reason for restoring the VM.
	Reason *string `json:"reason,omitempty"`

	// SecureRestore Secure restore settings.
	SecureRestore *SecureRestoreSpec `json:"secureRestore,omitempty"`

	// Type Restore mode.
	Type  *EInstantVMRecoveryModeType `json:"type,omitempty"`
	union json.RawMessage
}

// JobExportSpec defines model for JobExportSpec.
type JobExportSpec struct {
	// Ids Array of job IDs.
	Ids *[]openapi_types.UUID `json:"ids,omitempty"`

	// Names Array of job names. Wildcard characters are supported.
	Names *[]string `json:"names,omitempty"`

	// Types Array of job types.
	Types *[]string `json:"types,omitempty"`
}

// JobImportSpec defines model for JobImportSpec.
type JobImportSpec struct {
	// Description Description of the job.
	Description string `json:"description"`

	// GuestProcessing Guest processing settings.
	GuestProcessing BackupJobGuestProcessingImportModel `json:"guestProcessing"`

	// IsHighPriority If *true*, the job has a high priority in getting backup infrastructure resources.
	IsHighPriority bool `json:"isHighPriority"`

	// Name Name of the job.
	Name string `json:"name"`

	// Schedule Job scheduling options.
	Schedule BackupScheduleModel `json:"schedule"`

	// Storage Backup storage settings.
	Storage BackupJobStorageImportModel `json:"storage"`

	// Type Type of the job.
	Type EJobType `json:"type"`

	// VirtualMachines Arrays of objects that you want to back up or exclude from the backup.
	VirtualMachines BackupJobVirtualMachinesSpec `json:"virtualMachines"`
}

// JobImportSpecCollection defines model for JobImportSpecCollection.
type JobImportSpecCollection struct {
	// Jobs Array of jobs.
	Jobs []JobImportSpec `json:"jobs"`
}

// JobModel defines model for JobModel.
type JobModel struct {
	// Description Description of the job.
	Description *string `json:"description,omitempty"`

	// Id ID of the job.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// IsDisabled If *true*, the job is disabled.
	IsDisabled *bool `json:"isDisabled,omitempty"`

	// Name Name of the job.
	Name *string `json:"name,omitempty"`

	// Type Type of the job.
	Type  *EJobType `json:"type,omitempty"`
	union json.RawMessage
}

// JobScriptsSettingsModel Script settings.
type JobScriptsSettingsModel struct {
	// DayOfWeek Days of the week when the scripts must be executed.
	DayOfWeek *[]EDayOfWeek `json:"dayOfWeek,omitempty"`

	// PeriodicityType Type of script periodicity.
	PeriodicityType *EScriptPeriodicityType `json:"periodicityType,omitempty"`

	// PostCommand Script settings.
	PostCommand *ScriptCommand `json:"postCommand,omitempty"`

	// PreCommand Script settings.
	PreCommand *ScriptCommand `json:"preCommand,omitempty"`

	// RunScriptEvery Number of the backup job session after which the scripts must be executed.
	RunScriptEvery *int `json:"runScriptEvery,omitempty"`
}

// JobSpec defines model for JobSpec.
type JobSpec struct {
	// Description Job description specified at the time of the job creation.
	Description *string `json:"description,omitempty"`

	// Name Name of the job.
	Name *string `json:"name,omitempty"`

	// Type Type of the job.
	Type  *EJobType `json:"type,omitempty"`
	union json.RawMessage
}

// JobStartSpec defines model for JobStartSpec.
type JobStartSpec struct {
	// PerformActiveFull If *true*, Veeam Backup & Replication will perform an active full backup.
	PerformActiveFull bool `json:"performActiveFull"`

	// StartChainedJobs If *true*, Veeam Backup & Replication will start chained jobs as well.
	StartChainedJobs *bool `json:"startChainedJobs,omitempty"`
}

// JobStateModel defines model for JobStateModel.
type JobStateModel struct {
	// Description Description of the job.
	Description string `json:"description"`

	// Id ID of the job.
	Id openapi_types.UUID `json:"id"`

	// LastResult Result status.
	LastResult ESessionResult `json:"lastResult"`

	// LastRun Last run of the job.
	LastRun *time.Time `json:"lastRun,omitempty"`

	// Name Name of the job.
	Name string `json:"name"`

	// NextRun Next run of the job.
	NextRun *time.Time `json:"nextRun,omitempty"`

	// ObjectsCount Number of objects processed by the job.
	ObjectsCount int `json:"objectsCount"`

	// RepositoryId ID of the backup repository.
	RepositoryId *openapi_types.UUID `json:"repositoryId,omitempty"`

	// RepositoryName Name of the backup repository.
	RepositoryName *string `json:"repositoryName,omitempty"`

	// SessionId ID of the last job session.
	SessionId *openapi_types.UUID `json:"sessionId,omitempty"`

	// Status Current status of the job.
	Status EJobStatus `json:"status"`

	// Type Type of the job.
	Type EJobType `json:"type"`

	// Workload Workload which the job must process.
	Workload EJobWorkload `json:"workload"`
}

// JobStatesResult defines model for JobStatesResult.
type JobStatesResult struct {
	// Data Array of job states.
	Data []JobStateModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// JobStopSpec defines model for JobStopSpec.
type JobStopSpec struct {
	// GracefullStop If *true*, Veeam Backup & Replication will produce a new restore point for those VMs that have already been processed and for VMs that are being processed at the moment.
	GracefullStop bool `json:"gracefullStop"`
}

// JobsResult defines model for JobsResult.
type JobsResult struct {
	// Data Array of jobs.
	Data []JobModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// LinuxCredentialsModel defines model for LinuxCredentialsModel.
type LinuxCredentialsModel struct {
	// SSHPort SSH port used to connect to a Linux server.
	SSHPort *int `json:"SSHPort,omitempty"`

	// AddToSudoers If *true*, the account is automatically added to the sudoers file.
	AddToSudoers *bool `json:"addToSudoers,omitempty"`

	// AutoElevated If *true*, the permissions of the account are automatically elevated to the root user.
	AutoElevated *bool `json:"autoElevated,omitempty"`

	// CreationTime Date and time when the credentials were created.
	CreationTime *time.Time `json:"creationTime,omitempty"`

	// Description Description of the credentials record.
	Description *string `json:"description,omitempty"`

	// Id ID of the credentials record.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Passphrase Passphrase that protects the private key.
	Passphrase *string `json:"passphrase,omitempty"`

	// PrivateKey Private key.
	PrivateKey *string `json:"privateKey,omitempty"`

	// Tag Tag used to identify the credentials record.
	Tag *string `json:"tag,omitempty"`

	// Type Credentials type.
	Type *ECredentialsType `json:"type,omitempty"`

	// UseSu If *true*, the `su` command is used for Linux distributions where the `sudo` command is not available.
	UseSu *bool `json:"useSu,omitempty"`

	// Username User name.
	Username *string `json:"username,omitempty"`
}

// LinuxCredentialsSpec defines model for LinuxCredentialsSpec.
type LinuxCredentialsSpec struct {
	// SSHPort SSH port used to connect to a Linux server.
	SSHPort *int `json:"SSHPort,omitempty"`

	// AddToSudoers If *true*, the account is automatically added to the sudoers file.
	AddToSudoers *bool `json:"addToSudoers,omitempty"`

	// AutoElevated If *true*, the permissions of the account are automatically elevated to the root user.
	AutoElevated *bool `json:"autoElevated,omitempty"`

	// Description Description of the credentials record.
	Description *string `json:"description,omitempty"`

	// Passphrase Passphrase that protects the private key.
	Passphrase *string `json:"passphrase,omitempty"`

	// Password Password.
	Password *string `json:"password,omitempty"`

	// PrivateKey Private key.
	PrivateKey *string `json:"privateKey,omitempty"`

	// RootPassword Password for the root account.
	RootPassword *string `json:"rootPassword,omitempty"`

	// Tag Tag used to identify the credentials record.
	Tag *string `json:"tag,omitempty"`

	// Type Credentials type.
	Type *ECredentialsType `json:"type,omitempty"`

	// UseSu If *true*, the `su` command is used for Linux distributions where the `sudo` command is not available.
	UseSu *bool `json:"useSu,omitempty"`

	// Username User name.
	Username *string `json:"username,omitempty"`
}

// LinuxHardenedRepositorySettingsModel Repository settings.
type LinuxHardenedRepositorySettingsModel struct {
	// AdvancedSettings Advanced settings for the backup repository.
	AdvancedSettings *RepositoryAdvancedSettingsModel `json:"advancedSettings,omitempty"`

	// EnableReadWriteLimit If *true*, reading and writing speed is limited.
	EnableReadWriteLimit *bool `json:"enableReadWriteLimit,omitempty"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// MakeRecentBackupsImmutableDays Number of days to keep immutable backups.
	MakeRecentBackupsImmutableDays *int `json:"makeRecentBackupsImmutableDays,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// Path Path to the folder where backup files are stored.
	Path *string `json:"path,omitempty"`

	// ReadWriteRate Maximum rate that restricts the total speed of reading and writing data to the backup repository disk.
	ReadWriteRate *int `json:"readWriteRate,omitempty"`

	// UseFastCloningOnXFSVolumes If *true*, fast cloning on XFS volumes is used.
	UseFastCloningOnXFSVolumes *bool `json:"useFastCloningOnXFSVolumes,omitempty"`
}

// LinuxHardenedStorageImportSpec defines model for LinuxHardenedStorageImportSpec.
type LinuxHardenedStorageImportSpec struct {
	// Description Description of the backup repository.
	Description string `json:"description"`

	// HostName ID of the server that is used as a backup repository.
	HostName string `json:"hostName"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsImportSpec `json:"mountServer"`

	// Name Name of the backup repository.
	Name string `json:"name"`

	// Repository Repository settings.
	Repository LinuxHardenedRepositorySettingsModel `json:"repository"`

	// Tag Tag that identifies the backup repository.
	Tag string `json:"tag"`

	// Type Repository type.
	Type ERepositoryType `json:"type"`
}

// LinuxHardenedStorageModel defines model for LinuxHardenedStorageModel.
type LinuxHardenedStorageModel struct {
	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// HostId ID of the server that is used as a backup repository.
	HostId openapi_types.UUID `json:"hostId"`

	// Id ID of the backup repository.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsModel `json:"mountServer"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// Repository Repository settings.
	Repository LinuxHardenedRepositorySettingsModel `json:"repository"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// LinuxHardenedStorageSpec defines model for LinuxHardenedStorageSpec.
type LinuxHardenedStorageSpec struct {
	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// HostId ID of the server that is used as a backup repository.
	HostId openapi_types.UUID `json:"hostId"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsModel `json:"mountServer"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// Repository Repository settings.
	Repository LinuxHardenedRepositorySettingsModel `json:"repository"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// LinuxHostImportSpec defines model for LinuxHostImportSpec.
type LinuxHostImportSpec struct {
	// Credentials Credentials used for connection.
	Credentials CredentialsImportModel `json:"credentials"`

	// Description Description of the server.
	Description string `json:"description"`

	// Name Full DNS name or IP address of the server.
	Name string `json:"name"`

	// SshFingerprint SSH key fingerprint used to verify the server identity.
	SshFingerprint string `json:"sshFingerprint"`

	// SshSettings SSH settings.
	SshSettings *LinuxHostSSHSettingsModel `json:"sshSettings,omitempty"`

	// Type Type of the server.
	Type EManagedServerType `json:"type"`
}

// LinuxHostModel defines model for LinuxHostModel.
type LinuxHostModel struct {
	// CredentialsId ID of a credentials record used to connect to the server.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// CredentialsStorageType Credentials type used to connect to the Linux server.
	CredentialsStorageType *ECredentialsStorageType `json:"credentialsStorageType,omitempty"`

	// Description Description of the server.
	Description *string `json:"description,omitempty"`

	// Id ID of the server.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Full DNS name or IP address of the server.
	Name *string `json:"name,omitempty"`

	// SshSettings SSH settings.
	SshSettings *LinuxHostSSHSettingsModel `json:"sshSettings,omitempty"`

	// Type Type of the server.
	Type *EManagedServerType `json:"type,omitempty"`
}

// LinuxHostSSHSettingsModel SSH settings.
type LinuxHostSSHSettingsModel struct {
	// ManagementPort Port used as a control channel from the Veeam Backup & Replication console to the Linux server.
	ManagementPort *int `json:"managementPort,omitempty"`

	// PortRangeEnd End port used for data transfer.
	PortRangeEnd *int `json:"portRangeEnd,omitempty"`

	// PortRangeStart Start port used for data transfer.
	PortRangeStart *int `json:"portRangeStart,omitempty"`

	// ServerThisSide If *true*, the server is run on this side.
	ServerThisSide *bool `json:"serverThisSide,omitempty"`

	// SshTimeOutMs SSH timeout, in ms. If a task targeted at the server is inactive after the timeout, the task is terminated.
	SshTimeOutMs *int `json:"sshTimeOutMs,omitempty"`
}

// LinuxHostSpec defines model for LinuxHostSpec.
type LinuxHostSpec = BaseManagedServerSpec

// LinuxLocalRepositorySettingsModel Repository settings.
type LinuxLocalRepositorySettingsModel struct {
	// AdvancedSettings Advanced settings for the backup repository.
	AdvancedSettings *RepositoryAdvancedSettingsModel `json:"advancedSettings,omitempty"`

	// EnableReadWriteLimit If *true*, reading and writing speed is limited.
	EnableReadWriteLimit *bool `json:"enableReadWriteLimit,omitempty"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// Path Path to the folder where backup files are stored.
	Path *string `json:"path,omitempty"`

	// ReadWriteRate Maximum rate that restricts the total speed of reading and writing data to the backup repository disk.
	ReadWriteRate *int `json:"readWriteRate,omitempty"`

	// UseFastCloningOnXFSVolumes If *true*, fast cloning on XFS volumes is used.
	UseFastCloningOnXFSVolumes *bool `json:"useFastCloningOnXFSVolumes,omitempty"`
}

// LinuxLocalStorageImportSpec defines model for LinuxLocalStorageImportSpec.
type LinuxLocalStorageImportSpec struct {
	// Description Description of the backup repository.
	Description string `json:"description"`

	// HostName ID of the server that is used as a backup repository.
	HostName string `json:"hostName"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsImportSpec `json:"mountServer"`

	// Name Name of the backup repository.
	Name string `json:"name"`

	// Repository Repository settings.
	Repository LinuxLocalRepositorySettingsModel `json:"repository"`

	// Tag Tag that identifies the backup repository.
	Tag string `json:"tag"`

	// Type Repository type.
	Type ERepositoryType `json:"type"`
}

// LinuxLocalStorageModel defines model for LinuxLocalStorageModel.
type LinuxLocalStorageModel struct {
	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// HostId ID of the server that is used as a backup repository.
	HostId openapi_types.UUID `json:"hostId"`

	// Id ID of the backup repository.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsModel `json:"mountServer"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// Repository Repository settings.
	Repository LinuxLocalRepositorySettingsModel `json:"repository"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// LinuxLocalStorageSpec defines model for LinuxLocalStorageSpec.
type LinuxLocalStorageSpec struct {
	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// HostId ID of the server that is used as a backup repository.
	HostId openapi_types.UUID `json:"hostId"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsModel `json:"mountServer"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// Repository Repository settings.
	Repository LinuxLocalRepositorySettingsModel `json:"repository"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// ManageServerExportSpec defines model for ManageServerExportSpec.
type ManageServerExportSpec struct {
	// Ids Array of server IDs.
	Ids *[]openapi_types.UUID `json:"ids,omitempty"`

	// Names Array of server names. Wildcard characters are supported.
	Names *[]string `json:"names,omitempty"`

	// Types Array of server types.
	Types *[]EManagedServerType `json:"types,omitempty"`
}

// ManageServerImportSpecCollection defines model for ManageServerImportSpecCollection.
type ManageServerImportSpecCollection struct {
	// LinuxHosts Array of managed Linux servers.
	LinuxHosts *[]LinuxHostImportSpec `json:"linuxHosts,omitempty"`

	// ViHosts Array of VMware vSphere servers.
	ViHosts *[]ViHostImportSpec `json:"viHosts,omitempty"`

	// WindowsHosts Array of managed Microsoft Windows servers.
	WindowsHosts *[]WindowsHostImportSpec `json:"windowsHosts,omitempty"`
}

// ManagedServerModel defines model for ManagedServerModel.
type ManagedServerModel struct {
	// CredentialsId ID of a credentials record used to connect to the server.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// Description Description of the server.
	Description *string `json:"description,omitempty"`

	// Id ID of the server.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Full DNS name or IP address of the server.
	Name *string `json:"name,omitempty"`

	// Type Type of the server.
	Type  *EManagedServerType `json:"type,omitempty"`
	union json.RawMessage
}

// ManagedServerSpec defines model for ManagedServerSpec.
type ManagedServerSpec struct {
	// CredentialsId ID of the credentials used to connect to the server.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// Description Description of the server.
	Description *string `json:"description,omitempty"`

	// Name Full DNS name or IP address of the server.
	Name *string `json:"name,omitempty"`

	// Type Type of the server.
	Type  *EManagedServerType `json:"type,omitempty"`
	union json.RawMessage
}

// ManagedServersResult defines model for ManagedServersResult.
type ManagedServersResult struct {
	// Data Array of managed servers.
	Data []ManagedServerModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// MountServerSettingsImportSpec Settings for the mount server that is used for file-level and application items restore.
type MountServerSettingsImportSpec struct {
	// MountServerName Name of the mount server.
	MountServerName string `json:"mountServerName"`

	// VPowerNFSEnabled If *true*, the vPower NFS Service is enabled on the mount server.
	VPowerNFSEnabled bool `json:"vPowerNFSEnabled"`

	// VPowerNFSPortSettings Network ports used by the vPower NFS Service.
	VPowerNFSPortSettings *VPowerNFSPortSettingsModel `json:"vPowerNFSPortSettings,omitempty"`

	// WriteCacheFolder Path to the folder used for writing cache during mount operations.
	WriteCacheFolder string `json:"writeCacheFolder"`
}

// MountServerSettingsModel Settings for the mount server that is used for file-level and application items restore.
type MountServerSettingsModel struct {
	// MountServerId ID of the mount server.
	MountServerId openapi_types.UUID `json:"mountServerId"`

	// VPowerNFSEnabled If *true*, the vPower NFS Service is enabled on the mount server.
	VPowerNFSEnabled bool `json:"vPowerNFSEnabled"`

	// VPowerNFSPortSettings Network ports used by the vPower NFS Service.
	VPowerNFSPortSettings *VPowerNFSPortSettingsModel `json:"vPowerNFSPortSettings,omitempty"`

	// WriteCacheFolder Path to the folder used for writing cache during mount operations.
	WriteCacheFolder string `json:"writeCacheFolder"`
}

// NetworkRepositorySettingsModel Repository settings.
type NetworkRepositorySettingsModel struct {
	// AdvancedSettings Advanced settings for the backup repository.
	AdvancedSettings *RepositoryAdvancedSettingsModel `json:"advancedSettings,omitempty"`

	// EnableReadWriteLimit If *true*, reading and writing speed is limited.
	EnableReadWriteLimit *bool `json:"enableReadWriteLimit,omitempty"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// ReadWriteRate Maximum rate that restricts the total speed of reading and writing data to the backup repository disk.
	ReadWriteRate *int `json:"readWriteRate,omitempty"`
}

// NfsRepositoryShareSettingsModel Share settings.
type NfsRepositoryShareSettingsModel struct {
	// GatewayServer Settings for the gateway server.
	GatewayServer *RepositoryShareGatewayModel `json:"gatewayServer,omitempty"`

	// SharePath Path to the shared folder that is used as a backup repository.
	SharePath string `json:"sharePath"`
}

// NfsRepositoryShareSettingsSpec defines model for NfsRepositoryShareSettingsSpec.
type NfsRepositoryShareSettingsSpec struct {
	// GatewayServer Settings for the gateway server.
	GatewayServer *RepositoryShareGatewayImportSpec `json:"gatewayServer,omitempty"`

	// SharePath Path to the shared folder that is used as a backup repository.
	SharePath string `json:"sharePath"`
}

// NfsStorageImportSpec defines model for NfsStorageImportSpec.
type NfsStorageImportSpec struct {
	// Description Description of the backup repository.
	Description string `json:"description"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsImportSpec `json:"mountServer"`

	// Name Name of the backup repository.
	Name string `json:"name"`

	// Repository Repository settings.
	Repository NetworkRepositorySettingsModel `json:"repository"`
	Share      NfsRepositoryShareSettingsSpec `json:"share"`

	// Tag Tag that identifies the backup repository.
	Tag string `json:"tag"`

	// Type Repository type.
	Type ERepositoryType `json:"type"`
}

// NfsStorageModel defines model for NfsStorageModel.
type NfsStorageModel struct {
	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// Id ID of the backup repository.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsModel `json:"mountServer"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// Repository Repository settings.
	Repository NetworkRepositorySettingsModel `json:"repository"`

	// Share Share settings.
	Share NfsRepositoryShareSettingsModel `json:"share"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// NfsStorageSpec defines model for NfsStorageSpec.
type NfsStorageSpec struct {
	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsModel `json:"mountServer"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// Repository Repository settings.
	Repository NetworkRepositorySettingsModel `json:"repository"`

	// Share Share settings.
	Share NfsRepositoryShareSettingsModel `json:"share"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// NotificationSettingsModel Notification settings for the backup job.
type NotificationSettingsModel struct {
	// EmailNotifications Email notification settings for the backup job.
	EmailNotifications *EmailNotificationSettingsModel `json:"emailNotifications,omitempty"`

	// SendSNMPNotifications If *true*, SNMP notifications are enabled for this job.
	SendSNMPNotifications *bool `json:"sendSNMPNotifications,omitempty"`

	// VmAttribute VM attribute settings.
	VmAttribute *NotificationVmAttributeSettingsModel `json:"vmAttribute,omitempty"`
}

// NotificationVmAttributeSettingsModel VM attribute settings.
type NotificationVmAttributeSettingsModel struct {
	// AppendToExisitingValue If *true*, information about successfully performed backup is appended to the existing value of the attribute added by the user.
	AppendToExisitingValue *bool `json:"appendToExisitingValue,omitempty"`

	// IsEnabled If *true*, information about successfully performed backup is written to a VM attribute.
	IsEnabled bool `json:"isEnabled"`

	// Notes Name of the VM attribute.
	Notes *string `json:"notes,omitempty"`
}

// ObjectRestorePointDiskModel defines model for ObjectRestorePointDiskModel.
type ObjectRestorePointDiskModel struct {
	// Capacity Capacity of the disk.
	Capacity int64 `json:"capacity"`

	// Name Name of the disk.
	Name string `json:"name"`

	// State Process state of the disk.
	State EDiskInfoProcessState `json:"state"`

	// Type Type of the disk.
	Type EDiskInfoType `json:"type"`

	// Uid ID of the disk.
	Uid string `json:"uid"`
}

// ObjectRestorePointDisksResult defines model for ObjectRestorePointDisksResult.
type ObjectRestorePointDisksResult struct {
	// Data Array of disks.
	Data []ObjectRestorePointDiskModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// ObjectRestorePointModel defines model for ObjectRestorePointModel.
type ObjectRestorePointModel struct {
	// AllowedOperations Array of operations allowed for the restore point.
	AllowedOperations []EObjectRestorePointOperation `json:"allowedOperations"`

	// BackupId ID of a backup that contains the restore point.
	BackupId openapi_types.UUID `json:"backupId"`

	// CreationTime Date and time when the restore point was created.
	CreationTime time.Time `json:"creationTime"`

	// Id ID of the restore point.
	Id openapi_types.UUID `json:"id"`

	// Name Object name.
	Name string `json:"name"`

	// PlatformId ID of a platform on which the object was created.
	PlatformId openapi_types.UUID `json:"platformId"`

	// PlatformName Platform name.
	PlatformName *EPlatformType `json:"platformName,omitempty"`
}

// ObjectRestorePointsResult defines model for ObjectRestorePointsResult.
type ObjectRestorePointsResult struct {
	// Data Array of restore points.
	Data []ObjectRestorePointModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// ObjectStorageConnectionImportSpec Object storage connection settings.
type ObjectStorageConnectionImportSpec struct {
	// ConnectionType Repository connection type (direct or through a gateway server).
	ConnectionType ERepositoryConnectionType `json:"connectionType"`

	// GatewayServers Array of gateway server IDs. The value is *null* if the connection type is *Direct*.
	GatewayServers *[]string `json:"gatewayServers,omitempty"`
}

// ObjectStorageConnectionModel Object storage connection settings.
type ObjectStorageConnectionModel struct {
	// ConnectionType Repository connection type (direct or through a gateway server).
	ConnectionType ERepositoryConnectionType `json:"connectionType"`

	// GatewayServerIds Array of gateway server IDs. The value is *null* if the connection type is *Direct*.
	GatewayServerIds *[]openapi_types.UUID `json:"gatewayServerIds,omitempty"`
}

// ObjectStorageConsumptionLimitModel Soft consumption limit for the storage. The limit can be exceeded temporarily.
type ObjectStorageConsumptionLimitModel struct {
	// ConsumptionLimitCount Limit value.
	ConsumptionLimitCount *int `json:"consumptionLimitCount,omitempty"`

	// ConsumptionLimitKind Measurement unit.
	ConsumptionLimitKind *EConsumptionLimitKind `json:"consumptionLimitKind,omitempty"`

	// IsEnabled If *true*, the consumption limit is enabled.
	IsEnabled *bool `json:"isEnabled,omitempty"`
}

// ObjectStorageImmutabilityModel Object storage immutability.
type ObjectStorageImmutabilityModel struct {
	// DaysCount Immutability period.
	DaysCount *int `json:"daysCount,omitempty"`

	// IsEnabled If *true*, storage immutability is enabled.
	IsEnabled *bool `json:"isEnabled,omitempty"`
}

// PaginationResult Pagination settings.
type PaginationResult struct {
	// Count Number of returned results.
	Count int32 `json:"count"`

	// Limit Maximum number of results to return.
	Limit *int32 `json:"limit,omitempty"`

	// Skip Number of skipped results.
	Skip *int32 `json:"skip,omitempty"`

	// Total Total number of results.
	Total int32 `json:"total"`
}

// PerformanceExtentModel defines model for PerformanceExtentModel.
type PerformanceExtentModel struct {
	// Id ID of the backup repository added as a performance extent.
	Id openapi_types.UUID `json:"id"`

	// Name Name of the backup repository added as a performance extent.
	Name string `json:"name"`

	// Status Performance extent status.
	Status *ERepositoryExtentStatusType `json:"status,omitempty"`
}

// PerformanceExtentSpec defines model for PerformanceExtentSpec.
type PerformanceExtentSpec struct {
	// Id ID of a backup repository added as a performance extent.
	Id openapi_types.UUID `json:"id"`
}

// PerformanceTierAdvancedSettingsModel Advanced settings of the performance tier.
type PerformanceTierAdvancedSettingsModel struct {
	// FullWhenExtentOffline If *true*, Veeam Backup & Replication creates a full backup file instead of an incremental backup file in case the required extent is offline.
	FullWhenExtentOffline *bool `json:"fullWhenExtentOffline,omitempty"`

	// PerVmBackup If *true*, Veeam Backup & Replication creates a separate backup file for every VM in the job.
	PerVmBackup *bool `json:"perVmBackup,omitempty"`
}

// PerformanceTierModel Performance tier.
type PerformanceTierModel struct {
	// AdvancedSettings Advanced settings of the performance tier.
	AdvancedSettings *PerformanceTierAdvancedSettingsModel `json:"advancedSettings,omitempty"`

	// PerformanceExtents Array of performance extents.
	PerformanceExtents []PerformanceExtentModel `json:"performanceExtents"`
}

// PerformanceTierSpec Performance tier.
type PerformanceTierSpec struct {
	// AdvancedSettings Advanced settings of the performance tier.
	AdvancedSettings *PerformanceTierAdvancedSettingsModel `json:"advancedSettings,omitempty"`

	// PerformanceExtents Array of performance extents.
	PerformanceExtents []PerformanceExtentSpec `json:"performanceExtents"`
}

// PlacementPolicyModel Backup file placement policy.
type PlacementPolicyModel struct {
	// EnforceStrictPlacementPolicy If *true*, the backup job fails in case the placement policy cannot be met.
	EnforceStrictPlacementPolicy *bool `json:"enforceStrictPlacementPolicy,omitempty"`

	// Settings Placement policy settings.
	Settings *[]BackupPlacementSettingsModel `json:"settings,omitempty"`

	// Type Type of placement policy.
	Type EPlacementPolicyType `json:"type"`
}

// PreferredNetworkModel defines model for PreferredNetworkModel.
type PreferredNetworkModel struct {
	// CidrNotation CIDR notation.
	CidrNotation *string `json:"cidrNotation,omitempty"`

	// IpAddress IP address.
	IpAddress *string `json:"ipAddress,omitempty"`

	// SubnetMask Subnet mask.
	SubnetMask *string `json:"subnetMask,omitempty"`
}

// PreferredNetworksModel Preferred networks used for backup and replication traffic.
type PreferredNetworksModel struct {
	// IsEnabled If *true*, prefered networks are enabled.
	IsEnabled bool `json:"isEnabled"`

	// Networks Array of networks.
	Networks *[]PreferredNetworkModel `json:"networks,omitempty"`
}

// PrimaryStorageIntegrationSettingsModel Primary storage integration settings for the backup job.
type PrimaryStorageIntegrationSettingsModel struct {
	// FailoverToStandardBackup If *true*, failover to the regular VM processing mode is enabled. In this case, if backup from storage snapshot fails, VM snapshots are used.
	FailoverToStandardBackup *bool `json:"failoverToStandardBackup,omitempty"`

	// IsEnabled If *true*, the primary storage integration is enabled. In this case, storage snapshots (instead of VM snapshots) are used for VM data processing.
	IsEnabled bool `json:"isEnabled"`

	// LimitProcessedVm If *true*, the number of processed VMs per storage snapshot is limited.
	LimitProcessedVm *bool `json:"limitProcessedVm,omitempty"`

	// LimitProcessedVmCount Number of processed VMs per storage snapshot.
	LimitProcessedVmCount *int `json:"limitProcessedVmCount,omitempty"`
}

// PrivateKeyChangeSpec defines model for PrivateKeyChangeSpec.
type PrivateKeyChangeSpec struct {
	// Passphrase Passphrase that protects the private key.
	Passphrase *string `json:"passphrase,omitempty"`

	// PrivateKey New private key.
	PrivateKey string `json:"privateKey"`
}

// ProxiesResult defines model for ProxiesResult.
type ProxiesResult struct {
	// Data Array of backup proxies.
	Data []ProxyModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// ProxyDatastoreModel defines model for ProxyDatastoreModel.
type ProxyDatastoreModel struct {
	// Datastore VMware vSphere object.
	Datastore *VmwareObjectModel `json:"datastore,omitempty"`

	// VmCount Number of VMs.
	VmCount *int `json:"vmCount,omitempty"`
}

// ProxyDatastoreSettingsModel Datastores to which the backup proxy has a direct SAN or NFS connection.
type ProxyDatastoreSettingsModel struct {
	// AutoSelect If *true*, all datastores that the backup proxy can access are detected automatically.
	AutoSelect bool `json:"autoSelect"`

	// Datastores Array of datastores to which the backup proxy has a direct SAN or NFS connection.
	Datastores *[]ProxyDatastoreModel `json:"datastores,omitempty"`
}

// ProxyExportSpec defines model for ProxyExportSpec.
type ProxyExportSpec struct {
	// Ids Array of backup proxy IDs.
	Ids *[]openapi_types.UUID `json:"ids,omitempty"`

	// Names Array of backup proxy names. Wildcard characters are supported.
	Names *[]string `json:"names,omitempty"`

	// Types Array of backup proxy types.
	Types *[]EProxyType `json:"types,omitempty"`
}

// ProxyImportSpec defines model for ProxyImportSpec.
type ProxyImportSpec struct {
	// Description Description of the backup proxy.
	Description string `json:"description"`

	// Server Settings of the server that is used as a backup proxy.
	Server ProxyServerSettingsImportSpec `json:"server"`

	// Type Type of the backup proxy.
	Type EProxyType `json:"type"`
}

// ProxyImportSpecCollection defines model for ProxyImportSpecCollection.
type ProxyImportSpecCollection struct {
	// Proxies Array of backup proxies.
	Proxies []ProxyImportSpec `json:"proxies"`
}

// ProxyModel defines model for ProxyModel.
type ProxyModel struct {
	// Description Description of the backup proxy.
	Description *string `json:"description,omitempty"`

	// Id ID of the backup proxy.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Name of the backup proxy.
	Name *string `json:"name,omitempty"`

	// Type Type of the backup proxy.
	Type  *EProxyType `json:"type,omitempty"`
	union json.RawMessage
}

// ProxyServerSettingsImportSpec Settings of the server that is used as a backup proxy.
type ProxyServerSettingsImportSpec struct {
	// ConnectedDatastores Datastores to which the backup proxy has a direct SAN or NFS connection.
	ConnectedDatastores *ProxyDatastoreSettingsModel `json:"connectedDatastores,omitempty"`

	// FailoverToNetwork (For the Direct storage access and Virtual appliance transport modes) If *true*, Veeam Backup & Replication failovers to the network transport mode in case the primary mode fails or is unavailable.
	FailoverToNetwork *bool `json:"failoverToNetwork,omitempty"`

	// HostName Name of the server.
	HostName string `json:"hostName"`

	// HostTag Tag assigned to the server.
	HostTag *string `json:"hostTag,omitempty"`

	// HostToProxyEncryption (For the Network mode) If *true*, VM data is transferred over an encrypted TLS connection.
	HostToProxyEncryption *bool `json:"hostToProxyEncryption,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// TransportMode Transport mode of the backup proxy.
	TransportMode *EBackupProxyTransportMode `json:"transportMode,omitempty"`
}

// ProxyServerSettingsModel Server settings for the backup proxy.
type ProxyServerSettingsModel struct {
	// ConnectedDatastores Datastores to which the backup proxy has a direct SAN or NFS connection.
	ConnectedDatastores *ProxyDatastoreSettingsModel `json:"connectedDatastores,omitempty"`

	// FailoverToNetwork (For the Direct storage access and Virtual appliance transport modes) If *true*, Veeam Backup & Replication failovers to the network transport mode in case the primary mode fails or is unavailable.
	FailoverToNetwork *bool `json:"failoverToNetwork,omitempty"`

	// HostId ID of the server.
	HostId openapi_types.UUID `json:"hostId"`

	// HostToProxyEncryption (For the Network mode) If *true*, VM data is transferred over an encrypted TLS connection.
	HostToProxyEncryption *bool `json:"hostToProxyEncryption,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// TransportMode Transport mode of the backup proxy.
	TransportMode *EBackupProxyTransportMode `json:"transportMode,omitempty"`
}

// ProxySpec defines model for ProxySpec.
type ProxySpec struct {
	// Description Description of the backup proxy.
	Description *string `json:"description,omitempty"`

	// Type Type of the backup proxy.
	Type  *EProxyType `json:"type,omitempty"`
	union json.RawMessage
}

// RepositoriesResult defines model for RepositoriesResult.
type RepositoriesResult struct {
	// Data Array of backup repositories.
	Data []RepositoryModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// RepositoryAccessPermissionsModel Repository access permissions.
type RepositoryAccessPermissionsModel struct {
	// AccessPolicy Access type.
	AccessPolicy ERepositoryAccessType `json:"accessPolicy"`

	// Accounts (For *AllowExplicit* access policy) Array of accounts that have access to the backup repository.
	Accounts *[]string `json:"accounts,omitempty"`

	// EncryptBackups If *true*, Veeam Backup & Replication encrypts Veeam Agent backup files stored in the backup repository.
	EncryptBackups bool `json:"encryptBackups"`

	// PasswordId ID of the password used for encryption.
	PasswordId *openapi_types.UUID `json:"passwordId,omitempty"`
}

// RepositoryAdvancedSettingsModel Advanced settings for the backup repository.
type RepositoryAdvancedSettingsModel struct {
	// RotatedDriveCleanupMode Cleanup mode:<ul> <li>`Disabled` — continue the backup chain on an inserted drive.</li> <li>`ClearBackupFolder` — delete existing backups belonging to the job.</li> <li>`ClearRepositoryFolder` — delete all existing backups from repository.</li></ul>
	RotatedDriveCleanupMode *ERotatedDriveCleanupMode `json:"RotatedDriveCleanupMode,omitempty"`

	// AlignDataBlocks If *true*, Veeam Backup & Replication aligns VM data saved to a backup file at a 4 KB block boundary.
	AlignDataBlocks *bool `json:"alignDataBlocks,omitempty"`

	// DecompressBeforeStoring If *true*, Veeam Backup & Replication decompresses backup data blocks before storing to improve deduplication ratios.
	DecompressBeforeStoring *bool `json:"decompressBeforeStoring,omitempty"`

	// PerVmBackup If *true*, Veeam Backup & Replication creates a separate backup file for every VM in the job.
	PerVmBackup *bool `json:"perVmBackup,omitempty"`

	// RotatedDrives If *true*, the repository drive is rotated.
	RotatedDrives *bool `json:"rotatedDrives,omitempty"`
}

// RepositoryExportSpec defines model for RepositoryExportSpec.
type RepositoryExportSpec struct {
	// Ids Array of repository IDs.
	Ids *[]openapi_types.UUID `json:"ids,omitempty"`

	// Names Array of repository names. Wildcard characters are supported.
	Names *[]string `json:"names,omitempty"`

	// Types Array of repository types.
	Types *[]ERepositoryType `json:"types,omitempty"`
}

// RepositoryImportSpecCollection defines model for RepositoryImportSpecCollection.
type RepositoryImportSpecCollection struct {
	// AmazonS3GlacierStorages Array of Amazon S3 Glacier storages.
	AmazonS3GlacierStorages *[]AmazonS3GlacierStorageImportSpec `json:"AmazonS3GlacierStorages,omitempty"`

	// AmazonS3Storages Array of Amazon S3 storages.
	AmazonS3Storages *[]AmazonS3StorageImportSpec `json:"AmazonS3Storages,omitempty"`

	// AmazonSnowballEdgeStorages Array of AWS Snowball Edge storages.
	AmazonSnowballEdgeStorages *[]AmazonSnowballEdgeStorageImportSpec `json:"AmazonSnowballEdgeStorages,omitempty"`

	// AzureArchiveStorages Array of Microsoft Azure Archive storages.
	AzureArchiveStorages *[]AzureArchiveStorageImportSpec `json:"AzureArchiveStorages,omitempty"`

	// AzureBlobStorages Array of Microsoft Azure Blob storages.
	AzureBlobStorages *[]AzureBlobStorageImportSpec `json:"AzureBlobStorages,omitempty"`

	// AzureDataBoxStorages Array of Microsoft Azure Data Box storages.
	AzureDataBoxStorages *[]AzureDataBoxStorageImportSpec `json:"AzureDataBoxStorages,omitempty"`

	// GoogleCloudStorages Array of Google Cloud storages.
	GoogleCloudStorages *[]GoogleCloudStorageImportSpec `json:"GoogleCloudStorages,omitempty"`

	// IBMCloudStorages Array of IBM Cloud storages.
	IBMCloudStorages *[]IBMCloudStorageImportSpec `json:"IBMCloudStorages,omitempty"`

	// LinuxHardenedRepositories Array of Linux hardened repositories.
	LinuxHardenedRepositories *[]LinuxHardenedStorageImportSpec `json:"LinuxHardenedRepositories,omitempty"`

	// LinuxLocalRepositories Array of Linux-based repositories.
	LinuxLocalRepositories *[]LinuxLocalStorageImportSpec `json:"LinuxLocalRepositories,omitempty"`

	// NfsRepositories Array of NFS backup repositories.
	NfsRepositories *[]NfsStorageImportSpec `json:"NfsRepositories,omitempty"`

	// S3CompatibleStorages Array of S3 compatible storages.
	S3CompatibleStorages *[]S3CompatibleStorageImportSpec `json:"S3CompatibleStorages,omitempty"`

	// SmbRepositories Array of SMB backup repositories.
	SmbRepositories *[]SmbStorageImportSpec `json:"SmbRepositories,omitempty"`

	// WasabiCloudStorages Array of Wasabi Cloud storages.
	WasabiCloudStorages *[]WasabiCloudStorageImportSpec `json:"WasabiCloudStorages,omitempty"`

	// WindowsLocalRepositories Array of Microsoft Windows-based repositories.
	WindowsLocalRepositories *[]WindowsLocalStorageImportSpec `json:"WindowsLocalRepositories,omitempty"`
}

// RepositoryModel defines model for RepositoryModel.
type RepositoryModel struct {
	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// Id ID of the backup repository.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type  *ERepositoryType `json:"type,omitempty"`
	union json.RawMessage
}

// RepositoryShareGatewayImportSpec Settings for the gateway server.
type RepositoryShareGatewayImportSpec struct {
	// AutoSelect If *true*, Veeam Backup & Replication automatically selects a gateway server.
	AutoSelect *bool `json:"autoSelect,omitempty"`

	// GatewayServerName Name of the gateway server.
	GatewayServerName *string `json:"gatewayServerName,omitempty"`
}

// RepositoryShareGatewayModel Settings for the gateway server.
type RepositoryShareGatewayModel struct {
	// AutoSelect If *true*, Veeam Backup & Replication automatically selects a gateway server.
	AutoSelect bool `json:"autoSelect"`

	// GatewayServerIds Array of gateway server IDs.
	GatewayServerIds *[]openapi_types.UUID `json:"gatewayServerIds,omitempty"`
}

// RepositorySpec defines model for RepositorySpec.
type RepositorySpec struct {
	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type  *ERepositoryType `json:"type,omitempty"`
	union json.RawMessage
}

// RepositoryStateModel defines model for RepositoryStateModel.
type RepositoryStateModel struct {
	// CapacityGB Repository capacity in GB.
	CapacityGB float64 `json:"capacityGB"`

	// Description Description of the backup repository.
	Description string `json:"description"`

	// FreeGB Repository free space in GB.
	FreeGB float64 `json:"freeGB"`

	// HostId ID of the server that is used as a backup repository.
	HostId *openapi_types.UUID `json:"hostId,omitempty"`

	// HostName Name of the server that is used as a backup repository.
	HostName *string `json:"hostName,omitempty"`

	// Id ID of the backup repository.
	Id openapi_types.UUID `json:"id"`

	// Name Name of the backup repository.
	Name string `json:"name"`

	// Path Path to the folder where backup files are stored.
	Path *string `json:"path,omitempty"`

	// Type Repository type.
	Type ERepositoryType `json:"type"`

	// UsedSpaceGB Repository used space in GB.
	UsedSpaceGB float64 `json:"usedSpaceGB"`
}

// RepositoryStatesResult defines model for RepositoryStatesResult.
type RepositoryStatesResult struct {
	// Data Array of repository states.
	Data []RepositoryStateModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// RestoreProxySpec Backup proxies for VM data transport.
type RestoreProxySpec struct {
	// AutoSelection If *true*, Veeam Backup & Replication detects backup proxies that are connected to the source datastore and automatically assigns optimal proxy resources for processing VM data.
	AutoSelection bool `json:"autoSelection"`

	// ProxyIds Array of backup proxy IDs.
	ProxyIds *[]openapi_types.UUID `json:"proxyIds,omitempty"`
}

// RestoreTargetDatastoreSpec Destination datastore.
type RestoreTargetDatastoreSpec struct {
	// Datastore VMware vSphere object.
	Datastore *VmwareObjectModel `json:"datastore,omitempty"`

	// DiskType Disk format of the restored VM.
	DiskType *EDiskCreationMode `json:"diskType,omitempty"`
}

// RestoreTargetFolderSpec Destination VM folder.
type RestoreTargetFolderSpec struct {
	// Folder VMware vSphere object.
	Folder VmwareObjectModel `json:"folder"`

	// RestoreVmTags If *true*, Veeam Backup & Replication restores tags that were assigned to the original VMs, and assigns them to the restored VMs.
	RestoreVmTags *bool `json:"restoreVmTags,omitempty"`

	// VmName VM name.
	VmName *string `json:"vmName,omitempty"`
}

// RestoreTargetNetworkSpec Network to which the restored VM is connected.
type RestoreTargetNetworkSpec struct {
	// Disconnected If *true*, the restored VMs is not connected to any virtual network.
	Disconnected *bool `json:"disconnected,omitempty"`

	// Network VMware vSphere object.
	Network VmwareObjectModel `json:"network"`
}

// S3CompatibleBrowserDestinationSpec defines model for S3CompatibleBrowserDestinationSpec.
type S3CompatibleBrowserDestinationSpec struct {
	// BucketName Name of the bucket where you want to store your backup data.
	BucketName string `json:"bucketName"`

	// ConnectionPoint Endpoint address and port number of the S3 compatible storage.
	ConnectionPoint string `json:"connectionPoint"`

	// CredentialsId ID of a cloud credentials record requiered to connect to the object storage.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// HostId ID of a server you want to use to connect to the object storage. You can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.
	HostId *openapi_types.UUID `json:"hostId,omitempty"`

	// NewFolderName Name of the new folder.
	NewFolderName *string `json:"newFolderName,omitempty"`

	// RegionId Region where the bucket is located.
	RegionId string `json:"regionId"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// S3CompatibleBrowserModel defines model for S3CompatibleBrowserModel.
type S3CompatibleBrowserModel struct {
	// ConnectionPoint Service point address and port number of the S3 compatible storage.
	ConnectionPoint *string `json:"connectionPoint,omitempty"`

	// CredentialsId ID of the cloud credentials record.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// HostId ID of a server used to connect to the S3 compatible storage.
	HostId *openapi_types.UUID `json:"hostId,omitempty"`

	// Regions Array of regions.
	Regions *[]S3CompatibleRegionBrowserModel `json:"regions,omitempty"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// S3CompatibleBrowserSpec defines model for S3CompatibleBrowserSpec.
type S3CompatibleBrowserSpec struct {
	// CredentialsId ID of the object storage account (for browsing either storage or compute infrastructure).
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// GatewayServerId ID of a gateway server you want to use to connect to the object storage. Specify this parameter to check internet connection of the server. As a gateway server you can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.
	GatewayServerId *openapi_types.UUID `json:"gatewayServerId,omitempty"`

	// RegionId Region where the S3 compatible storage is located.
	RegionId *string `json:"regionId,omitempty"`

	// ServicePoint Service point address of the S3 compatible storage.
	ServicePoint *string `json:"servicePoint,omitempty"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// S3CompatibleBucketBrowserModel defines model for S3CompatibleBucketBrowserModel.
type S3CompatibleBucketBrowserModel struct {
	// Folders Array of folders located in the bucket.
	Folders *[]string `json:"folders,omitempty"`

	// Name Bucket name.
	Name *string `json:"name,omitempty"`
}

// S3CompatibleProxyModel Proxy appliance for the S3 compatible storage.
type S3CompatibleProxyModel struct {
	// ManagedServerId ID of a managed server used as a proxy appliance.
	ManagedServerId openapi_types.UUID `json:"managedServerId"`
}

// S3CompatibleRegionBrowserModel defines model for S3CompatibleRegionBrowserModel.
type S3CompatibleRegionBrowserModel struct {
	// Buckets Array of buckets located in the region.
	Buckets *[]S3CompatibleBucketBrowserModel `json:"buckets,omitempty"`

	// Id Region ID.
	Id *string `json:"id,omitempty"`

	// Name Region name.
	Name *string `json:"name,omitempty"`
}

// S3CompatibleStorageAccountImportModel Account used to access the S3 compatible storage.
type S3CompatibleStorageAccountImportModel struct {
	// ConnectionSettings Object storage connection settings.
	ConnectionSettings ObjectStorageConnectionImportSpec `json:"connectionSettings"`

	// Credentials Cloud credentials used for connection.
	Credentials CloudCredentialsImportModel `json:"credentials"`

	// RegionId ID of a region where the storage is located.
	RegionId string `json:"regionId"`

	// ServicePoint Endpoint address of the storage.
	ServicePoint string `json:"servicePoint"`
}

// S3CompatibleStorageAccountModel Account used to access the S3 compatible storage.
type S3CompatibleStorageAccountModel struct {
	// ConnectionSettings Object storage connection settings.
	ConnectionSettings *ObjectStorageConnectionModel `json:"connectionSettings,omitempty"`

	// CredentialsId ID of a cloud credentials record used to access the storage.
	CredentialsId openapi_types.UUID `json:"credentialsId"`

	// RegionId ID of a region where the storage is located.
	RegionId string `json:"regionId"`

	// ServicePoint Endpoint address and port number of the storage.
	ServicePoint string `json:"servicePoint"`
}

// S3CompatibleStorageBucketModel Bucket where backup data is stored.
type S3CompatibleStorageBucketModel struct {
	// BucketName Bucket name.
	BucketName string `json:"bucketName"`

	// FolderName Name of the folder that the object storage repository is mapped to.
	FolderName string `json:"folderName"`

	// Immutability Object storage immutability.
	Immutability *ObjectStorageImmutabilityModel `json:"immutability,omitempty"`

	// StorageConsumptionLimit Soft consumption limit for the storage. The limit can be exceeded temporarily.
	StorageConsumptionLimit *ObjectStorageConsumptionLimitModel `json:"storageConsumptionLimit,omitempty"`
}

// S3CompatibleStorageImportSpec defines model for S3CompatibleStorageImportSpec.
type S3CompatibleStorageImportSpec struct {
	// Account Account used to access the S3 compatible storage.
	Account S3CompatibleStorageAccountImportModel `json:"account"`

	// Bucket Bucket where backup data is stored.
	Bucket S3CompatibleStorageBucketModel `json:"bucket"`

	// Description Description of the object storage repository.
	Description string `json:"description"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsImportSpec `json:"mountServer"`

	// Name Name of the object storage repository.
	Name string `json:"name"`

	// ProxyAppliance Proxy appliance for the S3 compatible storage.
	ProxyAppliance *S3CompatibleProxyModel `json:"proxyAppliance,omitempty"`

	// Tag Tag that identifies the object storage repository.
	Tag string `json:"tag"`

	// Type Repository type.
	Type ERepositoryType `json:"type"`
}

// S3CompatibleStorageModel defines model for S3CompatibleStorageModel.
type S3CompatibleStorageModel struct {
	// Account Account used to access the S3 compatible storage.
	Account S3CompatibleStorageAccountModel `json:"account"`

	// Bucket Bucket where backup data is stored.
	Bucket S3CompatibleStorageBucketModel `json:"bucket"`

	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// Id ID of the backup repository.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsModel `json:"mountServer"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// ProxyAppliance Proxy appliance for the S3 compatible storage.
	ProxyAppliance *S3CompatibleProxyModel `json:"proxyAppliance,omitempty"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// S3CompatibleStorageSpec defines model for S3CompatibleStorageSpec.
type S3CompatibleStorageSpec struct {
	// Account Account used to access the S3 compatible storage.
	Account S3CompatibleStorageAccountModel `json:"account"`

	// Bucket Bucket where backup data is stored.
	Bucket S3CompatibleStorageBucketModel `json:"bucket"`

	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsModel `json:"mountServer"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// ProxyAppliance Proxy appliance for the S3 compatible storage.
	ProxyAppliance *S3CompatibleProxyModel `json:"proxyAppliance,omitempty"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// ScaleOutExtentMaintenanceSpec defines model for ScaleOutExtentMaintenanceSpec.
type ScaleOutExtentMaintenanceSpec struct {
	// RepositoryIds Array of repository IDs added as scale-out backup repository extents.
	RepositoryIds []openapi_types.UUID `json:"repositoryIds"`
}

// ScaleOutRepositoriesResult defines model for ScaleOutRepositoriesResult.
type ScaleOutRepositoriesResult struct {
	// Data Array of scale-out backup repositories.
	Data []ScaleOutRepositoryModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// ScaleOutRepositoryModel defines model for ScaleOutRepositoryModel.
type ScaleOutRepositoryModel struct {
	// ArchiveTier Archive tier.
	ArchiveTier *ArchiveTierModel `json:"archiveTier,omitempty"`

	// CapacityTier Capacity tier.
	CapacityTier *CapacityTierModel `json:"capacityTier,omitempty"`

	// Description Description of the scale-out backup repository.
	Description string `json:"description"`

	// Id ID of the scale-out backup repository.
	Id openapi_types.UUID `json:"id"`

	// Name Name of the scale-out backup repository.
	Name string `json:"name"`

	// PerformanceTier Performance tier.
	PerformanceTier PerformanceTierModel `json:"performanceTier"`

	// PlacementPolicy Backup file placement policy.
	PlacementPolicy *PlacementPolicyModel `json:"placementPolicy,omitempty"`

	// Tag Tag assigned to the scale-out backup repository.
	Tag *string `json:"tag,omitempty"`
}

// ScaleOutRepositorySpec defines model for ScaleOutRepositorySpec.
type ScaleOutRepositorySpec struct {
	// ArchiveTier Archive tier.
	ArchiveTier *ArchiveTierModel `json:"archiveTier,omitempty"`

	// CapacityTier Capacity tier.
	CapacityTier *CapacityTierModel `json:"capacityTier,omitempty"`

	// Description Description of the scale-out backup repository.
	Description string `json:"description"`

	// Name Name of the scale-out backup repository.
	Name string `json:"name"`

	// PerformanceTier Performance tier.
	PerformanceTier PerformanceTierSpec `json:"performanceTier"`

	// PlacementPolicy Backup file placement policy.
	PlacementPolicy *PlacementPolicyModel `json:"placementPolicy,omitempty"`

	// Tag Tag assigned to the scale-out backup repository.
	Tag *string `json:"tag,omitempty"`
}

// ScheduleAfterThisJobModel Job chaining options.
type ScheduleAfterThisJobModel struct {
	// IsEnabled If *true*, job chaining is enabled.
	IsEnabled bool `json:"isEnabled"`

	// JobName Name of the preceding job.
	JobName *string `json:"jobName,omitempty"`
}

// ScheduleBackupWindowModel Backup window settings.
type ScheduleBackupWindowModel struct {
	// BackupWindow Time scheme that defines permitted days and hours for the job to start.
	BackupWindow *BackupWindowSettingModel `json:"backupWindow,omitempty"`

	// IsEnabled If *true*, backup window is enabled.
	IsEnabled bool `json:"isEnabled"`
}

// ScheduleDailyModel Daily scheduling options.
type ScheduleDailyModel struct {
	// DailyKind Kind of daily scheduling scheme.
	DailyKind *EDailyKinds `json:"dailyKind,omitempty"`

	// Days Days of the week when the job must start.
	Days *[]EDayOfWeek `json:"days,omitempty"`

	// IsEnabled If *true*, daily schedule is enabled.
	IsEnabled bool `json:"isEnabled"`

	// LocalTime Local time when the job must start.
	LocalTime *string `json:"localTime,omitempty"`
}

// ScheduleMonthlyModel Monthly scheduling options.
type ScheduleMonthlyModel struct {
	// DayNumberInMonth Week day number in the month.
	DayNumberInMonth *EDayNumberInMonth `json:"dayNumberInMonth,omitempty"`

	// DayOfMonth Day of the month when the job must start.
	DayOfMonth *int `json:"dayOfMonth,omitempty"`

	// DayOfWeek Day of the week.
	DayOfWeek *EDayOfWeek `json:"dayOfWeek,omitempty"`

	// IsEnabled If *true*, monthly schedule is enabled.
	IsEnabled bool `json:"isEnabled"`

	// LocalTime Local time when the job must start.
	LocalTime *string `json:"localTime,omitempty"`

	// Months Months when the job must start.
	Months *[]EMonth `json:"months,omitempty"`
}

// SchedulePeriodicallyModel Periodic scheduling options.
type SchedulePeriodicallyModel struct {
	// BackupWindow Time scheme that defines permitted days and hours for the job to start.
	BackupWindow *BackupWindowSettingModel `json:"backupWindow,omitempty"`

	// Frequency Number of time units that defines the time interval.
	Frequency *int `json:"frequency,omitempty"`

	// IsEnabled If *true*, periodic schedule is enabled.
	IsEnabled bool `json:"isEnabled"`

	// PeriodicallyKind Time unit for periodic job scheduling.
	PeriodicallyKind *EPeriodicallyKinds `json:"periodicallyKind,omitempty"`

	// StartTimeWithinAnHour Start time within an hour, in minutes.
	StartTimeWithinAnHour *int `json:"startTimeWithinAnHour,omitempty"`
}

// ScheduleRetryModel Retry options.
type ScheduleRetryModel struct {
	// AwaitMinutes Time interval between job retries in minutes. Must be greater than zero.
	AwaitMinutes *int `json:"awaitMinutes,omitempty"`

	// IsEnabled If *true*, retry options are enabled.
	IsEnabled *bool `json:"isEnabled,omitempty"`

	// RetryCount Number of retries set for the job. Must be greater than zero.
	RetryCount *int `json:"retryCount,omitempty"`
}

// ScriptCommand Script settings.
type ScriptCommand struct {
	// Command Path to the script.
	Command *string `json:"command,omitempty"`

	// IsEnabled If *true*, script execution is enabled.
	IsEnabled bool `json:"isEnabled"`
}

// SecureRestoreSpec Secure restore settings.
type SecureRestoreSpec struct {
	// EnableAntivirusScan If *true*, Veeam Backup & Replication scans machine data with antivirus software before restoring the machine to the production environment.
	EnableAntivirusScan bool `json:"enableAntivirusScan"`

	// EnableEntireVolumeScan If *true*, the antivirus continues machine scan after the first malware is found.
	EnableEntireVolumeScan *bool `json:"enableEntireVolumeScan,omitempty"`

	// VirusDetectionAction Action that Veeam Backup & Replication takes if the antivirus software finds a threat.
	VirusDetectionAction *EVirusDetectionAction `json:"virusDetectionAction,omitempty"`
}

// ServerInfoModel defines model for ServerInfoModel.
type ServerInfoModel struct {
	// BuildVersion Veeam Backup & Replication build number.
	BuildVersion string `json:"buildVersion"`

	// Name Full DNS name or IP address of the backup server.
	Name string `json:"name"`

	// Patches Array of Veeam Backup & Replication cumulative patches installed on the backup server.
	Patches []string `json:"patches"`

	// VbrId Veeam Backup & Replication installation ID.
	VbrId *string `json:"vbrId,omitempty"`
}

// ServerTimeModel defines model for ServerTimeModel.
type ServerTimeModel struct {
	// ServerTime Current date and time on the backup server.
	ServerTime time.Time `json:"serverTime"`

	// TimeZone Time zone where the backup server is located.
	TimeZone *string `json:"timeZone,omitempty"`
}

// ServicesModel defines model for ServicesModel.
type ServicesModel struct {
	// Name Name of the service.
	Name string `json:"name"`

	// Port Port used to communicate with the service.
	Port int `json:"port"`
}

// ServicesResult defines model for ServicesResult.
type ServicesResult struct {
	// Data Array of services.
	Data []ServicesModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// SessionLogRecordModel Record of the session log.
type SessionLogRecordModel struct {
	// Description Description of the log record.
	Description *string `json:"description,omitempty"`

	// Id ID of the log record.
	Id *int `json:"id,omitempty"`

	// StartTime Date and time when the operation was started.
	StartTime *time.Time            `json:"startTime,omitempty"`
	Status    *ETaskLogRecordStatus `json:"status,omitempty"`

	// Title Title of the log record.
	Title *string `json:"title,omitempty"`

	// UpdateTime Date and time when the log record was updated.
	UpdateTime *time.Time `json:"updateTime,omitempty"`
}

// SessionLogResult Log of the session.
type SessionLogResult struct {
	// Records Array of log records.
	Records *[]SessionLogRecordModel `json:"records,omitempty"`

	// TotalRecords Total number of records.
	TotalRecords *int `json:"totalRecords,omitempty"`
}

// SessionModel defines model for SessionModel.
type SessionModel struct {
	// ActivityId ID of the activity.
	ActivityId openapi_types.UUID `json:"activityId"`

	// CreationTime Date and time when the session was created.
	CreationTime time.Time `json:"creationTime"`

	// EndTime Date and time when the session was ended.
	EndTime *time.Time `json:"endTime,omitempty"`

	// Id ID of the session.
	Id openapi_types.UUID `json:"id"`

	// Name Name of the session.
	Name string `json:"name"`

	// ParentSessionId ID of the parent session.
	ParentSessionId *openapi_types.UUID `json:"parentSessionId,omitempty"`

	// ProgressPercent Progress percentage of the session.
	ProgressPercent *int `json:"progressPercent,omitempty"`

	// ResourceId ID of the resource.
	ResourceId *openapi_types.UUID `json:"resourceId,omitempty"`

	// ResourceReference URI of the resource.
	ResourceReference *string `json:"resourceReference,omitempty"`

	// Result Session result.
	Result *SessionResultModel `json:"result,omitempty"`

	// SessionType Type of the session.
	SessionType ESessionType `json:"sessionType"`

	// State State of the session.
	State ESessionState `json:"state"`

	// Usn Update sequence number.
	Usn int64 `json:"usn"`
}

// SessionResultModel Session result.
type SessionResultModel struct {
	// IsCanceled If *true*, the session has been canceled.
	IsCanceled *bool `json:"isCanceled,omitempty"`

	// Message Message that explains the session result.
	Message *string `json:"message,omitempty"`

	// Result Result status.
	Result ESessionResult `json:"result"`
}

// SessionsResult defines model for SessionsResult.
type SessionsResult struct {
	// Data Array of sessions.
	Data []SessionModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// SmbRepositoryShareSettingsModel Share settings.
type SmbRepositoryShareSettingsModel struct {
	// CredentialsId ID of the credentials record used to access the shared folder.
	CredentialsId openapi_types.UUID `json:"credentialsId"`

	// GatewayServer Settings for the gateway server.
	GatewayServer *RepositoryShareGatewayModel `json:"gatewayServer,omitempty"`

	// SharePath Path to the shared folder that is used as a backup repository.
	SharePath string `json:"sharePath"`
}

// SmbRepositoryShareSettingsSpec Share settings.
type SmbRepositoryShareSettingsSpec struct {
	// Credentials Credentials used for connection.
	Credentials CredentialsImportModel `json:"credentials"`

	// GatewayServer Settings for the gateway server.
	GatewayServer *RepositoryShareGatewayImportSpec `json:"gatewayServer,omitempty"`

	// SharePath Path to the shared folder that is used as a backup repository.
	SharePath string `json:"sharePath"`
}

// SmbStorageImportSpec defines model for SmbStorageImportSpec.
type SmbStorageImportSpec struct {
	// Description Description of the backup repository.
	Description string `json:"description"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsImportSpec `json:"mountServer"`

	// Name Name of the backup repository.
	Name string `json:"name"`

	// Repository Repository settings.
	Repository NetworkRepositorySettingsModel `json:"repository"`

	// Share Share settings.
	Share SmbRepositoryShareSettingsSpec `json:"share"`

	// Tag Tag that identifies the backup repository.
	Tag string `json:"tag"`

	// Type Repository type.
	Type ERepositoryType `json:"type"`
}

// SmbStorageModel defines model for SmbStorageModel.
type SmbStorageModel struct {
	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// Id ID of the backup repository.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsModel `json:"mountServer"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// Repository Repository settings.
	Repository NetworkRepositorySettingsModel `json:"repository"`

	// Share Share settings.
	Share SmbRepositoryShareSettingsModel `json:"share"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// SmbStorageSpec defines model for SmbStorageSpec.
type SmbStorageSpec struct {
	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsModel `json:"mountServer"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// Repository Repository settings.
	Repository NetworkRepositorySettingsModel `json:"repository"`

	// Share Share settings.
	Share SmbRepositoryShareSettingsModel `json:"share"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// StandardCredentialsModel defines model for StandardCredentialsModel.
type StandardCredentialsModel struct {
	// CreationTime Date and time when the credentials were created.
	CreationTime *time.Time `json:"creationTime,omitempty"`

	// Description Description of the credentials record.
	Description *string `json:"description,omitempty"`

	// Id ID of the credentials record.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Tag Tag used to identify the credentials record.
	Tag *string `json:"tag,omitempty"`

	// Type Credentials type.
	Type *ECredentialsType `json:"type,omitempty"`

	// Username User name.
	Username *string `json:"username,omitempty"`
}

// StandardCredentialsSpec defines model for StandardCredentialsSpec.
type StandardCredentialsSpec struct {
	// Description Description of the credentials record.
	Description *string `json:"description,omitempty"`

	// Password Password.
	Password *string `json:"password,omitempty"`

	// Tag Tag used to identify the credentials record.
	Tag *string `json:"tag,omitempty"`

	// Type Credentials type.
	Type *ECredentialsType `json:"type,omitempty"`

	// Username User name.
	Username *string `json:"username,omitempty"`
}

// SyntheticFullSettingsModel Synthetic full backup settings.
type SyntheticFullSettingsModel struct {
	// IsEnabled If *true*, active full backups are enabled.
	IsEnabled bool `json:"isEnabled"`

	// Monthly Monthly schedule settings.
	Monthly *AdvancedStorageScheduleMonthlyModel `json:"monthly,omitempty"`

	// Weekly Weekly schedule settings.
	Weekly *AdvancedStorageScheduleWeeklyModel `json:"weekly,omitempty"`
}

// TokenLoginSpec defines model for TokenLoginSpec.
type TokenLoginSpec struct {
	// Code Authorization code. Required if the `grant_type` value is `authorization_code`.
	Code *string `json:"code,omitempty"`

	// GrantType Authorization grant type.<br>Available values:<ul> <li>`password` — used to obtain an access token by providing a user name and password.</li> <li>`refresh_token` — used to refresh an expired or lost access token by providing a refresh token.</li> <li>`authorization_code` — used to obtain an access token by providing an authorization code.</li> <li>`vbr_token` — used to obtain an access token by providing a Veeam Backup & Replication token. This grant type is only used in a restricted mode for integration with Veeam Backup & Replication.</li></ul>
	GrantType ELoginGrantType `json:"grant_type"`

	// Password Password. Required if the `grant_type` value is `password`.
	Password *string `json:"password,omitempty"`

	// RefreshToken Refresh token. Required if the `grant_type` value is `refresh_token`.
	RefreshToken *string `json:"refresh_token,omitempty"`

	// UseShortTermRefresh If *true*, a short-term refresh token is used. Lifetime of the short-term refresh token is the access token lifetime plus 15 minutes.
	UseShortTermRefresh *bool `json:"use_short_term_refresh,omitempty"`

	// Username User name. Required if the `grant_type` value is `password`.
	Username *string `json:"username,omitempty"`

	// VbrToken Veeam Backup & Replication platform service token.
	VbrToken *string `json:"vbr_token,omitempty"`
}

// TokenModel defines model for TokenModel.
type TokenModel struct {
	// DotExpires Date and time when the access token expires.
	DotExpires time.Time `json:".expires"`

	// DotIssued Date and time when the access token is issued.
	DotIssued time.Time `json:".issued"`

	// AccessToken String that represents authorization issued to the client. It must be specified in all requests. An access token can be used multiple times, but its lifetime is 15 minutes.
	AccessToken string `json:"access_token"`

	// ExpiresIn Lifetime of the access token, in seconds.
	ExpiresIn int32 `json:"expires_in"`

	// RefreshToken String that is used to obtain a new access token if the current access token expires or becomes lost. A refresh token can be used only once, and its default lifetime is 14 days.
	RefreshToken string `json:"refresh_token"`

	// TokenType Type of the access token.
	TokenType string `json:"token_type"`
}

// TrafficRuleModel defines model for TrafficRuleModel.
type TrafficRuleModel struct {
	// EncryptionEnabled If *true*, traffic encryption is enabled.
	EncryptionEnabled *bool `json:"encryptionEnabled,omitempty"`

	// Id ID of the rule.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Name of the rule.
	Name string `json:"name"`

	// SourceIPEnd End IP address of the range for the backup infrastructure components on the source side.
	SourceIPEnd string `json:"sourceIPEnd"`

	// SourceIPStart Start IP address of the range for the backup infrastructure components on the source side.
	SourceIPStart string `json:"sourceIPStart"`

	// TargetIPEnd End IP address of the range for the backup infrastructure components on the target side.
	TargetIPEnd string `json:"targetIPEnd"`

	// TargetIPStart Start IP address of the range for the backup infrastructure components on the target side.
	TargetIPStart string `json:"targetIPStart"`

	// ThrottlingEnabled If *true*, traffic throttling is enabled.
	ThrottlingEnabled *bool `json:"throttlingEnabled,omitempty"`

	// ThrottlingUnit Traffic speed unit.
	ThrottlingUnit *ESpeedUnit `json:"throttlingUnit,omitempty"`

	// ThrottlingValue Maximum speed that must be used to transfer data from source to target.
	ThrottlingValue *int32 `json:"throttlingValue,omitempty"`

	// ThrottlingWindowEnabled If *true*, throttling window during which the speed must be limited is enabled.
	ThrottlingWindowEnabled *bool `json:"throttlingWindowEnabled,omitempty"`

	// ThrottlingWindowOptions Time scheme that defines permitted days and hours for the job to start.
	ThrottlingWindowOptions *BackupWindowSettingModel `json:"throttlingWindowOptions,omitempty"`
}

// VCenterInventoryResult defines model for VCenterInventoryResult.
type VCenterInventoryResult struct {
	// Data Array of vCenter Servers.
	Data []VmwareObjectSizeModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// VPowerNFSPortSettingsModel Network ports used by the vPower NFS Service.
type VPowerNFSPortSettingsModel struct {
	// MountPort Mount port.
	MountPort *int `json:"mountPort,omitempty"`

	// VPowerNFSPort vPower NFS port.
	VPowerNFSPort *int `json:"vPowerNFSPort,omitempty"`
}

// VSphereChangedBlockTrackingSettingsModel CBT settings for the backup job.
type VSphereChangedBlockTrackingSettingsModel struct {
	// EnableCBTautomatically If *true*, CBT is enabled for all processed VMs even if CBT is disabled in VM configuration. CBT is used for VMs with virtual hardware version 7 or later. These VMs must not have existing snapshots.
	EnableCBTautomatically *bool `json:"enableCBTautomatically,omitempty"`

	// IsEnabled If *true*, CBT data is used.
	IsEnabled bool `json:"isEnabled"`

	// ResetCBTonActiveFull If *true*, CBT is reset before creating active full backups.
	ResetCBTonActiveFull *bool `json:"resetCBTonActiveFull,omitempty"`
}

// ViBackupObjectModel defines model for ViBackupObjectModel.
type ViBackupObjectModel struct {
	// Id ID of the object.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Name of the object.
	Name *string `json:"name,omitempty"`

	// ObjectId ID of the virtual infrastructure object (mo-ref or ID, depending on the virtualization platform).
	ObjectId string `json:"objectId"`

	// Path Path to the object.
	Path *string `json:"path,omitempty"`

	// PlatformId Id of the platform where the object was created.
	PlatformId *openapi_types.UUID `json:"platformId,omitempty"`

	// PlatformName Platform name.
	PlatformName *EPlatformType `json:"platformName,omitempty"`

	// RestorePointsCount Number of restore points.
	RestorePointsCount *int `json:"restorePointsCount,omitempty"`

	// Type Type of the object.
	Type *string `json:"type,omitempty"`

	// ViType Type of the VMware vSphere object.
	ViType *EVmwareInventoryType `json:"viType,omitempty"`
}

// ViHostImportSpec defines model for ViHostImportSpec.
type ViHostImportSpec struct {
	// CertificateThumbprint Certificate thumbprint used to verify the server identity.
	CertificateThumbprint *string `json:"certificateThumbprint,omitempty"`

	// Credentials Credentials used for connection.
	Credentials CredentialsImportModel `json:"credentials"`

	// Description Description of the server.
	Description string `json:"description"`

	// Name Full DNS name or IP address of the server.
	Name string `json:"name"`

	// Port Port used to communicate with the server.
	Port *int `json:"port,omitempty"`

	// Type Type of the server.
	Type EManagedServerType `json:"type"`

	// ViHostType Type of the VMware vSphere server.
	ViHostType EViHostType `json:"viHostType"`
}

// ViHostModel defines model for ViHostModel.
type ViHostModel struct {
	// CredentialsId ID of a credentials record used to connect to the server.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// Description Description of the server.
	Description *string `json:"description,omitempty"`

	// Id ID of the server.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Full DNS name or IP address of the server.
	Name *string `json:"name,omitempty"`

	// Port Port used to communicate with the server.
	Port int `json:"port"`

	// Type Type of the server.
	Type *EManagedServerType `json:"type,omitempty"`

	// ViHostType Type of the VMware vSphere server.
	ViHostType *EViHostType `json:"viHostType,omitempty"`
}

// ViHostSpec defines model for ViHostSpec.
type ViHostSpec struct {
	// CertificateThumbprint Certificate thumbprint used to verify the server identity. For details on how to get the thumbprint, see [Request TLS Certificate or SSH Fingerprint](#tag/Connection/operation/GetConnectionCertificate).
	CertificateThumbprint *string `json:"certificateThumbprint,omitempty"`

	// CredentialsId ID of the credentials used to connect to the server.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// Description Description of the server.
	Description *string `json:"description,omitempty"`

	// Name Full DNS name or IP address of the server.
	Name *string `json:"name,omitempty"`

	// Port Port used to communicate with the server.
	Port *int `json:"port,omitempty"`

	// Type Type of the server.
	Type *EManagedServerType `json:"type,omitempty"`
}

// ViProxyModel defines model for ViProxyModel.
type ViProxyModel struct {
	// Description Description of the backup proxy.
	Description *string `json:"description,omitempty"`

	// Id ID of the backup proxy.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Name of the backup proxy.
	Name *string `json:"name,omitempty"`

	// Server Server settings for the backup proxy.
	Server ProxyServerSettingsModel `json:"server"`

	// Type Type of the backup proxy.
	Type *EProxyType `json:"type,omitempty"`
}

// ViProxySpec defines model for ViProxySpec.
type ViProxySpec struct {
	// Description Description of the backup proxy.
	Description *string `json:"description,omitempty"`

	// Server Server settings for the backup proxy.
	Server ProxyServerSettingsModel `json:"server"`

	// Type Type of the backup proxy.
	Type *EProxyType `json:"type,omitempty"`
}

// ViRootsResult defines model for ViRootsResult.
type ViRootsResult struct {
	// Data Array of VMware vSphere servers.
	Data []VmwareObjectSizeModel `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// ViVMQuickMigrationSpec defines model for ViVMQuickMigrationSpec.
type ViVMQuickMigrationSpec struct {
	// DeleteSourceVmsFiles If *true*, Veeam Backup & Replication will delete source VM files upon successful migration.
	DeleteSourceVmsFiles *bool `json:"DeleteSourceVmsFiles,omitempty"`

	// VeeamQMEnabled If *true*, the Veeam Quick Migration mechanism is used. Otherwise, Veeam Backup & Replication will use VMware vMotion for migration.
	VeeamQMEnabled *bool `json:"VeeamQMEnabled,omitempty"`

	// Datastore VMware vSphere object.
	Datastore *VmwareObjectModel `json:"datastore,omitempty"`

	// DestinationHost VMware vSphere object.
	DestinationHost VmwareObjectModel `json:"destinationHost"`

	// Folder VMware vSphere object.
	Folder *VmwareObjectModel `json:"folder,omitempty"`

	// ResourcePool VMware vSphere object.
	ResourcePool *VmwareObjectModel `json:"resourcePool,omitempty"`

	// SourceProxyIds Array of source backup proxies.
	SourceProxyIds *[]openapi_types.UUID `json:"sourceProxyIds,omitempty"`

	// TargetProxyIds Array of target backup proxies.
	TargetProxyIds *[]openapi_types.UUID `json:"targetProxyIds,omitempty"`
}

// VmwareFcdInstantRecoveryDiskInfo defines model for VmwareFcdInstantRecoveryDiskInfo.
type VmwareFcdInstantRecoveryDiskInfo struct {
	// MountedDiskName Name of the VMDK file that is stored in the datastore.
	MountedDiskName string `json:"mountedDiskName"`

	// NameInBackup Disk name displayed in the backup.
	NameInBackup string `json:"nameInBackup"`

	// ObjectId FCD ID.
	ObjectId string `json:"objectId"`

	// RegisteredFcdName Name under which the disk is registered as an FCD in the vCenter Managed Object Browser.
	RegisteredFcdName string `json:"registeredFcdName"`
}

// VmwareFcdInstantRecoveryDiskSpec defines model for VmwareFcdInstantRecoveryDiskSpec.
type VmwareFcdInstantRecoveryDiskSpec struct {
	// MountedDiskName Name of the VMDK file that will be stored in the datastore.
	MountedDiskName string `json:"mountedDiskName"`

	// NameInBackup Disk name displayed in the backup.
	NameInBackup string `json:"nameInBackup"`

	// RegisteredFcdName Name under which the disk will be registered as an FCD in the vCenter Managed Object Browser.
	RegisteredFcdName string `json:"registeredFcdName"`
}

// VmwareFcdInstantRecoveryMount defines model for VmwareFcdInstantRecoveryMount.
type VmwareFcdInstantRecoveryMount struct {
	// ErrorMessage Error message.
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// Id Mount ID.
	Id openapi_types.UUID `json:"id"`

	// MountedDisks Array of mounted disks.
	MountedDisks *[]VmwareFcdInstantRecoveryDiskInfo `json:"mountedDisks,omitempty"`

	// SessionId ID of the restore session. Use the ID to track the progress. For details, see [Get Session](#tag/Sessions/operation/GetSession).
	SessionId openapi_types.UUID `json:"sessionId"`

	// Spec Instant FCD Recovery configuration:<ul> <li>Restore point ID</li> <li>Destination cluster</li> <li>Disks for restore</li> <li>Write cache</li></ul>
	Spec VmwareFcdInstantRecoverySpec `json:"spec"`

	// State Mount state.
	State EInstantRecoveryMountState `json:"state"`
}

// VmwareFcdInstantRecoveryMountsResult defines model for VmwareFcdInstantRecoveryMountsResult.
type VmwareFcdInstantRecoveryMountsResult struct {
	// Data Array of FCD mounts.
	Data []VmwareFcdInstantRecoveryMount `json:"data"`

	// Pagination Pagination settings.
	Pagination PaginationResult `json:"pagination"`
}

// VmwareFcdInstantRecoverySpec Instant FCD Recovery configuration:<ul> <li>Restore point ID</li> <li>Destination cluster</li> <li>Disks for restore</li> <li>Write cache</li></ul>
type VmwareFcdInstantRecoverySpec struct {
	// DestinationCluster VMware vSphere object.
	DestinationCluster VmwareObjectModel `json:"destinationCluster"`

	// DisksMapping Array of disks for restore.
	DisksMapping []VmwareFcdInstantRecoveryDiskSpec `json:"disksMapping"`

	// ObjectRestorePointId ID of the restore point.
	ObjectRestorePointId openapi_types.UUID `json:"objectRestorePointId"`

	// WriteCache Write cache for recovered disks.
	WriteCache *VmwareFcdWriteCacheSpec `json:"writeCache,omitempty"`
}

// VmwareFcdQuickMigrationSpec defines model for VmwareFcdQuickMigrationSpec.
type VmwareFcdQuickMigrationSpec struct {
	// MountedDiskNames Array of disks that will be migrated to the `targetDatastore` associated with the `storagePolicy`.
	MountedDiskNames *[]string `json:"mountedDiskNames,omitempty"`

	// StoragePolicy VMware vSphere object.
	StoragePolicy *VmwareObjectModel `json:"storagePolicy,omitempty"`

	// TargetDatastore VMware vSphere object.
	TargetDatastore VmwareObjectModel `json:"targetDatastore"`
}

// VmwareFcdWriteCacheSpec Write cache for recovered disks.
type VmwareFcdWriteCacheSpec struct {
	// CacheDatastore VMware vSphere object.
	CacheDatastore *VmwareObjectModel `json:"cacheDatastore,omitempty"`

	// RedirectIsEnabled If *true*, cache redirection is enabled. In this case, all changes made to the recovered disks while the Instant FCD Recovery is active are redirected to the specified `cacheDatastore` associated with the `storagePolicy`.
	RedirectIsEnabled bool `json:"redirectIsEnabled"`

	// StoragePolicy VMware vSphere object.
	StoragePolicy *VmwareObjectModel `json:"storagePolicy,omitempty"`
}

// VmwareObjectDiskModel defines model for VmwareObjectDiskModel.
type VmwareObjectDiskModel struct {
	// Disks Array of disks.
	Disks []string `json:"disks"`

	// DisksToProcess Type of disk selection.
	DisksToProcess EVmwareDisksTypeToProcess `json:"disksToProcess"`

	// RemoveFromVMConfiguration If *true*, the disk is removed from VM configuration.
	RemoveFromVMConfiguration *bool `json:"removeFromVMConfiguration,omitempty"`

	// VmObject VMware vSphere object.
	VmObject VmwareObjectModel `json:"vmObject"`
}

// VmwareObjectModel VMware vSphere object.
type VmwareObjectModel struct {
	// HostName Name of the VMware vSphere server that hosts the object.
	HostName string `json:"hostName"`

	// Name Name of the VMware vSphere object.
	Name string `json:"name"`

	// ObjectId ID of the VMware vSphere object. The parameter is required for all VMware vSphere objects except vCenter Servers and standalone ESXi hosts.
	ObjectId *string `json:"objectId,omitempty"`

	// Type Type of the VMware vSphere object.
	Type EVmwareInventoryType `json:"type"`
}

// VmwareObjectSizeModel defines model for VmwareObjectSizeModel.
type VmwareObjectSizeModel struct {
	// InventoryObject VMware vSphere object.
	InventoryObject VmwareObjectModel `json:"inventoryObject"`

	// Size Size used by the VMware vSphere object.
	Size *string `json:"size,omitempty"`
}

// WasabiCloudStorageAccountImportModel Account used to access the Wasabi Cloud storage.
type WasabiCloudStorageAccountImportModel struct {
	// ConnectionSettings Object storage connection settings.
	ConnectionSettings ObjectStorageConnectionImportSpec `json:"connectionSettings"`

	// Credentials Cloud credentials used for connection.
	Credentials CloudCredentialsImportModel `json:"credentials"`

	// RegionId ID of a region where the storage is located.
	RegionId string `json:"regionId"`
}

// WasabiCloudStorageAccountModel Account used to access the Wasabi Cloud storage.
type WasabiCloudStorageAccountModel struct {
	// ConnectionSettings Object storage connection settings.
	ConnectionSettings ObjectStorageConnectionModel `json:"connectionSettings"`

	// CredentialsId ID of a cloud credentials record used to access the storage.
	CredentialsId openapi_types.UUID `json:"credentialsId"`

	// RegionId ID of a region where the storage is located.
	RegionId string `json:"regionId"`
}

// WasabiCloudStorageBrowserDestinationSpec defines model for WasabiCloudStorageBrowserDestinationSpec.
type WasabiCloudStorageBrowserDestinationSpec struct {
	// BucketName Name of the bucket where you want to store your backup data.
	BucketName string `json:"bucketName"`

	// CredentialsId ID of a cloud credentials record requiered to connect to the object storage.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// HostId ID of a server you want to use to connect to the object storage. You can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.
	HostId *openapi_types.UUID `json:"hostId,omitempty"`

	// NewFolderName Name of the new folder.
	NewFolderName *string `json:"newFolderName,omitempty"`

	// RegionId Region where the bucket is located.
	RegionId string `json:"regionId"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// WasabiCloudStorageBrowserModel defines model for WasabiCloudStorageBrowserModel.
type WasabiCloudStorageBrowserModel struct {
	// CredentialsId ID of the cloud credentials record.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// HostId ID of a server used to connect to the object storage.
	HostId *openapi_types.UUID `json:"hostId,omitempty"`

	// Regions Array of regions.
	Regions *[]WasabiCloudStorageRegionBrowserModel `json:"regions,omitempty"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// WasabiCloudStorageBrowserSpec defines model for WasabiCloudStorageBrowserSpec.
type WasabiCloudStorageBrowserSpec struct {
	// CredentialsId ID of the object storage account (for browsing either storage or compute infrastructure).
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// GatewayServerId ID of a gateway server you want to use to connect to the object storage. Specify this parameter to check internet connection of the server. As a gateway server you can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.
	GatewayServerId *openapi_types.UUID `json:"gatewayServerId,omitempty"`

	// RegionId Region ID.
	RegionId string `json:"regionId"`

	// ServiceType Type of cloud service.
	ServiceType *ECloudServiceType `json:"serviceType,omitempty"`
}

// WasabiCloudStorageBucketBrowserModel defines model for WasabiCloudStorageBucketBrowserModel.
type WasabiCloudStorageBucketBrowserModel struct {
	// Folders Array of folders located in the bucket.
	Folders *[]string `json:"folders,omitempty"`

	// Name Bucket name.
	Name *string `json:"name,omitempty"`
}

// WasabiCloudStorageBucketModel Wasabi bucket where backup data is stored.
type WasabiCloudStorageBucketModel struct {
	// BucketName Name of a Wasabi bucket.
	BucketName string `json:"bucketName"`

	// FolderName Name of the folder that the object storage repository is mapped to.
	FolderName string `json:"folderName"`

	// Immutability Object storage immutability.
	Immutability *ObjectStorageImmutabilityModel `json:"immutability,omitempty"`

	// StorageConsumptionLimit Soft consumption limit for the storage. The limit can be exceeded temporarily.
	StorageConsumptionLimit *ObjectStorageConsumptionLimitModel `json:"storageConsumptionLimit,omitempty"`
}

// WasabiCloudStorageImportSpec defines model for WasabiCloudStorageImportSpec.
type WasabiCloudStorageImportSpec struct {
	// Account Account used to access the Wasabi Cloud storage.
	Account WasabiCloudStorageAccountImportModel `json:"account"`

	// Bucket Wasabi bucket where backup data is stored.
	Bucket WasabiCloudStorageBucketModel `json:"bucket"`

	// Description Description of the object storage repository.
	Description string `json:"description"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsImportSpec `json:"mountServer"`

	// Name Name of the object storage repository.
	Name string `json:"name"`

	// ProxyAppliance Proxy appliance for the S3 compatible storage.
	ProxyAppliance *S3CompatibleProxyModel `json:"proxyAppliance,omitempty"`

	// Tag Tag that identifies the object storage repository.
	Tag string `json:"tag"`

	// Type Repository type.
	Type ERepositoryType `json:"type"`
}

// WasabiCloudStorageModel defines model for WasabiCloudStorageModel.
type WasabiCloudStorageModel struct {
	// Account Account used to access the Wasabi Cloud storage.
	Account WasabiCloudStorageAccountModel `json:"account"`

	// Bucket Wasabi bucket where backup data is stored.
	Bucket WasabiCloudStorageBucketModel `json:"bucket"`

	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// Id ID of the backup repository.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsModel `json:"mountServer"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// ProxyAppliance Proxy appliance for the S3 compatible storage.
	ProxyAppliance *S3CompatibleProxyModel `json:"proxyAppliance,omitempty"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// WasabiCloudStorageRegionBrowserModel defines model for WasabiCloudStorageRegionBrowserModel.
type WasabiCloudStorageRegionBrowserModel struct {
	// Buckets Array of buckets located in the region.
	Buckets *[]WasabiCloudStorageBucketBrowserModel `json:"buckets,omitempty"`

	// Id Region ID.
	Id *string `json:"id,omitempty"`

	// Name Region name.
	Name *string `json:"name,omitempty"`
}

// WasabiCloudStorageSpec defines model for WasabiCloudStorageSpec.
type WasabiCloudStorageSpec struct {
	// Account Account used to access the Wasabi Cloud storage.
	Account WasabiCloudStorageAccountModel `json:"account"`

	// Bucket Wasabi bucket where backup data is stored.
	Bucket WasabiCloudStorageBucketModel `json:"bucket"`

	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsModel `json:"mountServer"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// ProxyAppliance Proxy appliance for the S3 compatible storage.
	ProxyAppliance *S3CompatibleProxyModel `json:"proxyAppliance,omitempty"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// WindowsHostComponentPortModel Ports used by Veeam Backup & Replication components.
type WindowsHostComponentPortModel struct {
	// ComponentName Veeam Backup & Replication component.
	ComponentName EWindowsHostComponentType `json:"componentName"`

	// Port Port used by the component.
	Port int `json:"port"`
}

// WindowsHostImportSpec defines model for WindowsHostImportSpec.
type WindowsHostImportSpec struct {
	// Credentials Credentials used for connection.
	Credentials *CredentialsImportModel `json:"credentials,omitempty"`

	// Description Description of the server.
	Description string `json:"description"`

	// Name Full DNS name or IP address of the server.
	Name string `json:"name"`

	// NetworkSettings Veeam Backup & Replication components installed on the server and ports used by the components.
	NetworkSettings *WindowsHostPortsModel `json:"networkSettings,omitempty"`

	// Type Type of the server.
	Type EManagedServerType `json:"type"`
}

// WindowsHostModel defines model for WindowsHostModel.
type WindowsHostModel struct {
	// CredentialsId ID of a credentials record used to connect to the server.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// Description Description of the server.
	Description *string `json:"description,omitempty"`

	// Id ID of the server.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Full DNS name or IP address of the server.
	Name *string `json:"name,omitempty"`

	// NetworkSettings Veeam Backup & Replication components installed on the server and ports used by the components.
	NetworkSettings *WindowsHostPortsModel `json:"networkSettings,omitempty"`

	// Type Type of the server.
	Type *EManagedServerType `json:"type,omitempty"`
}

// WindowsHostPortsModel Veeam Backup & Replication components installed on the server and ports used by the components.
type WindowsHostPortsModel struct {
	// Components Array of Veeam Backup & Replication components.
	Components *[]WindowsHostComponentPortModel `json:"components,omitempty"`

	// PortRangeEnd End port used for data transfer.
	PortRangeEnd *int `json:"portRangeEnd,omitempty"`

	// PortRangeStart Start port used for data transfer.
	PortRangeStart *int `json:"portRangeStart,omitempty"`

	// ServerThisSide If *true*, the server is run on this side.
	ServerThisSide *bool `json:"serverThisSide,omitempty"`
}

// WindowsHostSpec defines model for WindowsHostSpec.
type WindowsHostSpec struct {
	// CredentialsId ID of the credentials used to connect to the server.
	CredentialsId *openapi_types.UUID `json:"credentialsId,omitempty"`

	// Description Description of the server.
	Description *string `json:"description,omitempty"`

	// Name Full DNS name or IP address of the server.
	Name *string `json:"name,omitempty"`

	// NetworkSettings Veeam Backup & Replication components installed on the server and ports used by the components.
	NetworkSettings *WindowsHostPortsModel `json:"networkSettings,omitempty"`

	// Type Type of the server.
	Type *EManagedServerType `json:"type,omitempty"`
}

// WindowsLocalRepositorySettingsModel Repository settings.
type WindowsLocalRepositorySettingsModel struct {
	// AdvancedSettings Advanced settings for the backup repository.
	AdvancedSettings *RepositoryAdvancedSettingsModel `json:"advancedSettings,omitempty"`

	// EnableReadWriteLimit If *true*, reading and writing speed is limited.
	EnableReadWriteLimit *bool `json:"enableReadWriteLimit,omitempty"`

	// EnableTaskLimit If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`

	// MaxTaskCount Maximum number of concurrent tasks.
	MaxTaskCount *int `json:"maxTaskCount,omitempty"`

	// Path Path to the folder where backup files are stored.
	Path *string `json:"path,omitempty"`

	// ReadWriteRate Maximum rate that restricts the total speed of reading and writing data to the backup repository disk.
	ReadWriteRate *int `json:"readWriteRate,omitempty"`
}

// WindowsLocalStorageImportSpec defines model for WindowsLocalStorageImportSpec.
type WindowsLocalStorageImportSpec struct {
	// Description Description of the backup repository.
	Description string `json:"description"`

	// HostName ID of the server that is used as a backup repository.
	HostName string `json:"hostName"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsImportSpec `json:"mountServer"`

	// Name Name of the backup repository.
	Name string `json:"name"`

	// Repository Repository settings.
	Repository WindowsLocalRepositorySettingsModel `json:"repository"`

	// Tag Tag that identifies the backup repository.
	Tag string `json:"tag"`

	// Type Repository type.
	Type ERepositoryType `json:"type"`
}

// WindowsLocalStorageModel defines model for WindowsLocalStorageModel.
type WindowsLocalStorageModel struct {
	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// HostId ID of the server that is used as a backup repository.
	HostId openapi_types.UUID `json:"hostId"`

	// Id ID of the backup repository.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsModel `json:"mountServer"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// Repository Repository settings.
	Repository WindowsLocalRepositorySettingsModel `json:"repository"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// WindowsLocalStorageSpec defines model for WindowsLocalStorageSpec.
type WindowsLocalStorageSpec struct {
	// Description Description of the backup repository.
	Description *string `json:"description,omitempty"`

	// HostId ID of the server that is used as a backup repository.
	HostId openapi_types.UUID `json:"hostId"`

	// MountServer Settings for the mount server that is used for file-level and application items restore.
	MountServer MountServerSettingsModel `json:"mountServer"`

	// Name Name of the backup repository.
	Name *string `json:"name,omitempty"`

	// Repository Repository settings.
	Repository WindowsLocalRepositorySettingsModel `json:"repository"`

	// Tag Tag that identifies the backup repository.
	Tag *string `json:"tag,omitempty"`

	// Type Repository type.
	Type *ERepositoryType `json:"type,omitempty"`
}

// ApiVersionParam defines model for apiVersionParam.
type ApiVersionParam = string

// BadRequest defines model for BadRequest.
type BadRequest = Error

// Deleted Empty success response (200, 201, 204).
type Deleted = EmptySuccessResponse

// Forbidden defines model for Forbidden.
type Forbidden = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// CreateAuthorizationCodeParams defines parameters for CreateAuthorizationCode.
type CreateAuthorizationCodeParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// LogoutParams defines parameters for Logout.
type LogoutParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// CreateTokenParams defines parameters for CreateToken.
type CreateTokenParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllComputerRecoveryTokensParams defines parameters for GetAllComputerRecoveryTokens.
type GetAllComputerRecoveryTokensParams struct {
	// Skip Number of recovery tokens to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of recovery tokens to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts recovery tokens by one of the parameters.
	OrderColumn *EComputerRecoveryTokenFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts recovery tokens in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters recovery tokens by the `nameFilter` pattern. The pattern can match any repository parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// CreateComputerRecoveryTokenParams defines parameters for CreateComputerRecoveryToken.
type CreateComputerRecoveryTokenParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// DeleteComputerRecoveryTokenParams defines parameters for DeleteComputerRecoveryToken.
type DeleteComputerRecoveryTokenParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetComputerRecoveryTokenParams defines parameters for GetComputerRecoveryToken.
type GetComputerRecoveryTokenParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// UpdateComputerRecoveryTokenParams defines parameters for UpdateComputerRecoveryToken.
type UpdateComputerRecoveryTokenParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ExportCloudCredentialsParams defines parameters for ExportCloudCredentials.
type ExportCloudCredentialsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ImportCloudCredentialsParams defines parameters for ImportCloudCredentials.
type ImportCloudCredentialsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ExportCredentialsParams defines parameters for ExportCredentials.
type ExportCredentialsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ImportCredentialsParams defines parameters for ImportCredentials.
type ImportCredentialsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ExportEncryptionPasswordsParams defines parameters for ExportEncryptionPasswords.
type ExportEncryptionPasswordsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ImportEncryptionPasswordsParams defines parameters for ImportEncryptionPasswords.
type ImportEncryptionPasswordsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ExportJobsParams defines parameters for ExportJobs.
type ExportJobsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ImportJobsParams defines parameters for ImportJobs.
type ImportJobsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ExportManagedServersParams defines parameters for ExportManagedServers.
type ExportManagedServersParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ImportManagedServersParams defines parameters for ImportManagedServers.
type ImportManagedServersParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ExportProxiesParams defines parameters for ExportProxies.
type ExportProxiesParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ImportProxiesParams defines parameters for ImportProxies.
type ImportProxiesParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ExportRepositoriesParams defines parameters for ExportRepositories.
type ExportRepositoriesParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ImportRepositoriesParams defines parameters for ImportRepositories.
type ImportRepositoriesParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllAutomationSessionsParams defines parameters for GetAllAutomationSessions.
type GetAllAutomationSessionsParams struct {
	// Skip Number of sessions to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of sessions to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts sessions by one of the session parameters.
	OrderColumn *ESessionsFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts sessions in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters sessions by the `nameFilter` pattern. The pattern can match any session parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// CreatedAfterFilter Returns sessions that are created after the specified date and time.
	CreatedAfterFilter *time.Time `form:"createdAfterFilter,omitempty" json:"createdAfterFilter,omitempty"`

	// CreatedBeforeFilter Returns sessions that are created before the specified date and time.
	CreatedBeforeFilter *time.Time `form:"createdBeforeFilter,omitempty" json:"createdBeforeFilter,omitempty"`

	// EndedAfterFilter Returns sessions that are finished after the specified date and time.
	EndedAfterFilter *time.Time `form:"endedAfterFilter,omitempty" json:"endedAfterFilter,omitempty"`

	// EndedBeforeFilter Returns sessions that are finished before the specified date and time.
	EndedBeforeFilter *time.Time `form:"endedBeforeFilter,omitempty" json:"endedBeforeFilter,omitempty"`

	// TypeFilter Filters sessions by session type.
	TypeFilter *ESessionType `form:"typeFilter,omitempty" json:"typeFilter,omitempty"`

	// StateFilter Filters sessions by session state.
	StateFilter *ESessionState `form:"stateFilter,omitempty" json:"stateFilter,omitempty"`

	// ResultFilter Filters sessions by session result.
	ResultFilter *ESessionResult `form:"resultFilter,omitempty" json:"resultFilter,omitempty"`

	// JobIdFilter Filters sessions by job ID.
	JobIdFilter *openapi_types.UUID `form:"jobIdFilter,omitempty" json:"jobIdFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAutomationSessionParams defines parameters for GetAutomationSession.
type GetAutomationSessionParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAutomationSessionLogsParams defines parameters for GetAutomationSessionLogs.
type GetAutomationSessionLogsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// StopAutomationSessionParams defines parameters for StopAutomationSession.
type StopAutomationSessionParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllManagedServersParams defines parameters for GetAllManagedServers.
type GetAllManagedServersParams struct {
	// Skip Number of servers to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of servers to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts servers by one of the server parameters.
	OrderColumn *EManagedServersFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts servers in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters servers by the `nameFilter` pattern. The pattern can match any server parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// TypeFilter Filters servers by server type.
	TypeFilter *EManagedServerType `form:"typeFilter,omitempty" json:"typeFilter,omitempty"`

	// ViTypeFilter Filters servers by the type of VMware vSphere server.
	ViTypeFilter *EViHostType `form:"viTypeFilter,omitempty" json:"viTypeFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// CreateManagedServerParams defines parameters for CreateManagedServer.
type CreateManagedServerParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// DeleteManagedServerParams defines parameters for DeleteManagedServer.
type DeleteManagedServerParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetManagedServerParams defines parameters for GetManagedServer.
type GetManagedServerParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// UpdateManagedServerParams defines parameters for UpdateManagedServer.
type UpdateManagedServerParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// UpdateSingleUseCredentialsParams defines parameters for UpdateSingleUseCredentials.
type UpdateSingleUseCredentialsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllProxiesParams defines parameters for GetAllProxies.
type GetAllProxiesParams struct {
	// Skip Number of proxies to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of proxies to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts proxies by one of the proxy parameters.
	OrderColumn *EProxiesFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts proxies in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters proxies by the `nameFilter` pattern. The pattern can match any proxy parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// TypeFilter Filters proxies by proxy type.
	TypeFilter *EProxyType `form:"typeFilter,omitempty" json:"typeFilter,omitempty"`

	// HostIdFilter Filters proxies by ID of the backup server.
	HostIdFilter *openapi_types.UUID `form:"hostIdFilter,omitempty" json:"hostIdFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// CreateProxyParams defines parameters for CreateProxy.
type CreateProxyParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// DeleteProxyParams defines parameters for DeleteProxy.
type DeleteProxyParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetProxyParams defines parameters for GetProxy.
type GetProxyParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// UpdateProxyParams defines parameters for UpdateProxy.
type UpdateProxyParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllRepositoriesParams defines parameters for GetAllRepositories.
type GetAllRepositoriesParams struct {
	// Skip Number of repositories to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of repositories to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts repositories by one of the repository parameters.
	OrderColumn *ERepositoryFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts repositories in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters repositories by the `nameFilter` pattern. The pattern can match any repository parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// TypeFilter Filters repositories by repository type.
	TypeFilter *ERepositoryType `form:"typeFilter,omitempty" json:"typeFilter,omitempty"`

	// HostIdFilter Filters repositories by ID of the backup server.
	HostIdFilter *openapi_types.UUID `form:"hostIdFilter,omitempty" json:"hostIdFilter,omitempty"`

	// PathFilter Filters repositories by path to the folder where backup files are stored.
	PathFilter *string `form:"pathFilter,omitempty" json:"pathFilter,omitempty"`

	// VmbApiFilter Filters repositories by VM Backup API parameters converted to the base64 string. To obtain the string, call the `GetApiProductInfoString` method of VM Backup API.
	VmbApiFilter *string `form:"vmbApiFilter,omitempty" json:"vmbApiFilter,omitempty"`

	// VmbApiPlatform Filters repositories by ID of a platform that you use to communicate with VM Backup API.
	VmbApiPlatform *openapi_types.UUID `form:"vmbApiPlatform,omitempty" json:"vmbApiPlatform,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// CreateRepositoryParams defines parameters for CreateRepository.
type CreateRepositoryParams struct {
	OverwriteOwner *bool `form:"overwriteOwner,omitempty" json:"overwriteOwner,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllRepositoriesStatesParams defines parameters for GetAllRepositoriesStates.
type GetAllRepositoriesStatesParams struct {
	// Skip Number of repository states to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of repository states to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts repository states by one of the state parameters.
	OrderColumn *ERepositoryStatesFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts repository states in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// IdFilter Filters repository states by repository ID.
	IdFilter *openapi_types.UUID `form:"idFilter,omitempty" json:"idFilter,omitempty"`

	// NameFilter Filters repository states by the `nameFilter` pattern. The pattern can match any repository state parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// TypeFilter Filters repository states by repository type.
	TypeFilter *ERepositoryType `form:"typeFilter,omitempty" json:"typeFilter,omitempty"`

	// CapacityFilter Filters repository states by repository capacity.
	CapacityFilter *float64 `form:"capacityFilter,omitempty" json:"capacityFilter,omitempty"`

	// FreeSpaceFilter Filters repository states by repository free space.
	FreeSpaceFilter *float64 `form:"freeSpaceFilter,omitempty" json:"freeSpaceFilter,omitempty"`

	// UsedSpaceFilter Filters repository states by repository used space.
	UsedSpaceFilter *float64 `form:"usedSpaceFilter,omitempty" json:"usedSpaceFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// DeleteRepositoryParams defines parameters for DeleteRepository.
type DeleteRepositoryParams struct {
	// DeleteBackups If *true*, Veeam Backup & Replication will remove backup files.
	DeleteBackups *bool `form:"deleteBackups,omitempty" json:"deleteBackups,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetRepositoryParams defines parameters for GetRepository.
type GetRepositoryParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// UpdateRepositoryParams defines parameters for UpdateRepository.
type UpdateRepositoryParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetRepositoryAccessPermissionsParams defines parameters for GetRepositoryAccessPermissions.
type GetRepositoryAccessPermissionsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// UpdateRepositoryAccessPermissionsParams defines parameters for UpdateRepositoryAccessPermissions.
type UpdateRepositoryAccessPermissionsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllScaleOutRepositoriesParams defines parameters for GetAllScaleOutRepositories.
type GetAllScaleOutRepositoriesParams struct {
	// Skip Number of repositories to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of repositories to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts repositories by one of the repository parameters.
	OrderColumn *EScaleOutRepositoryFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts repositories in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters repositories by the `nameFilter` pattern. The pattern can match any repository parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// CreateScaleOutRepositoryParams defines parameters for CreateScaleOutRepository.
type CreateScaleOutRepositoryParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// DeleteScaleOutRepositoryParams defines parameters for DeleteScaleOutRepository.
type DeleteScaleOutRepositoryParams struct {
	// DeleteBackups If *true*, Veeam Backup & Replication will remove backup files.
	DeleteBackups *bool `form:"deleteBackups,omitempty" json:"deleteBackups,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetScaleOutRepositoryParams defines parameters for GetScaleOutRepository.
type GetScaleOutRepositoryParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// UpdateScaleOutRepositoryParams defines parameters for UpdateScaleOutRepository.
type UpdateScaleOutRepositoryParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetScaleOutRepositoryAccessPermissionsParams defines parameters for GetScaleOutRepositoryAccessPermissions.
type GetScaleOutRepositoryAccessPermissionsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// UpdateScaleOutRepositoryAccessPermissionsParams defines parameters for UpdateScaleOutRepositoryAccessPermissions.
type UpdateScaleOutRepositoryAccessPermissionsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// DisableScaleOutExtentMaintenanceModeParams defines parameters for DisableScaleOutExtentMaintenanceMode.
type DisableScaleOutExtentMaintenanceModeParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// DisableScaleOutExtentSealedModeParams defines parameters for DisableScaleOutExtentSealedMode.
type DisableScaleOutExtentSealedModeParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// EnableScaleOutExtentMaintenanceModeParams defines parameters for EnableScaleOutExtentMaintenanceMode.
type EnableScaleOutExtentMaintenanceModeParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// EnableScaleOutExtentSealedModeParams defines parameters for EnableScaleOutExtentSealedMode.
type EnableScaleOutExtentSealedModeParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// EvacuateBackupsFromScaleOutExtentParams defines parameters for EvacuateBackupsFromScaleOutExtent.
type EvacuateBackupsFromScaleOutExtentParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllBackupObjectsParams defines parameters for GetAllBackupObjects.
type GetAllBackupObjectsParams struct {
	// Skip Number of backup objects to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of backup objects to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts backup objects by one of the backup object parameters.
	OrderColumn *EBackupObjectsFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts backup objects in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters backup objects by the `nameFilter` pattern. The pattern can match any backup object parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// PlatformNameFilter Filters backup objects by platform ID.
	PlatformNameFilter *EPlatformType `form:"platformNameFilter,omitempty" json:"platformNameFilter,omitempty"`

	// PlatformIdFilter Filters backup objects by platform ID.
	PlatformIdFilter *openapi_types.UUID `form:"platformIdFilter,omitempty" json:"platformIdFilter,omitempty"`

	// TypeFilter Filters backup objects by object type.
	TypeFilter *string `form:"typeFilter,omitempty" json:"typeFilter,omitempty"`

	// ViTypeFilter Filters backup objects by the type of VMware vSphere server.
	ViTypeFilter *string `form:"viTypeFilter,omitempty" json:"viTypeFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetBackupObjectParams defines parameters for GetBackupObject.
type GetBackupObjectParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetBackupObjectRestorePointsParams defines parameters for GetBackupObjectRestorePoints.
type GetBackupObjectRestorePointsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllBackupsParams defines parameters for GetAllBackups.
type GetAllBackupsParams struct {
	// Skip Number of backups to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of backups to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts backups by one of the backup parameters.
	OrderColumn *EBackupsFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts backups in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters backups by the `nameFilter` pattern. The pattern can match any backup parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// CreatedAfterFilter Returns backups that are created after the specified date and time.
	CreatedAfterFilter *time.Time `form:"createdAfterFilter,omitempty" json:"createdAfterFilter,omitempty"`

	// CreatedBeforeFilter Returns backups that are created before the specified date and time.
	CreatedBeforeFilter *time.Time `form:"createdBeforeFilter,omitempty" json:"createdBeforeFilter,omitempty"`

	// PlatformIdFilter Filters backups by ID of the backup object platform.
	PlatformIdFilter *openapi_types.UUID `form:"platformIdFilter,omitempty" json:"platformIdFilter,omitempty"`

	// JobIdFilter Filters backups by ID of the parent job.
	JobIdFilter *openapi_types.UUID `form:"jobIdFilter,omitempty" json:"jobIdFilter,omitempty"`

	// PolicyTagFilter Filters backups by retention policy tag.
	PolicyTagFilter *string `form:"policyTagFilter,omitempty" json:"policyTagFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetBackupParams defines parameters for GetBackup.
type GetBackupParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetBackupObjectsParams defines parameters for GetBackupObjects.
type GetBackupObjectsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// BrowseCloudEntityParams defines parameters for BrowseCloudEntity.
type BrowseCloudEntityParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// CreateNewCloudFolderParams defines parameters for CreateNewCloudFolder.
type CreateNewCloudFolderParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllCloudCredsParams defines parameters for GetAllCloudCreds.
type GetAllCloudCredsParams struct {
	// Skip Number of cloud credentials records to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of cloud credentials records to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts cloud credentials by one of the cloud credentials parameters.
	OrderColumn *ECloudCredentialsFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts cloud credentials in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters cloud credentials by the `nameFilter` pattern. The pattern can match any cloud credentials parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	NameFilter *string                `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`
	TypeFilter *ECloudCredentialsType `form:"typeFilter,omitempty" json:"typeFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// CreateCloudCredsParams defines parameters for CreateCloudCreds.
type CreateCloudCredsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// RequestAppRegistrationByDeviceCodeParams defines parameters for RequestAppRegistrationByDeviceCode.
type RequestAppRegistrationByDeviceCodeParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// FinishAppRegistrationByDeviceCodeParams defines parameters for FinishAppRegistrationByDeviceCode.
type FinishAppRegistrationByDeviceCodeParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// DeleteCloudCredsParams defines parameters for DeleteCloudCreds.
type DeleteCloudCredsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetCloudCredsParams defines parameters for GetCloudCreds.
type GetCloudCredsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// UpdateCloudCredsParams defines parameters for UpdateCloudCreds.
type UpdateCloudCredsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ChangeCloudCertificateParams defines parameters for ChangeCloudCertificate.
type ChangeCloudCertificateParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ChangeCloudCredsSecretKeyParams defines parameters for ChangeCloudCredsSecretKey.
type ChangeCloudCredsSecretKeyParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllCredsHelperAppliancesParams defines parameters for GetAllCredsHelperAppliances.
type GetAllCredsHelperAppliancesParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// CreateCloudCredsHelperApplianceParams defines parameters for CreateCloudCredsHelperAppliance.
type CreateCloudCredsHelperApplianceParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// DeleteCloudCredsHelperApplianceParams defines parameters for DeleteCloudCredsHelperAppliance.
type DeleteCloudCredsHelperApplianceParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetCloudCredsHelperApplianceParams defines parameters for GetCloudCredsHelperAppliance.
type GetCloudCredsHelperApplianceParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetConfigBackupOptionsParams defines parameters for GetConfigBackupOptions.
type GetConfigBackupOptionsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// UpdateConfigBackupOptionsParams defines parameters for UpdateConfigBackupOptions.
type UpdateConfigBackupOptionsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// StartConfigBackupParams defines parameters for StartConfigBackup.
type StartConfigBackupParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetConnectionCertificateParams defines parameters for GetConnectionCertificate.
type GetConnectionCertificateParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllCredsParams defines parameters for GetAllCreds.
type GetAllCredsParams struct {
	// Skip Number of credentials records to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of credentials records to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts credentials by one of the credentials parameters.
	OrderColumn *ECredentialsFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts credentials in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters credentials by the `nameFilter` pattern. The pattern can match any credentials parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// CreateCredsParams defines parameters for CreateCreds.
type CreateCredsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// DeleteCredsParams defines parameters for DeleteCreds.
type DeleteCredsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetCredsParams defines parameters for GetCreds.
type GetCredsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// UpdateCredsParams defines parameters for UpdateCreds.
type UpdateCredsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ChangePasswordForCredsParams defines parameters for ChangePasswordForCreds.
type ChangePasswordForCredsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ChangePrivateKeyForCredsParams defines parameters for ChangePrivateKeyForCreds.
type ChangePrivateKeyForCredsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// ChangeRootPasswordForCredsParams defines parameters for ChangeRootPasswordForCreds.
type ChangeRootPasswordForCredsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllEncryptionPasswordsParams defines parameters for GetAllEncryptionPasswords.
type GetAllEncryptionPasswordsParams struct {
	// Skip Number of passwords to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of passwords to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts passwords by one of the password parameters.
	OrderColumn *EEncryptionPasswordsFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts passwords in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// CreateEncryptionPasswordParams defines parameters for CreateEncryptionPassword.
type CreateEncryptionPasswordParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// DeleteEncryptionPasswordParams defines parameters for DeleteEncryptionPassword.
type DeleteEncryptionPasswordParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetEncryptionPasswordParams defines parameters for GetEncryptionPassword.
type GetEncryptionPasswordParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// UpdateEncryptionPasswordParams defines parameters for UpdateEncryptionPassword.
type UpdateEncryptionPasswordParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetGeneralOptionsParams defines parameters for GetGeneralOptions.
type GetGeneralOptionsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// UpdateGeneralOptionsParams defines parameters for UpdateGeneralOptions.
type UpdateGeneralOptionsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllInventoryVmwareHostsParams defines parameters for GetAllInventoryVmwareHosts.
type GetAllInventoryVmwareHostsParams struct {
	// Skip Number of VMware vSphere servers to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of VMware vSphere servers to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts VMware vSphere servers by one of the VMware vSphere server parameters.
	OrderColumn *EViRootFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts VMware vSphere servers in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters VMware vSphere servers by the `nameFilter` pattern. The pattern can match any VMware vSphere server parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetVmwareHostObjectParams defines parameters for GetVmwareHostObject.
type GetVmwareHostObjectParams struct {
	// Skip Number of objects to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of objects to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts objects by one of the object parameters.
	OrderColumn *EvCentersInventoryFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts objects in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// ObjectIdFilter Filters objects by object ID.
	ObjectIdFilter *string `form:"objectIdFilter,omitempty" json:"objectIdFilter,omitempty"`

	// HierarchyTypeFilter Filters objects by hierarchy type.
	HierarchyTypeFilter *EHierarchyType `form:"hierarchyTypeFilter,omitempty" json:"hierarchyTypeFilter,omitempty"`

	// NameFilter Filters objects by the `nameFilter` pattern. The pattern can match any object parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// TypeFilter Filters objects by virtual infrastructure type.
	TypeFilter *EVmwareInventoryType `form:"typeFilter,omitempty" json:"typeFilter,omitempty"`

	// ParentContainerNameFilter Filters objects by name of the parent container.
	ParentContainerNameFilter *string `form:"parentContainerNameFilter,omitempty" json:"parentContainerNameFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllJobsParams defines parameters for GetAllJobs.
type GetAllJobsParams struct {
	// Skip Number of jobs to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of jobs to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts jobs by one of the job parameters.
	OrderColumn *EJobFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts jobs in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters jobs by the `nameFilter` pattern. The pattern can match any job parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// TypeFilter Filters jobs by job type.
	TypeFilter *EJobType `form:"typeFilter,omitempty" json:"typeFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// CreateJobParams defines parameters for CreateJob.
type CreateJobParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllJobsStatesParams defines parameters for GetAllJobsStates.
type GetAllJobsStatesParams struct {
	// Skip Number of job states to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of job states to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts job states by one of the state parameters.
	OrderColumn *EJobStatesFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts job states in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// IdFilter Filters job states by job ID.
	IdFilter *openapi_types.UUID `form:"idFilter,omitempty" json:"idFilter,omitempty"`

	// NameFilter Filters job states by the `nameFilter` pattern. The pattern can match any state parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// TypeFilter Filters job states by job type.
	TypeFilter *EJobType `form:"typeFilter,omitempty" json:"typeFilter,omitempty"`

	// LastResultFilter Filters job states by status with which jobs must finish.
	LastResultFilter *ESessionResult `form:"lastResultFilter,omitempty" json:"lastResultFilter,omitempty"`

	// StatusFilter Filters job states by current status of the job.
	StatusFilter *EJobStatus `form:"statusFilter,omitempty" json:"statusFilter,omitempty"`

	// WorkloadFilter Filters job states by workloads that jobs must process.
	WorkloadFilter *EJobWorkload `form:"workloadFilter,omitempty" json:"workloadFilter,omitempty"`

	// LastRunAfterFilter Returns job states for jobs that have run after the specified date and time.
	LastRunAfterFilter *time.Time `form:"lastRunAfterFilter,omitempty" json:"lastRunAfterFilter,omitempty"`

	// LastRunBeforeFilter Returns job states for jobs that have not run after the specified date and time.
	LastRunBeforeFilter *time.Time `form:"lastRunBeforeFilter,omitempty" json:"lastRunBeforeFilter,omitempty"`

	// IsHighPriorityJobFilter If *true*, Returns job states for jobs with high priority.
	IsHighPriorityJobFilter *bool `form:"isHighPriorityJobFilter,omitempty" json:"isHighPriorityJobFilter,omitempty"`

	// RepositoryIdFilter Filters job states by repository ID.
	RepositoryIdFilter *openapi_types.UUID `form:"repositoryIdFilter,omitempty" json:"repositoryIdFilter,omitempty"`

	// ObjectsCountFilter Filters job states by number of objects processed by the job.
	ObjectsCountFilter *int `form:"objectsCountFilter,omitempty" json:"objectsCountFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// DeleteJobParams defines parameters for DeleteJob.
type DeleteJobParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetJobParams defines parameters for GetJob.
type GetJobParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// UpdateJobParams defines parameters for UpdateJob.
type UpdateJobParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// DisableJobParams defines parameters for DisableJob.
type DisableJobParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// EnableJobParams defines parameters for EnableJob.
type EnableJobParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// StartJobParams defines parameters for StartJob.
type StartJobParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// StopJobParams defines parameters for StopJob.
type StopJobParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllObjectRestorePointsParams defines parameters for GetAllObjectRestorePoints.
type GetAllObjectRestorePointsParams struct {
	// Skip Number of restore points to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of restore points to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts restore points by one of the restore point parameters.
	OrderColumn *EObjectRestorePointsFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts restore points in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// CreatedAfterFilter Returns restore points that are created after the specified date and time.
	CreatedAfterFilter *time.Time `form:"createdAfterFilter,omitempty" json:"createdAfterFilter,omitempty"`

	// CreatedBeforeFilter Returns restore points that are created before the specified date and time.
	CreatedBeforeFilter *time.Time `form:"createdBeforeFilter,omitempty" json:"createdBeforeFilter,omitempty"`

	// NameFilter Filters restore points by the `nameFilter` pattern. The pattern can match any restore point parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// PlatformNameFilter Filters restore points by name of the backup object platform.
	PlatformNameFilter *EPlatformType `form:"platformNameFilter,omitempty" json:"platformNameFilter,omitempty"`

	// PlatformIdFilter Filters restore points by ID of the backup object platform.
	PlatformIdFilter *openapi_types.UUID `form:"platformIdFilter,omitempty" json:"platformIdFilter,omitempty"`

	// BackupIdFilter Filters restore points by backup ID.
	BackupIdFilter *openapi_types.UUID `form:"backupIdFilter,omitempty" json:"backupIdFilter,omitempty"`

	// BackupObjectIdFilter Filters restore points by backup object ID.
	BackupObjectIdFilter *openapi_types.UUID `form:"backupObjectIdFilter,omitempty" json:"backupObjectIdFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetObjectRestorePointParams defines parameters for GetObjectRestorePoint.
type GetObjectRestorePointParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetObjectRestorePointDisksParams defines parameters for GetObjectRestorePointDisks.
type GetObjectRestorePointDisksParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllVmwareFcdInstantRecoveryMountModelsParams defines parameters for GetAllVmwareFcdInstantRecoveryMountModels.
type GetAllVmwareFcdInstantRecoveryMountModelsParams struct {
	// Skip Number of mounts to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of mounts to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts mounts by one of the mount parameters.
	OrderColumn *EVmwareFcdInstantRecoveryMountsFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts mounts in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// StateFilter Filters mounts by mount state.
	StateFilter *EInstantRecoveryMountState `form:"stateFilter,omitempty" json:"stateFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// InstantRecoveryVmwareFcdMountWithSessionParams defines parameters for InstantRecoveryVmwareFcdMountWithSession.
type InstantRecoveryVmwareFcdMountWithSessionParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetVmwareFcdInstantRecoveryMountModelParams defines parameters for GetVmwareFcdInstantRecoveryMountModel.
type GetVmwareFcdInstantRecoveryMountModelParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// InstantRecoveryVmwareFcdDismountWithSessionParams defines parameters for InstantRecoveryVmwareFcdDismountWithSession.
type InstantRecoveryVmwareFcdDismountWithSessionParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// InstantRecoveryVmwareFcdMigrateWithSessionParams defines parameters for InstantRecoveryVmwareFcdMigrateWithSession.
type InstantRecoveryVmwareFcdMigrateWithSessionParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllInstantViVMRecoveryMountsParams defines parameters for GetAllInstantViVMRecoveryMounts.
type GetAllInstantViVMRecoveryMountsParams struct {
	// Skip Number of mounts to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of mounts to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts mounts by one of the mount parameters.
	OrderColumn *EInstantViVMRecoveryMountsFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts mounts in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// StateFilter Filters mounts by mount state.
	StateFilter *EInstantRecoveryMountState `form:"stateFilter,omitempty" json:"stateFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// InstantViVMRecoveryMountParams defines parameters for InstantViVMRecoveryMount.
type InstantViVMRecoveryMountParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetInstantViVMRecoveryMountParams defines parameters for GetInstantViVMRecoveryMount.
type GetInstantViVMRecoveryMountParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// InstantViVMRecoveryMigrateParams defines parameters for InstantViVMRecoveryMigrate.
type InstantViVMRecoveryMigrateParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// InstantViVMRecoveryUnmountParams defines parameters for InstantViVMRecoveryUnmount.
type InstantViVMRecoveryUnmountParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// EntireVmRestoreVmwareParams defines parameters for EntireVmRestoreVmware.
type EntireVmRestoreVmwareParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetServerCertificateParams defines parameters for GetServerCertificate.
type GetServerCertificateParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetServerInfoParams defines parameters for GetServerInfo.
type GetServerInfoParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetServerTimeParams defines parameters for GetServerTime.
type GetServerTimeParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllServicesParams defines parameters for GetAllServices.
type GetAllServicesParams struct {
	// Skip Number of services to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of services to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts services by one of the service parameters.
	OrderColumn *EServicesFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts services in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters services by the `nameFilter` pattern. The pattern can match any service parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllSessionsParams defines parameters for GetAllSessions.
type GetAllSessionsParams struct {
	// Skip Number of sessions to skip.
	Skip *int32 `form:"skip,omitempty" json:"skip,omitempty"`

	// Limit Maximum number of sessions to return.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderColumn Sorts sessions by one of the session parameters.
	OrderColumn *ESessionsFiltersOrderColumn `form:"orderColumn,omitempty" json:"orderColumn,omitempty"`

	// OrderAsc Sorts sessions in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `form:"orderAsc,omitempty" json:"orderAsc,omitempty"`

	// NameFilter Filters sessions by the `nameFilter` pattern. The pattern can match any session parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.
	NameFilter *string `form:"nameFilter,omitempty" json:"nameFilter,omitempty"`

	// CreatedAfterFilter Returns sessions that are created after the specified date and time.
	CreatedAfterFilter *time.Time `form:"createdAfterFilter,omitempty" json:"createdAfterFilter,omitempty"`

	// CreatedBeforeFilter Returns sessions that are created before the specified date and time.
	CreatedBeforeFilter *time.Time `form:"createdBeforeFilter,omitempty" json:"createdBeforeFilter,omitempty"`

	// EndedAfterFilter Returns sessions that are finished after the specified date and time.
	EndedAfterFilter *time.Time `form:"endedAfterFilter,omitempty" json:"endedAfterFilter,omitempty"`

	// EndedBeforeFilter Returns sessions that are finished before the specified date and time.
	EndedBeforeFilter *time.Time `form:"endedBeforeFilter,omitempty" json:"endedBeforeFilter,omitempty"`

	// TypeFilter Filters sessions by session type.
	TypeFilter *ESessionType `form:"typeFilter,omitempty" json:"typeFilter,omitempty"`

	// StateFilter Filters sessions by session state.
	StateFilter *ESessionState `form:"stateFilter,omitempty" json:"stateFilter,omitempty"`

	// ResultFilter Filters sessions by session result.
	ResultFilter *ESessionResult `form:"resultFilter,omitempty" json:"resultFilter,omitempty"`

	// JobIdFilter Filters sessions by job ID.
	JobIdFilter *openapi_types.UUID `form:"jobIdFilter,omitempty" json:"jobIdFilter,omitempty"`

	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetSessionParams defines parameters for GetSession.
type GetSessionParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetSessionLogsParams defines parameters for GetSessionLogs.
type GetSessionLogsParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// StopSessionParams defines parameters for StopSession.
type StopSessionParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// GetAllTrafficRulesParams defines parameters for GetAllTrafficRules.
type GetAllTrafficRulesParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// UpdateTrafficRulesParams defines parameters for UpdateTrafficRules.
type UpdateTrafficRulesParams struct {
	// XApiVersion Version and revision of the client REST API. Must be in the following format&#58; `<version>-<revision>`.
	XApiVersion ApiVersionParam `json:"x-api-version"`
}

// CreateTokenFormdataRequestBody defines body for CreateToken for application/x-www-form-urlencoded ContentType.
type CreateTokenFormdataRequestBody = TokenLoginSpec

// CreateComputerRecoveryTokenJSONRequestBody defines body for CreateComputerRecoveryToken for application/json ContentType.
type CreateComputerRecoveryTokenJSONRequestBody = ComputerRecoveryTokenSpec

// UpdateComputerRecoveryTokenJSONRequestBody defines body for UpdateComputerRecoveryToken for application/json ContentType.
type UpdateComputerRecoveryTokenJSONRequestBody = ComputerRecoveryTokenModel

// ExportCloudCredentialsJSONRequestBody defines body for ExportCloudCredentials for application/json ContentType.
type ExportCloudCredentialsJSONRequestBody = CloudCredentialsExportSpec

// ImportCloudCredentialsJSONRequestBody defines body for ImportCloudCredentials for application/json ContentType.
type ImportCloudCredentialsJSONRequestBody = CloudCredentialsImportSpecCollection

// ExportCredentialsJSONRequestBody defines body for ExportCredentials for application/json ContentType.
type ExportCredentialsJSONRequestBody = CredentialsExportSpec

// ImportCredentialsJSONRequestBody defines body for ImportCredentials for application/json ContentType.
type ImportCredentialsJSONRequestBody = CredentialsImportSpecCollection

// ExportEncryptionPasswordsJSONRequestBody defines body for ExportEncryptionPasswords for application/json ContentType.
type ExportEncryptionPasswordsJSONRequestBody = EncryptionPasswordExportSpec

// ImportEncryptionPasswordsJSONRequestBody defines body for ImportEncryptionPasswords for application/json ContentType.
type ImportEncryptionPasswordsJSONRequestBody = EncryptionPasswordImportSpecCollection

// ExportJobsJSONRequestBody defines body for ExportJobs for application/json ContentType.
type ExportJobsJSONRequestBody = JobExportSpec

// ImportJobsJSONRequestBody defines body for ImportJobs for application/json ContentType.
type ImportJobsJSONRequestBody = JobImportSpecCollection

// ExportManagedServersJSONRequestBody defines body for ExportManagedServers for application/json ContentType.
type ExportManagedServersJSONRequestBody = ManageServerExportSpec

// ImportManagedServersJSONRequestBody defines body for ImportManagedServers for application/json ContentType.
type ImportManagedServersJSONRequestBody = ManageServerImportSpecCollection

// ExportProxiesJSONRequestBody defines body for ExportProxies for application/json ContentType.
type ExportProxiesJSONRequestBody = ProxyExportSpec

// ImportProxiesJSONRequestBody defines body for ImportProxies for application/json ContentType.
type ImportProxiesJSONRequestBody = ProxyImportSpecCollection

// ExportRepositoriesJSONRequestBody defines body for ExportRepositories for application/json ContentType.
type ExportRepositoriesJSONRequestBody = RepositoryExportSpec

// ImportRepositoriesJSONRequestBody defines body for ImportRepositories for application/json ContentType.
type ImportRepositoriesJSONRequestBody = RepositoryImportSpecCollection

// CreateManagedServerJSONRequestBody defines body for CreateManagedServer for application/json ContentType.
type CreateManagedServerJSONRequestBody = ManagedServerSpec

// UpdateManagedServerJSONRequestBody defines body for UpdateManagedServer for application/json ContentType.
type UpdateManagedServerJSONRequestBody = ManagedServerModel

// UpdateSingleUseCredentialsJSONRequestBody defines body for UpdateSingleUseCredentials for application/json ContentType.
type UpdateSingleUseCredentialsJSONRequestBody = LinuxCredentialsSpec

// CreateProxyJSONRequestBody defines body for CreateProxy for application/json ContentType.
type CreateProxyJSONRequestBody = ProxySpec

// UpdateProxyJSONRequestBody defines body for UpdateProxy for application/json ContentType.
type UpdateProxyJSONRequestBody = ProxyModel

// CreateRepositoryJSONRequestBody defines body for CreateRepository for application/json ContentType.
type CreateRepositoryJSONRequestBody = RepositorySpec

// UpdateRepositoryJSONRequestBody defines body for UpdateRepository for application/json ContentType.
type UpdateRepositoryJSONRequestBody = RepositoryModel

// UpdateRepositoryAccessPermissionsJSONRequestBody defines body for UpdateRepositoryAccessPermissions for application/json ContentType.
type UpdateRepositoryAccessPermissionsJSONRequestBody = RepositoryAccessPermissionsModel

// CreateScaleOutRepositoryJSONRequestBody defines body for CreateScaleOutRepository for application/json ContentType.
type CreateScaleOutRepositoryJSONRequestBody = ScaleOutRepositorySpec

// UpdateScaleOutRepositoryJSONRequestBody defines body for UpdateScaleOutRepository for application/json ContentType.
type UpdateScaleOutRepositoryJSONRequestBody = ScaleOutRepositoryModel

// UpdateScaleOutRepositoryAccessPermissionsJSONRequestBody defines body for UpdateScaleOutRepositoryAccessPermissions for application/json ContentType.
type UpdateScaleOutRepositoryAccessPermissionsJSONRequestBody = RepositoryAccessPermissionsModel

// DisableScaleOutExtentMaintenanceModeJSONRequestBody defines body for DisableScaleOutExtentMaintenanceMode for application/json ContentType.
type DisableScaleOutExtentMaintenanceModeJSONRequestBody = ScaleOutExtentMaintenanceSpec

// DisableScaleOutExtentSealedModeJSONRequestBody defines body for DisableScaleOutExtentSealedMode for application/json ContentType.
type DisableScaleOutExtentSealedModeJSONRequestBody = ScaleOutExtentMaintenanceSpec

// EnableScaleOutExtentMaintenanceModeJSONRequestBody defines body for EnableScaleOutExtentMaintenanceMode for application/json ContentType.
type EnableScaleOutExtentMaintenanceModeJSONRequestBody = ScaleOutExtentMaintenanceSpec

// EnableScaleOutExtentSealedModeJSONRequestBody defines body for EnableScaleOutExtentSealedMode for application/json ContentType.
type EnableScaleOutExtentSealedModeJSONRequestBody = ScaleOutExtentMaintenanceSpec

// EvacuateBackupsFromScaleOutExtentJSONRequestBody defines body for EvacuateBackupsFromScaleOutExtent for application/json ContentType.
type EvacuateBackupsFromScaleOutExtentJSONRequestBody = ScaleOutExtentMaintenanceSpec

// BrowseCloudEntityJSONRequestBody defines body for BrowseCloudEntity for application/json ContentType.
type BrowseCloudEntityJSONRequestBody = CloudBrowserSpec

// CreateNewCloudFolderJSONRequestBody defines body for CreateNewCloudFolder for application/json ContentType.
type CreateNewCloudFolderJSONRequestBody = CloudBrowserNewFolderSpec

// CreateCloudCredsJSONRequestBody defines body for CreateCloudCreds for application/json ContentType.
type CreateCloudCredsJSONRequestBody = CloudCredentialsSpec

// RequestAppRegistrationByDeviceCodeJSONRequestBody defines body for RequestAppRegistrationByDeviceCode for application/json ContentType.
type RequestAppRegistrationByDeviceCodeJSONRequestBody = CloudDeviceCodeSpec

// UpdateCloudCredsJSONRequestBody defines body for UpdateCloudCreds for application/json ContentType.
type UpdateCloudCredsJSONRequestBody = CloudCredentialsModel

// ChangeCloudCertificateJSONRequestBody defines body for ChangeCloudCertificate for application/json ContentType.
type ChangeCloudCertificateJSONRequestBody = CertificateUploadSpec

// ChangeCloudCredsSecretKeyJSONRequestBody defines body for ChangeCloudCredsSecretKey for application/json ContentType.
type ChangeCloudCredsSecretKeyJSONRequestBody = CloudCredentialsPasswordSpec

// CreateCloudCredsHelperApplianceJSONRequestBody defines body for CreateCloudCredsHelperAppliance for application/json ContentType.
type CreateCloudCredsHelperApplianceJSONRequestBody = CloudHelperApplianceSpec

// UpdateConfigBackupOptionsJSONRequestBody defines body for UpdateConfigBackupOptions for application/json ContentType.
type UpdateConfigBackupOptionsJSONRequestBody = ConfigBackupModel

// GetConnectionCertificateJSONRequestBody defines body for GetConnectionCertificate for application/json ContentType.
type GetConnectionCertificateJSONRequestBody = HostConnectionSpec

// CreateCredsJSONRequestBody defines body for CreateCreds for application/json ContentType.
type CreateCredsJSONRequestBody = CredentialsSpec

// UpdateCredsJSONRequestBody defines body for UpdateCreds for application/json ContentType.
type UpdateCredsJSONRequestBody = CredentialsModel

// ChangePasswordForCredsJSONRequestBody defines body for ChangePasswordForCreds for application/json ContentType.
type ChangePasswordForCredsJSONRequestBody = CredentialsPasswordChangeSpec

// ChangePrivateKeyForCredsJSONRequestBody defines body for ChangePrivateKeyForCreds for application/json ContentType.
type ChangePrivateKeyForCredsJSONRequestBody = PrivateKeyChangeSpec

// ChangeRootPasswordForCredsJSONRequestBody defines body for ChangeRootPasswordForCreds for application/json ContentType.
type ChangeRootPasswordForCredsJSONRequestBody = CredentialsPasswordChangeSpec

// CreateEncryptionPasswordJSONRequestBody defines body for CreateEncryptionPassword for application/json ContentType.
type CreateEncryptionPasswordJSONRequestBody = EncryptionPasswordSpec

// UpdateEncryptionPasswordJSONRequestBody defines body for UpdateEncryptionPassword for application/json ContentType.
type UpdateEncryptionPasswordJSONRequestBody = EncryptionPasswordModel

// UpdateGeneralOptionsJSONRequestBody defines body for UpdateGeneralOptions for application/json ContentType.
type UpdateGeneralOptionsJSONRequestBody = GeneralOptionsModel

// CreateJobJSONRequestBody defines body for CreateJob for application/json ContentType.
type CreateJobJSONRequestBody = JobSpec

// UpdateJobJSONRequestBody defines body for UpdateJob for application/json ContentType.
type UpdateJobJSONRequestBody = JobModel

// StartJobJSONRequestBody defines body for StartJob for application/json ContentType.
type StartJobJSONRequestBody = JobStartSpec

// StopJobJSONRequestBody defines body for StopJob for application/json ContentType.
type StopJobJSONRequestBody = JobStopSpec

// InstantRecoveryVmwareFcdMountWithSessionJSONRequestBody defines body for InstantRecoveryVmwareFcdMountWithSession for application/json ContentType.
type InstantRecoveryVmwareFcdMountWithSessionJSONRequestBody = VmwareFcdInstantRecoverySpec

// InstantRecoveryVmwareFcdMigrateWithSessionJSONRequestBody defines body for InstantRecoveryVmwareFcdMigrateWithSession for application/json ContentType.
type InstantRecoveryVmwareFcdMigrateWithSessionJSONRequestBody = VmwareFcdQuickMigrationSpec

// InstantViVMRecoveryMountJSONRequestBody defines body for InstantViVMRecoveryMount for application/json ContentType.
type InstantViVMRecoveryMountJSONRequestBody = InstantViVMRecoverySpec

// InstantViVMRecoveryMigrateJSONRequestBody defines body for InstantViVMRecoveryMigrate for application/json ContentType.
type InstantViVMRecoveryMigrateJSONRequestBody = ViVMQuickMigrationSpec

// EntireVmRestoreVmwareJSONRequestBody defines body for EntireVmRestoreVmware for application/json ContentType.
type EntireVmRestoreVmwareJSONRequestBody = EntireViVMRestoreSpec

// UpdateTrafficRulesJSONRequestBody defines body for UpdateTrafficRules for application/json ContentType.
type UpdateTrafficRulesJSONRequestBody = GlobalNetworkTrafficRulesModel

// AsViBackupObjectModel returns the union data inside the BackupObjectModel as a ViBackupObjectModel
func (t BackupObjectModel) AsViBackupObjectModel() (ViBackupObjectModel, error) {
	var body ViBackupObjectModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromViBackupObjectModel overwrites any union data inside the BackupObjectModel as the provided ViBackupObjectModel
func (t *BackupObjectModel) FromViBackupObjectModel(v ViBackupObjectModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeViBackupObjectModel performs a merge with any union data inside the BackupObjectModel, using the provided ViBackupObjectModel
func (t *BackupObjectModel) MergeViBackupObjectModel(v ViBackupObjectModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t BackupObjectModel) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Id != nil {
		object["id"], err = json.Marshal(t.Id)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id': %w", err)
		}
	}

	if t.Name != nil {
		object["name"], err = json.Marshal(t.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	if t.PlatformId != nil {
		object["platformId"], err = json.Marshal(t.PlatformId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'platformId': %w", err)
		}
	}

	if t.PlatformName != nil {
		object["platformName"], err = json.Marshal(t.PlatformName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'platformName': %w", err)
		}
	}

	if t.RestorePointsCount != nil {
		object["restorePointsCount"], err = json.Marshal(t.RestorePointsCount)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'restorePointsCount': %w", err)
		}
	}

	if t.Type != nil {
		object["type"], err = json.Marshal(t.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *BackupObjectModel) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &t.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &t.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
	}

	if raw, found := object["platformId"]; found {
		err = json.Unmarshal(raw, &t.PlatformId)
		if err != nil {
			return fmt.Errorf("error reading 'platformId': %w", err)
		}
	}

	if raw, found := object["platformName"]; found {
		err = json.Unmarshal(raw, &t.PlatformName)
		if err != nil {
			return fmt.Errorf("error reading 'platformName': %w", err)
		}
	}

	if raw, found := object["restorePointsCount"]; found {
		err = json.Unmarshal(raw, &t.RestorePointsCount)
		if err != nil {
			return fmt.Errorf("error reading 'restorePointsCount': %w", err)
		}
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// AsAzureBlobBrowserModel returns the union data inside the CloudBrowserModel as a AzureBlobBrowserModel
func (t CloudBrowserModel) AsAzureBlobBrowserModel() (AzureBlobBrowserModel, error) {
	var body AzureBlobBrowserModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureBlobBrowserModel overwrites any union data inside the CloudBrowserModel as the provided AzureBlobBrowserModel
func (t *CloudBrowserModel) FromAzureBlobBrowserModel(v AzureBlobBrowserModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureBlobBrowserModel performs a merge with any union data inside the CloudBrowserModel, using the provided AzureBlobBrowserModel
func (t *CloudBrowserModel) MergeAzureBlobBrowserModel(v AzureBlobBrowserModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAzureDataBoxBrowserModel returns the union data inside the CloudBrowserModel as a AzureDataBoxBrowserModel
func (t CloudBrowserModel) AsAzureDataBoxBrowserModel() (AzureDataBoxBrowserModel, error) {
	var body AzureDataBoxBrowserModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureDataBoxBrowserModel overwrites any union data inside the CloudBrowserModel as the provided AzureDataBoxBrowserModel
func (t *CloudBrowserModel) FromAzureDataBoxBrowserModel(v AzureDataBoxBrowserModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureDataBoxBrowserModel performs a merge with any union data inside the CloudBrowserModel, using the provided AzureDataBoxBrowserModel
func (t *CloudBrowserModel) MergeAzureDataBoxBrowserModel(v AzureDataBoxBrowserModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAmazonS3BrowserModel returns the union data inside the CloudBrowserModel as a AmazonS3BrowserModel
func (t CloudBrowserModel) AsAmazonS3BrowserModel() (AmazonS3BrowserModel, error) {
	var body AmazonS3BrowserModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAmazonS3BrowserModel overwrites any union data inside the CloudBrowserModel as the provided AmazonS3BrowserModel
func (t *CloudBrowserModel) FromAmazonS3BrowserModel(v AmazonS3BrowserModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAmazonS3BrowserModel performs a merge with any union data inside the CloudBrowserModel, using the provided AmazonS3BrowserModel
func (t *CloudBrowserModel) MergeAmazonS3BrowserModel(v AmazonS3BrowserModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAmazonSnowballEdgeBrowserModel returns the union data inside the CloudBrowserModel as a AmazonSnowballEdgeBrowserModel
func (t CloudBrowserModel) AsAmazonSnowballEdgeBrowserModel() (AmazonSnowballEdgeBrowserModel, error) {
	var body AmazonSnowballEdgeBrowserModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAmazonSnowballEdgeBrowserModel overwrites any union data inside the CloudBrowserModel as the provided AmazonSnowballEdgeBrowserModel
func (t *CloudBrowserModel) FromAmazonSnowballEdgeBrowserModel(v AmazonSnowballEdgeBrowserModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAmazonSnowballEdgeBrowserModel performs a merge with any union data inside the CloudBrowserModel, using the provided AmazonSnowballEdgeBrowserModel
func (t *CloudBrowserModel) MergeAmazonSnowballEdgeBrowserModel(v AmazonSnowballEdgeBrowserModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsS3CompatibleBrowserModel returns the union data inside the CloudBrowserModel as a S3CompatibleBrowserModel
func (t CloudBrowserModel) AsS3CompatibleBrowserModel() (S3CompatibleBrowserModel, error) {
	var body S3CompatibleBrowserModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromS3CompatibleBrowserModel overwrites any union data inside the CloudBrowserModel as the provided S3CompatibleBrowserModel
func (t *CloudBrowserModel) FromS3CompatibleBrowserModel(v S3CompatibleBrowserModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeS3CompatibleBrowserModel performs a merge with any union data inside the CloudBrowserModel, using the provided S3CompatibleBrowserModel
func (t *CloudBrowserModel) MergeS3CompatibleBrowserModel(v S3CompatibleBrowserModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsGoogleCloudStorageBrowserModel returns the union data inside the CloudBrowserModel as a GoogleCloudStorageBrowserModel
func (t CloudBrowserModel) AsGoogleCloudStorageBrowserModel() (GoogleCloudStorageBrowserModel, error) {
	var body GoogleCloudStorageBrowserModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGoogleCloudStorageBrowserModel overwrites any union data inside the CloudBrowserModel as the provided GoogleCloudStorageBrowserModel
func (t *CloudBrowserModel) FromGoogleCloudStorageBrowserModel(v GoogleCloudStorageBrowserModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGoogleCloudStorageBrowserModel performs a merge with any union data inside the CloudBrowserModel, using the provided GoogleCloudStorageBrowserModel
func (t *CloudBrowserModel) MergeGoogleCloudStorageBrowserModel(v GoogleCloudStorageBrowserModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsIBMCloudStorageBrowserModel returns the union data inside the CloudBrowserModel as a IBMCloudStorageBrowserModel
func (t CloudBrowserModel) AsIBMCloudStorageBrowserModel() (IBMCloudStorageBrowserModel, error) {
	var body IBMCloudStorageBrowserModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIBMCloudStorageBrowserModel overwrites any union data inside the CloudBrowserModel as the provided IBMCloudStorageBrowserModel
func (t *CloudBrowserModel) FromIBMCloudStorageBrowserModel(v IBMCloudStorageBrowserModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIBMCloudStorageBrowserModel performs a merge with any union data inside the CloudBrowserModel, using the provided IBMCloudStorageBrowserModel
func (t *CloudBrowserModel) MergeIBMCloudStorageBrowserModel(v IBMCloudStorageBrowserModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAzureComputeBrowserModel returns the union data inside the CloudBrowserModel as a AzureComputeBrowserModel
func (t CloudBrowserModel) AsAzureComputeBrowserModel() (AzureComputeBrowserModel, error) {
	var body AzureComputeBrowserModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureComputeBrowserModel overwrites any union data inside the CloudBrowserModel as the provided AzureComputeBrowserModel
func (t *CloudBrowserModel) FromAzureComputeBrowserModel(v AzureComputeBrowserModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureComputeBrowserModel performs a merge with any union data inside the CloudBrowserModel, using the provided AzureComputeBrowserModel
func (t *CloudBrowserModel) MergeAzureComputeBrowserModel(v AzureComputeBrowserModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAmazonEC2BrowserModel returns the union data inside the CloudBrowserModel as a AmazonEC2BrowserModel
func (t CloudBrowserModel) AsAmazonEC2BrowserModel() (AmazonEC2BrowserModel, error) {
	var body AmazonEC2BrowserModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAmazonEC2BrowserModel overwrites any union data inside the CloudBrowserModel as the provided AmazonEC2BrowserModel
func (t *CloudBrowserModel) FromAmazonEC2BrowserModel(v AmazonEC2BrowserModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAmazonEC2BrowserModel performs a merge with any union data inside the CloudBrowserModel, using the provided AmazonEC2BrowserModel
func (t *CloudBrowserModel) MergeAmazonEC2BrowserModel(v AmazonEC2BrowserModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsWasabiCloudStorageBrowserModel returns the union data inside the CloudBrowserModel as a WasabiCloudStorageBrowserModel
func (t CloudBrowserModel) AsWasabiCloudStorageBrowserModel() (WasabiCloudStorageBrowserModel, error) {
	var body WasabiCloudStorageBrowserModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWasabiCloudStorageBrowserModel overwrites any union data inside the CloudBrowserModel as the provided WasabiCloudStorageBrowserModel
func (t *CloudBrowserModel) FromWasabiCloudStorageBrowserModel(v WasabiCloudStorageBrowserModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWasabiCloudStorageBrowserModel performs a merge with any union data inside the CloudBrowserModel, using the provided WasabiCloudStorageBrowserModel
func (t *CloudBrowserModel) MergeWasabiCloudStorageBrowserModel(v WasabiCloudStorageBrowserModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CloudBrowserModel) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.CredentialsId != nil {
		object["credentialsId"], err = json.Marshal(t.CredentialsId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'credentialsId': %w", err)
		}
	}

	if t.ServiceType != nil {
		object["serviceType"], err = json.Marshal(t.ServiceType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'serviceType': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *CloudBrowserModel) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["credentialsId"]; found {
		err = json.Unmarshal(raw, &t.CredentialsId)
		if err != nil {
			return fmt.Errorf("error reading 'credentialsId': %w", err)
		}
	}

	if raw, found := object["serviceType"]; found {
		err = json.Unmarshal(raw, &t.ServiceType)
		if err != nil {
			return fmt.Errorf("error reading 'serviceType': %w", err)
		}
	}

	return err
}

// AsAzureBlobBrowserDestinationSpec returns the union data inside the CloudBrowserNewFolderSpec as a AzureBlobBrowserDestinationSpec
func (t CloudBrowserNewFolderSpec) AsAzureBlobBrowserDestinationSpec() (AzureBlobBrowserDestinationSpec, error) {
	var body AzureBlobBrowserDestinationSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureBlobBrowserDestinationSpec overwrites any union data inside the CloudBrowserNewFolderSpec as the provided AzureBlobBrowserDestinationSpec
func (t *CloudBrowserNewFolderSpec) FromAzureBlobBrowserDestinationSpec(v AzureBlobBrowserDestinationSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureBlobBrowserDestinationSpec performs a merge with any union data inside the CloudBrowserNewFolderSpec, using the provided AzureBlobBrowserDestinationSpec
func (t *CloudBrowserNewFolderSpec) MergeAzureBlobBrowserDestinationSpec(v AzureBlobBrowserDestinationSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAzureDataBoxBrowserDestinationSpec returns the union data inside the CloudBrowserNewFolderSpec as a AzureDataBoxBrowserDestinationSpec
func (t CloudBrowserNewFolderSpec) AsAzureDataBoxBrowserDestinationSpec() (AzureDataBoxBrowserDestinationSpec, error) {
	var body AzureDataBoxBrowserDestinationSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureDataBoxBrowserDestinationSpec overwrites any union data inside the CloudBrowserNewFolderSpec as the provided AzureDataBoxBrowserDestinationSpec
func (t *CloudBrowserNewFolderSpec) FromAzureDataBoxBrowserDestinationSpec(v AzureDataBoxBrowserDestinationSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureDataBoxBrowserDestinationSpec performs a merge with any union data inside the CloudBrowserNewFolderSpec, using the provided AzureDataBoxBrowserDestinationSpec
func (t *CloudBrowserNewFolderSpec) MergeAzureDataBoxBrowserDestinationSpec(v AzureDataBoxBrowserDestinationSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAmazonS3BrowserDestinationSpec returns the union data inside the CloudBrowserNewFolderSpec as a AmazonS3BrowserDestinationSpec
func (t CloudBrowserNewFolderSpec) AsAmazonS3BrowserDestinationSpec() (AmazonS3BrowserDestinationSpec, error) {
	var body AmazonS3BrowserDestinationSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAmazonS3BrowserDestinationSpec overwrites any union data inside the CloudBrowserNewFolderSpec as the provided AmazonS3BrowserDestinationSpec
func (t *CloudBrowserNewFolderSpec) FromAmazonS3BrowserDestinationSpec(v AmazonS3BrowserDestinationSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAmazonS3BrowserDestinationSpec performs a merge with any union data inside the CloudBrowserNewFolderSpec, using the provided AmazonS3BrowserDestinationSpec
func (t *CloudBrowserNewFolderSpec) MergeAmazonS3BrowserDestinationSpec(v AmazonS3BrowserDestinationSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsS3CompatibleBrowserDestinationSpec returns the union data inside the CloudBrowserNewFolderSpec as a S3CompatibleBrowserDestinationSpec
func (t CloudBrowserNewFolderSpec) AsS3CompatibleBrowserDestinationSpec() (S3CompatibleBrowserDestinationSpec, error) {
	var body S3CompatibleBrowserDestinationSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromS3CompatibleBrowserDestinationSpec overwrites any union data inside the CloudBrowserNewFolderSpec as the provided S3CompatibleBrowserDestinationSpec
func (t *CloudBrowserNewFolderSpec) FromS3CompatibleBrowserDestinationSpec(v S3CompatibleBrowserDestinationSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeS3CompatibleBrowserDestinationSpec performs a merge with any union data inside the CloudBrowserNewFolderSpec, using the provided S3CompatibleBrowserDestinationSpec
func (t *CloudBrowserNewFolderSpec) MergeS3CompatibleBrowserDestinationSpec(v S3CompatibleBrowserDestinationSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAmazonSnowballEdgeBrowserDestinationSpec returns the union data inside the CloudBrowserNewFolderSpec as a AmazonSnowballEdgeBrowserDestinationSpec
func (t CloudBrowserNewFolderSpec) AsAmazonSnowballEdgeBrowserDestinationSpec() (AmazonSnowballEdgeBrowserDestinationSpec, error) {
	var body AmazonSnowballEdgeBrowserDestinationSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAmazonSnowballEdgeBrowserDestinationSpec overwrites any union data inside the CloudBrowserNewFolderSpec as the provided AmazonSnowballEdgeBrowserDestinationSpec
func (t *CloudBrowserNewFolderSpec) FromAmazonSnowballEdgeBrowserDestinationSpec(v AmazonSnowballEdgeBrowserDestinationSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAmazonSnowballEdgeBrowserDestinationSpec performs a merge with any union data inside the CloudBrowserNewFolderSpec, using the provided AmazonSnowballEdgeBrowserDestinationSpec
func (t *CloudBrowserNewFolderSpec) MergeAmazonSnowballEdgeBrowserDestinationSpec(v AmazonSnowballEdgeBrowserDestinationSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsGoogleCloudStorageBrowserDestinationSpec returns the union data inside the CloudBrowserNewFolderSpec as a GoogleCloudStorageBrowserDestinationSpec
func (t CloudBrowserNewFolderSpec) AsGoogleCloudStorageBrowserDestinationSpec() (GoogleCloudStorageBrowserDestinationSpec, error) {
	var body GoogleCloudStorageBrowserDestinationSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGoogleCloudStorageBrowserDestinationSpec overwrites any union data inside the CloudBrowserNewFolderSpec as the provided GoogleCloudStorageBrowserDestinationSpec
func (t *CloudBrowserNewFolderSpec) FromGoogleCloudStorageBrowserDestinationSpec(v GoogleCloudStorageBrowserDestinationSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGoogleCloudStorageBrowserDestinationSpec performs a merge with any union data inside the CloudBrowserNewFolderSpec, using the provided GoogleCloudStorageBrowserDestinationSpec
func (t *CloudBrowserNewFolderSpec) MergeGoogleCloudStorageBrowserDestinationSpec(v GoogleCloudStorageBrowserDestinationSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsIBMCloudStorageBrowserDestinationSpec returns the union data inside the CloudBrowserNewFolderSpec as a IBMCloudStorageBrowserDestinationSpec
func (t CloudBrowserNewFolderSpec) AsIBMCloudStorageBrowserDestinationSpec() (IBMCloudStorageBrowserDestinationSpec, error) {
	var body IBMCloudStorageBrowserDestinationSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIBMCloudStorageBrowserDestinationSpec overwrites any union data inside the CloudBrowserNewFolderSpec as the provided IBMCloudStorageBrowserDestinationSpec
func (t *CloudBrowserNewFolderSpec) FromIBMCloudStorageBrowserDestinationSpec(v IBMCloudStorageBrowserDestinationSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIBMCloudStorageBrowserDestinationSpec performs a merge with any union data inside the CloudBrowserNewFolderSpec, using the provided IBMCloudStorageBrowserDestinationSpec
func (t *CloudBrowserNewFolderSpec) MergeIBMCloudStorageBrowserDestinationSpec(v IBMCloudStorageBrowserDestinationSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsWasabiCloudStorageBrowserDestinationSpec returns the union data inside the CloudBrowserNewFolderSpec as a WasabiCloudStorageBrowserDestinationSpec
func (t CloudBrowserNewFolderSpec) AsWasabiCloudStorageBrowserDestinationSpec() (WasabiCloudStorageBrowserDestinationSpec, error) {
	var body WasabiCloudStorageBrowserDestinationSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWasabiCloudStorageBrowserDestinationSpec overwrites any union data inside the CloudBrowserNewFolderSpec as the provided WasabiCloudStorageBrowserDestinationSpec
func (t *CloudBrowserNewFolderSpec) FromWasabiCloudStorageBrowserDestinationSpec(v WasabiCloudStorageBrowserDestinationSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWasabiCloudStorageBrowserDestinationSpec performs a merge with any union data inside the CloudBrowserNewFolderSpec, using the provided WasabiCloudStorageBrowserDestinationSpec
func (t *CloudBrowserNewFolderSpec) MergeWasabiCloudStorageBrowserDestinationSpec(v WasabiCloudStorageBrowserDestinationSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CloudBrowserNewFolderSpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.CredentialsId != nil {
		object["credentialsId"], err = json.Marshal(t.CredentialsId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'credentialsId': %w", err)
		}
	}

	if t.NewFolderName != nil {
		object["newFolderName"], err = json.Marshal(t.NewFolderName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'newFolderName': %w", err)
		}
	}

	if t.ServiceType != nil {
		object["serviceType"], err = json.Marshal(t.ServiceType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'serviceType': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *CloudBrowserNewFolderSpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["credentialsId"]; found {
		err = json.Unmarshal(raw, &t.CredentialsId)
		if err != nil {
			return fmt.Errorf("error reading 'credentialsId': %w", err)
		}
	}

	if raw, found := object["newFolderName"]; found {
		err = json.Unmarshal(raw, &t.NewFolderName)
		if err != nil {
			return fmt.Errorf("error reading 'newFolderName': %w", err)
		}
	}

	if raw, found := object["serviceType"]; found {
		err = json.Unmarshal(raw, &t.ServiceType)
		if err != nil {
			return fmt.Errorf("error reading 'serviceType': %w", err)
		}
	}

	return err
}

// AsAzureBlobBrowserSpec returns the union data inside the CloudBrowserSpec as a AzureBlobBrowserSpec
func (t CloudBrowserSpec) AsAzureBlobBrowserSpec() (AzureBlobBrowserSpec, error) {
	var body AzureBlobBrowserSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureBlobBrowserSpec overwrites any union data inside the CloudBrowserSpec as the provided AzureBlobBrowserSpec
func (t *CloudBrowserSpec) FromAzureBlobBrowserSpec(v AzureBlobBrowserSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureBlobBrowserSpec performs a merge with any union data inside the CloudBrowserSpec, using the provided AzureBlobBrowserSpec
func (t *CloudBrowserSpec) MergeAzureBlobBrowserSpec(v AzureBlobBrowserSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAzureDataBoxBrowserSpec returns the union data inside the CloudBrowserSpec as a AzureDataBoxBrowserSpec
func (t CloudBrowserSpec) AsAzureDataBoxBrowserSpec() (AzureDataBoxBrowserSpec, error) {
	var body AzureDataBoxBrowserSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureDataBoxBrowserSpec overwrites any union data inside the CloudBrowserSpec as the provided AzureDataBoxBrowserSpec
func (t *CloudBrowserSpec) FromAzureDataBoxBrowserSpec(v AzureDataBoxBrowserSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureDataBoxBrowserSpec performs a merge with any union data inside the CloudBrowserSpec, using the provided AzureDataBoxBrowserSpec
func (t *CloudBrowserSpec) MergeAzureDataBoxBrowserSpec(v AzureDataBoxBrowserSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAmazonS3BrowserSpec returns the union data inside the CloudBrowserSpec as a AmazonS3BrowserSpec
func (t CloudBrowserSpec) AsAmazonS3BrowserSpec() (AmazonS3BrowserSpec, error) {
	var body AmazonS3BrowserSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAmazonS3BrowserSpec overwrites any union data inside the CloudBrowserSpec as the provided AmazonS3BrowserSpec
func (t *CloudBrowserSpec) FromAmazonS3BrowserSpec(v AmazonS3BrowserSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAmazonS3BrowserSpec performs a merge with any union data inside the CloudBrowserSpec, using the provided AmazonS3BrowserSpec
func (t *CloudBrowserSpec) MergeAmazonS3BrowserSpec(v AmazonS3BrowserSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsS3CompatibleBrowserSpec returns the union data inside the CloudBrowserSpec as a S3CompatibleBrowserSpec
func (t CloudBrowserSpec) AsS3CompatibleBrowserSpec() (S3CompatibleBrowserSpec, error) {
	var body S3CompatibleBrowserSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromS3CompatibleBrowserSpec overwrites any union data inside the CloudBrowserSpec as the provided S3CompatibleBrowserSpec
func (t *CloudBrowserSpec) FromS3CompatibleBrowserSpec(v S3CompatibleBrowserSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeS3CompatibleBrowserSpec performs a merge with any union data inside the CloudBrowserSpec, using the provided S3CompatibleBrowserSpec
func (t *CloudBrowserSpec) MergeS3CompatibleBrowserSpec(v S3CompatibleBrowserSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAmazonSnowballEdgeBrowserSpec returns the union data inside the CloudBrowserSpec as a AmazonSnowballEdgeBrowserSpec
func (t CloudBrowserSpec) AsAmazonSnowballEdgeBrowserSpec() (AmazonSnowballEdgeBrowserSpec, error) {
	var body AmazonSnowballEdgeBrowserSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAmazonSnowballEdgeBrowserSpec overwrites any union data inside the CloudBrowserSpec as the provided AmazonSnowballEdgeBrowserSpec
func (t *CloudBrowserSpec) FromAmazonSnowballEdgeBrowserSpec(v AmazonSnowballEdgeBrowserSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAmazonSnowballEdgeBrowserSpec performs a merge with any union data inside the CloudBrowserSpec, using the provided AmazonSnowballEdgeBrowserSpec
func (t *CloudBrowserSpec) MergeAmazonSnowballEdgeBrowserSpec(v AmazonSnowballEdgeBrowserSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsGoogleCloudStorageBrowserSpec returns the union data inside the CloudBrowserSpec as a GoogleCloudStorageBrowserSpec
func (t CloudBrowserSpec) AsGoogleCloudStorageBrowserSpec() (GoogleCloudStorageBrowserSpec, error) {
	var body GoogleCloudStorageBrowserSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGoogleCloudStorageBrowserSpec overwrites any union data inside the CloudBrowserSpec as the provided GoogleCloudStorageBrowserSpec
func (t *CloudBrowserSpec) FromGoogleCloudStorageBrowserSpec(v GoogleCloudStorageBrowserSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGoogleCloudStorageBrowserSpec performs a merge with any union data inside the CloudBrowserSpec, using the provided GoogleCloudStorageBrowserSpec
func (t *CloudBrowserSpec) MergeGoogleCloudStorageBrowserSpec(v GoogleCloudStorageBrowserSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsIBMCloudStorageBrowserSpec returns the union data inside the CloudBrowserSpec as a IBMCloudStorageBrowserSpec
func (t CloudBrowserSpec) AsIBMCloudStorageBrowserSpec() (IBMCloudStorageBrowserSpec, error) {
	var body IBMCloudStorageBrowserSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIBMCloudStorageBrowserSpec overwrites any union data inside the CloudBrowserSpec as the provided IBMCloudStorageBrowserSpec
func (t *CloudBrowserSpec) FromIBMCloudStorageBrowserSpec(v IBMCloudStorageBrowserSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIBMCloudStorageBrowserSpec performs a merge with any union data inside the CloudBrowserSpec, using the provided IBMCloudStorageBrowserSpec
func (t *CloudBrowserSpec) MergeIBMCloudStorageBrowserSpec(v IBMCloudStorageBrowserSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAzureComputeBrowserSpec returns the union data inside the CloudBrowserSpec as a AzureComputeBrowserSpec
func (t CloudBrowserSpec) AsAzureComputeBrowserSpec() (AzureComputeBrowserSpec, error) {
	var body AzureComputeBrowserSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureComputeBrowserSpec overwrites any union data inside the CloudBrowserSpec as the provided AzureComputeBrowserSpec
func (t *CloudBrowserSpec) FromAzureComputeBrowserSpec(v AzureComputeBrowserSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureComputeBrowserSpec performs a merge with any union data inside the CloudBrowserSpec, using the provided AzureComputeBrowserSpec
func (t *CloudBrowserSpec) MergeAzureComputeBrowserSpec(v AzureComputeBrowserSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAmazonEC2BrowserSpec returns the union data inside the CloudBrowserSpec as a AmazonEC2BrowserSpec
func (t CloudBrowserSpec) AsAmazonEC2BrowserSpec() (AmazonEC2BrowserSpec, error) {
	var body AmazonEC2BrowserSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAmazonEC2BrowserSpec overwrites any union data inside the CloudBrowserSpec as the provided AmazonEC2BrowserSpec
func (t *CloudBrowserSpec) FromAmazonEC2BrowserSpec(v AmazonEC2BrowserSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAmazonEC2BrowserSpec performs a merge with any union data inside the CloudBrowserSpec, using the provided AmazonEC2BrowserSpec
func (t *CloudBrowserSpec) MergeAmazonEC2BrowserSpec(v AmazonEC2BrowserSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsWasabiCloudStorageBrowserSpec returns the union data inside the CloudBrowserSpec as a WasabiCloudStorageBrowserSpec
func (t CloudBrowserSpec) AsWasabiCloudStorageBrowserSpec() (WasabiCloudStorageBrowserSpec, error) {
	var body WasabiCloudStorageBrowserSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWasabiCloudStorageBrowserSpec overwrites any union data inside the CloudBrowserSpec as the provided WasabiCloudStorageBrowserSpec
func (t *CloudBrowserSpec) FromWasabiCloudStorageBrowserSpec(v WasabiCloudStorageBrowserSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWasabiCloudStorageBrowserSpec performs a merge with any union data inside the CloudBrowserSpec, using the provided WasabiCloudStorageBrowserSpec
func (t *CloudBrowserSpec) MergeWasabiCloudStorageBrowserSpec(v WasabiCloudStorageBrowserSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CloudBrowserSpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.CredentialsId != nil {
		object["credentialsId"], err = json.Marshal(t.CredentialsId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'credentialsId': %w", err)
		}
	}

	if t.ServiceType != nil {
		object["serviceType"], err = json.Marshal(t.ServiceType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'serviceType': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *CloudBrowserSpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["credentialsId"]; found {
		err = json.Unmarshal(raw, &t.CredentialsId)
		if err != nil {
			return fmt.Errorf("error reading 'credentialsId': %w", err)
		}
	}

	if raw, found := object["serviceType"]; found {
		err = json.Unmarshal(raw, &t.ServiceType)
		if err != nil {
			return fmt.Errorf("error reading 'serviceType': %w", err)
		}
	}

	return err
}

// AsAmazonCloudCredentialsModel returns the union data inside the CloudCredentialsModel as a AmazonCloudCredentialsModel
func (t CloudCredentialsModel) AsAmazonCloudCredentialsModel() (AmazonCloudCredentialsModel, error) {
	var body AmazonCloudCredentialsModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAmazonCloudCredentialsModel overwrites any union data inside the CloudCredentialsModel as the provided AmazonCloudCredentialsModel
func (t *CloudCredentialsModel) FromAmazonCloudCredentialsModel(v AmazonCloudCredentialsModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAmazonCloudCredentialsModel performs a merge with any union data inside the CloudCredentialsModel, using the provided AmazonCloudCredentialsModel
func (t *CloudCredentialsModel) MergeAmazonCloudCredentialsModel(v AmazonCloudCredentialsModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAzureStorageCloudCredentialsModel returns the union data inside the CloudCredentialsModel as a AzureStorageCloudCredentialsModel
func (t CloudCredentialsModel) AsAzureStorageCloudCredentialsModel() (AzureStorageCloudCredentialsModel, error) {
	var body AzureStorageCloudCredentialsModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureStorageCloudCredentialsModel overwrites any union data inside the CloudCredentialsModel as the provided AzureStorageCloudCredentialsModel
func (t *CloudCredentialsModel) FromAzureStorageCloudCredentialsModel(v AzureStorageCloudCredentialsModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureStorageCloudCredentialsModel performs a merge with any union data inside the CloudCredentialsModel, using the provided AzureStorageCloudCredentialsModel
func (t *CloudCredentialsModel) MergeAzureStorageCloudCredentialsModel(v AzureStorageCloudCredentialsModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAzureComputeCloudCredentialsModel returns the union data inside the CloudCredentialsModel as a AzureComputeCloudCredentialsModel
func (t CloudCredentialsModel) AsAzureComputeCloudCredentialsModel() (AzureComputeCloudCredentialsModel, error) {
	var body AzureComputeCloudCredentialsModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureComputeCloudCredentialsModel overwrites any union data inside the CloudCredentialsModel as the provided AzureComputeCloudCredentialsModel
func (t *CloudCredentialsModel) FromAzureComputeCloudCredentialsModel(v AzureComputeCloudCredentialsModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureComputeCloudCredentialsModel performs a merge with any union data inside the CloudCredentialsModel, using the provided AzureComputeCloudCredentialsModel
func (t *CloudCredentialsModel) MergeAzureComputeCloudCredentialsModel(v AzureComputeCloudCredentialsModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsGoogleCloudCredentialsModel returns the union data inside the CloudCredentialsModel as a GoogleCloudCredentialsModel
func (t CloudCredentialsModel) AsGoogleCloudCredentialsModel() (GoogleCloudCredentialsModel, error) {
	var body GoogleCloudCredentialsModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGoogleCloudCredentialsModel overwrites any union data inside the CloudCredentialsModel as the provided GoogleCloudCredentialsModel
func (t *CloudCredentialsModel) FromGoogleCloudCredentialsModel(v GoogleCloudCredentialsModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGoogleCloudCredentialsModel performs a merge with any union data inside the CloudCredentialsModel, using the provided GoogleCloudCredentialsModel
func (t *CloudCredentialsModel) MergeGoogleCloudCredentialsModel(v GoogleCloudCredentialsModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CloudCredentialsModel) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Description != nil {
		object["description"], err = json.Marshal(t.Description)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'description': %w", err)
		}
	}

	if t.Id != nil {
		object["id"], err = json.Marshal(t.Id)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id': %w", err)
		}
	}

	if t.Type != nil {
		object["type"], err = json.Marshal(t.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *CloudCredentialsModel) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &t.Description)
		if err != nil {
			return fmt.Errorf("error reading 'description': %w", err)
		}
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &t.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// AsAmazonCloudCredentialsSpec returns the union data inside the CloudCredentialsSpec as a AmazonCloudCredentialsSpec
func (t CloudCredentialsSpec) AsAmazonCloudCredentialsSpec() (AmazonCloudCredentialsSpec, error) {
	var body AmazonCloudCredentialsSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAmazonCloudCredentialsSpec overwrites any union data inside the CloudCredentialsSpec as the provided AmazonCloudCredentialsSpec
func (t *CloudCredentialsSpec) FromAmazonCloudCredentialsSpec(v AmazonCloudCredentialsSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAmazonCloudCredentialsSpec performs a merge with any union data inside the CloudCredentialsSpec, using the provided AmazonCloudCredentialsSpec
func (t *CloudCredentialsSpec) MergeAmazonCloudCredentialsSpec(v AmazonCloudCredentialsSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAzureStorageCloudCredentialsSpec returns the union data inside the CloudCredentialsSpec as a AzureStorageCloudCredentialsSpec
func (t CloudCredentialsSpec) AsAzureStorageCloudCredentialsSpec() (AzureStorageCloudCredentialsSpec, error) {
	var body AzureStorageCloudCredentialsSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureStorageCloudCredentialsSpec overwrites any union data inside the CloudCredentialsSpec as the provided AzureStorageCloudCredentialsSpec
func (t *CloudCredentialsSpec) FromAzureStorageCloudCredentialsSpec(v AzureStorageCloudCredentialsSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureStorageCloudCredentialsSpec performs a merge with any union data inside the CloudCredentialsSpec, using the provided AzureStorageCloudCredentialsSpec
func (t *CloudCredentialsSpec) MergeAzureStorageCloudCredentialsSpec(v AzureStorageCloudCredentialsSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAzureComputeCloudCredentialsSpec returns the union data inside the CloudCredentialsSpec as a AzureComputeCloudCredentialsSpec
func (t CloudCredentialsSpec) AsAzureComputeCloudCredentialsSpec() (AzureComputeCloudCredentialsSpec, error) {
	var body AzureComputeCloudCredentialsSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureComputeCloudCredentialsSpec overwrites any union data inside the CloudCredentialsSpec as the provided AzureComputeCloudCredentialsSpec
func (t *CloudCredentialsSpec) FromAzureComputeCloudCredentialsSpec(v AzureComputeCloudCredentialsSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureComputeCloudCredentialsSpec performs a merge with any union data inside the CloudCredentialsSpec, using the provided AzureComputeCloudCredentialsSpec
func (t *CloudCredentialsSpec) MergeAzureComputeCloudCredentialsSpec(v AzureComputeCloudCredentialsSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsGoogleCloudCredentialsSpec returns the union data inside the CloudCredentialsSpec as a GoogleCloudCredentialsSpec
func (t CloudCredentialsSpec) AsGoogleCloudCredentialsSpec() (GoogleCloudCredentialsSpec, error) {
	var body GoogleCloudCredentialsSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGoogleCloudCredentialsSpec overwrites any union data inside the CloudCredentialsSpec as the provided GoogleCloudCredentialsSpec
func (t *CloudCredentialsSpec) FromGoogleCloudCredentialsSpec(v GoogleCloudCredentialsSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGoogleCloudCredentialsSpec performs a merge with any union data inside the CloudCredentialsSpec, using the provided GoogleCloudCredentialsSpec
func (t *CloudCredentialsSpec) MergeGoogleCloudCredentialsSpec(v GoogleCloudCredentialsSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CloudCredentialsSpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Description != nil {
		object["description"], err = json.Marshal(t.Description)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'description': %w", err)
		}
	}

	if t.Type != nil {
		object["type"], err = json.Marshal(t.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *CloudCredentialsSpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &t.Description)
		if err != nil {
			return fmt.Errorf("error reading 'description': %w", err)
		}
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// AsAzureComputeCloudDeviceCodeModel returns the union data inside the CloudDeviceCodeModel as a AzureComputeCloudDeviceCodeModel
func (t CloudDeviceCodeModel) AsAzureComputeCloudDeviceCodeModel() (AzureComputeCloudDeviceCodeModel, error) {
	var body AzureComputeCloudDeviceCodeModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureComputeCloudDeviceCodeModel overwrites any union data inside the CloudDeviceCodeModel as the provided AzureComputeCloudDeviceCodeModel
func (t *CloudDeviceCodeModel) FromAzureComputeCloudDeviceCodeModel(v AzureComputeCloudDeviceCodeModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureComputeCloudDeviceCodeModel performs a merge with any union data inside the CloudDeviceCodeModel, using the provided AzureComputeCloudDeviceCodeModel
func (t *CloudDeviceCodeModel) MergeAzureComputeCloudDeviceCodeModel(v AzureComputeCloudDeviceCodeModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CloudDeviceCodeModel) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Type != nil {
		object["type"], err = json.Marshal(t.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *CloudDeviceCodeModel) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// AsAzureComputeCloudDeviceCodeSpec returns the union data inside the CloudDeviceCodeSpec as a AzureComputeCloudDeviceCodeSpec
func (t CloudDeviceCodeSpec) AsAzureComputeCloudDeviceCodeSpec() (AzureComputeCloudDeviceCodeSpec, error) {
	var body AzureComputeCloudDeviceCodeSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureComputeCloudDeviceCodeSpec overwrites any union data inside the CloudDeviceCodeSpec as the provided AzureComputeCloudDeviceCodeSpec
func (t *CloudDeviceCodeSpec) FromAzureComputeCloudDeviceCodeSpec(v AzureComputeCloudDeviceCodeSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureComputeCloudDeviceCodeSpec performs a merge with any union data inside the CloudDeviceCodeSpec, using the provided AzureComputeCloudDeviceCodeSpec
func (t *CloudDeviceCodeSpec) MergeAzureComputeCloudDeviceCodeSpec(v AzureComputeCloudDeviceCodeSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CloudDeviceCodeSpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Type != nil {
		object["type"], err = json.Marshal(t.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *CloudDeviceCodeSpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// AsAzureLinuxHelperApplianceModel returns the union data inside the CloudHelperApplianceModel as a AzureLinuxHelperApplianceModel
func (t CloudHelperApplianceModel) AsAzureLinuxHelperApplianceModel() (AzureLinuxHelperApplianceModel, error) {
	var body AzureLinuxHelperApplianceModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureLinuxHelperApplianceModel overwrites any union data inside the CloudHelperApplianceModel as the provided AzureLinuxHelperApplianceModel
func (t *CloudHelperApplianceModel) FromAzureLinuxHelperApplianceModel(v AzureLinuxHelperApplianceModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureLinuxHelperApplianceModel performs a merge with any union data inside the CloudHelperApplianceModel, using the provided AzureLinuxHelperApplianceModel
func (t *CloudHelperApplianceModel) MergeAzureLinuxHelperApplianceModel(v AzureLinuxHelperApplianceModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CloudHelperApplianceModel) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Type != nil {
		object["type"], err = json.Marshal(t.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *CloudHelperApplianceModel) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// AsAzureLinuxHelperApplianceSpec returns the union data inside the CloudHelperApplianceSpec as a AzureLinuxHelperApplianceSpec
func (t CloudHelperApplianceSpec) AsAzureLinuxHelperApplianceSpec() (AzureLinuxHelperApplianceSpec, error) {
	var body AzureLinuxHelperApplianceSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureLinuxHelperApplianceSpec overwrites any union data inside the CloudHelperApplianceSpec as the provided AzureLinuxHelperApplianceSpec
func (t *CloudHelperApplianceSpec) FromAzureLinuxHelperApplianceSpec(v AzureLinuxHelperApplianceSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureLinuxHelperApplianceSpec performs a merge with any union data inside the CloudHelperApplianceSpec, using the provided AzureLinuxHelperApplianceSpec
func (t *CloudHelperApplianceSpec) MergeAzureLinuxHelperApplianceSpec(v AzureLinuxHelperApplianceSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CloudHelperApplianceSpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Type != nil {
		object["type"], err = json.Marshal(t.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *CloudHelperApplianceSpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// AsAzureComputeCloudNativeApplicationModel returns the union data inside the CloudNativeApplicationModel as a AzureComputeCloudNativeApplicationModel
func (t CloudNativeApplicationModel) AsAzureComputeCloudNativeApplicationModel() (AzureComputeCloudNativeApplicationModel, error) {
	var body AzureComputeCloudNativeApplicationModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureComputeCloudNativeApplicationModel overwrites any union data inside the CloudNativeApplicationModel as the provided AzureComputeCloudNativeApplicationModel
func (t *CloudNativeApplicationModel) FromAzureComputeCloudNativeApplicationModel(v AzureComputeCloudNativeApplicationModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureComputeCloudNativeApplicationModel performs a merge with any union data inside the CloudNativeApplicationModel, using the provided AzureComputeCloudNativeApplicationModel
func (t *CloudNativeApplicationModel) MergeAzureComputeCloudNativeApplicationModel(v AzureComputeCloudNativeApplicationModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CloudNativeApplicationModel) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Type != nil {
		object["type"], err = json.Marshal(t.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *CloudNativeApplicationModel) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// AsStandardCredentialsModel returns the union data inside the CredentialsModel as a StandardCredentialsModel
func (t CredentialsModel) AsStandardCredentialsModel() (StandardCredentialsModel, error) {
	var body StandardCredentialsModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStandardCredentialsModel overwrites any union data inside the CredentialsModel as the provided StandardCredentialsModel
func (t *CredentialsModel) FromStandardCredentialsModel(v StandardCredentialsModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStandardCredentialsModel performs a merge with any union data inside the CredentialsModel, using the provided StandardCredentialsModel
func (t *CredentialsModel) MergeStandardCredentialsModel(v StandardCredentialsModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsLinuxCredentialsModel returns the union data inside the CredentialsModel as a LinuxCredentialsModel
func (t CredentialsModel) AsLinuxCredentialsModel() (LinuxCredentialsModel, error) {
	var body LinuxCredentialsModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLinuxCredentialsModel overwrites any union data inside the CredentialsModel as the provided LinuxCredentialsModel
func (t *CredentialsModel) FromLinuxCredentialsModel(v LinuxCredentialsModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLinuxCredentialsModel performs a merge with any union data inside the CredentialsModel, using the provided LinuxCredentialsModel
func (t *CredentialsModel) MergeLinuxCredentialsModel(v LinuxCredentialsModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CredentialsModel) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.CreationTime != nil {
		object["creationTime"], err = json.Marshal(t.CreationTime)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'creationTime': %w", err)
		}
	}

	if t.Description != nil {
		object["description"], err = json.Marshal(t.Description)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'description': %w", err)
		}
	}

	if t.Id != nil {
		object["id"], err = json.Marshal(t.Id)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id': %w", err)
		}
	}

	if t.Type != nil {
		object["type"], err = json.Marshal(t.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}

	if t.Username != nil {
		object["username"], err = json.Marshal(t.Username)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'username': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *CredentialsModel) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["creationTime"]; found {
		err = json.Unmarshal(raw, &t.CreationTime)
		if err != nil {
			return fmt.Errorf("error reading 'creationTime': %w", err)
		}
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &t.Description)
		if err != nil {
			return fmt.Errorf("error reading 'description': %w", err)
		}
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &t.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	if raw, found := object["username"]; found {
		err = json.Unmarshal(raw, &t.Username)
		if err != nil {
			return fmt.Errorf("error reading 'username': %w", err)
		}
	}

	return err
}

// AsStandardCredentialsSpec returns the union data inside the CredentialsSpec as a StandardCredentialsSpec
func (t CredentialsSpec) AsStandardCredentialsSpec() (StandardCredentialsSpec, error) {
	var body StandardCredentialsSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStandardCredentialsSpec overwrites any union data inside the CredentialsSpec as the provided StandardCredentialsSpec
func (t *CredentialsSpec) FromStandardCredentialsSpec(v StandardCredentialsSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStandardCredentialsSpec performs a merge with any union data inside the CredentialsSpec, using the provided StandardCredentialsSpec
func (t *CredentialsSpec) MergeStandardCredentialsSpec(v StandardCredentialsSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsLinuxCredentialsSpec returns the union data inside the CredentialsSpec as a LinuxCredentialsSpec
func (t CredentialsSpec) AsLinuxCredentialsSpec() (LinuxCredentialsSpec, error) {
	var body LinuxCredentialsSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLinuxCredentialsSpec overwrites any union data inside the CredentialsSpec as the provided LinuxCredentialsSpec
func (t *CredentialsSpec) FromLinuxCredentialsSpec(v LinuxCredentialsSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLinuxCredentialsSpec performs a merge with any union data inside the CredentialsSpec, using the provided LinuxCredentialsSpec
func (t *CredentialsSpec) MergeLinuxCredentialsSpec(v LinuxCredentialsSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CredentialsSpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Description != nil {
		object["description"], err = json.Marshal(t.Description)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'description': %w", err)
		}
	}

	if t.Password != nil {
		object["password"], err = json.Marshal(t.Password)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'password': %w", err)
		}
	}

	if t.Type != nil {
		object["type"], err = json.Marshal(t.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}

	if t.Username != nil {
		object["username"], err = json.Marshal(t.Username)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'username': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *CredentialsSpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &t.Description)
		if err != nil {
			return fmt.Errorf("error reading 'description': %w", err)
		}
	}

	if raw, found := object["password"]; found {
		err = json.Unmarshal(raw, &t.Password)
		if err != nil {
			return fmt.Errorf("error reading 'password': %w", err)
		}
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	if raw, found := object["username"]; found {
		err = json.Unmarshal(raw, &t.Username)
		if err != nil {
			return fmt.Errorf("error reading 'username': %w", err)
		}
	}

	return err
}

// AsEntireViVMOriginalLocationRestoreSpec returns the union data inside the EntireViVMRestoreSpec as a EntireViVMOriginalLocationRestoreSpec
func (t EntireViVMRestoreSpec) AsEntireViVMOriginalLocationRestoreSpec() (EntireViVMOriginalLocationRestoreSpec, error) {
	var body EntireViVMOriginalLocationRestoreSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntireViVMOriginalLocationRestoreSpec overwrites any union data inside the EntireViVMRestoreSpec as the provided EntireViVMOriginalLocationRestoreSpec
func (t *EntireViVMRestoreSpec) FromEntireViVMOriginalLocationRestoreSpec(v EntireViVMOriginalLocationRestoreSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntireViVMOriginalLocationRestoreSpec performs a merge with any union data inside the EntireViVMRestoreSpec, using the provided EntireViVMOriginalLocationRestoreSpec
func (t *EntireViVMRestoreSpec) MergeEntireViVMOriginalLocationRestoreSpec(v EntireViVMOriginalLocationRestoreSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsEntireViVMCustomizedRestoreSpec returns the union data inside the EntireViVMRestoreSpec as a EntireViVMCustomizedRestoreSpec
func (t EntireViVMRestoreSpec) AsEntireViVMCustomizedRestoreSpec() (EntireViVMCustomizedRestoreSpec, error) {
	var body EntireViVMCustomizedRestoreSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEntireViVMCustomizedRestoreSpec overwrites any union data inside the EntireViVMRestoreSpec as the provided EntireViVMCustomizedRestoreSpec
func (t *EntireViVMRestoreSpec) FromEntireViVMCustomizedRestoreSpec(v EntireViVMCustomizedRestoreSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEntireViVMCustomizedRestoreSpec performs a merge with any union data inside the EntireViVMRestoreSpec, using the provided EntireViVMCustomizedRestoreSpec
func (t *EntireViVMRestoreSpec) MergeEntireViVMCustomizedRestoreSpec(v EntireViVMCustomizedRestoreSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t EntireViVMRestoreSpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.ObjectRestorePointId != nil {
		object["objectRestorePointId"], err = json.Marshal(t.ObjectRestorePointId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'objectRestorePointId': %w", err)
		}
	}

	if t.PowerUp != nil {
		object["powerUp"], err = json.Marshal(t.PowerUp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'powerUp': %w", err)
		}
	}

	if t.Reason != nil {
		object["reason"], err = json.Marshal(t.Reason)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reason': %w", err)
		}
	}

	if t.RestoreProxies != nil {
		object["restoreProxies"], err = json.Marshal(t.RestoreProxies)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'restoreProxies': %w", err)
		}
	}

	if t.SecureRestore != nil {
		object["secureRestore"], err = json.Marshal(t.SecureRestore)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secureRestore': %w", err)
		}
	}

	if t.Type != nil {
		object["type"], err = json.Marshal(t.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *EntireViVMRestoreSpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["objectRestorePointId"]; found {
		err = json.Unmarshal(raw, &t.ObjectRestorePointId)
		if err != nil {
			return fmt.Errorf("error reading 'objectRestorePointId': %w", err)
		}
	}

	if raw, found := object["powerUp"]; found {
		err = json.Unmarshal(raw, &t.PowerUp)
		if err != nil {
			return fmt.Errorf("error reading 'powerUp': %w", err)
		}
	}

	if raw, found := object["reason"]; found {
		err = json.Unmarshal(raw, &t.Reason)
		if err != nil {
			return fmt.Errorf("error reading 'reason': %w", err)
		}
	}

	if raw, found := object["restoreProxies"]; found {
		err = json.Unmarshal(raw, &t.RestoreProxies)
		if err != nil {
			return fmt.Errorf("error reading 'restoreProxies': %w", err)
		}
	}

	if raw, found := object["secureRestore"]; found {
		err = json.Unmarshal(raw, &t.SecureRestore)
		if err != nil {
			return fmt.Errorf("error reading 'secureRestore': %w", err)
		}
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// AsInstantViVMOriginalLocationRecoverySpec returns the union data inside the InstantViVMRecoverySpec as a InstantViVMOriginalLocationRecoverySpec
func (t InstantViVMRecoverySpec) AsInstantViVMOriginalLocationRecoverySpec() (InstantViVMOriginalLocationRecoverySpec, error) {
	var body InstantViVMOriginalLocationRecoverySpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInstantViVMOriginalLocationRecoverySpec overwrites any union data inside the InstantViVMRecoverySpec as the provided InstantViVMOriginalLocationRecoverySpec
func (t *InstantViVMRecoverySpec) FromInstantViVMOriginalLocationRecoverySpec(v InstantViVMOriginalLocationRecoverySpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInstantViVMOriginalLocationRecoverySpec performs a merge with any union data inside the InstantViVMRecoverySpec, using the provided InstantViVMOriginalLocationRecoverySpec
func (t *InstantViVMRecoverySpec) MergeInstantViVMOriginalLocationRecoverySpec(v InstantViVMOriginalLocationRecoverySpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsInstantViVMCustomizedRecoverySpec returns the union data inside the InstantViVMRecoverySpec as a InstantViVMCustomizedRecoverySpec
func (t InstantViVMRecoverySpec) AsInstantViVMCustomizedRecoverySpec() (InstantViVMCustomizedRecoverySpec, error) {
	var body InstantViVMCustomizedRecoverySpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInstantViVMCustomizedRecoverySpec overwrites any union data inside the InstantViVMRecoverySpec as the provided InstantViVMCustomizedRecoverySpec
func (t *InstantViVMRecoverySpec) FromInstantViVMCustomizedRecoverySpec(v InstantViVMCustomizedRecoverySpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInstantViVMCustomizedRecoverySpec performs a merge with any union data inside the InstantViVMRecoverySpec, using the provided InstantViVMCustomizedRecoverySpec
func (t *InstantViVMRecoverySpec) MergeInstantViVMCustomizedRecoverySpec(v InstantViVMCustomizedRecoverySpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t InstantViVMRecoverySpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.VmTagsRestoreEnabled != nil {
		object["VmTagsRestoreEnabled"], err = json.Marshal(t.VmTagsRestoreEnabled)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'VmTagsRestoreEnabled': %w", err)
		}
	}

	if t.NicsEnabled != nil {
		object["nicsEnabled"], err = json.Marshal(t.NicsEnabled)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nicsEnabled': %w", err)
		}
	}

	if t.ObjectRestorePointId != nil {
		object["objectRestorePointId"], err = json.Marshal(t.ObjectRestorePointId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'objectRestorePointId': %w", err)
		}
	}

	if t.PowerUp != nil {
		object["powerUp"], err = json.Marshal(t.PowerUp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'powerUp': %w", err)
		}
	}

	if t.Reason != nil {
		object["reason"], err = json.Marshal(t.Reason)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reason': %w", err)
		}
	}

	if t.SecureRestore != nil {
		object["secureRestore"], err = json.Marshal(t.SecureRestore)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secureRestore': %w", err)
		}
	}

	if t.Type != nil {
		object["type"], err = json.Marshal(t.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *InstantViVMRecoverySpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["VmTagsRestoreEnabled"]; found {
		err = json.Unmarshal(raw, &t.VmTagsRestoreEnabled)
		if err != nil {
			return fmt.Errorf("error reading 'VmTagsRestoreEnabled': %w", err)
		}
	}

	if raw, found := object["nicsEnabled"]; found {
		err = json.Unmarshal(raw, &t.NicsEnabled)
		if err != nil {
			return fmt.Errorf("error reading 'nicsEnabled': %w", err)
		}
	}

	if raw, found := object["objectRestorePointId"]; found {
		err = json.Unmarshal(raw, &t.ObjectRestorePointId)
		if err != nil {
			return fmt.Errorf("error reading 'objectRestorePointId': %w", err)
		}
	}

	if raw, found := object["powerUp"]; found {
		err = json.Unmarshal(raw, &t.PowerUp)
		if err != nil {
			return fmt.Errorf("error reading 'powerUp': %w", err)
		}
	}

	if raw, found := object["reason"]; found {
		err = json.Unmarshal(raw, &t.Reason)
		if err != nil {
			return fmt.Errorf("error reading 'reason': %w", err)
		}
	}

	if raw, found := object["secureRestore"]; found {
		err = json.Unmarshal(raw, &t.SecureRestore)
		if err != nil {
			return fmt.Errorf("error reading 'secureRestore': %w", err)
		}
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// AsBackupJobModel returns the union data inside the JobModel as a BackupJobModel
func (t JobModel) AsBackupJobModel() (BackupJobModel, error) {
	var body BackupJobModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBackupJobModel overwrites any union data inside the JobModel as the provided BackupJobModel
func (t *JobModel) FromBackupJobModel(v BackupJobModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBackupJobModel performs a merge with any union data inside the JobModel, using the provided BackupJobModel
func (t *JobModel) MergeBackupJobModel(v BackupJobModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobModel) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Description != nil {
		object["description"], err = json.Marshal(t.Description)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'description': %w", err)
		}
	}

	if t.Id != nil {
		object["id"], err = json.Marshal(t.Id)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id': %w", err)
		}
	}

	if t.IsDisabled != nil {
		object["isDisabled"], err = json.Marshal(t.IsDisabled)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'isDisabled': %w", err)
		}
	}

	if t.Name != nil {
		object["name"], err = json.Marshal(t.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	if t.Type != nil {
		object["type"], err = json.Marshal(t.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *JobModel) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &t.Description)
		if err != nil {
			return fmt.Errorf("error reading 'description': %w", err)
		}
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &t.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
	}

	if raw, found := object["isDisabled"]; found {
		err = json.Unmarshal(raw, &t.IsDisabled)
		if err != nil {
			return fmt.Errorf("error reading 'isDisabled': %w", err)
		}
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &t.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// AsBackupJobSpec returns the union data inside the JobSpec as a BackupJobSpec
func (t JobSpec) AsBackupJobSpec() (BackupJobSpec, error) {
	var body BackupJobSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBackupJobSpec overwrites any union data inside the JobSpec as the provided BackupJobSpec
func (t *JobSpec) FromBackupJobSpec(v BackupJobSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBackupJobSpec performs a merge with any union data inside the JobSpec, using the provided BackupJobSpec
func (t *JobSpec) MergeBackupJobSpec(v BackupJobSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t JobSpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Description != nil {
		object["description"], err = json.Marshal(t.Description)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'description': %w", err)
		}
	}

	if t.Name != nil {
		object["name"], err = json.Marshal(t.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	if t.Type != nil {
		object["type"], err = json.Marshal(t.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *JobSpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &t.Description)
		if err != nil {
			return fmt.Errorf("error reading 'description': %w", err)
		}
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &t.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// AsWindowsHostModel returns the union data inside the ManagedServerModel as a WindowsHostModel
func (t ManagedServerModel) AsWindowsHostModel() (WindowsHostModel, error) {
	var body WindowsHostModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWindowsHostModel overwrites any union data inside the ManagedServerModel as the provided WindowsHostModel
func (t *ManagedServerModel) FromWindowsHostModel(v WindowsHostModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWindowsHostModel performs a merge with any union data inside the ManagedServerModel, using the provided WindowsHostModel
func (t *ManagedServerModel) MergeWindowsHostModel(v WindowsHostModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsLinuxHostModel returns the union data inside the ManagedServerModel as a LinuxHostModel
func (t ManagedServerModel) AsLinuxHostModel() (LinuxHostModel, error) {
	var body LinuxHostModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLinuxHostModel overwrites any union data inside the ManagedServerModel as the provided LinuxHostModel
func (t *ManagedServerModel) FromLinuxHostModel(v LinuxHostModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLinuxHostModel performs a merge with any union data inside the ManagedServerModel, using the provided LinuxHostModel
func (t *ManagedServerModel) MergeLinuxHostModel(v LinuxHostModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsViHostModel returns the union data inside the ManagedServerModel as a ViHostModel
func (t ManagedServerModel) AsViHostModel() (ViHostModel, error) {
	var body ViHostModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromViHostModel overwrites any union data inside the ManagedServerModel as the provided ViHostModel
func (t *ManagedServerModel) FromViHostModel(v ViHostModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeViHostModel performs a merge with any union data inside the ManagedServerModel, using the provided ViHostModel
func (t *ManagedServerModel) MergeViHostModel(v ViHostModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ManagedServerModel) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.CredentialsId != nil {
		object["credentialsId"], err = json.Marshal(t.CredentialsId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'credentialsId': %w", err)
		}
	}

	if t.Description != nil {
		object["description"], err = json.Marshal(t.Description)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'description': %w", err)
		}
	}

	if t.Id != nil {
		object["id"], err = json.Marshal(t.Id)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id': %w", err)
		}
	}

	if t.Name != nil {
		object["name"], err = json.Marshal(t.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	if t.Type != nil {
		object["type"], err = json.Marshal(t.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *ManagedServerModel) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["credentialsId"]; found {
		err = json.Unmarshal(raw, &t.CredentialsId)
		if err != nil {
			return fmt.Errorf("error reading 'credentialsId': %w", err)
		}
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &t.Description)
		if err != nil {
			return fmt.Errorf("error reading 'description': %w", err)
		}
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &t.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &t.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// AsWindowsHostSpec returns the union data inside the ManagedServerSpec as a WindowsHostSpec
func (t ManagedServerSpec) AsWindowsHostSpec() (WindowsHostSpec, error) {
	var body WindowsHostSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWindowsHostSpec overwrites any union data inside the ManagedServerSpec as the provided WindowsHostSpec
func (t *ManagedServerSpec) FromWindowsHostSpec(v WindowsHostSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWindowsHostSpec performs a merge with any union data inside the ManagedServerSpec, using the provided WindowsHostSpec
func (t *ManagedServerSpec) MergeWindowsHostSpec(v WindowsHostSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsLinuxHostSpec returns the union data inside the ManagedServerSpec as a LinuxHostSpec
func (t ManagedServerSpec) AsLinuxHostSpec() (LinuxHostSpec, error) {
	var body LinuxHostSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLinuxHostSpec overwrites any union data inside the ManagedServerSpec as the provided LinuxHostSpec
func (t *ManagedServerSpec) FromLinuxHostSpec(v LinuxHostSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLinuxHostSpec performs a merge with any union data inside the ManagedServerSpec, using the provided LinuxHostSpec
func (t *ManagedServerSpec) MergeLinuxHostSpec(v LinuxHostSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsViHostSpec returns the union data inside the ManagedServerSpec as a ViHostSpec
func (t ManagedServerSpec) AsViHostSpec() (ViHostSpec, error) {
	var body ViHostSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromViHostSpec overwrites any union data inside the ManagedServerSpec as the provided ViHostSpec
func (t *ManagedServerSpec) FromViHostSpec(v ViHostSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeViHostSpec performs a merge with any union data inside the ManagedServerSpec, using the provided ViHostSpec
func (t *ManagedServerSpec) MergeViHostSpec(v ViHostSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ManagedServerSpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.CredentialsId != nil {
		object["credentialsId"], err = json.Marshal(t.CredentialsId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'credentialsId': %w", err)
		}
	}

	if t.Description != nil {
		object["description"], err = json.Marshal(t.Description)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'description': %w", err)
		}
	}

	if t.Name != nil {
		object["name"], err = json.Marshal(t.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	if t.Type != nil {
		object["type"], err = json.Marshal(t.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *ManagedServerSpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["credentialsId"]; found {
		err = json.Unmarshal(raw, &t.CredentialsId)
		if err != nil {
			return fmt.Errorf("error reading 'credentialsId': %w", err)
		}
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &t.Description)
		if err != nil {
			return fmt.Errorf("error reading 'description': %w", err)
		}
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &t.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// AsViProxyModel returns the union data inside the ProxyModel as a ViProxyModel
func (t ProxyModel) AsViProxyModel() (ViProxyModel, error) {
	var body ViProxyModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromViProxyModel overwrites any union data inside the ProxyModel as the provided ViProxyModel
func (t *ProxyModel) FromViProxyModel(v ViProxyModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeViProxyModel performs a merge with any union data inside the ProxyModel, using the provided ViProxyModel
func (t *ProxyModel) MergeViProxyModel(v ViProxyModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ProxyModel) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Description != nil {
		object["description"], err = json.Marshal(t.Description)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'description': %w", err)
		}
	}

	if t.Id != nil {
		object["id"], err = json.Marshal(t.Id)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id': %w", err)
		}
	}

	if t.Name != nil {
		object["name"], err = json.Marshal(t.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	if t.Type != nil {
		object["type"], err = json.Marshal(t.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *ProxyModel) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &t.Description)
		if err != nil {
			return fmt.Errorf("error reading 'description': %w", err)
		}
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &t.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &t.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// AsViProxySpec returns the union data inside the ProxySpec as a ViProxySpec
func (t ProxySpec) AsViProxySpec() (ViProxySpec, error) {
	var body ViProxySpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromViProxySpec overwrites any union data inside the ProxySpec as the provided ViProxySpec
func (t *ProxySpec) FromViProxySpec(v ViProxySpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeViProxySpec performs a merge with any union data inside the ProxySpec, using the provided ViProxySpec
func (t *ProxySpec) MergeViProxySpec(v ViProxySpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ProxySpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Description != nil {
		object["description"], err = json.Marshal(t.Description)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'description': %w", err)
		}
	}

	if t.Type != nil {
		object["type"], err = json.Marshal(t.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *ProxySpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &t.Description)
		if err != nil {
			return fmt.Errorf("error reading 'description': %w", err)
		}
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// AsWindowsLocalStorageModel returns the union data inside the RepositoryModel as a WindowsLocalStorageModel
func (t RepositoryModel) AsWindowsLocalStorageModel() (WindowsLocalStorageModel, error) {
	var body WindowsLocalStorageModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWindowsLocalStorageModel overwrites any union data inside the RepositoryModel as the provided WindowsLocalStorageModel
func (t *RepositoryModel) FromWindowsLocalStorageModel(v WindowsLocalStorageModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWindowsLocalStorageModel performs a merge with any union data inside the RepositoryModel, using the provided WindowsLocalStorageModel
func (t *RepositoryModel) MergeWindowsLocalStorageModel(v WindowsLocalStorageModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsLinuxLocalStorageModel returns the union data inside the RepositoryModel as a LinuxLocalStorageModel
func (t RepositoryModel) AsLinuxLocalStorageModel() (LinuxLocalStorageModel, error) {
	var body LinuxLocalStorageModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLinuxLocalStorageModel overwrites any union data inside the RepositoryModel as the provided LinuxLocalStorageModel
func (t *RepositoryModel) FromLinuxLocalStorageModel(v LinuxLocalStorageModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLinuxLocalStorageModel performs a merge with any union data inside the RepositoryModel, using the provided LinuxLocalStorageModel
func (t *RepositoryModel) MergeLinuxLocalStorageModel(v LinuxLocalStorageModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNfsStorageModel returns the union data inside the RepositoryModel as a NfsStorageModel
func (t RepositoryModel) AsNfsStorageModel() (NfsStorageModel, error) {
	var body NfsStorageModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNfsStorageModel overwrites any union data inside the RepositoryModel as the provided NfsStorageModel
func (t *RepositoryModel) FromNfsStorageModel(v NfsStorageModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNfsStorageModel performs a merge with any union data inside the RepositoryModel, using the provided NfsStorageModel
func (t *RepositoryModel) MergeNfsStorageModel(v NfsStorageModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSmbStorageModel returns the union data inside the RepositoryModel as a SmbStorageModel
func (t RepositoryModel) AsSmbStorageModel() (SmbStorageModel, error) {
	var body SmbStorageModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSmbStorageModel overwrites any union data inside the RepositoryModel as the provided SmbStorageModel
func (t *RepositoryModel) FromSmbStorageModel(v SmbStorageModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSmbStorageModel performs a merge with any union data inside the RepositoryModel, using the provided SmbStorageModel
func (t *RepositoryModel) MergeSmbStorageModel(v SmbStorageModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAzureBlobStorageModel returns the union data inside the RepositoryModel as a AzureBlobStorageModel
func (t RepositoryModel) AsAzureBlobStorageModel() (AzureBlobStorageModel, error) {
	var body AzureBlobStorageModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureBlobStorageModel overwrites any union data inside the RepositoryModel as the provided AzureBlobStorageModel
func (t *RepositoryModel) FromAzureBlobStorageModel(v AzureBlobStorageModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureBlobStorageModel performs a merge with any union data inside the RepositoryModel, using the provided AzureBlobStorageModel
func (t *RepositoryModel) MergeAzureBlobStorageModel(v AzureBlobStorageModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAzureDataBoxStorageModel returns the union data inside the RepositoryModel as a AzureDataBoxStorageModel
func (t RepositoryModel) AsAzureDataBoxStorageModel() (AzureDataBoxStorageModel, error) {
	var body AzureDataBoxStorageModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureDataBoxStorageModel overwrites any union data inside the RepositoryModel as the provided AzureDataBoxStorageModel
func (t *RepositoryModel) FromAzureDataBoxStorageModel(v AzureDataBoxStorageModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureDataBoxStorageModel performs a merge with any union data inside the RepositoryModel, using the provided AzureDataBoxStorageModel
func (t *RepositoryModel) MergeAzureDataBoxStorageModel(v AzureDataBoxStorageModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAmazonS3StorageModel returns the union data inside the RepositoryModel as a AmazonS3StorageModel
func (t RepositoryModel) AsAmazonS3StorageModel() (AmazonS3StorageModel, error) {
	var body AmazonS3StorageModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAmazonS3StorageModel overwrites any union data inside the RepositoryModel as the provided AmazonS3StorageModel
func (t *RepositoryModel) FromAmazonS3StorageModel(v AmazonS3StorageModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAmazonS3StorageModel performs a merge with any union data inside the RepositoryModel, using the provided AmazonS3StorageModel
func (t *RepositoryModel) MergeAmazonS3StorageModel(v AmazonS3StorageModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAmazonSnowballEdgeStorageModel returns the union data inside the RepositoryModel as a AmazonSnowballEdgeStorageModel
func (t RepositoryModel) AsAmazonSnowballEdgeStorageModel() (AmazonSnowballEdgeStorageModel, error) {
	var body AmazonSnowballEdgeStorageModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAmazonSnowballEdgeStorageModel overwrites any union data inside the RepositoryModel as the provided AmazonSnowballEdgeStorageModel
func (t *RepositoryModel) FromAmazonSnowballEdgeStorageModel(v AmazonSnowballEdgeStorageModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAmazonSnowballEdgeStorageModel performs a merge with any union data inside the RepositoryModel, using the provided AmazonSnowballEdgeStorageModel
func (t *RepositoryModel) MergeAmazonSnowballEdgeStorageModel(v AmazonSnowballEdgeStorageModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsS3CompatibleStorageModel returns the union data inside the RepositoryModel as a S3CompatibleStorageModel
func (t RepositoryModel) AsS3CompatibleStorageModel() (S3CompatibleStorageModel, error) {
	var body S3CompatibleStorageModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromS3CompatibleStorageModel overwrites any union data inside the RepositoryModel as the provided S3CompatibleStorageModel
func (t *RepositoryModel) FromS3CompatibleStorageModel(v S3CompatibleStorageModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeS3CompatibleStorageModel performs a merge with any union data inside the RepositoryModel, using the provided S3CompatibleStorageModel
func (t *RepositoryModel) MergeS3CompatibleStorageModel(v S3CompatibleStorageModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsGoogleCloudStorageModel returns the union data inside the RepositoryModel as a GoogleCloudStorageModel
func (t RepositoryModel) AsGoogleCloudStorageModel() (GoogleCloudStorageModel, error) {
	var body GoogleCloudStorageModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGoogleCloudStorageModel overwrites any union data inside the RepositoryModel as the provided GoogleCloudStorageModel
func (t *RepositoryModel) FromGoogleCloudStorageModel(v GoogleCloudStorageModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGoogleCloudStorageModel performs a merge with any union data inside the RepositoryModel, using the provided GoogleCloudStorageModel
func (t *RepositoryModel) MergeGoogleCloudStorageModel(v GoogleCloudStorageModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsIBMCloudStorageModel returns the union data inside the RepositoryModel as a IBMCloudStorageModel
func (t RepositoryModel) AsIBMCloudStorageModel() (IBMCloudStorageModel, error) {
	var body IBMCloudStorageModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIBMCloudStorageModel overwrites any union data inside the RepositoryModel as the provided IBMCloudStorageModel
func (t *RepositoryModel) FromIBMCloudStorageModel(v IBMCloudStorageModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIBMCloudStorageModel performs a merge with any union data inside the RepositoryModel, using the provided IBMCloudStorageModel
func (t *RepositoryModel) MergeIBMCloudStorageModel(v IBMCloudStorageModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAmazonS3GlacierStorageModel returns the union data inside the RepositoryModel as a AmazonS3GlacierStorageModel
func (t RepositoryModel) AsAmazonS3GlacierStorageModel() (AmazonS3GlacierStorageModel, error) {
	var body AmazonS3GlacierStorageModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAmazonS3GlacierStorageModel overwrites any union data inside the RepositoryModel as the provided AmazonS3GlacierStorageModel
func (t *RepositoryModel) FromAmazonS3GlacierStorageModel(v AmazonS3GlacierStorageModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAmazonS3GlacierStorageModel performs a merge with any union data inside the RepositoryModel, using the provided AmazonS3GlacierStorageModel
func (t *RepositoryModel) MergeAmazonS3GlacierStorageModel(v AmazonS3GlacierStorageModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAzureArchiveStorageModel returns the union data inside the RepositoryModel as a AzureArchiveStorageModel
func (t RepositoryModel) AsAzureArchiveStorageModel() (AzureArchiveStorageModel, error) {
	var body AzureArchiveStorageModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureArchiveStorageModel overwrites any union data inside the RepositoryModel as the provided AzureArchiveStorageModel
func (t *RepositoryModel) FromAzureArchiveStorageModel(v AzureArchiveStorageModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureArchiveStorageModel performs a merge with any union data inside the RepositoryModel, using the provided AzureArchiveStorageModel
func (t *RepositoryModel) MergeAzureArchiveStorageModel(v AzureArchiveStorageModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsWasabiCloudStorageModel returns the union data inside the RepositoryModel as a WasabiCloudStorageModel
func (t RepositoryModel) AsWasabiCloudStorageModel() (WasabiCloudStorageModel, error) {
	var body WasabiCloudStorageModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWasabiCloudStorageModel overwrites any union data inside the RepositoryModel as the provided WasabiCloudStorageModel
func (t *RepositoryModel) FromWasabiCloudStorageModel(v WasabiCloudStorageModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWasabiCloudStorageModel performs a merge with any union data inside the RepositoryModel, using the provided WasabiCloudStorageModel
func (t *RepositoryModel) MergeWasabiCloudStorageModel(v WasabiCloudStorageModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsLinuxHardenedStorageModel returns the union data inside the RepositoryModel as a LinuxHardenedStorageModel
func (t RepositoryModel) AsLinuxHardenedStorageModel() (LinuxHardenedStorageModel, error) {
	var body LinuxHardenedStorageModel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLinuxHardenedStorageModel overwrites any union data inside the RepositoryModel as the provided LinuxHardenedStorageModel
func (t *RepositoryModel) FromLinuxHardenedStorageModel(v LinuxHardenedStorageModel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLinuxHardenedStorageModel performs a merge with any union data inside the RepositoryModel, using the provided LinuxHardenedStorageModel
func (t *RepositoryModel) MergeLinuxHardenedStorageModel(v LinuxHardenedStorageModel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t RepositoryModel) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Description != nil {
		object["description"], err = json.Marshal(t.Description)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'description': %w", err)
		}
	}

	if t.Id != nil {
		object["id"], err = json.Marshal(t.Id)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id': %w", err)
		}
	}

	if t.Name != nil {
		object["name"], err = json.Marshal(t.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	if t.Tag != nil {
		object["tag"], err = json.Marshal(t.Tag)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tag': %w", err)
		}
	}

	if t.Type != nil {
		object["type"], err = json.Marshal(t.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *RepositoryModel) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &t.Description)
		if err != nil {
			return fmt.Errorf("error reading 'description': %w", err)
		}
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &t.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &t.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
	}

	if raw, found := object["tag"]; found {
		err = json.Unmarshal(raw, &t.Tag)
		if err != nil {
			return fmt.Errorf("error reading 'tag': %w", err)
		}
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}

// AsWindowsLocalStorageSpec returns the union data inside the RepositorySpec as a WindowsLocalStorageSpec
func (t RepositorySpec) AsWindowsLocalStorageSpec() (WindowsLocalStorageSpec, error) {
	var body WindowsLocalStorageSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWindowsLocalStorageSpec overwrites any union data inside the RepositorySpec as the provided WindowsLocalStorageSpec
func (t *RepositorySpec) FromWindowsLocalStorageSpec(v WindowsLocalStorageSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWindowsLocalStorageSpec performs a merge with any union data inside the RepositorySpec, using the provided WindowsLocalStorageSpec
func (t *RepositorySpec) MergeWindowsLocalStorageSpec(v WindowsLocalStorageSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsLinuxLocalStorageSpec returns the union data inside the RepositorySpec as a LinuxLocalStorageSpec
func (t RepositorySpec) AsLinuxLocalStorageSpec() (LinuxLocalStorageSpec, error) {
	var body LinuxLocalStorageSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLinuxLocalStorageSpec overwrites any union data inside the RepositorySpec as the provided LinuxLocalStorageSpec
func (t *RepositorySpec) FromLinuxLocalStorageSpec(v LinuxLocalStorageSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLinuxLocalStorageSpec performs a merge with any union data inside the RepositorySpec, using the provided LinuxLocalStorageSpec
func (t *RepositorySpec) MergeLinuxLocalStorageSpec(v LinuxLocalStorageSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNfsStorageSpec returns the union data inside the RepositorySpec as a NfsStorageSpec
func (t RepositorySpec) AsNfsStorageSpec() (NfsStorageSpec, error) {
	var body NfsStorageSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNfsStorageSpec overwrites any union data inside the RepositorySpec as the provided NfsStorageSpec
func (t *RepositorySpec) FromNfsStorageSpec(v NfsStorageSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNfsStorageSpec performs a merge with any union data inside the RepositorySpec, using the provided NfsStorageSpec
func (t *RepositorySpec) MergeNfsStorageSpec(v NfsStorageSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSmbStorageSpec returns the union data inside the RepositorySpec as a SmbStorageSpec
func (t RepositorySpec) AsSmbStorageSpec() (SmbStorageSpec, error) {
	var body SmbStorageSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSmbStorageSpec overwrites any union data inside the RepositorySpec as the provided SmbStorageSpec
func (t *RepositorySpec) FromSmbStorageSpec(v SmbStorageSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSmbStorageSpec performs a merge with any union data inside the RepositorySpec, using the provided SmbStorageSpec
func (t *RepositorySpec) MergeSmbStorageSpec(v SmbStorageSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAzureBlobStorageSpec returns the union data inside the RepositorySpec as a AzureBlobStorageSpec
func (t RepositorySpec) AsAzureBlobStorageSpec() (AzureBlobStorageSpec, error) {
	var body AzureBlobStorageSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureBlobStorageSpec overwrites any union data inside the RepositorySpec as the provided AzureBlobStorageSpec
func (t *RepositorySpec) FromAzureBlobStorageSpec(v AzureBlobStorageSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureBlobStorageSpec performs a merge with any union data inside the RepositorySpec, using the provided AzureBlobStorageSpec
func (t *RepositorySpec) MergeAzureBlobStorageSpec(v AzureBlobStorageSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAzureDataBoxStorageSpec returns the union data inside the RepositorySpec as a AzureDataBoxStorageSpec
func (t RepositorySpec) AsAzureDataBoxStorageSpec() (AzureDataBoxStorageSpec, error) {
	var body AzureDataBoxStorageSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureDataBoxStorageSpec overwrites any union data inside the RepositorySpec as the provided AzureDataBoxStorageSpec
func (t *RepositorySpec) FromAzureDataBoxStorageSpec(v AzureDataBoxStorageSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureDataBoxStorageSpec performs a merge with any union data inside the RepositorySpec, using the provided AzureDataBoxStorageSpec
func (t *RepositorySpec) MergeAzureDataBoxStorageSpec(v AzureDataBoxStorageSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAmazonS3StorageSpec returns the union data inside the RepositorySpec as a AmazonS3StorageSpec
func (t RepositorySpec) AsAmazonS3StorageSpec() (AmazonS3StorageSpec, error) {
	var body AmazonS3StorageSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAmazonS3StorageSpec overwrites any union data inside the RepositorySpec as the provided AmazonS3StorageSpec
func (t *RepositorySpec) FromAmazonS3StorageSpec(v AmazonS3StorageSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAmazonS3StorageSpec performs a merge with any union data inside the RepositorySpec, using the provided AmazonS3StorageSpec
func (t *RepositorySpec) MergeAmazonS3StorageSpec(v AmazonS3StorageSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAmazonSnowballEdgeStorageSpec returns the union data inside the RepositorySpec as a AmazonSnowballEdgeStorageSpec
func (t RepositorySpec) AsAmazonSnowballEdgeStorageSpec() (AmazonSnowballEdgeStorageSpec, error) {
	var body AmazonSnowballEdgeStorageSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAmazonSnowballEdgeStorageSpec overwrites any union data inside the RepositorySpec as the provided AmazonSnowballEdgeStorageSpec
func (t *RepositorySpec) FromAmazonSnowballEdgeStorageSpec(v AmazonSnowballEdgeStorageSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAmazonSnowballEdgeStorageSpec performs a merge with any union data inside the RepositorySpec, using the provided AmazonSnowballEdgeStorageSpec
func (t *RepositorySpec) MergeAmazonSnowballEdgeStorageSpec(v AmazonSnowballEdgeStorageSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsS3CompatibleStorageSpec returns the union data inside the RepositorySpec as a S3CompatibleStorageSpec
func (t RepositorySpec) AsS3CompatibleStorageSpec() (S3CompatibleStorageSpec, error) {
	var body S3CompatibleStorageSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromS3CompatibleStorageSpec overwrites any union data inside the RepositorySpec as the provided S3CompatibleStorageSpec
func (t *RepositorySpec) FromS3CompatibleStorageSpec(v S3CompatibleStorageSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeS3CompatibleStorageSpec performs a merge with any union data inside the RepositorySpec, using the provided S3CompatibleStorageSpec
func (t *RepositorySpec) MergeS3CompatibleStorageSpec(v S3CompatibleStorageSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsGoogleCloudStorageSpec returns the union data inside the RepositorySpec as a GoogleCloudStorageSpec
func (t RepositorySpec) AsGoogleCloudStorageSpec() (GoogleCloudStorageSpec, error) {
	var body GoogleCloudStorageSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGoogleCloudStorageSpec overwrites any union data inside the RepositorySpec as the provided GoogleCloudStorageSpec
func (t *RepositorySpec) FromGoogleCloudStorageSpec(v GoogleCloudStorageSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGoogleCloudStorageSpec performs a merge with any union data inside the RepositorySpec, using the provided GoogleCloudStorageSpec
func (t *RepositorySpec) MergeGoogleCloudStorageSpec(v GoogleCloudStorageSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsIBMCloudStorageSpec returns the union data inside the RepositorySpec as a IBMCloudStorageSpec
func (t RepositorySpec) AsIBMCloudStorageSpec() (IBMCloudStorageSpec, error) {
	var body IBMCloudStorageSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIBMCloudStorageSpec overwrites any union data inside the RepositorySpec as the provided IBMCloudStorageSpec
func (t *RepositorySpec) FromIBMCloudStorageSpec(v IBMCloudStorageSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIBMCloudStorageSpec performs a merge with any union data inside the RepositorySpec, using the provided IBMCloudStorageSpec
func (t *RepositorySpec) MergeIBMCloudStorageSpec(v IBMCloudStorageSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAmazonS3GlacierStorageSpec returns the union data inside the RepositorySpec as a AmazonS3GlacierStorageSpec
func (t RepositorySpec) AsAmazonS3GlacierStorageSpec() (AmazonS3GlacierStorageSpec, error) {
	var body AmazonS3GlacierStorageSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAmazonS3GlacierStorageSpec overwrites any union data inside the RepositorySpec as the provided AmazonS3GlacierStorageSpec
func (t *RepositorySpec) FromAmazonS3GlacierStorageSpec(v AmazonS3GlacierStorageSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAmazonS3GlacierStorageSpec performs a merge with any union data inside the RepositorySpec, using the provided AmazonS3GlacierStorageSpec
func (t *RepositorySpec) MergeAmazonS3GlacierStorageSpec(v AmazonS3GlacierStorageSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAzureArchiveStorageSpec returns the union data inside the RepositorySpec as a AzureArchiveStorageSpec
func (t RepositorySpec) AsAzureArchiveStorageSpec() (AzureArchiveStorageSpec, error) {
	var body AzureArchiveStorageSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureArchiveStorageSpec overwrites any union data inside the RepositorySpec as the provided AzureArchiveStorageSpec
func (t *RepositorySpec) FromAzureArchiveStorageSpec(v AzureArchiveStorageSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureArchiveStorageSpec performs a merge with any union data inside the RepositorySpec, using the provided AzureArchiveStorageSpec
func (t *RepositorySpec) MergeAzureArchiveStorageSpec(v AzureArchiveStorageSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsWasabiCloudStorageSpec returns the union data inside the RepositorySpec as a WasabiCloudStorageSpec
func (t RepositorySpec) AsWasabiCloudStorageSpec() (WasabiCloudStorageSpec, error) {
	var body WasabiCloudStorageSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWasabiCloudStorageSpec overwrites any union data inside the RepositorySpec as the provided WasabiCloudStorageSpec
func (t *RepositorySpec) FromWasabiCloudStorageSpec(v WasabiCloudStorageSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWasabiCloudStorageSpec performs a merge with any union data inside the RepositorySpec, using the provided WasabiCloudStorageSpec
func (t *RepositorySpec) MergeWasabiCloudStorageSpec(v WasabiCloudStorageSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsLinuxHardenedStorageSpec returns the union data inside the RepositorySpec as a LinuxHardenedStorageSpec
func (t RepositorySpec) AsLinuxHardenedStorageSpec() (LinuxHardenedStorageSpec, error) {
	var body LinuxHardenedStorageSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLinuxHardenedStorageSpec overwrites any union data inside the RepositorySpec as the provided LinuxHardenedStorageSpec
func (t *RepositorySpec) FromLinuxHardenedStorageSpec(v LinuxHardenedStorageSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLinuxHardenedStorageSpec performs a merge with any union data inside the RepositorySpec, using the provided LinuxHardenedStorageSpec
func (t *RepositorySpec) MergeLinuxHardenedStorageSpec(v LinuxHardenedStorageSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t RepositorySpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Description != nil {
		object["description"], err = json.Marshal(t.Description)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'description': %w", err)
		}
	}

	if t.Name != nil {
		object["name"], err = json.Marshal(t.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	if t.Tag != nil {
		object["tag"], err = json.Marshal(t.Tag)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tag': %w", err)
		}
	}

	if t.Type != nil {
		object["type"], err = json.Marshal(t.Type)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'type': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *RepositorySpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &t.Description)
		if err != nil {
			return fmt.Errorf("error reading 'description': %w", err)
		}
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &t.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
	}

	if raw, found := object["tag"]; found {
		err = json.Unmarshal(raw, &t.Tag)
		if err != nil {
			return fmt.Errorf("error reading 'tag': %w", err)
		}
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &t.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
	}

	return err
}
