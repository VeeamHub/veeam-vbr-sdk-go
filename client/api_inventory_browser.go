/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// InventoryBrowserApiService InventoryBrowserApi service
type InventoryBrowserApiService service

type ApiGetAllInventoryVmwareHostsRequest struct {
	ctx context.Context
	ApiService *InventoryBrowserApiService
	xApiVersion *string
	skip *int32
	limit *int32
	orderColumn *EViRootFiltersOrderColumn
	orderAsc *bool
	nameFilter *string
}

// Version and revision of the client REST API. Must be in the following format&amp;#58; &#x60;&lt;version&gt;-&lt;revision&gt;&#x60;.
func (r ApiGetAllInventoryVmwareHostsRequest) XApiVersion(xApiVersion string) ApiGetAllInventoryVmwareHostsRequest {
	r.xApiVersion = &xApiVersion
	return r
}

// Number of VMware vSphere servers to skip.
func (r ApiGetAllInventoryVmwareHostsRequest) Skip(skip int32) ApiGetAllInventoryVmwareHostsRequest {
	r.skip = &skip
	return r
}

// Maximum number of VMware vSphere servers to return.
func (r ApiGetAllInventoryVmwareHostsRequest) Limit(limit int32) ApiGetAllInventoryVmwareHostsRequest {
	r.limit = &limit
	return r
}

// Sorts VMware vSphere servers by one of the VMware vSphere server parameters.
func (r ApiGetAllInventoryVmwareHostsRequest) OrderColumn(orderColumn EViRootFiltersOrderColumn) ApiGetAllInventoryVmwareHostsRequest {
	r.orderColumn = &orderColumn
	return r
}

// Sorts VMware vSphere servers in the ascending order by the &#x60;orderColumn&#x60; parameter.
func (r ApiGetAllInventoryVmwareHostsRequest) OrderAsc(orderAsc bool) ApiGetAllInventoryVmwareHostsRequest {
	r.orderAsc = &orderAsc
	return r
}

// Filters VMware vSphere servers by the &#x60;nameFilter&#x60; pattern. The pattern can match any VMware vSphere server parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
func (r ApiGetAllInventoryVmwareHostsRequest) NameFilter(nameFilter string) ApiGetAllInventoryVmwareHostsRequest {
	r.nameFilter = &nameFilter
	return r
}

func (r ApiGetAllInventoryVmwareHostsRequest) Execute() (*ViRootsResult, *http.Response, error) {
	return r.ApiService.GetAllInventoryVmwareHostsExecute(r)
}

/*
GetAllInventoryVmwareHosts Get All VMware vSphere Servers

The HTTP GET request to the `/api/v1/inventory/vmware/hosts` path allows you to get an array of all VMware vSphere servers added to the backup infrastructure.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAllInventoryVmwareHostsRequest
*/
func (a *InventoryBrowserApiService) GetAllInventoryVmwareHosts(ctx context.Context) ApiGetAllInventoryVmwareHostsRequest {
	return ApiGetAllInventoryVmwareHostsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ViRootsResult
func (a *InventoryBrowserApiService) GetAllInventoryVmwareHostsExecute(r ApiGetAllInventoryVmwareHostsRequest) (*ViRootsResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ViRootsResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryBrowserApiService.GetAllInventoryVmwareHosts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/inventory/vmware/hosts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xApiVersion == nil {
		return localVarReturnValue, nil, reportError("xApiVersion is required and must be specified")
	}

	if r.skip != nil {
		localVarQueryParams.Add("skip", parameterToString(*r.skip, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.orderColumn != nil {
		localVarQueryParams.Add("orderColumn", parameterToString(*r.orderColumn, ""))
	}
	if r.orderAsc != nil {
		localVarQueryParams.Add("orderAsc", parameterToString(*r.orderAsc, ""))
	}
	if r.nameFilter != nil {
		localVarQueryParams.Add("nameFilter", parameterToString(*r.nameFilter, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-api-version"] = parameterToString(*r.xApiVersion, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVmwareHostObjectRequest struct {
	ctx context.Context
	ApiService *InventoryBrowserApiService
	xApiVersion *string
	name string
	skip *int32
	limit *int32
	orderColumn *EvCentersInventoryFiltersOrderColumn
	orderAsc *bool
	objectIdFilter *string
	hierarchyTypeFilter *EHierarchyType
	nameFilter *string
	typeFilter *EVmwareInventoryType
	parentContainerNameFilter *string
}

// Version and revision of the client REST API. Must be in the following format&amp;#58; &#x60;&lt;version&gt;-&lt;revision&gt;&#x60;.
func (r ApiGetVmwareHostObjectRequest) XApiVersion(xApiVersion string) ApiGetVmwareHostObjectRequest {
	r.xApiVersion = &xApiVersion
	return r
}

// Number of objects to skip.
func (r ApiGetVmwareHostObjectRequest) Skip(skip int32) ApiGetVmwareHostObjectRequest {
	r.skip = &skip
	return r
}

// Maximum number of objects to return.
func (r ApiGetVmwareHostObjectRequest) Limit(limit int32) ApiGetVmwareHostObjectRequest {
	r.limit = &limit
	return r
}

// Sorts objects by one of the object parameters.
func (r ApiGetVmwareHostObjectRequest) OrderColumn(orderColumn EvCentersInventoryFiltersOrderColumn) ApiGetVmwareHostObjectRequest {
	r.orderColumn = &orderColumn
	return r
}

// Sorts objects in the ascending order by the &#x60;orderColumn&#x60; parameter.
func (r ApiGetVmwareHostObjectRequest) OrderAsc(orderAsc bool) ApiGetVmwareHostObjectRequest {
	r.orderAsc = &orderAsc
	return r
}

// Filters objects by object ID.
func (r ApiGetVmwareHostObjectRequest) ObjectIdFilter(objectIdFilter string) ApiGetVmwareHostObjectRequest {
	r.objectIdFilter = &objectIdFilter
	return r
}

// Filters objects by hierarchy type.
func (r ApiGetVmwareHostObjectRequest) HierarchyTypeFilter(hierarchyTypeFilter EHierarchyType) ApiGetVmwareHostObjectRequest {
	r.hierarchyTypeFilter = &hierarchyTypeFilter
	return r
}

// Filters objects by the &#x60;nameFilter&#x60; pattern. The pattern can match any object parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.
func (r ApiGetVmwareHostObjectRequest) NameFilter(nameFilter string) ApiGetVmwareHostObjectRequest {
	r.nameFilter = &nameFilter
	return r
}

// Filters objects by virtual infrastructure type.
func (r ApiGetVmwareHostObjectRequest) TypeFilter(typeFilter EVmwareInventoryType) ApiGetVmwareHostObjectRequest {
	r.typeFilter = &typeFilter
	return r
}

// Filters objects by name of the parent container.
func (r ApiGetVmwareHostObjectRequest) ParentContainerNameFilter(parentContainerNameFilter string) ApiGetVmwareHostObjectRequest {
	r.parentContainerNameFilter = &parentContainerNameFilter
	return r
}

func (r ApiGetVmwareHostObjectRequest) Execute() (*VCenterInventoryResult, *http.Response, error) {
	return r.ApiService.GetVmwareHostObjectExecute(r)
}

/*
GetVmwareHostObject Get VMware vSphere Server Objects

The HTTP GET request to the `/api/v1/inventory/vmware/hosts/{name}` path allows you to get an array of virtual infrastructure objects of the VMware vSphere server that has the specified `name`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the VMware vSphere server.
 @return ApiGetVmwareHostObjectRequest
*/
func (a *InventoryBrowserApiService) GetVmwareHostObject(ctx context.Context, name string) ApiGetVmwareHostObjectRequest {
	return ApiGetVmwareHostObjectRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return VCenterInventoryResult
func (a *InventoryBrowserApiService) GetVmwareHostObjectExecute(r ApiGetVmwareHostObjectRequest) (*VCenterInventoryResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VCenterInventoryResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryBrowserApiService.GetVmwareHostObject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/inventory/vmware/hosts/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.xApiVersion == nil {
		return localVarReturnValue, nil, reportError("xApiVersion is required and must be specified")
	}

	if r.skip != nil {
		localVarQueryParams.Add("skip", parameterToString(*r.skip, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.orderColumn != nil {
		localVarQueryParams.Add("orderColumn", parameterToString(*r.orderColumn, ""))
	}
	if r.orderAsc != nil {
		localVarQueryParams.Add("orderAsc", parameterToString(*r.orderAsc, ""))
	}
	if r.objectIdFilter != nil {
		localVarQueryParams.Add("objectIdFilter", parameterToString(*r.objectIdFilter, ""))
	}
	if r.hierarchyTypeFilter != nil {
		localVarQueryParams.Add("hierarchyTypeFilter", parameterToString(*r.hierarchyTypeFilter, ""))
	}
	if r.nameFilter != nil {
		localVarQueryParams.Add("nameFilter", parameterToString(*r.nameFilter, ""))
	}
	if r.typeFilter != nil {
		localVarQueryParams.Add("typeFilter", parameterToString(*r.typeFilter, ""))
	}
	if r.parentContainerNameFilter != nil {
		localVarQueryParams.Add("parentContainerNameFilter", parameterToString(*r.parentContainerNameFilter, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-api-version"] = parameterToString(*r.xApiVersion, "")
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
