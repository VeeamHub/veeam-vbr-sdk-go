/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// EBackupProxyTransportMode Transport mode of the backup proxy.
type EBackupProxyTransportMode string

// List of EBackupProxyTransportMode
const (
	EBACKUPPROXYTRANSPORTMODE_AUTO EBackupProxyTransportMode = "auto"
	EBACKUPPROXYTRANSPORTMODE_DIRECT_ACCESS EBackupProxyTransportMode = "directAccess"
	EBACKUPPROXYTRANSPORTMODE_VIRTUAL_APPLIANCE EBackupProxyTransportMode = "virtualAppliance"
	EBACKUPPROXYTRANSPORTMODE_NETWORK EBackupProxyTransportMode = "network"
)

// All allowed values of EBackupProxyTransportMode enum
var AllowedEBackupProxyTransportModeEnumValues = []EBackupProxyTransportMode{
	"auto",
	"directAccess",
	"virtualAppliance",
	"network",
}

func (v *EBackupProxyTransportMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EBackupProxyTransportMode(value)
	for _, existing := range AllowedEBackupProxyTransportModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EBackupProxyTransportMode", value)
}

// NewEBackupProxyTransportModeFromValue returns a pointer to a valid EBackupProxyTransportMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEBackupProxyTransportModeFromValue(v string) (*EBackupProxyTransportMode, error) {
	ev := EBackupProxyTransportMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EBackupProxyTransportMode: valid values are %v", v, AllowedEBackupProxyTransportModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EBackupProxyTransportMode) IsValid() bool {
	for _, existing := range AllowedEBackupProxyTransportModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EBackupProxyTransportMode value
func (v EBackupProxyTransportMode) Ptr() *EBackupProxyTransportMode {
	return &v
}

type NullableEBackupProxyTransportMode struct {
	value *EBackupProxyTransportMode
	isSet bool
}

func (v NullableEBackupProxyTransportMode) Get() *EBackupProxyTransportMode {
	return v.value
}

func (v *NullableEBackupProxyTransportMode) Set(val *EBackupProxyTransportMode) {
	v.value = val
	v.isSet = true
}

func (v NullableEBackupProxyTransportMode) IsSet() bool {
	return v.isSet
}

func (v *NullableEBackupProxyTransportMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEBackupProxyTransportMode(val *EBackupProxyTransportMode) *NullableEBackupProxyTransportMode {
	return &NullableEBackupProxyTransportMode{value: val, isSet: true}
}

func (v NullableEBackupProxyTransportMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEBackupProxyTransportMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

