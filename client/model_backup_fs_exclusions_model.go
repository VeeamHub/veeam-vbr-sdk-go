/*
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic. 
 *
 * API version: 1.0-rev1
 * Contact: support@veeam.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// BackupFSExclusionsModel VM guest OS file exclusion.
type BackupFSExclusionsModel struct {
	ExclusionPolicy EBackupExclusionPolicy `json:"exclusionPolicy"`
	// Array of files and folders. Full paths to files and folders, environmental variables and file masks with the asterisk (*) and question mark (?) characters can be used.
	ItemsList *[]string `json:"itemsList,omitempty"`
}

// NewBackupFSExclusionsModel instantiates a new BackupFSExclusionsModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupFSExclusionsModel(exclusionPolicy EBackupExclusionPolicy) *BackupFSExclusionsModel {
	this := BackupFSExclusionsModel{}
	this.ExclusionPolicy = exclusionPolicy
	return &this
}

// NewBackupFSExclusionsModelWithDefaults instantiates a new BackupFSExclusionsModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupFSExclusionsModelWithDefaults() *BackupFSExclusionsModel {
	this := BackupFSExclusionsModel{}
	return &this
}

// GetExclusionPolicy returns the ExclusionPolicy field value
func (o *BackupFSExclusionsModel) GetExclusionPolicy() EBackupExclusionPolicy {
	if o == nil {
		var ret EBackupExclusionPolicy
		return ret
	}

	return o.ExclusionPolicy
}

// GetExclusionPolicyOk returns a tuple with the ExclusionPolicy field value
// and a boolean to check if the value has been set.
func (o *BackupFSExclusionsModel) GetExclusionPolicyOk() (*EBackupExclusionPolicy, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ExclusionPolicy, true
}

// SetExclusionPolicy sets field value
func (o *BackupFSExclusionsModel) SetExclusionPolicy(v EBackupExclusionPolicy) {
	o.ExclusionPolicy = v
}

// GetItemsList returns the ItemsList field value if set, zero value otherwise.
func (o *BackupFSExclusionsModel) GetItemsList() []string {
	if o == nil || o.ItemsList == nil {
		var ret []string
		return ret
	}
	return *o.ItemsList
}

// GetItemsListOk returns a tuple with the ItemsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupFSExclusionsModel) GetItemsListOk() (*[]string, bool) {
	if o == nil || o.ItemsList == nil {
		return nil, false
	}
	return o.ItemsList, true
}

// HasItemsList returns a boolean if a field has been set.
func (o *BackupFSExclusionsModel) HasItemsList() bool {
	if o != nil && o.ItemsList != nil {
		return true
	}

	return false
}

// SetItemsList gets a reference to the given []string and assigns it to the ItemsList field.
func (o *BackupFSExclusionsModel) SetItemsList(v []string) {
	o.ItemsList = &v
}

func (o BackupFSExclusionsModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["exclusionPolicy"] = o.ExclusionPolicy
	}
	if o.ItemsList != nil {
		toSerialize["itemsList"] = o.ItemsList
	}
	return json.Marshal(toSerialize)
}

type NullableBackupFSExclusionsModel struct {
	value *BackupFSExclusionsModel
	isSet bool
}

func (v NullableBackupFSExclusionsModel) Get() *BackupFSExclusionsModel {
	return v.value
}

func (v *NullableBackupFSExclusionsModel) Set(val *BackupFSExclusionsModel) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupFSExclusionsModel) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupFSExclusionsModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupFSExclusionsModel(val *BackupFSExclusionsModel) *NullableBackupFSExclusionsModel {
	return &NullableBackupFSExclusionsModel{value: val, isSet: true}
}

func (v NullableBackupFSExclusionsModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupFSExclusionsModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


