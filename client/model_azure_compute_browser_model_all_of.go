/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AzureComputeBrowserModelAllOf struct for AzureComputeBrowserModelAllOf
type AzureComputeBrowserModelAllOf struct {
	// Azure region type.
	RegionType *string `json:"regionType,omitempty"`
	// Array of Azure subscriptions associated with the account.
	Subscriptions []AzureSubscriptionBrowserModel `json:"subscriptions,omitempty"`
}

// NewAzureComputeBrowserModelAllOf instantiates a new AzureComputeBrowserModelAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureComputeBrowserModelAllOf() *AzureComputeBrowserModelAllOf {
	this := AzureComputeBrowserModelAllOf{}
	return &this
}

// NewAzureComputeBrowserModelAllOfWithDefaults instantiates a new AzureComputeBrowserModelAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureComputeBrowserModelAllOfWithDefaults() *AzureComputeBrowserModelAllOf {
	this := AzureComputeBrowserModelAllOf{}
	return &this
}

// GetRegionType returns the RegionType field value if set, zero value otherwise.
func (o *AzureComputeBrowserModelAllOf) GetRegionType() string {
	if o == nil || isNil(o.RegionType) {
		var ret string
		return ret
	}
	return *o.RegionType
}

// GetRegionTypeOk returns a tuple with the RegionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureComputeBrowserModelAllOf) GetRegionTypeOk() (*string, bool) {
	if o == nil || isNil(o.RegionType) {
    return nil, false
	}
	return o.RegionType, true
}

// HasRegionType returns a boolean if a field has been set.
func (o *AzureComputeBrowserModelAllOf) HasRegionType() bool {
	if o != nil && !isNil(o.RegionType) {
		return true
	}

	return false
}

// SetRegionType gets a reference to the given string and assigns it to the RegionType field.
func (o *AzureComputeBrowserModelAllOf) SetRegionType(v string) {
	o.RegionType = &v
}

// GetSubscriptions returns the Subscriptions field value if set, zero value otherwise.
func (o *AzureComputeBrowserModelAllOf) GetSubscriptions() []AzureSubscriptionBrowserModel {
	if o == nil || isNil(o.Subscriptions) {
		var ret []AzureSubscriptionBrowserModel
		return ret
	}
	return o.Subscriptions
}

// GetSubscriptionsOk returns a tuple with the Subscriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureComputeBrowserModelAllOf) GetSubscriptionsOk() ([]AzureSubscriptionBrowserModel, bool) {
	if o == nil || isNil(o.Subscriptions) {
    return nil, false
	}
	return o.Subscriptions, true
}

// HasSubscriptions returns a boolean if a field has been set.
func (o *AzureComputeBrowserModelAllOf) HasSubscriptions() bool {
	if o != nil && !isNil(o.Subscriptions) {
		return true
	}

	return false
}

// SetSubscriptions gets a reference to the given []AzureSubscriptionBrowserModel and assigns it to the Subscriptions field.
func (o *AzureComputeBrowserModelAllOf) SetSubscriptions(v []AzureSubscriptionBrowserModel) {
	o.Subscriptions = v
}

func (o AzureComputeBrowserModelAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.RegionType) {
		toSerialize["regionType"] = o.RegionType
	}
	if !isNil(o.Subscriptions) {
		toSerialize["subscriptions"] = o.Subscriptions
	}
	return json.Marshal(toSerialize)
}

type NullableAzureComputeBrowserModelAllOf struct {
	value *AzureComputeBrowserModelAllOf
	isSet bool
}

func (v NullableAzureComputeBrowserModelAllOf) Get() *AzureComputeBrowserModelAllOf {
	return v.value
}

func (v *NullableAzureComputeBrowserModelAllOf) Set(val *AzureComputeBrowserModelAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureComputeBrowserModelAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureComputeBrowserModelAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureComputeBrowserModelAllOf(val *AzureComputeBrowserModelAllOf) *NullableAzureComputeBrowserModelAllOf {
	return &NullableAzureComputeBrowserModelAllOf{value: val, isSet: true}
}

func (v NullableAzureComputeBrowserModelAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureComputeBrowserModelAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


