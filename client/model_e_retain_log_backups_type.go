/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// ERetainLogBackupsType Retention policy for the logs stored in the backup repository.
type ERetainLogBackupsType string

// List of ERetainLogBackupsType
const (
	ERETAINLOGBACKUPSTYPE_UNTIL_BACKUP_DELETED ERetainLogBackupsType = "untilBackupDeleted"
	ERETAINLOGBACKUPSTYPE_KEEP_ONLY_DAYS ERetainLogBackupsType = "KeepOnlyDays"
)

// All allowed values of ERetainLogBackupsType enum
var AllowedERetainLogBackupsTypeEnumValues = []ERetainLogBackupsType{
	"untilBackupDeleted",
	"KeepOnlyDays",
}

func (v *ERetainLogBackupsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ERetainLogBackupsType(value)
	for _, existing := range AllowedERetainLogBackupsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ERetainLogBackupsType", value)
}

// NewERetainLogBackupsTypeFromValue returns a pointer to a valid ERetainLogBackupsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewERetainLogBackupsTypeFromValue(v string) (*ERetainLogBackupsType, error) {
	ev := ERetainLogBackupsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ERetainLogBackupsType: valid values are %v", v, AllowedERetainLogBackupsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ERetainLogBackupsType) IsValid() bool {
	for _, existing := range AllowedERetainLogBackupsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ERetainLogBackupsType value
func (v ERetainLogBackupsType) Ptr() *ERetainLogBackupsType {
	return &v
}

type NullableERetainLogBackupsType struct {
	value *ERetainLogBackupsType
	isSet bool
}

func (v NullableERetainLogBackupsType) Get() *ERetainLogBackupsType {
	return v.value
}

func (v *NullableERetainLogBackupsType) Set(val *ERetainLogBackupsType) {
	v.value = val
	v.isSet = true
}

func (v NullableERetainLogBackupsType) IsSet() bool {
	return v.isSet
}

func (v *NullableERetainLogBackupsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableERetainLogBackupsType(val *ERetainLogBackupsType) *NullableERetainLogBackupsType {
	return &NullableERetainLogBackupsType{value: val, isSet: true}
}

func (v NullableERetainLogBackupsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableERetainLogBackupsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

