/*
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic. 
 *
 * API version: 1.0-rev1
 * Contact: support@veeam.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// NotificationSettingsModel Notification settings for the backup job.
type NotificationSettingsModel struct {
	// If *true*, SNMP notifications are enabled for this job.
	SendSNMPNotifications *bool `json:"sendSNMPNotifications,omitempty"`
	EmailNotifications *EmailNotificationSettingsModel `json:"emailNotifications,omitempty"`
	VmAttribute *NotificationVmAttributeSettingsModel `json:"vmAttribute,omitempty"`
}

// NewNotificationSettingsModel instantiates a new NotificationSettingsModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationSettingsModel() *NotificationSettingsModel {
	this := NotificationSettingsModel{}
	return &this
}

// NewNotificationSettingsModelWithDefaults instantiates a new NotificationSettingsModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationSettingsModelWithDefaults() *NotificationSettingsModel {
	this := NotificationSettingsModel{}
	return &this
}

// GetSendSNMPNotifications returns the SendSNMPNotifications field value if set, zero value otherwise.
func (o *NotificationSettingsModel) GetSendSNMPNotifications() bool {
	if o == nil || o.SendSNMPNotifications == nil {
		var ret bool
		return ret
	}
	return *o.SendSNMPNotifications
}

// GetSendSNMPNotificationsOk returns a tuple with the SendSNMPNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSettingsModel) GetSendSNMPNotificationsOk() (*bool, bool) {
	if o == nil || o.SendSNMPNotifications == nil {
		return nil, false
	}
	return o.SendSNMPNotifications, true
}

// HasSendSNMPNotifications returns a boolean if a field has been set.
func (o *NotificationSettingsModel) HasSendSNMPNotifications() bool {
	if o != nil && o.SendSNMPNotifications != nil {
		return true
	}

	return false
}

// SetSendSNMPNotifications gets a reference to the given bool and assigns it to the SendSNMPNotifications field.
func (o *NotificationSettingsModel) SetSendSNMPNotifications(v bool) {
	o.SendSNMPNotifications = &v
}

// GetEmailNotifications returns the EmailNotifications field value if set, zero value otherwise.
func (o *NotificationSettingsModel) GetEmailNotifications() EmailNotificationSettingsModel {
	if o == nil || o.EmailNotifications == nil {
		var ret EmailNotificationSettingsModel
		return ret
	}
	return *o.EmailNotifications
}

// GetEmailNotificationsOk returns a tuple with the EmailNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSettingsModel) GetEmailNotificationsOk() (*EmailNotificationSettingsModel, bool) {
	if o == nil || o.EmailNotifications == nil {
		return nil, false
	}
	return o.EmailNotifications, true
}

// HasEmailNotifications returns a boolean if a field has been set.
func (o *NotificationSettingsModel) HasEmailNotifications() bool {
	if o != nil && o.EmailNotifications != nil {
		return true
	}

	return false
}

// SetEmailNotifications gets a reference to the given EmailNotificationSettingsModel and assigns it to the EmailNotifications field.
func (o *NotificationSettingsModel) SetEmailNotifications(v EmailNotificationSettingsModel) {
	o.EmailNotifications = &v
}

// GetVmAttribute returns the VmAttribute field value if set, zero value otherwise.
func (o *NotificationSettingsModel) GetVmAttribute() NotificationVmAttributeSettingsModel {
	if o == nil || o.VmAttribute == nil {
		var ret NotificationVmAttributeSettingsModel
		return ret
	}
	return *o.VmAttribute
}

// GetVmAttributeOk returns a tuple with the VmAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSettingsModel) GetVmAttributeOk() (*NotificationVmAttributeSettingsModel, bool) {
	if o == nil || o.VmAttribute == nil {
		return nil, false
	}
	return o.VmAttribute, true
}

// HasVmAttribute returns a boolean if a field has been set.
func (o *NotificationSettingsModel) HasVmAttribute() bool {
	if o != nil && o.VmAttribute != nil {
		return true
	}

	return false
}

// SetVmAttribute gets a reference to the given NotificationVmAttributeSettingsModel and assigns it to the VmAttribute field.
func (o *NotificationSettingsModel) SetVmAttribute(v NotificationVmAttributeSettingsModel) {
	o.VmAttribute = &v
}

func (o NotificationSettingsModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SendSNMPNotifications != nil {
		toSerialize["sendSNMPNotifications"] = o.SendSNMPNotifications
	}
	if o.EmailNotifications != nil {
		toSerialize["emailNotifications"] = o.EmailNotifications
	}
	if o.VmAttribute != nil {
		toSerialize["vmAttribute"] = o.VmAttribute
	}
	return json.Marshal(toSerialize)
}

type NullableNotificationSettingsModel struct {
	value *NotificationSettingsModel
	isSet bool
}

func (v NullableNotificationSettingsModel) Get() *NotificationSettingsModel {
	return v.value
}

func (v *NullableNotificationSettingsModel) Set(val *NotificationSettingsModel) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationSettingsModel) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationSettingsModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationSettingsModel(val *NotificationSettingsModel) *NullableNotificationSettingsModel {
	return &NullableNotificationSettingsModel{value: val, isSet: true}
}

func (v NullableNotificationSettingsModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationSettingsModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


