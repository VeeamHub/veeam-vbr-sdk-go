/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ViVMQuickMigrationSpec struct for ViVMQuickMigrationSpec
type ViVMQuickMigrationSpec struct {
	DestinationHost VmwareObjectModel `json:"destinationHost"`
	ResourcePool *VmwareObjectModel `json:"resourcePool,omitempty"`
	Folder *VmwareObjectModel `json:"folder,omitempty"`
	Datastore *VmwareObjectModel `json:"datastore,omitempty"`
	// Array of source backup proxies.
	SourceProxyIds []string `json:"sourceProxyIds,omitempty"`
	// Array of target backup proxies.
	TargetProxyIds []string `json:"targetProxyIds,omitempty"`
	// If *true*, the Veeam Quick Migration mechanism is used. Otherwise, Veeam Backup & Replication will use VMware vMotion for migration.
	VeeamQMEnabled *bool `json:"VeeamQMEnabled,omitempty"`
	// If *true*, Veeam Backup & Replication will delete source VM files upon successful migration.
	DeleteSourceVmsFiles *bool `json:"DeleteSourceVmsFiles,omitempty"`
}

// NewViVMQuickMigrationSpec instantiates a new ViVMQuickMigrationSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViVMQuickMigrationSpec(destinationHost VmwareObjectModel) *ViVMQuickMigrationSpec {
	this := ViVMQuickMigrationSpec{}
	this.DestinationHost = destinationHost
	return &this
}

// NewViVMQuickMigrationSpecWithDefaults instantiates a new ViVMQuickMigrationSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViVMQuickMigrationSpecWithDefaults() *ViVMQuickMigrationSpec {
	this := ViVMQuickMigrationSpec{}
	return &this
}

// GetDestinationHost returns the DestinationHost field value
func (o *ViVMQuickMigrationSpec) GetDestinationHost() VmwareObjectModel {
	if o == nil {
		var ret VmwareObjectModel
		return ret
	}

	return o.DestinationHost
}

// GetDestinationHostOk returns a tuple with the DestinationHost field value
// and a boolean to check if the value has been set.
func (o *ViVMQuickMigrationSpec) GetDestinationHostOk() (*VmwareObjectModel, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DestinationHost, true
}

// SetDestinationHost sets field value
func (o *ViVMQuickMigrationSpec) SetDestinationHost(v VmwareObjectModel) {
	o.DestinationHost = v
}

// GetResourcePool returns the ResourcePool field value if set, zero value otherwise.
func (o *ViVMQuickMigrationSpec) GetResourcePool() VmwareObjectModel {
	if o == nil || isNil(o.ResourcePool) {
		var ret VmwareObjectModel
		return ret
	}
	return *o.ResourcePool
}

// GetResourcePoolOk returns a tuple with the ResourcePool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViVMQuickMigrationSpec) GetResourcePoolOk() (*VmwareObjectModel, bool) {
	if o == nil || isNil(o.ResourcePool) {
    return nil, false
	}
	return o.ResourcePool, true
}

// HasResourcePool returns a boolean if a field has been set.
func (o *ViVMQuickMigrationSpec) HasResourcePool() bool {
	if o != nil && !isNil(o.ResourcePool) {
		return true
	}

	return false
}

// SetResourcePool gets a reference to the given VmwareObjectModel and assigns it to the ResourcePool field.
func (o *ViVMQuickMigrationSpec) SetResourcePool(v VmwareObjectModel) {
	o.ResourcePool = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *ViVMQuickMigrationSpec) GetFolder() VmwareObjectModel {
	if o == nil || isNil(o.Folder) {
		var ret VmwareObjectModel
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViVMQuickMigrationSpec) GetFolderOk() (*VmwareObjectModel, bool) {
	if o == nil || isNil(o.Folder) {
    return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *ViVMQuickMigrationSpec) HasFolder() bool {
	if o != nil && !isNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given VmwareObjectModel and assigns it to the Folder field.
func (o *ViVMQuickMigrationSpec) SetFolder(v VmwareObjectModel) {
	o.Folder = &v
}

// GetDatastore returns the Datastore field value if set, zero value otherwise.
func (o *ViVMQuickMigrationSpec) GetDatastore() VmwareObjectModel {
	if o == nil || isNil(o.Datastore) {
		var ret VmwareObjectModel
		return ret
	}
	return *o.Datastore
}

// GetDatastoreOk returns a tuple with the Datastore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViVMQuickMigrationSpec) GetDatastoreOk() (*VmwareObjectModel, bool) {
	if o == nil || isNil(o.Datastore) {
    return nil, false
	}
	return o.Datastore, true
}

// HasDatastore returns a boolean if a field has been set.
func (o *ViVMQuickMigrationSpec) HasDatastore() bool {
	if o != nil && !isNil(o.Datastore) {
		return true
	}

	return false
}

// SetDatastore gets a reference to the given VmwareObjectModel and assigns it to the Datastore field.
func (o *ViVMQuickMigrationSpec) SetDatastore(v VmwareObjectModel) {
	o.Datastore = &v
}

// GetSourceProxyIds returns the SourceProxyIds field value if set, zero value otherwise.
func (o *ViVMQuickMigrationSpec) GetSourceProxyIds() []string {
	if o == nil || isNil(o.SourceProxyIds) {
		var ret []string
		return ret
	}
	return o.SourceProxyIds
}

// GetSourceProxyIdsOk returns a tuple with the SourceProxyIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViVMQuickMigrationSpec) GetSourceProxyIdsOk() ([]string, bool) {
	if o == nil || isNil(o.SourceProxyIds) {
    return nil, false
	}
	return o.SourceProxyIds, true
}

// HasSourceProxyIds returns a boolean if a field has been set.
func (o *ViVMQuickMigrationSpec) HasSourceProxyIds() bool {
	if o != nil && !isNil(o.SourceProxyIds) {
		return true
	}

	return false
}

// SetSourceProxyIds gets a reference to the given []string and assigns it to the SourceProxyIds field.
func (o *ViVMQuickMigrationSpec) SetSourceProxyIds(v []string) {
	o.SourceProxyIds = v
}

// GetTargetProxyIds returns the TargetProxyIds field value if set, zero value otherwise.
func (o *ViVMQuickMigrationSpec) GetTargetProxyIds() []string {
	if o == nil || isNil(o.TargetProxyIds) {
		var ret []string
		return ret
	}
	return o.TargetProxyIds
}

// GetTargetProxyIdsOk returns a tuple with the TargetProxyIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViVMQuickMigrationSpec) GetTargetProxyIdsOk() ([]string, bool) {
	if o == nil || isNil(o.TargetProxyIds) {
    return nil, false
	}
	return o.TargetProxyIds, true
}

// HasTargetProxyIds returns a boolean if a field has been set.
func (o *ViVMQuickMigrationSpec) HasTargetProxyIds() bool {
	if o != nil && !isNil(o.TargetProxyIds) {
		return true
	}

	return false
}

// SetTargetProxyIds gets a reference to the given []string and assigns it to the TargetProxyIds field.
func (o *ViVMQuickMigrationSpec) SetTargetProxyIds(v []string) {
	o.TargetProxyIds = v
}

// GetVeeamQMEnabled returns the VeeamQMEnabled field value if set, zero value otherwise.
func (o *ViVMQuickMigrationSpec) GetVeeamQMEnabled() bool {
	if o == nil || isNil(o.VeeamQMEnabled) {
		var ret bool
		return ret
	}
	return *o.VeeamQMEnabled
}

// GetVeeamQMEnabledOk returns a tuple with the VeeamQMEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViVMQuickMigrationSpec) GetVeeamQMEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.VeeamQMEnabled) {
    return nil, false
	}
	return o.VeeamQMEnabled, true
}

// HasVeeamQMEnabled returns a boolean if a field has been set.
func (o *ViVMQuickMigrationSpec) HasVeeamQMEnabled() bool {
	if o != nil && !isNil(o.VeeamQMEnabled) {
		return true
	}

	return false
}

// SetVeeamQMEnabled gets a reference to the given bool and assigns it to the VeeamQMEnabled field.
func (o *ViVMQuickMigrationSpec) SetVeeamQMEnabled(v bool) {
	o.VeeamQMEnabled = &v
}

// GetDeleteSourceVmsFiles returns the DeleteSourceVmsFiles field value if set, zero value otherwise.
func (o *ViVMQuickMigrationSpec) GetDeleteSourceVmsFiles() bool {
	if o == nil || isNil(o.DeleteSourceVmsFiles) {
		var ret bool
		return ret
	}
	return *o.DeleteSourceVmsFiles
}

// GetDeleteSourceVmsFilesOk returns a tuple with the DeleteSourceVmsFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViVMQuickMigrationSpec) GetDeleteSourceVmsFilesOk() (*bool, bool) {
	if o == nil || isNil(o.DeleteSourceVmsFiles) {
    return nil, false
	}
	return o.DeleteSourceVmsFiles, true
}

// HasDeleteSourceVmsFiles returns a boolean if a field has been set.
func (o *ViVMQuickMigrationSpec) HasDeleteSourceVmsFiles() bool {
	if o != nil && !isNil(o.DeleteSourceVmsFiles) {
		return true
	}

	return false
}

// SetDeleteSourceVmsFiles gets a reference to the given bool and assigns it to the DeleteSourceVmsFiles field.
func (o *ViVMQuickMigrationSpec) SetDeleteSourceVmsFiles(v bool) {
	o.DeleteSourceVmsFiles = &v
}

func (o ViVMQuickMigrationSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["destinationHost"] = o.DestinationHost
	}
	if !isNil(o.ResourcePool) {
		toSerialize["resourcePool"] = o.ResourcePool
	}
	if !isNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	if !isNil(o.Datastore) {
		toSerialize["datastore"] = o.Datastore
	}
	if !isNil(o.SourceProxyIds) {
		toSerialize["sourceProxyIds"] = o.SourceProxyIds
	}
	if !isNil(o.TargetProxyIds) {
		toSerialize["targetProxyIds"] = o.TargetProxyIds
	}
	if !isNil(o.VeeamQMEnabled) {
		toSerialize["VeeamQMEnabled"] = o.VeeamQMEnabled
	}
	if !isNil(o.DeleteSourceVmsFiles) {
		toSerialize["DeleteSourceVmsFiles"] = o.DeleteSourceVmsFiles
	}
	return json.Marshal(toSerialize)
}

type NullableViVMQuickMigrationSpec struct {
	value *ViVMQuickMigrationSpec
	isSet bool
}

func (v NullableViVMQuickMigrationSpec) Get() *ViVMQuickMigrationSpec {
	return v.value
}

func (v *NullableViVMQuickMigrationSpec) Set(val *ViVMQuickMigrationSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableViVMQuickMigrationSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableViVMQuickMigrationSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViVMQuickMigrationSpec(val *ViVMQuickMigrationSpec) *NullableViVMQuickMigrationSpec {
	return &NullableViVMQuickMigrationSpec{value: val, isSet: true}
}

func (v NullableViVMQuickMigrationSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViVMQuickMigrationSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


