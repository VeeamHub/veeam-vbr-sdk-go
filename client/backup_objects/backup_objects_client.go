// Code generated by go-swagger; DO NOT EDIT.

package backup_objects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new backup objects API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for backup objects API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAllBackupObjects(params *GetAllBackupObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllBackupObjectsOK, error)

	GetBackupObject(params *GetBackupObjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBackupObjectOK, error)

	GetBackupObjectRestorePoints(params *GetBackupObjectRestorePointsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBackupObjectRestorePointsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAllBackupObjects gets all backup objects

  The HTTP GET request to the `/api/v1/backupObjects` path allows you to get an array of virtual infrastructure objects (VMs and VM containers) that are in—Åluded in backups created by the backup server.
*/
func (a *Client) GetAllBackupObjects(params *GetAllBackupObjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllBackupObjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllBackupObjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllBackupObjects",
		Method:             "GET",
		PathPattern:        "/api/v1/backupObjects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllBackupObjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllBackupObjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllBackupObjects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBackupObject gets backup object

  The HTTP GET request to the `/api/v1/backupObjects/{id}` path allows you to get a backup object that has the specified `id`.
*/
func (a *Client) GetBackupObject(params *GetBackupObjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBackupObjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBackupObjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBackupObject",
		Method:             "GET",
		PathPattern:        "/api/v1/backupObjects/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBackupObjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBackupObjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBackupObject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetBackupObjectRestorePoints gets restore points

  The HTTP GET request to the `/api/v1/backupObjects/{id}/restorePoints` path allows you to get an array of restore points of a backup object that has the specified `id`.
*/
func (a *Client) GetBackupObjectRestorePoints(params *GetBackupObjectRestorePointsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBackupObjectRestorePointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBackupObjectRestorePointsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBackupObjectRestorePoints",
		Method:             "GET",
		PathPattern:        "/api/v1/backupObjects/{id}/restorePoints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBackupObjectRestorePointsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBackupObjectRestorePointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBackupObjectRestorePoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
