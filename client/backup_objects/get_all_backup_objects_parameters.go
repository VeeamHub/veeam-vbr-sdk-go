// Code generated by go-swagger; DO NOT EDIT.

package backup_objects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAllBackupObjectsParams creates a new GetAllBackupObjectsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAllBackupObjectsParams() *GetAllBackupObjectsParams {
	return &GetAllBackupObjectsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllBackupObjectsParamsWithTimeout creates a new GetAllBackupObjectsParams object
// with the ability to set a timeout on a request.
func NewGetAllBackupObjectsParamsWithTimeout(timeout time.Duration) *GetAllBackupObjectsParams {
	return &GetAllBackupObjectsParams{
		timeout: timeout,
	}
}

// NewGetAllBackupObjectsParamsWithContext creates a new GetAllBackupObjectsParams object
// with the ability to set a context for a request.
func NewGetAllBackupObjectsParamsWithContext(ctx context.Context) *GetAllBackupObjectsParams {
	return &GetAllBackupObjectsParams{
		Context: ctx,
	}
}

// NewGetAllBackupObjectsParamsWithHTTPClient creates a new GetAllBackupObjectsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAllBackupObjectsParamsWithHTTPClient(client *http.Client) *GetAllBackupObjectsParams {
	return &GetAllBackupObjectsParams{
		HTTPClient: client,
	}
}

/* GetAllBackupObjectsParams contains all the parameters to send to the API endpoint
   for the get all backup objects operation.

   Typically these are written to a http.Request.
*/
type GetAllBackupObjectsParams struct {

	/* Limit.

	   Maximum number of backup objects to return.

	   Format: int32
	*/
	Limit *int32

	/* NameFilter.

	   Filters backup objects by the `nameFilter` pattern. The pattern can match any backup object parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	*/
	NameFilter *string

	/* OrderAsc.

	   Sorts backup objects in the ascending order by the `orderColumn` parameter.
	*/
	OrderAsc *bool

	/* OrderColumn.

	   Sorts backup objects by one of the backup object parameters.
	*/
	OrderColumn *string

	/* PlatformIDFilter.

	   Filters backup objects by platform ID.

	   Format: uuid
	*/
	PlatformIDFilter *strfmt.UUID

	/* PlatformNameFilter.

	   Filters backup objects by platform ID.
	*/
	PlatformNameFilter *string

	/* Skip.

	   Number of backup objects to skip.

	   Format: int32
	*/
	Skip *int32

	/* TypeFilter.

	   Filters backup objects by object type.
	*/
	TypeFilter *string

	/* ViTypeFilter.

	   Filters backup objects by the type of VMware vSphere server.
	*/
	ViTypeFilter *string

	/* XAPIVersion.

	     Version and revision of the client REST API. Must be in the following
	format: *\<version\>-\<revision\>*.


	     Default: "1.0-rev1"
	*/
	XAPIVersion string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get all backup objects params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllBackupObjectsParams) WithDefaults() *GetAllBackupObjectsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get all backup objects params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllBackupObjectsParams) SetDefaults() {
	var (
		xAPIVersionDefault = string("1.0-rev1")
	)

	val := GetAllBackupObjectsParams{
		XAPIVersion: xAPIVersionDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get all backup objects params
func (o *GetAllBackupObjectsParams) WithTimeout(timeout time.Duration) *GetAllBackupObjectsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all backup objects params
func (o *GetAllBackupObjectsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all backup objects params
func (o *GetAllBackupObjectsParams) WithContext(ctx context.Context) *GetAllBackupObjectsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all backup objects params
func (o *GetAllBackupObjectsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all backup objects params
func (o *GetAllBackupObjectsParams) WithHTTPClient(client *http.Client) *GetAllBackupObjectsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all backup objects params
func (o *GetAllBackupObjectsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the get all backup objects params
func (o *GetAllBackupObjectsParams) WithLimit(limit *int32) *GetAllBackupObjectsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get all backup objects params
func (o *GetAllBackupObjectsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithNameFilter adds the nameFilter to the get all backup objects params
func (o *GetAllBackupObjectsParams) WithNameFilter(nameFilter *string) *GetAllBackupObjectsParams {
	o.SetNameFilter(nameFilter)
	return o
}

// SetNameFilter adds the nameFilter to the get all backup objects params
func (o *GetAllBackupObjectsParams) SetNameFilter(nameFilter *string) {
	o.NameFilter = nameFilter
}

// WithOrderAsc adds the orderAsc to the get all backup objects params
func (o *GetAllBackupObjectsParams) WithOrderAsc(orderAsc *bool) *GetAllBackupObjectsParams {
	o.SetOrderAsc(orderAsc)
	return o
}

// SetOrderAsc adds the orderAsc to the get all backup objects params
func (o *GetAllBackupObjectsParams) SetOrderAsc(orderAsc *bool) {
	o.OrderAsc = orderAsc
}

// WithOrderColumn adds the orderColumn to the get all backup objects params
func (o *GetAllBackupObjectsParams) WithOrderColumn(orderColumn *string) *GetAllBackupObjectsParams {
	o.SetOrderColumn(orderColumn)
	return o
}

// SetOrderColumn adds the orderColumn to the get all backup objects params
func (o *GetAllBackupObjectsParams) SetOrderColumn(orderColumn *string) {
	o.OrderColumn = orderColumn
}

// WithPlatformIDFilter adds the platformIDFilter to the get all backup objects params
func (o *GetAllBackupObjectsParams) WithPlatformIDFilter(platformIDFilter *strfmt.UUID) *GetAllBackupObjectsParams {
	o.SetPlatformIDFilter(platformIDFilter)
	return o
}

// SetPlatformIDFilter adds the platformIdFilter to the get all backup objects params
func (o *GetAllBackupObjectsParams) SetPlatformIDFilter(platformIDFilter *strfmt.UUID) {
	o.PlatformIDFilter = platformIDFilter
}

// WithPlatformNameFilter adds the platformNameFilter to the get all backup objects params
func (o *GetAllBackupObjectsParams) WithPlatformNameFilter(platformNameFilter *string) *GetAllBackupObjectsParams {
	o.SetPlatformNameFilter(platformNameFilter)
	return o
}

// SetPlatformNameFilter adds the platformNameFilter to the get all backup objects params
func (o *GetAllBackupObjectsParams) SetPlatformNameFilter(platformNameFilter *string) {
	o.PlatformNameFilter = platformNameFilter
}

// WithSkip adds the skip to the get all backup objects params
func (o *GetAllBackupObjectsParams) WithSkip(skip *int32) *GetAllBackupObjectsParams {
	o.SetSkip(skip)
	return o
}

// SetSkip adds the skip to the get all backup objects params
func (o *GetAllBackupObjectsParams) SetSkip(skip *int32) {
	o.Skip = skip
}

// WithTypeFilter adds the typeFilter to the get all backup objects params
func (o *GetAllBackupObjectsParams) WithTypeFilter(typeFilter *string) *GetAllBackupObjectsParams {
	o.SetTypeFilter(typeFilter)
	return o
}

// SetTypeFilter adds the typeFilter to the get all backup objects params
func (o *GetAllBackupObjectsParams) SetTypeFilter(typeFilter *string) {
	o.TypeFilter = typeFilter
}

// WithViTypeFilter adds the viTypeFilter to the get all backup objects params
func (o *GetAllBackupObjectsParams) WithViTypeFilter(viTypeFilter *string) *GetAllBackupObjectsParams {
	o.SetViTypeFilter(viTypeFilter)
	return o
}

// SetViTypeFilter adds the viTypeFilter to the get all backup objects params
func (o *GetAllBackupObjectsParams) SetViTypeFilter(viTypeFilter *string) {
	o.ViTypeFilter = viTypeFilter
}

// WithXAPIVersion adds the xAPIVersion to the get all backup objects params
func (o *GetAllBackupObjectsParams) WithXAPIVersion(xAPIVersion string) *GetAllBackupObjectsParams {
	o.SetXAPIVersion(xAPIVersion)
	return o
}

// SetXAPIVersion adds the xApiVersion to the get all backup objects params
func (o *GetAllBackupObjectsParams) SetXAPIVersion(xAPIVersion string) {
	o.XAPIVersion = xAPIVersion
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllBackupObjectsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.NameFilter != nil {

		// query param nameFilter
		var qrNameFilter string

		if o.NameFilter != nil {
			qrNameFilter = *o.NameFilter
		}
		qNameFilter := qrNameFilter
		if qNameFilter != "" {

			if err := r.SetQueryParam("nameFilter", qNameFilter); err != nil {
				return err
			}
		}
	}

	if o.OrderAsc != nil {

		// query param orderAsc
		var qrOrderAsc bool

		if o.OrderAsc != nil {
			qrOrderAsc = *o.OrderAsc
		}
		qOrderAsc := swag.FormatBool(qrOrderAsc)
		if qOrderAsc != "" {

			if err := r.SetQueryParam("orderAsc", qOrderAsc); err != nil {
				return err
			}
		}
	}

	if o.OrderColumn != nil {

		// query param orderColumn
		var qrOrderColumn string

		if o.OrderColumn != nil {
			qrOrderColumn = *o.OrderColumn
		}
		qOrderColumn := qrOrderColumn
		if qOrderColumn != "" {

			if err := r.SetQueryParam("orderColumn", qOrderColumn); err != nil {
				return err
			}
		}
	}

	if o.PlatformIDFilter != nil {

		// query param platformIdFilter
		var qrPlatformIDFilter strfmt.UUID

		if o.PlatformIDFilter != nil {
			qrPlatformIDFilter = *o.PlatformIDFilter
		}
		qPlatformIDFilter := qrPlatformIDFilter.String()
		if qPlatformIDFilter != "" {

			if err := r.SetQueryParam("platformIdFilter", qPlatformIDFilter); err != nil {
				return err
			}
		}
	}

	if o.PlatformNameFilter != nil {

		// query param platformNameFilter
		var qrPlatformNameFilter string

		if o.PlatformNameFilter != nil {
			qrPlatformNameFilter = *o.PlatformNameFilter
		}
		qPlatformNameFilter := qrPlatformNameFilter
		if qPlatformNameFilter != "" {

			if err := r.SetQueryParam("platformNameFilter", qPlatformNameFilter); err != nil {
				return err
			}
		}
	}

	if o.Skip != nil {

		// query param skip
		var qrSkip int32

		if o.Skip != nil {
			qrSkip = *o.Skip
		}
		qSkip := swag.FormatInt32(qrSkip)
		if qSkip != "" {

			if err := r.SetQueryParam("skip", qSkip); err != nil {
				return err
			}
		}
	}

	if o.TypeFilter != nil {

		// query param typeFilter
		var qrTypeFilter string

		if o.TypeFilter != nil {
			qrTypeFilter = *o.TypeFilter
		}
		qTypeFilter := qrTypeFilter
		if qTypeFilter != "" {

			if err := r.SetQueryParam("typeFilter", qTypeFilter); err != nil {
				return err
			}
		}
	}

	if o.ViTypeFilter != nil {

		// query param viTypeFilter
		var qrViTypeFilter string

		if o.ViTypeFilter != nil {
			qrViTypeFilter = *o.ViTypeFilter
		}
		qViTypeFilter := qrViTypeFilter
		if qViTypeFilter != "" {

			if err := r.SetQueryParam("viTypeFilter", qViTypeFilter); err != nil {
				return err
			}
		}
	}

	// header param x-api-version
	if err := r.SetHeaderParam("x-api-version", o.XAPIVersion); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
