/*
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic. 
 *
 * API version: 1.0-rev2
 * Contact: support@veeam.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// EncryptionPasswordsResult struct for EncryptionPasswordsResult
type EncryptionPasswordsResult struct {
	// Array of encryption passwords.
	Data []EncryptionPasswordModel `json:"data"`
	Pagination PaginationResult `json:"pagination"`
}

// NewEncryptionPasswordsResult instantiates a new EncryptionPasswordsResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncryptionPasswordsResult(data []EncryptionPasswordModel, pagination PaginationResult, ) *EncryptionPasswordsResult {
	this := EncryptionPasswordsResult{}
	this.Data = data
	this.Pagination = pagination
	return &this
}

// NewEncryptionPasswordsResultWithDefaults instantiates a new EncryptionPasswordsResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncryptionPasswordsResultWithDefaults() *EncryptionPasswordsResult {
	this := EncryptionPasswordsResult{}
	return &this
}

// GetData returns the Data field value
func (o *EncryptionPasswordsResult) GetData() []EncryptionPasswordModel {
	if o == nil  {
		var ret []EncryptionPasswordModel
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *EncryptionPasswordsResult) GetDataOk() (*[]EncryptionPasswordModel, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *EncryptionPasswordsResult) SetData(v []EncryptionPasswordModel) {
	o.Data = v
}

// GetPagination returns the Pagination field value
func (o *EncryptionPasswordsResult) GetPagination() PaginationResult {
	if o == nil  {
		var ret PaginationResult
		return ret
	}

	return o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value
// and a boolean to check if the value has been set.
func (o *EncryptionPasswordsResult) GetPaginationOk() (*PaginationResult, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Pagination, true
}

// SetPagination sets field value
func (o *EncryptionPasswordsResult) SetPagination(v PaginationResult) {
	o.Pagination = v
}

func (o EncryptionPasswordsResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	if true {
		toSerialize["pagination"] = o.Pagination
	}
	return json.Marshal(toSerialize)
}

type NullableEncryptionPasswordsResult struct {
	value *EncryptionPasswordsResult
	isSet bool
}

func (v NullableEncryptionPasswordsResult) Get() *EncryptionPasswordsResult {
	return v.value
}

func (v *NullableEncryptionPasswordsResult) Set(val *EncryptionPasswordsResult) {
	v.value = val
	v.isSet = true
}

func (v NullableEncryptionPasswordsResult) IsSet() bool {
	return v.isSet
}

func (v *NullableEncryptionPasswordsResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncryptionPasswordsResult(val *EncryptionPasswordsResult) *NullableEncryptionPasswordsResult {
	return &NullableEncryptionPasswordsResult{value: val, isSet: true}
}

func (v NullableEncryptionPasswordsResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncryptionPasswordsResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


