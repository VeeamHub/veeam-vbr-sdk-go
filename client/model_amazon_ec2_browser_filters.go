/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AmazonEC2BrowserFilters Amazon EC2 hierarchy filters.
type AmazonEC2BrowserFilters struct {
	// Filters Amazon EC2 resources by AWS region.
	RegionId string `json:"regionId"`
}

// NewAmazonEC2BrowserFilters instantiates a new AmazonEC2BrowserFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmazonEC2BrowserFilters(regionId string) *AmazonEC2BrowserFilters {
	this := AmazonEC2BrowserFilters{}
	this.RegionId = regionId
	return &this
}

// NewAmazonEC2BrowserFiltersWithDefaults instantiates a new AmazonEC2BrowserFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmazonEC2BrowserFiltersWithDefaults() *AmazonEC2BrowserFilters {
	this := AmazonEC2BrowserFilters{}
	return &this
}

// GetRegionId returns the RegionId field value
func (o *AmazonEC2BrowserFilters) GetRegionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value
// and a boolean to check if the value has been set.
func (o *AmazonEC2BrowserFilters) GetRegionIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.RegionId, true
}

// SetRegionId sets field value
func (o *AmazonEC2BrowserFilters) SetRegionId(v string) {
	o.RegionId = v
}

func (o AmazonEC2BrowserFilters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["regionId"] = o.RegionId
	}
	return json.Marshal(toSerialize)
}

type NullableAmazonEC2BrowserFilters struct {
	value *AmazonEC2BrowserFilters
	isSet bool
}

func (v NullableAmazonEC2BrowserFilters) Get() *AmazonEC2BrowserFilters {
	return v.value
}

func (v *NullableAmazonEC2BrowserFilters) Set(val *AmazonEC2BrowserFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableAmazonEC2BrowserFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableAmazonEC2BrowserFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmazonEC2BrowserFilters(val *AmazonEC2BrowserFilters) *NullableAmazonEC2BrowserFilters {
	return &NullableAmazonEC2BrowserFilters{value: val, isSet: true}
}

func (v NullableAmazonEC2BrowserFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmazonEC2BrowserFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


