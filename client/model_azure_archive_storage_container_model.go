/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AzureArchiveStorageContainerModel Azure Archive container where backup data is stored.
type AzureArchiveStorageContainerModel struct {
	// Name of an Azure Archive container.
	ContainerName string `json:"containerName"`
	// Name of the folder that the object storage repository is mapped to.
	FolderName string `json:"folderName"`
}

// NewAzureArchiveStorageContainerModel instantiates a new AzureArchiveStorageContainerModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureArchiveStorageContainerModel(containerName string, folderName string) *AzureArchiveStorageContainerModel {
	this := AzureArchiveStorageContainerModel{}
	this.ContainerName = containerName
	this.FolderName = folderName
	return &this
}

// NewAzureArchiveStorageContainerModelWithDefaults instantiates a new AzureArchiveStorageContainerModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureArchiveStorageContainerModelWithDefaults() *AzureArchiveStorageContainerModel {
	this := AzureArchiveStorageContainerModel{}
	return &this
}

// GetContainerName returns the ContainerName field value
func (o *AzureArchiveStorageContainerModel) GetContainerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContainerName
}

// GetContainerNameOk returns a tuple with the ContainerName field value
// and a boolean to check if the value has been set.
func (o *AzureArchiveStorageContainerModel) GetContainerNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ContainerName, true
}

// SetContainerName sets field value
func (o *AzureArchiveStorageContainerModel) SetContainerName(v string) {
	o.ContainerName = v
}

// GetFolderName returns the FolderName field value
func (o *AzureArchiveStorageContainerModel) GetFolderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FolderName
}

// GetFolderNameOk returns a tuple with the FolderName field value
// and a boolean to check if the value has been set.
func (o *AzureArchiveStorageContainerModel) GetFolderNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.FolderName, true
}

// SetFolderName sets field value
func (o *AzureArchiveStorageContainerModel) SetFolderName(v string) {
	o.FolderName = v
}

func (o AzureArchiveStorageContainerModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["containerName"] = o.ContainerName
	}
	if true {
		toSerialize["folderName"] = o.FolderName
	}
	return json.Marshal(toSerialize)
}

type NullableAzureArchiveStorageContainerModel struct {
	value *AzureArchiveStorageContainerModel
	isSet bool
}

func (v NullableAzureArchiveStorageContainerModel) Get() *AzureArchiveStorageContainerModel {
	return v.value
}

func (v *NullableAzureArchiveStorageContainerModel) Set(val *AzureArchiveStorageContainerModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureArchiveStorageContainerModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureArchiveStorageContainerModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureArchiveStorageContainerModel(val *AzureArchiveStorageContainerModel) *NullableAzureArchiveStorageContainerModel {
	return &NullableAzureArchiveStorageContainerModel{value: val, isSet: true}
}

func (v NullableAzureArchiveStorageContainerModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureArchiveStorageContainerModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


