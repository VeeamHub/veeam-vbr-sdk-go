/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AmazonS3StorageBucketModel Amazon S3 bucket where backup data is stored.
type AmazonS3StorageBucketModel struct {
	// ID of a region where the Amazon S3 bucket is located.
	RegionId string `json:"regionId"`
	// Name of an Amazon S3 bucket.
	BucketName string `json:"bucketName"`
	// Name of the folder that the object storage repository is mapped to.
	FolderName string `json:"folderName"`
	StorageConsumptionLimit *ObjectStorageConsumptionLimitModel `json:"storageConsumptionLimit,omitempty"`
	Immutability *ObjectStorageImmutabilityModel `json:"immutability,omitempty"`
	InfrequentAccessStorage *AmazonS3IAStorageModel `json:"infrequentAccessStorage,omitempty"`
}

// NewAmazonS3StorageBucketModel instantiates a new AmazonS3StorageBucketModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmazonS3StorageBucketModel(regionId string, bucketName string, folderName string) *AmazonS3StorageBucketModel {
	this := AmazonS3StorageBucketModel{}
	this.RegionId = regionId
	this.BucketName = bucketName
	this.FolderName = folderName
	return &this
}

// NewAmazonS3StorageBucketModelWithDefaults instantiates a new AmazonS3StorageBucketModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmazonS3StorageBucketModelWithDefaults() *AmazonS3StorageBucketModel {
	this := AmazonS3StorageBucketModel{}
	return &this
}

// GetRegionId returns the RegionId field value
func (o *AmazonS3StorageBucketModel) GetRegionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value
// and a boolean to check if the value has been set.
func (o *AmazonS3StorageBucketModel) GetRegionIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.RegionId, true
}

// SetRegionId sets field value
func (o *AmazonS3StorageBucketModel) SetRegionId(v string) {
	o.RegionId = v
}

// GetBucketName returns the BucketName field value
func (o *AmazonS3StorageBucketModel) GetBucketName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value
// and a boolean to check if the value has been set.
func (o *AmazonS3StorageBucketModel) GetBucketNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.BucketName, true
}

// SetBucketName sets field value
func (o *AmazonS3StorageBucketModel) SetBucketName(v string) {
	o.BucketName = v
}

// GetFolderName returns the FolderName field value
func (o *AmazonS3StorageBucketModel) GetFolderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FolderName
}

// GetFolderNameOk returns a tuple with the FolderName field value
// and a boolean to check if the value has been set.
func (o *AmazonS3StorageBucketModel) GetFolderNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.FolderName, true
}

// SetFolderName sets field value
func (o *AmazonS3StorageBucketModel) SetFolderName(v string) {
	o.FolderName = v
}

// GetStorageConsumptionLimit returns the StorageConsumptionLimit field value if set, zero value otherwise.
func (o *AmazonS3StorageBucketModel) GetStorageConsumptionLimit() ObjectStorageConsumptionLimitModel {
	if o == nil || isNil(o.StorageConsumptionLimit) {
		var ret ObjectStorageConsumptionLimitModel
		return ret
	}
	return *o.StorageConsumptionLimit
}

// GetStorageConsumptionLimitOk returns a tuple with the StorageConsumptionLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmazonS3StorageBucketModel) GetStorageConsumptionLimitOk() (*ObjectStorageConsumptionLimitModel, bool) {
	if o == nil || isNil(o.StorageConsumptionLimit) {
    return nil, false
	}
	return o.StorageConsumptionLimit, true
}

// HasStorageConsumptionLimit returns a boolean if a field has been set.
func (o *AmazonS3StorageBucketModel) HasStorageConsumptionLimit() bool {
	if o != nil && !isNil(o.StorageConsumptionLimit) {
		return true
	}

	return false
}

// SetStorageConsumptionLimit gets a reference to the given ObjectStorageConsumptionLimitModel and assigns it to the StorageConsumptionLimit field.
func (o *AmazonS3StorageBucketModel) SetStorageConsumptionLimit(v ObjectStorageConsumptionLimitModel) {
	o.StorageConsumptionLimit = &v
}

// GetImmutability returns the Immutability field value if set, zero value otherwise.
func (o *AmazonS3StorageBucketModel) GetImmutability() ObjectStorageImmutabilityModel {
	if o == nil || isNil(o.Immutability) {
		var ret ObjectStorageImmutabilityModel
		return ret
	}
	return *o.Immutability
}

// GetImmutabilityOk returns a tuple with the Immutability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmazonS3StorageBucketModel) GetImmutabilityOk() (*ObjectStorageImmutabilityModel, bool) {
	if o == nil || isNil(o.Immutability) {
    return nil, false
	}
	return o.Immutability, true
}

// HasImmutability returns a boolean if a field has been set.
func (o *AmazonS3StorageBucketModel) HasImmutability() bool {
	if o != nil && !isNil(o.Immutability) {
		return true
	}

	return false
}

// SetImmutability gets a reference to the given ObjectStorageImmutabilityModel and assigns it to the Immutability field.
func (o *AmazonS3StorageBucketModel) SetImmutability(v ObjectStorageImmutabilityModel) {
	o.Immutability = &v
}

// GetInfrequentAccessStorage returns the InfrequentAccessStorage field value if set, zero value otherwise.
func (o *AmazonS3StorageBucketModel) GetInfrequentAccessStorage() AmazonS3IAStorageModel {
	if o == nil || isNil(o.InfrequentAccessStorage) {
		var ret AmazonS3IAStorageModel
		return ret
	}
	return *o.InfrequentAccessStorage
}

// GetInfrequentAccessStorageOk returns a tuple with the InfrequentAccessStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmazonS3StorageBucketModel) GetInfrequentAccessStorageOk() (*AmazonS3IAStorageModel, bool) {
	if o == nil || isNil(o.InfrequentAccessStorage) {
    return nil, false
	}
	return o.InfrequentAccessStorage, true
}

// HasInfrequentAccessStorage returns a boolean if a field has been set.
func (o *AmazonS3StorageBucketModel) HasInfrequentAccessStorage() bool {
	if o != nil && !isNil(o.InfrequentAccessStorage) {
		return true
	}

	return false
}

// SetInfrequentAccessStorage gets a reference to the given AmazonS3IAStorageModel and assigns it to the InfrequentAccessStorage field.
func (o *AmazonS3StorageBucketModel) SetInfrequentAccessStorage(v AmazonS3IAStorageModel) {
	o.InfrequentAccessStorage = &v
}

func (o AmazonS3StorageBucketModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["regionId"] = o.RegionId
	}
	if true {
		toSerialize["bucketName"] = o.BucketName
	}
	if true {
		toSerialize["folderName"] = o.FolderName
	}
	if !isNil(o.StorageConsumptionLimit) {
		toSerialize["storageConsumptionLimit"] = o.StorageConsumptionLimit
	}
	if !isNil(o.Immutability) {
		toSerialize["immutability"] = o.Immutability
	}
	if !isNil(o.InfrequentAccessStorage) {
		toSerialize["infrequentAccessStorage"] = o.InfrequentAccessStorage
	}
	return json.Marshal(toSerialize)
}

type NullableAmazonS3StorageBucketModel struct {
	value *AmazonS3StorageBucketModel
	isSet bool
}

func (v NullableAmazonS3StorageBucketModel) Get() *AmazonS3StorageBucketModel {
	return v.value
}

func (v *NullableAmazonS3StorageBucketModel) Set(val *AmazonS3StorageBucketModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAmazonS3StorageBucketModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAmazonS3StorageBucketModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmazonS3StorageBucketModel(val *AmazonS3StorageBucketModel) *NullableAmazonS3StorageBucketModel {
	return &NullableAmazonS3StorageBucketModel{value: val, isSet: true}
}

func (v NullableAmazonS3StorageBucketModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmazonS3StorageBucketModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


