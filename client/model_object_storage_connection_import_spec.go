/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ObjectStorageConnectionImportSpec Object storage connection settings.
type ObjectStorageConnectionImportSpec struct {
	ConnectionType ERepositoryConnectionType `json:"connectionType"`
	// Array of gateway server IDs. The value is *null* if the connection type is *Direct*.
	GatewayServers []string `json:"gatewayServers,omitempty"`
}

// NewObjectStorageConnectionImportSpec instantiates a new ObjectStorageConnectionImportSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectStorageConnectionImportSpec(connectionType ERepositoryConnectionType) *ObjectStorageConnectionImportSpec {
	this := ObjectStorageConnectionImportSpec{}
	this.ConnectionType = connectionType
	return &this
}

// NewObjectStorageConnectionImportSpecWithDefaults instantiates a new ObjectStorageConnectionImportSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectStorageConnectionImportSpecWithDefaults() *ObjectStorageConnectionImportSpec {
	this := ObjectStorageConnectionImportSpec{}
	return &this
}

// GetConnectionType returns the ConnectionType field value
func (o *ObjectStorageConnectionImportSpec) GetConnectionType() ERepositoryConnectionType {
	if o == nil {
		var ret ERepositoryConnectionType
		return ret
	}

	return o.ConnectionType
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value
// and a boolean to check if the value has been set.
func (o *ObjectStorageConnectionImportSpec) GetConnectionTypeOk() (*ERepositoryConnectionType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ConnectionType, true
}

// SetConnectionType sets field value
func (o *ObjectStorageConnectionImportSpec) SetConnectionType(v ERepositoryConnectionType) {
	o.ConnectionType = v
}

// GetGatewayServers returns the GatewayServers field value if set, zero value otherwise.
func (o *ObjectStorageConnectionImportSpec) GetGatewayServers() []string {
	if o == nil || isNil(o.GatewayServers) {
		var ret []string
		return ret
	}
	return o.GatewayServers
}

// GetGatewayServersOk returns a tuple with the GatewayServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageConnectionImportSpec) GetGatewayServersOk() ([]string, bool) {
	if o == nil || isNil(o.GatewayServers) {
    return nil, false
	}
	return o.GatewayServers, true
}

// HasGatewayServers returns a boolean if a field has been set.
func (o *ObjectStorageConnectionImportSpec) HasGatewayServers() bool {
	if o != nil && !isNil(o.GatewayServers) {
		return true
	}

	return false
}

// SetGatewayServers gets a reference to the given []string and assigns it to the GatewayServers field.
func (o *ObjectStorageConnectionImportSpec) SetGatewayServers(v []string) {
	o.GatewayServers = v
}

func (o ObjectStorageConnectionImportSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["connectionType"] = o.ConnectionType
	}
	if !isNil(o.GatewayServers) {
		toSerialize["gatewayServers"] = o.GatewayServers
	}
	return json.Marshal(toSerialize)
}

type NullableObjectStorageConnectionImportSpec struct {
	value *ObjectStorageConnectionImportSpec
	isSet bool
}

func (v NullableObjectStorageConnectionImportSpec) Get() *ObjectStorageConnectionImportSpec {
	return v.value
}

func (v *NullableObjectStorageConnectionImportSpec) Set(val *ObjectStorageConnectionImportSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectStorageConnectionImportSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectStorageConnectionImportSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectStorageConnectionImportSpec(val *ObjectStorageConnectionImportSpec) *NullableObjectStorageConnectionImportSpec {
	return &NullableObjectStorageConnectionImportSpec{value: val, isSet: true}
}

func (v NullableObjectStorageConnectionImportSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectStorageConnectionImportSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


