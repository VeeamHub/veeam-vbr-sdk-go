/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// CertificateUploadSpec Certificate settings (for certificate-based authentication).
type CertificateUploadSpec struct {
	// Base64-encoded string of the content of a PFX certificate file.
	Certificate string `json:"certificate"`
	FormatType ECertificateFileFormatType `json:"formatType"`
	// Decryption password for the certificate file.
	Password *string `json:"password,omitempty"`
}

// NewCertificateUploadSpec instantiates a new CertificateUploadSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateUploadSpec(certificate string, formatType ECertificateFileFormatType) *CertificateUploadSpec {
	this := CertificateUploadSpec{}
	this.Certificate = certificate
	this.FormatType = formatType
	return &this
}

// NewCertificateUploadSpecWithDefaults instantiates a new CertificateUploadSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateUploadSpecWithDefaults() *CertificateUploadSpec {
	this := CertificateUploadSpec{}
	return &this
}

// GetCertificate returns the Certificate field value
func (o *CertificateUploadSpec) GetCertificate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value
// and a boolean to check if the value has been set.
func (o *CertificateUploadSpec) GetCertificateOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Certificate, true
}

// SetCertificate sets field value
func (o *CertificateUploadSpec) SetCertificate(v string) {
	o.Certificate = v
}

// GetFormatType returns the FormatType field value
func (o *CertificateUploadSpec) GetFormatType() ECertificateFileFormatType {
	if o == nil {
		var ret ECertificateFileFormatType
		return ret
	}

	return o.FormatType
}

// GetFormatTypeOk returns a tuple with the FormatType field value
// and a boolean to check if the value has been set.
func (o *CertificateUploadSpec) GetFormatTypeOk() (*ECertificateFileFormatType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.FormatType, true
}

// SetFormatType sets field value
func (o *CertificateUploadSpec) SetFormatType(v ECertificateFileFormatType) {
	o.FormatType = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *CertificateUploadSpec) GetPassword() string {
	if o == nil || isNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateUploadSpec) GetPasswordOk() (*string, bool) {
	if o == nil || isNil(o.Password) {
    return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *CertificateUploadSpec) HasPassword() bool {
	if o != nil && !isNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *CertificateUploadSpec) SetPassword(v string) {
	o.Password = &v
}

func (o CertificateUploadSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["certificate"] = o.Certificate
	}
	if true {
		toSerialize["formatType"] = o.FormatType
	}
	if !isNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	return json.Marshal(toSerialize)
}

type NullableCertificateUploadSpec struct {
	value *CertificateUploadSpec
	isSet bool
}

func (v NullableCertificateUploadSpec) Get() *CertificateUploadSpec {
	return v.value
}

func (v *NullableCertificateUploadSpec) Set(val *CertificateUploadSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateUploadSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateUploadSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateUploadSpec(val *CertificateUploadSpec) *NullableCertificateUploadSpec {
	return &NullableCertificateUploadSpec{value: val, isSet: true}
}

func (v NullableCertificateUploadSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateUploadSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


