// Code generated by go-swagger; DO NOT EDIT.

package inventory_browser

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new inventory browser API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for inventory browser API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAllInventoryVmwareHosts(params *GetAllInventoryVmwareHostsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllInventoryVmwareHostsOK, error)

	GetVmwareHostObject(params *GetVmwareHostObjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVmwareHostObjectOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAllInventoryVmwareHosts gets all v mware v sphere servers

  The HTTP GET request to the `/api/v1/inventory/vmware/hosts` path allows you to get an array of all VMware vSphere servers added to the backup infrastructure.
*/
func (a *Client) GetAllInventoryVmwareHosts(params *GetAllInventoryVmwareHostsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllInventoryVmwareHostsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllInventoryVmwareHostsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllInventoryVmwareHosts",
		Method:             "GET",
		PathPattern:        "/api/v1/inventory/vmware/hosts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllInventoryVmwareHostsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllInventoryVmwareHostsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllInventoryVmwareHosts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetVmwareHostObject gets v mware v sphere server objects

  The HTTP GET request to the `/api/v1/inventory/vmware/hosts/{name}` path allows you to get an array of virtual infrastructure objects of the VMware vSphere server that has the specified `name`.
*/
func (a *Client) GetVmwareHostObject(params *GetVmwareHostObjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVmwareHostObjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVmwareHostObjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmwareHostObject",
		Method:             "GET",
		PathPattern:        "/api/v1/inventory/vmware/hosts/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVmwareHostObjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVmwareHostObjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmwareHostObject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
