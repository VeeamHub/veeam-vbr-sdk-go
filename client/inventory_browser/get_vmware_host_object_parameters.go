// Code generated by go-swagger; DO NOT EDIT.

package inventory_browser

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetVmwareHostObjectParams creates a new GetVmwareHostObjectParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetVmwareHostObjectParams() *GetVmwareHostObjectParams {
	return &GetVmwareHostObjectParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetVmwareHostObjectParamsWithTimeout creates a new GetVmwareHostObjectParams object
// with the ability to set a timeout on a request.
func NewGetVmwareHostObjectParamsWithTimeout(timeout time.Duration) *GetVmwareHostObjectParams {
	return &GetVmwareHostObjectParams{
		timeout: timeout,
	}
}

// NewGetVmwareHostObjectParamsWithContext creates a new GetVmwareHostObjectParams object
// with the ability to set a context for a request.
func NewGetVmwareHostObjectParamsWithContext(ctx context.Context) *GetVmwareHostObjectParams {
	return &GetVmwareHostObjectParams{
		Context: ctx,
	}
}

// NewGetVmwareHostObjectParamsWithHTTPClient creates a new GetVmwareHostObjectParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetVmwareHostObjectParamsWithHTTPClient(client *http.Client) *GetVmwareHostObjectParams {
	return &GetVmwareHostObjectParams{
		HTTPClient: client,
	}
}

/* GetVmwareHostObjectParams contains all the parameters to send to the API endpoint
   for the get vmware host object operation.

   Typically these are written to a http.Request.
*/
type GetVmwareHostObjectParams struct {

	/* HierarchyTypeFilter.

	   Filters objects by hierarchy type.
	*/
	HierarchyTypeFilter *string

	/* Limit.

	   Maximum number of objects to return.

	   Format: int32
	*/
	Limit *int32

	/* Name.

	   Name of the VMware vSphere server.
	*/
	Name string

	/* NameFilter.

	   Filters objects by the `nameFilter` pattern. The pattern can match any object parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	*/
	NameFilter *string

	/* ObjectIDFilter.

	   Filters objects by object ID.
	*/
	ObjectIDFilter *string

	/* OrderAsc.

	   Sorts objects in the ascending order by the `orderColumn` parameter.
	*/
	OrderAsc *bool

	/* OrderColumn.

	   Sorts objects by one of the object parameters.
	*/
	OrderColumn *string

	/* ParentContainerNameFilter.

	   Filters objects by name of the parent container.
	*/
	ParentContainerNameFilter *string

	/* Skip.

	   Number of objects to skip.

	   Format: int32
	*/
	Skip *int32

	/* TypeFilter.

	   Filters objects by virtual infrastructure type.
	*/
	TypeFilter *string

	/* XAPIVersion.

	     Version and revision of the client REST API. Must be in the following
	format: *\<version\>-\<revision\>*.


	     Default: "1.0-rev1"
	*/
	XAPIVersion string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get vmware host object params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetVmwareHostObjectParams) WithDefaults() *GetVmwareHostObjectParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get vmware host object params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetVmwareHostObjectParams) SetDefaults() {
	var (
		xAPIVersionDefault = string("1.0-rev1")
	)

	val := GetVmwareHostObjectParams{
		XAPIVersion: xAPIVersionDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get vmware host object params
func (o *GetVmwareHostObjectParams) WithTimeout(timeout time.Duration) *GetVmwareHostObjectParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get vmware host object params
func (o *GetVmwareHostObjectParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get vmware host object params
func (o *GetVmwareHostObjectParams) WithContext(ctx context.Context) *GetVmwareHostObjectParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get vmware host object params
func (o *GetVmwareHostObjectParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get vmware host object params
func (o *GetVmwareHostObjectParams) WithHTTPClient(client *http.Client) *GetVmwareHostObjectParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get vmware host object params
func (o *GetVmwareHostObjectParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHierarchyTypeFilter adds the hierarchyTypeFilter to the get vmware host object params
func (o *GetVmwareHostObjectParams) WithHierarchyTypeFilter(hierarchyTypeFilter *string) *GetVmwareHostObjectParams {
	o.SetHierarchyTypeFilter(hierarchyTypeFilter)
	return o
}

// SetHierarchyTypeFilter adds the hierarchyTypeFilter to the get vmware host object params
func (o *GetVmwareHostObjectParams) SetHierarchyTypeFilter(hierarchyTypeFilter *string) {
	o.HierarchyTypeFilter = hierarchyTypeFilter
}

// WithLimit adds the limit to the get vmware host object params
func (o *GetVmwareHostObjectParams) WithLimit(limit *int32) *GetVmwareHostObjectParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get vmware host object params
func (o *GetVmwareHostObjectParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithName adds the name to the get vmware host object params
func (o *GetVmwareHostObjectParams) WithName(name string) *GetVmwareHostObjectParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get vmware host object params
func (o *GetVmwareHostObjectParams) SetName(name string) {
	o.Name = name
}

// WithNameFilter adds the nameFilter to the get vmware host object params
func (o *GetVmwareHostObjectParams) WithNameFilter(nameFilter *string) *GetVmwareHostObjectParams {
	o.SetNameFilter(nameFilter)
	return o
}

// SetNameFilter adds the nameFilter to the get vmware host object params
func (o *GetVmwareHostObjectParams) SetNameFilter(nameFilter *string) {
	o.NameFilter = nameFilter
}

// WithObjectIDFilter adds the objectIDFilter to the get vmware host object params
func (o *GetVmwareHostObjectParams) WithObjectIDFilter(objectIDFilter *string) *GetVmwareHostObjectParams {
	o.SetObjectIDFilter(objectIDFilter)
	return o
}

// SetObjectIDFilter adds the objectIdFilter to the get vmware host object params
func (o *GetVmwareHostObjectParams) SetObjectIDFilter(objectIDFilter *string) {
	o.ObjectIDFilter = objectIDFilter
}

// WithOrderAsc adds the orderAsc to the get vmware host object params
func (o *GetVmwareHostObjectParams) WithOrderAsc(orderAsc *bool) *GetVmwareHostObjectParams {
	o.SetOrderAsc(orderAsc)
	return o
}

// SetOrderAsc adds the orderAsc to the get vmware host object params
func (o *GetVmwareHostObjectParams) SetOrderAsc(orderAsc *bool) {
	o.OrderAsc = orderAsc
}

// WithOrderColumn adds the orderColumn to the get vmware host object params
func (o *GetVmwareHostObjectParams) WithOrderColumn(orderColumn *string) *GetVmwareHostObjectParams {
	o.SetOrderColumn(orderColumn)
	return o
}

// SetOrderColumn adds the orderColumn to the get vmware host object params
func (o *GetVmwareHostObjectParams) SetOrderColumn(orderColumn *string) {
	o.OrderColumn = orderColumn
}

// WithParentContainerNameFilter adds the parentContainerNameFilter to the get vmware host object params
func (o *GetVmwareHostObjectParams) WithParentContainerNameFilter(parentContainerNameFilter *string) *GetVmwareHostObjectParams {
	o.SetParentContainerNameFilter(parentContainerNameFilter)
	return o
}

// SetParentContainerNameFilter adds the parentContainerNameFilter to the get vmware host object params
func (o *GetVmwareHostObjectParams) SetParentContainerNameFilter(parentContainerNameFilter *string) {
	o.ParentContainerNameFilter = parentContainerNameFilter
}

// WithSkip adds the skip to the get vmware host object params
func (o *GetVmwareHostObjectParams) WithSkip(skip *int32) *GetVmwareHostObjectParams {
	o.SetSkip(skip)
	return o
}

// SetSkip adds the skip to the get vmware host object params
func (o *GetVmwareHostObjectParams) SetSkip(skip *int32) {
	o.Skip = skip
}

// WithTypeFilter adds the typeFilter to the get vmware host object params
func (o *GetVmwareHostObjectParams) WithTypeFilter(typeFilter *string) *GetVmwareHostObjectParams {
	o.SetTypeFilter(typeFilter)
	return o
}

// SetTypeFilter adds the typeFilter to the get vmware host object params
func (o *GetVmwareHostObjectParams) SetTypeFilter(typeFilter *string) {
	o.TypeFilter = typeFilter
}

// WithXAPIVersion adds the xAPIVersion to the get vmware host object params
func (o *GetVmwareHostObjectParams) WithXAPIVersion(xAPIVersion string) *GetVmwareHostObjectParams {
	o.SetXAPIVersion(xAPIVersion)
	return o
}

// SetXAPIVersion adds the xApiVersion to the get vmware host object params
func (o *GetVmwareHostObjectParams) SetXAPIVersion(xAPIVersion string) {
	o.XAPIVersion = xAPIVersion
}

// WriteToRequest writes these params to a swagger request
func (o *GetVmwareHostObjectParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.HierarchyTypeFilter != nil {

		// query param hierarchyTypeFilter
		var qrHierarchyTypeFilter string

		if o.HierarchyTypeFilter != nil {
			qrHierarchyTypeFilter = *o.HierarchyTypeFilter
		}
		qHierarchyTypeFilter := qrHierarchyTypeFilter
		if qHierarchyTypeFilter != "" {

			if err := r.SetQueryParam("hierarchyTypeFilter", qHierarchyTypeFilter); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.NameFilter != nil {

		// query param nameFilter
		var qrNameFilter string

		if o.NameFilter != nil {
			qrNameFilter = *o.NameFilter
		}
		qNameFilter := qrNameFilter
		if qNameFilter != "" {

			if err := r.SetQueryParam("nameFilter", qNameFilter); err != nil {
				return err
			}
		}
	}

	if o.ObjectIDFilter != nil {

		// query param objectIdFilter
		var qrObjectIDFilter string

		if o.ObjectIDFilter != nil {
			qrObjectIDFilter = *o.ObjectIDFilter
		}
		qObjectIDFilter := qrObjectIDFilter
		if qObjectIDFilter != "" {

			if err := r.SetQueryParam("objectIdFilter", qObjectIDFilter); err != nil {
				return err
			}
		}
	}

	if o.OrderAsc != nil {

		// query param orderAsc
		var qrOrderAsc bool

		if o.OrderAsc != nil {
			qrOrderAsc = *o.OrderAsc
		}
		qOrderAsc := swag.FormatBool(qrOrderAsc)
		if qOrderAsc != "" {

			if err := r.SetQueryParam("orderAsc", qOrderAsc); err != nil {
				return err
			}
		}
	}

	if o.OrderColumn != nil {

		// query param orderColumn
		var qrOrderColumn string

		if o.OrderColumn != nil {
			qrOrderColumn = *o.OrderColumn
		}
		qOrderColumn := qrOrderColumn
		if qOrderColumn != "" {

			if err := r.SetQueryParam("orderColumn", qOrderColumn); err != nil {
				return err
			}
		}
	}

	if o.ParentContainerNameFilter != nil {

		// query param parentContainerNameFilter
		var qrParentContainerNameFilter string

		if o.ParentContainerNameFilter != nil {
			qrParentContainerNameFilter = *o.ParentContainerNameFilter
		}
		qParentContainerNameFilter := qrParentContainerNameFilter
		if qParentContainerNameFilter != "" {

			if err := r.SetQueryParam("parentContainerNameFilter", qParentContainerNameFilter); err != nil {
				return err
			}
		}
	}

	if o.Skip != nil {

		// query param skip
		var qrSkip int32

		if o.Skip != nil {
			qrSkip = *o.Skip
		}
		qSkip := swag.FormatInt32(qrSkip)
		if qSkip != "" {

			if err := r.SetQueryParam("skip", qSkip); err != nil {
				return err
			}
		}
	}

	if o.TypeFilter != nil {

		// query param typeFilter
		var qrTypeFilter string

		if o.TypeFilter != nil {
			qrTypeFilter = *o.TypeFilter
		}
		qTypeFilter := qrTypeFilter
		if qTypeFilter != "" {

			if err := r.SetQueryParam("typeFilter", qTypeFilter); err != nil {
				return err
			}
		}
	}

	// header param x-api-version
	if err := r.SetHeaderParam("x-api-version", o.XAPIVersion); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
