/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// EApplicationSettingsVSS Behavior scenario for application-aware processing.
type EApplicationSettingsVSS string

// List of EApplicationSettingsVSS
const (
	EAPPLICATIONSETTINGSVSS_REQUIRE_SUCCESS EApplicationSettingsVSS = "requireSuccess"
	EAPPLICATIONSETTINGSVSS_IGNORE_FAILURES EApplicationSettingsVSS = "ignoreFailures"
	EAPPLICATIONSETTINGSVSS_DISABLED EApplicationSettingsVSS = "disabled"
)

// All allowed values of EApplicationSettingsVSS enum
var AllowedEApplicationSettingsVSSEnumValues = []EApplicationSettingsVSS{
	"requireSuccess",
	"ignoreFailures",
	"disabled",
}

func (v *EApplicationSettingsVSS) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EApplicationSettingsVSS(value)
	for _, existing := range AllowedEApplicationSettingsVSSEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EApplicationSettingsVSS", value)
}

// NewEApplicationSettingsVSSFromValue returns a pointer to a valid EApplicationSettingsVSS
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEApplicationSettingsVSSFromValue(v string) (*EApplicationSettingsVSS, error) {
	ev := EApplicationSettingsVSS(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EApplicationSettingsVSS: valid values are %v", v, AllowedEApplicationSettingsVSSEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EApplicationSettingsVSS) IsValid() bool {
	for _, existing := range AllowedEApplicationSettingsVSSEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EApplicationSettingsVSS value
func (v EApplicationSettingsVSS) Ptr() *EApplicationSettingsVSS {
	return &v
}

type NullableEApplicationSettingsVSS struct {
	value *EApplicationSettingsVSS
	isSet bool
}

func (v NullableEApplicationSettingsVSS) Get() *EApplicationSettingsVSS {
	return v.value
}

func (v *NullableEApplicationSettingsVSS) Set(val *EApplicationSettingsVSS) {
	v.value = val
	v.isSet = true
}

func (v NullableEApplicationSettingsVSS) IsSet() bool {
	return v.isSet
}

func (v *NullableEApplicationSettingsVSS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEApplicationSettingsVSS(val *EApplicationSettingsVSS) *NullableEApplicationSettingsVSS {
	return &NullableEApplicationSettingsVSS{value: val, isSet: true}
}

func (v NullableEApplicationSettingsVSS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEApplicationSettingsVSS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

