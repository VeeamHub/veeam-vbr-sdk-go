/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// CloudHelperApplianceSpec - Helper appliance settings.
type CloudHelperApplianceSpec struct {
	AzureLinuxHelperApplianceSpec *AzureLinuxHelperApplianceSpec
}

// AzureLinuxHelperApplianceSpecAsCloudHelperApplianceSpec is a convenience function that returns AzureLinuxHelperApplianceSpec wrapped in CloudHelperApplianceSpec
func AzureLinuxHelperApplianceSpecAsCloudHelperApplianceSpec(v *AzureLinuxHelperApplianceSpec) CloudHelperApplianceSpec {
	return CloudHelperApplianceSpec{
		AzureLinuxHelperApplianceSpec: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CloudHelperApplianceSpec) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AzureLinuxHelperApplianceSpec
	err = newStrictDecoder(data).Decode(&dst.AzureLinuxHelperApplianceSpec)
	if err == nil {
		jsonAzureLinuxHelperApplianceSpec, _ := json.Marshal(dst.AzureLinuxHelperApplianceSpec)
		if string(jsonAzureLinuxHelperApplianceSpec) == "{}" { // empty struct
			dst.AzureLinuxHelperApplianceSpec = nil
		} else {
			match++
		}
	} else {
		dst.AzureLinuxHelperApplianceSpec = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AzureLinuxHelperApplianceSpec = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CloudHelperApplianceSpec)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CloudHelperApplianceSpec)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CloudHelperApplianceSpec) MarshalJSON() ([]byte, error) {
	if src.AzureLinuxHelperApplianceSpec != nil {
		return json.Marshal(&src.AzureLinuxHelperApplianceSpec)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CloudHelperApplianceSpec) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AzureLinuxHelperApplianceSpec != nil {
		return obj.AzureLinuxHelperApplianceSpec
	}

	// all schemas are nil
	return nil
}

type NullableCloudHelperApplianceSpec struct {
	value *CloudHelperApplianceSpec
	isSet bool
}

func (v NullableCloudHelperApplianceSpec) Get() *CloudHelperApplianceSpec {
	return v.value
}

func (v *NullableCloudHelperApplianceSpec) Set(val *CloudHelperApplianceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudHelperApplianceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudHelperApplianceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudHelperApplianceSpec(val *CloudHelperApplianceSpec) *NullableCloudHelperApplianceSpec {
	return &NullableCloudHelperApplianceSpec{value: val, isSet: true}
}

func (v NullableCloudHelperApplianceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudHelperApplianceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


