/*
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic. 
 *
 * API version: 1.0-rev2
 * Contact: support@veeam.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// MountServerSettingsModel Settings for the mount server that is used for file-level and application items restore.
type MountServerSettingsModel struct {
	// ID of the mount server.
	MountServerId string `json:"mountServerId"`
	// Path to the folder used for writing cache during mount operations.
	WriteCacheFolder string `json:"writeCacheFolder"`
	// If *true*, the vPower NFS Service is enabled on the mount server.
	VPowerNFSEnabled bool `json:"vPowerNFSEnabled"`
	VPowerNFSPortSettings *VPowerNFSPortSettingsModel `json:"vPowerNFSPortSettings,omitempty"`
}

// NewMountServerSettingsModel instantiates a new MountServerSettingsModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMountServerSettingsModel(mountServerId string, writeCacheFolder string, vPowerNFSEnabled bool, ) *MountServerSettingsModel {
	this := MountServerSettingsModel{}
	this.MountServerId = mountServerId
	this.WriteCacheFolder = writeCacheFolder
	this.VPowerNFSEnabled = vPowerNFSEnabled
	return &this
}

// NewMountServerSettingsModelWithDefaults instantiates a new MountServerSettingsModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMountServerSettingsModelWithDefaults() *MountServerSettingsModel {
	this := MountServerSettingsModel{}
	return &this
}

// GetMountServerId returns the MountServerId field value
func (o *MountServerSettingsModel) GetMountServerId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.MountServerId
}

// GetMountServerIdOk returns a tuple with the MountServerId field value
// and a boolean to check if the value has been set.
func (o *MountServerSettingsModel) GetMountServerIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MountServerId, true
}

// SetMountServerId sets field value
func (o *MountServerSettingsModel) SetMountServerId(v string) {
	o.MountServerId = v
}

// GetWriteCacheFolder returns the WriteCacheFolder field value
func (o *MountServerSettingsModel) GetWriteCacheFolder() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.WriteCacheFolder
}

// GetWriteCacheFolderOk returns a tuple with the WriteCacheFolder field value
// and a boolean to check if the value has been set.
func (o *MountServerSettingsModel) GetWriteCacheFolderOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WriteCacheFolder, true
}

// SetWriteCacheFolder sets field value
func (o *MountServerSettingsModel) SetWriteCacheFolder(v string) {
	o.WriteCacheFolder = v
}

// GetVPowerNFSEnabled returns the VPowerNFSEnabled field value
func (o *MountServerSettingsModel) GetVPowerNFSEnabled() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.VPowerNFSEnabled
}

// GetVPowerNFSEnabledOk returns a tuple with the VPowerNFSEnabled field value
// and a boolean to check if the value has been set.
func (o *MountServerSettingsModel) GetVPowerNFSEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.VPowerNFSEnabled, true
}

// SetVPowerNFSEnabled sets field value
func (o *MountServerSettingsModel) SetVPowerNFSEnabled(v bool) {
	o.VPowerNFSEnabled = v
}

// GetVPowerNFSPortSettings returns the VPowerNFSPortSettings field value if set, zero value otherwise.
func (o *MountServerSettingsModel) GetVPowerNFSPortSettings() VPowerNFSPortSettingsModel {
	if o == nil || o.VPowerNFSPortSettings == nil {
		var ret VPowerNFSPortSettingsModel
		return ret
	}
	return *o.VPowerNFSPortSettings
}

// GetVPowerNFSPortSettingsOk returns a tuple with the VPowerNFSPortSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MountServerSettingsModel) GetVPowerNFSPortSettingsOk() (*VPowerNFSPortSettingsModel, bool) {
	if o == nil || o.VPowerNFSPortSettings == nil {
		return nil, false
	}
	return o.VPowerNFSPortSettings, true
}

// HasVPowerNFSPortSettings returns a boolean if a field has been set.
func (o *MountServerSettingsModel) HasVPowerNFSPortSettings() bool {
	if o != nil && o.VPowerNFSPortSettings != nil {
		return true
	}

	return false
}

// SetVPowerNFSPortSettings gets a reference to the given VPowerNFSPortSettingsModel and assigns it to the VPowerNFSPortSettings field.
func (o *MountServerSettingsModel) SetVPowerNFSPortSettings(v VPowerNFSPortSettingsModel) {
	o.VPowerNFSPortSettings = &v
}

func (o MountServerSettingsModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["mountServerId"] = o.MountServerId
	}
	if true {
		toSerialize["writeCacheFolder"] = o.WriteCacheFolder
	}
	if true {
		toSerialize["vPowerNFSEnabled"] = o.VPowerNFSEnabled
	}
	if o.VPowerNFSPortSettings != nil {
		toSerialize["vPowerNFSPortSettings"] = o.VPowerNFSPortSettings
	}
	return json.Marshal(toSerialize)
}

type NullableMountServerSettingsModel struct {
	value *MountServerSettingsModel
	isSet bool
}

func (v NullableMountServerSettingsModel) Get() *MountServerSettingsModel {
	return v.value
}

func (v *NullableMountServerSettingsModel) Set(val *MountServerSettingsModel) {
	v.value = val
	v.isSet = true
}

func (v NullableMountServerSettingsModel) IsSet() bool {
	return v.isSet
}

func (v *NullableMountServerSettingsModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMountServerSettingsModel(val *MountServerSettingsModel) *NullableMountServerSettingsModel {
	return &NullableMountServerSettingsModel{value: val, isSet: true}
}

func (v NullableMountServerSettingsModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMountServerSettingsModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


