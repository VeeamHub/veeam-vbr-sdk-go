// Code generated by go-swagger; DO NOT EDIT.

package proxies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/veeamhub/veeam-vbr-sdk-go/models"
)

// GetProxyReader is a Reader for the GetProxy structure.
type GetProxyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProxyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetProxyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetProxyUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetProxyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetProxyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetProxyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetProxyOK creates a GetProxyOK with default headers values
func NewGetProxyOK() *GetProxyOK {
	return &GetProxyOK{}
}

/* GetProxyOK describes a response with status code 200, with default header values.

OK
*/
type GetProxyOK struct {
	Payload *models.ProxyModel
}

func (o *GetProxyOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/backupInfrastructure/proxies/{id}][%d] getProxyOK  %+v", 200, o.Payload)
}
func (o *GetProxyOK) GetPayload() *models.ProxyModel {
	return o.Payload
}

func (o *GetProxyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProxyModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProxyUnauthorized creates a GetProxyUnauthorized with default headers values
func NewGetProxyUnauthorized() *GetProxyUnauthorized {
	return &GetProxyUnauthorized{}
}

/* GetProxyUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The authorization header has been expected but not found (or found but is expired).
*/
type GetProxyUnauthorized struct {
	Payload *models.Error
}

func (o *GetProxyUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/backupInfrastructure/proxies/{id}][%d] getProxyUnauthorized  %+v", 401, o.Payload)
}
func (o *GetProxyUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetProxyUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProxyForbidden creates a GetProxyForbidden with default headers values
func NewGetProxyForbidden() *GetProxyForbidden {
	return &GetProxyForbidden{}
}

/* GetProxyForbidden describes a response with status code 403, with default header values.

Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.
*/
type GetProxyForbidden struct {
	Payload *models.Error
}

func (o *GetProxyForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/backupInfrastructure/proxies/{id}][%d] getProxyForbidden  %+v", 403, o.Payload)
}
func (o *GetProxyForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetProxyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProxyNotFound creates a GetProxyNotFound with default headers values
func NewGetProxyNotFound() *GetProxyNotFound {
	return &GetProxyNotFound{}
}

/* GetProxyNotFound describes a response with status code 404, with default header values.

Not found. No object was found with the path parameter specified in the request.
*/
type GetProxyNotFound struct {
	Payload *models.Error
}

func (o *GetProxyNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/backupInfrastructure/proxies/{id}][%d] getProxyNotFound  %+v", 404, o.Payload)
}
func (o *GetProxyNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetProxyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProxyInternalServerError creates a GetProxyInternalServerError with default headers values
func NewGetProxyInternalServerError() *GetProxyInternalServerError {
	return &GetProxyInternalServerError{}
}

/* GetProxyInternalServerError describes a response with status code 500, with default header values.

Internal server error. The request has been received but could not be completed because of an internal error at the server side.
*/
type GetProxyInternalServerError struct {
	Payload *models.Error
}

func (o *GetProxyInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/backupInfrastructure/proxies/{id}][%d] getProxyInternalServerError  %+v", 500, o.Payload)
}
func (o *GetProxyInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetProxyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
