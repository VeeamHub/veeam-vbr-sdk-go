// Code generated by go-swagger; DO NOT EDIT.

package proxies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new proxies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for proxies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateProxy(params *CreateProxyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProxyCreated, error)

	DeleteProxy(params *DeleteProxyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProxyNoContent, error)

	GetAllProxies(params *GetAllProxiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllProxiesOK, error)

	GetProxy(params *GetProxyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProxyOK, error)

	UpdateProxy(params *UpdateProxyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProxyCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateProxy adds proxy

  The HTTP POST request to the `/api/v1/backupInfrastructure/proxies` path allows you to add a proxy to the backup infrastructure.
*/
func (a *Client) CreateProxy(params *CreateProxyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateProxy",
		Method:             "POST",
		PathPattern:        "/api/v1/backupInfrastructure/proxies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateProxyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteProxy removes proxy

  The HTTP DELETE request to the `/api/v1/backupInfrastructure/proxies/{id}` path allows you to remove a backup proxy that has the specified `id` from the backup infrastructure.
*/
func (a *Client) DeleteProxy(params *DeleteProxyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProxyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProxy",
		Method:             "DELETE",
		PathPattern:        "/api/v1/backupInfrastructure/proxies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProxyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProxyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllProxies gets all proxies

  The HTTP GET request to the `/api/v1/backupInfrastructure/proxies` path allows you to get an array of all backup proxies that are added to the backup infrastructure.
*/
func (a *Client) GetAllProxies(params *GetAllProxiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllProxiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllProxiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllProxies",
		Method:             "GET",
		PathPattern:        "/api/v1/backupInfrastructure/proxies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllProxiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllProxiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllProxies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProxy gets proxy

  The HTTP GET request to the `/api/v1/backupInfrastructure/proxies/{id}` path allows you to get a backup proxy that has the specified `id`.
*/
func (a *Client) GetProxy(params *GetProxyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProxyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProxy",
		Method:             "GET",
		PathPattern:        "/api/v1/backupInfrastructure/proxies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProxyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProxyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateProxy edits proxy

  The HTTP PUT request to the `/api/v1/backupInfrastructure/proxies/{id}` path allows you to edit a backup proxy that has the specified `id`.
*/
func (a *Client) UpdateProxy(params *UpdateProxyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProxyCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProxyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateProxy",
		Method:             "PUT",
		PathPattern:        "/api/v1/backupInfrastructure/proxies/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProxyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProxyCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateProxy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
