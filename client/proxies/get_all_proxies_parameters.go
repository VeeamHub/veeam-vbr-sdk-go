// Code generated by go-swagger; DO NOT EDIT.

package proxies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAllProxiesParams creates a new GetAllProxiesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAllProxiesParams() *GetAllProxiesParams {
	return &GetAllProxiesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllProxiesParamsWithTimeout creates a new GetAllProxiesParams object
// with the ability to set a timeout on a request.
func NewGetAllProxiesParamsWithTimeout(timeout time.Duration) *GetAllProxiesParams {
	return &GetAllProxiesParams{
		timeout: timeout,
	}
}

// NewGetAllProxiesParamsWithContext creates a new GetAllProxiesParams object
// with the ability to set a context for a request.
func NewGetAllProxiesParamsWithContext(ctx context.Context) *GetAllProxiesParams {
	return &GetAllProxiesParams{
		Context: ctx,
	}
}

// NewGetAllProxiesParamsWithHTTPClient creates a new GetAllProxiesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAllProxiesParamsWithHTTPClient(client *http.Client) *GetAllProxiesParams {
	return &GetAllProxiesParams{
		HTTPClient: client,
	}
}

/* GetAllProxiesParams contains all the parameters to send to the API endpoint
   for the get all proxies operation.

   Typically these are written to a http.Request.
*/
type GetAllProxiesParams struct {

	/* HostIDFilter.

	   Filters proxies by ID of the backup server.

	   Format: uuid
	*/
	HostIDFilter *strfmt.UUID

	/* Limit.

	   Maximum number of proxies to return.

	   Format: int32
	*/
	Limit *int32

	/* NameFilter.

	   Filters proxies by the `nameFilter` pattern. The pattern can match any proxy parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	*/
	NameFilter *string

	/* OrderAsc.

	   Sorts proxies in the ascending order by the `orderColumn` parameter.
	*/
	OrderAsc *bool

	/* OrderColumn.

	   Sorts proxies by one of the proxy parameters.
	*/
	OrderColumn *string

	/* Skip.

	   Number of proxies to skip.

	   Format: int32
	*/
	Skip *int32

	/* TypeFilter.

	   Filters proxies by proxy type.
	*/
	TypeFilter *string

	/* XAPIVersion.

	     Version and revision of the client REST API. Must be in the following
	format: *\<version\>-\<revision\>*.


	     Default: "1.0-rev1"
	*/
	XAPIVersion string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get all proxies params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllProxiesParams) WithDefaults() *GetAllProxiesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get all proxies params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllProxiesParams) SetDefaults() {
	var (
		xAPIVersionDefault = string("1.0-rev1")
	)

	val := GetAllProxiesParams{
		XAPIVersion: xAPIVersionDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get all proxies params
func (o *GetAllProxiesParams) WithTimeout(timeout time.Duration) *GetAllProxiesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all proxies params
func (o *GetAllProxiesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all proxies params
func (o *GetAllProxiesParams) WithContext(ctx context.Context) *GetAllProxiesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all proxies params
func (o *GetAllProxiesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all proxies params
func (o *GetAllProxiesParams) WithHTTPClient(client *http.Client) *GetAllProxiesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all proxies params
func (o *GetAllProxiesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHostIDFilter adds the hostIDFilter to the get all proxies params
func (o *GetAllProxiesParams) WithHostIDFilter(hostIDFilter *strfmt.UUID) *GetAllProxiesParams {
	o.SetHostIDFilter(hostIDFilter)
	return o
}

// SetHostIDFilter adds the hostIdFilter to the get all proxies params
func (o *GetAllProxiesParams) SetHostIDFilter(hostIDFilter *strfmt.UUID) {
	o.HostIDFilter = hostIDFilter
}

// WithLimit adds the limit to the get all proxies params
func (o *GetAllProxiesParams) WithLimit(limit *int32) *GetAllProxiesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get all proxies params
func (o *GetAllProxiesParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithNameFilter adds the nameFilter to the get all proxies params
func (o *GetAllProxiesParams) WithNameFilter(nameFilter *string) *GetAllProxiesParams {
	o.SetNameFilter(nameFilter)
	return o
}

// SetNameFilter adds the nameFilter to the get all proxies params
func (o *GetAllProxiesParams) SetNameFilter(nameFilter *string) {
	o.NameFilter = nameFilter
}

// WithOrderAsc adds the orderAsc to the get all proxies params
func (o *GetAllProxiesParams) WithOrderAsc(orderAsc *bool) *GetAllProxiesParams {
	o.SetOrderAsc(orderAsc)
	return o
}

// SetOrderAsc adds the orderAsc to the get all proxies params
func (o *GetAllProxiesParams) SetOrderAsc(orderAsc *bool) {
	o.OrderAsc = orderAsc
}

// WithOrderColumn adds the orderColumn to the get all proxies params
func (o *GetAllProxiesParams) WithOrderColumn(orderColumn *string) *GetAllProxiesParams {
	o.SetOrderColumn(orderColumn)
	return o
}

// SetOrderColumn adds the orderColumn to the get all proxies params
func (o *GetAllProxiesParams) SetOrderColumn(orderColumn *string) {
	o.OrderColumn = orderColumn
}

// WithSkip adds the skip to the get all proxies params
func (o *GetAllProxiesParams) WithSkip(skip *int32) *GetAllProxiesParams {
	o.SetSkip(skip)
	return o
}

// SetSkip adds the skip to the get all proxies params
func (o *GetAllProxiesParams) SetSkip(skip *int32) {
	o.Skip = skip
}

// WithTypeFilter adds the typeFilter to the get all proxies params
func (o *GetAllProxiesParams) WithTypeFilter(typeFilter *string) *GetAllProxiesParams {
	o.SetTypeFilter(typeFilter)
	return o
}

// SetTypeFilter adds the typeFilter to the get all proxies params
func (o *GetAllProxiesParams) SetTypeFilter(typeFilter *string) {
	o.TypeFilter = typeFilter
}

// WithXAPIVersion adds the xAPIVersion to the get all proxies params
func (o *GetAllProxiesParams) WithXAPIVersion(xAPIVersion string) *GetAllProxiesParams {
	o.SetXAPIVersion(xAPIVersion)
	return o
}

// SetXAPIVersion adds the xApiVersion to the get all proxies params
func (o *GetAllProxiesParams) SetXAPIVersion(xAPIVersion string) {
	o.XAPIVersion = xAPIVersion
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllProxiesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.HostIDFilter != nil {

		// query param hostIdFilter
		var qrHostIDFilter strfmt.UUID

		if o.HostIDFilter != nil {
			qrHostIDFilter = *o.HostIDFilter
		}
		qHostIDFilter := qrHostIDFilter.String()
		if qHostIDFilter != "" {

			if err := r.SetQueryParam("hostIdFilter", qHostIDFilter); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.NameFilter != nil {

		// query param nameFilter
		var qrNameFilter string

		if o.NameFilter != nil {
			qrNameFilter = *o.NameFilter
		}
		qNameFilter := qrNameFilter
		if qNameFilter != "" {

			if err := r.SetQueryParam("nameFilter", qNameFilter); err != nil {
				return err
			}
		}
	}

	if o.OrderAsc != nil {

		// query param orderAsc
		var qrOrderAsc bool

		if o.OrderAsc != nil {
			qrOrderAsc = *o.OrderAsc
		}
		qOrderAsc := swag.FormatBool(qrOrderAsc)
		if qOrderAsc != "" {

			if err := r.SetQueryParam("orderAsc", qOrderAsc); err != nil {
				return err
			}
		}
	}

	if o.OrderColumn != nil {

		// query param orderColumn
		var qrOrderColumn string

		if o.OrderColumn != nil {
			qrOrderColumn = *o.OrderColumn
		}
		qOrderColumn := qrOrderColumn
		if qOrderColumn != "" {

			if err := r.SetQueryParam("orderColumn", qOrderColumn); err != nil {
				return err
			}
		}
	}

	if o.Skip != nil {

		// query param skip
		var qrSkip int32

		if o.Skip != nil {
			qrSkip = *o.Skip
		}
		qSkip := swag.FormatInt32(qrSkip)
		if qSkip != "" {

			if err := r.SetQueryParam("skip", qSkip); err != nil {
				return err
			}
		}
	}

	if o.TypeFilter != nil {

		// query param typeFilter
		var qrTypeFilter string

		if o.TypeFilter != nil {
			qrTypeFilter = *o.TypeFilter
		}
		qTypeFilter := qrTypeFilter
		if qTypeFilter != "" {

			if err := r.SetQueryParam("typeFilter", qTypeFilter); err != nil {
				return err
			}
		}
	}

	// header param x-api-version
	if err := r.SetHeaderParam("x-api-version", o.XAPIVersion); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
