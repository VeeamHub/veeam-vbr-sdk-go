/*
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic. 
 *
 * API version: 1.0-rev1
 * Contact: support@veeam.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ManageServerImportSpecCollection struct for ManageServerImportSpecCollection
type ManageServerImportSpecCollection struct {
	// Array of managed Microsoft Windows servers.
	WindowsHosts *[]WindowsHostImportSpec `json:"windowsHosts,omitempty"`
	// Array of managed Linux servers.
	LinuxHosts *[]LinuxHostImportSpec `json:"linuxHosts,omitempty"`
	// Array of VMware vSphere servers.
	ViHosts *[]ViHostImportSpec `json:"viHosts,omitempty"`
}

// NewManageServerImportSpecCollection instantiates a new ManageServerImportSpecCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManageServerImportSpecCollection() *ManageServerImportSpecCollection {
	this := ManageServerImportSpecCollection{}
	return &this
}

// NewManageServerImportSpecCollectionWithDefaults instantiates a new ManageServerImportSpecCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManageServerImportSpecCollectionWithDefaults() *ManageServerImportSpecCollection {
	this := ManageServerImportSpecCollection{}
	return &this
}

// GetWindowsHosts returns the WindowsHosts field value if set, zero value otherwise.
func (o *ManageServerImportSpecCollection) GetWindowsHosts() []WindowsHostImportSpec {
	if o == nil || o.WindowsHosts == nil {
		var ret []WindowsHostImportSpec
		return ret
	}
	return *o.WindowsHosts
}

// GetWindowsHostsOk returns a tuple with the WindowsHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageServerImportSpecCollection) GetWindowsHostsOk() (*[]WindowsHostImportSpec, bool) {
	if o == nil || o.WindowsHosts == nil {
		return nil, false
	}
	return o.WindowsHosts, true
}

// HasWindowsHosts returns a boolean if a field has been set.
func (o *ManageServerImportSpecCollection) HasWindowsHosts() bool {
	if o != nil && o.WindowsHosts != nil {
		return true
	}

	return false
}

// SetWindowsHosts gets a reference to the given []WindowsHostImportSpec and assigns it to the WindowsHosts field.
func (o *ManageServerImportSpecCollection) SetWindowsHosts(v []WindowsHostImportSpec) {
	o.WindowsHosts = &v
}

// GetLinuxHosts returns the LinuxHosts field value if set, zero value otherwise.
func (o *ManageServerImportSpecCollection) GetLinuxHosts() []LinuxHostImportSpec {
	if o == nil || o.LinuxHosts == nil {
		var ret []LinuxHostImportSpec
		return ret
	}
	return *o.LinuxHosts
}

// GetLinuxHostsOk returns a tuple with the LinuxHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageServerImportSpecCollection) GetLinuxHostsOk() (*[]LinuxHostImportSpec, bool) {
	if o == nil || o.LinuxHosts == nil {
		return nil, false
	}
	return o.LinuxHosts, true
}

// HasLinuxHosts returns a boolean if a field has been set.
func (o *ManageServerImportSpecCollection) HasLinuxHosts() bool {
	if o != nil && o.LinuxHosts != nil {
		return true
	}

	return false
}

// SetLinuxHosts gets a reference to the given []LinuxHostImportSpec and assigns it to the LinuxHosts field.
func (o *ManageServerImportSpecCollection) SetLinuxHosts(v []LinuxHostImportSpec) {
	o.LinuxHosts = &v
}

// GetViHosts returns the ViHosts field value if set, zero value otherwise.
func (o *ManageServerImportSpecCollection) GetViHosts() []ViHostImportSpec {
	if o == nil || o.ViHosts == nil {
		var ret []ViHostImportSpec
		return ret
	}
	return *o.ViHosts
}

// GetViHostsOk returns a tuple with the ViHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManageServerImportSpecCollection) GetViHostsOk() (*[]ViHostImportSpec, bool) {
	if o == nil || o.ViHosts == nil {
		return nil, false
	}
	return o.ViHosts, true
}

// HasViHosts returns a boolean if a field has been set.
func (o *ManageServerImportSpecCollection) HasViHosts() bool {
	if o != nil && o.ViHosts != nil {
		return true
	}

	return false
}

// SetViHosts gets a reference to the given []ViHostImportSpec and assigns it to the ViHosts field.
func (o *ManageServerImportSpecCollection) SetViHosts(v []ViHostImportSpec) {
	o.ViHosts = &v
}

func (o ManageServerImportSpecCollection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.WindowsHosts != nil {
		toSerialize["windowsHosts"] = o.WindowsHosts
	}
	if o.LinuxHosts != nil {
		toSerialize["linuxHosts"] = o.LinuxHosts
	}
	if o.ViHosts != nil {
		toSerialize["viHosts"] = o.ViHosts
	}
	return json.Marshal(toSerialize)
}

type NullableManageServerImportSpecCollection struct {
	value *ManageServerImportSpecCollection
	isSet bool
}

func (v NullableManageServerImportSpecCollection) Get() *ManageServerImportSpecCollection {
	return v.value
}

func (v *NullableManageServerImportSpecCollection) Set(val *ManageServerImportSpecCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableManageServerImportSpecCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableManageServerImportSpecCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManageServerImportSpecCollection(val *ManageServerImportSpecCollection) *NullableManageServerImportSpecCollection {
	return &NullableManageServerImportSpecCollection{value: val, isSet: true}
}

func (v NullableManageServerImportSpecCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManageServerImportSpecCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


