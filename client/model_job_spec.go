/*
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic. 
 *
 * API version: 1.0-rev2
 * Contact: support@veeam.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// JobSpec struct for JobSpec
type JobSpec struct {
	// Name of the job.
	Name string `json:"name"`
	// Job description specified at the time of the job creation.
	Description string `json:"description"`
	Type EJobType `json:"type"`
}

// NewJobSpec instantiates a new JobSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobSpec(name string, description string, type_ EJobType, ) *JobSpec {
	this := JobSpec{}
	this.Name = name
	this.Description = description
	this.Type = type_
	return &this
}

// NewJobSpecWithDefaults instantiates a new JobSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobSpecWithDefaults() *JobSpec {
	this := JobSpec{}
	return &this
}

// GetName returns the Name field value
func (o *JobSpec) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *JobSpec) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *JobSpec) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *JobSpec) GetDescription() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *JobSpec) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *JobSpec) SetDescription(v string) {
	o.Description = v
}

// GetType returns the Type field value
func (o *JobSpec) GetType() EJobType {
	if o == nil  {
		var ret EJobType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *JobSpec) GetTypeOk() (*EJobType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *JobSpec) SetType(v EJobType) {
	o.Type = v
}

func (o JobSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableJobSpec struct {
	value *JobSpec
	isSet bool
}

func (v NullableJobSpec) Get() *JobSpec {
	return v.value
}

func (v *NullableJobSpec) Set(val *JobSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableJobSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableJobSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobSpec(val *JobSpec) *NullableJobSpec {
	return &NullableJobSpec{value: val, isSet: true}
}

func (v NullableJobSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


