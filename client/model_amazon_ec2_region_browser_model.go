/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AmazonEC2RegionBrowserModel struct for AmazonEC2RegionBrowserModel
type AmazonEC2RegionBrowserModel struct {
	// Region ID.
	RegionId *string `json:"regionId,omitempty"`
	// Array of Amazon Virtual Private Cloud (Amazon VPC) networks.
	Vpcs []AmazonVPCBrowserModel `json:"vpcs,omitempty"`
	// Array of Amazon instance types.
	InstanceTypes []string `json:"instanceTypes,omitempty"`
}

// NewAmazonEC2RegionBrowserModel instantiates a new AmazonEC2RegionBrowserModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmazonEC2RegionBrowserModel() *AmazonEC2RegionBrowserModel {
	this := AmazonEC2RegionBrowserModel{}
	return &this
}

// NewAmazonEC2RegionBrowserModelWithDefaults instantiates a new AmazonEC2RegionBrowserModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmazonEC2RegionBrowserModelWithDefaults() *AmazonEC2RegionBrowserModel {
	this := AmazonEC2RegionBrowserModel{}
	return &this
}

// GetRegionId returns the RegionId field value if set, zero value otherwise.
func (o *AmazonEC2RegionBrowserModel) GetRegionId() string {
	if o == nil || isNil(o.RegionId) {
		var ret string
		return ret
	}
	return *o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmazonEC2RegionBrowserModel) GetRegionIdOk() (*string, bool) {
	if o == nil || isNil(o.RegionId) {
    return nil, false
	}
	return o.RegionId, true
}

// HasRegionId returns a boolean if a field has been set.
func (o *AmazonEC2RegionBrowserModel) HasRegionId() bool {
	if o != nil && !isNil(o.RegionId) {
		return true
	}

	return false
}

// SetRegionId gets a reference to the given string and assigns it to the RegionId field.
func (o *AmazonEC2RegionBrowserModel) SetRegionId(v string) {
	o.RegionId = &v
}

// GetVpcs returns the Vpcs field value if set, zero value otherwise.
func (o *AmazonEC2RegionBrowserModel) GetVpcs() []AmazonVPCBrowserModel {
	if o == nil || isNil(o.Vpcs) {
		var ret []AmazonVPCBrowserModel
		return ret
	}
	return o.Vpcs
}

// GetVpcsOk returns a tuple with the Vpcs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmazonEC2RegionBrowserModel) GetVpcsOk() ([]AmazonVPCBrowserModel, bool) {
	if o == nil || isNil(o.Vpcs) {
    return nil, false
	}
	return o.Vpcs, true
}

// HasVpcs returns a boolean if a field has been set.
func (o *AmazonEC2RegionBrowserModel) HasVpcs() bool {
	if o != nil && !isNil(o.Vpcs) {
		return true
	}

	return false
}

// SetVpcs gets a reference to the given []AmazonVPCBrowserModel and assigns it to the Vpcs field.
func (o *AmazonEC2RegionBrowserModel) SetVpcs(v []AmazonVPCBrowserModel) {
	o.Vpcs = v
}

// GetInstanceTypes returns the InstanceTypes field value if set, zero value otherwise.
func (o *AmazonEC2RegionBrowserModel) GetInstanceTypes() []string {
	if o == nil || isNil(o.InstanceTypes) {
		var ret []string
		return ret
	}
	return o.InstanceTypes
}

// GetInstanceTypesOk returns a tuple with the InstanceTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmazonEC2RegionBrowserModel) GetInstanceTypesOk() ([]string, bool) {
	if o == nil || isNil(o.InstanceTypes) {
    return nil, false
	}
	return o.InstanceTypes, true
}

// HasInstanceTypes returns a boolean if a field has been set.
func (o *AmazonEC2RegionBrowserModel) HasInstanceTypes() bool {
	if o != nil && !isNil(o.InstanceTypes) {
		return true
	}

	return false
}

// SetInstanceTypes gets a reference to the given []string and assigns it to the InstanceTypes field.
func (o *AmazonEC2RegionBrowserModel) SetInstanceTypes(v []string) {
	o.InstanceTypes = v
}

func (o AmazonEC2RegionBrowserModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.RegionId) {
		toSerialize["regionId"] = o.RegionId
	}
	if !isNil(o.Vpcs) {
		toSerialize["vpcs"] = o.Vpcs
	}
	if !isNil(o.InstanceTypes) {
		toSerialize["instanceTypes"] = o.InstanceTypes
	}
	return json.Marshal(toSerialize)
}

type NullableAmazonEC2RegionBrowserModel struct {
	value *AmazonEC2RegionBrowserModel
	isSet bool
}

func (v NullableAmazonEC2RegionBrowserModel) Get() *AmazonEC2RegionBrowserModel {
	return v.value
}

func (v *NullableAmazonEC2RegionBrowserModel) Set(val *AmazonEC2RegionBrowserModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAmazonEC2RegionBrowserModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAmazonEC2RegionBrowserModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmazonEC2RegionBrowserModel(val *AmazonEC2RegionBrowserModel) *NullableAmazonEC2RegionBrowserModel {
	return &NullableAmazonEC2RegionBrowserModel{value: val, isSet: true}
}

func (v NullableAmazonEC2RegionBrowserModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmazonEC2RegionBrowserModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


