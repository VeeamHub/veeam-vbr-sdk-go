// Code generated by go-swagger; DO NOT EDIT.

package object_restore_points

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new object restore points API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for object restore points API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAllObjectRestorePoints(params *GetAllObjectRestorePointsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllObjectRestorePointsOK, error)

	GetObjectRestorePoint(params *GetObjectRestorePointParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectRestorePointOK, error)

	GetObjectRestorePointDisks(params *GetObjectRestorePointDisksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectRestorePointDisksOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAllObjectRestorePoints gets all restore points

  The HTTP GET request to the `/api/v1/objectRestorePoints` path allows you to get an array of all restore points created on the backup server.
*/
func (a *Client) GetAllObjectRestorePoints(params *GetAllObjectRestorePointsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllObjectRestorePointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllObjectRestorePointsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllObjectRestorePoints",
		Method:             "GET",
		PathPattern:        "/api/v1/objectRestorePoints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllObjectRestorePointsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllObjectRestorePointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllObjectRestorePoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetObjectRestorePoint gets restore point

  The HTTP GET request to the `/api/v1/objectRestorePoints/{id}` path allows you to get a restore point that has the specified `id`.
*/
func (a *Client) GetObjectRestorePoint(params *GetObjectRestorePointParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectRestorePointOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetObjectRestorePointParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetObjectRestorePoint",
		Method:             "GET",
		PathPattern:        "/api/v1/objectRestorePoints/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetObjectRestorePointReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetObjectRestorePointOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetObjectRestorePoint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetObjectRestorePointDisks gets restore point disks

  The HTTP GET request to the `/api/v1/objectRestorePoints/{id}/disks` path allows you to get an array of disks from a restore point that has the specified `id`.
*/
func (a *Client) GetObjectRestorePointDisks(params *GetObjectRestorePointDisksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetObjectRestorePointDisksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetObjectRestorePointDisksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetObjectRestorePointDisks",
		Method:             "GET",
		PathPattern:        "/api/v1/objectRestorePoints/{id}/disks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetObjectRestorePointDisksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetObjectRestorePointDisksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetObjectRestorePointDisks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
