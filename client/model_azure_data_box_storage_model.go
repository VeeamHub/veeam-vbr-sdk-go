/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AzureDataBoxStorageModel Microsoft Azure Data Box storage.
type AzureDataBoxStorageModel struct {
	RepositoryModel
	// If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`
	// Maximum number of concurrent tasks.
	MaxTaskCount *int32 `json:"maxTaskCount,omitempty"`
	Account AzureDataBoxStorageAccountModel `json:"account"`
	Container AzureDataBoxStorageContainerModel `json:"container"`
}

// NewAzureDataBoxStorageModel instantiates a new AzureDataBoxStorageModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureDataBoxStorageModel(account AzureDataBoxStorageAccountModel, container AzureDataBoxStorageContainerModel, id string, name string, description string, type_ ERepositoryType) *AzureDataBoxStorageModel {
	this := AzureDataBoxStorageModel{}
	this.Id = id
	this.Name = name
	this.Description = description
	this.Type = type_
	this.Account = account
	this.Container = container
	return &this
}

// NewAzureDataBoxStorageModelWithDefaults instantiates a new AzureDataBoxStorageModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureDataBoxStorageModelWithDefaults() *AzureDataBoxStorageModel {
	this := AzureDataBoxStorageModel{}
	return &this
}

// GetEnableTaskLimit returns the EnableTaskLimit field value if set, zero value otherwise.
func (o *AzureDataBoxStorageModel) GetEnableTaskLimit() bool {
	if o == nil || isNil(o.EnableTaskLimit) {
		var ret bool
		return ret
	}
	return *o.EnableTaskLimit
}

// GetEnableTaskLimitOk returns a tuple with the EnableTaskLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureDataBoxStorageModel) GetEnableTaskLimitOk() (*bool, bool) {
	if o == nil || isNil(o.EnableTaskLimit) {
    return nil, false
	}
	return o.EnableTaskLimit, true
}

// HasEnableTaskLimit returns a boolean if a field has been set.
func (o *AzureDataBoxStorageModel) HasEnableTaskLimit() bool {
	if o != nil && !isNil(o.EnableTaskLimit) {
		return true
	}

	return false
}

// SetEnableTaskLimit gets a reference to the given bool and assigns it to the EnableTaskLimit field.
func (o *AzureDataBoxStorageModel) SetEnableTaskLimit(v bool) {
	o.EnableTaskLimit = &v
}

// GetMaxTaskCount returns the MaxTaskCount field value if set, zero value otherwise.
func (o *AzureDataBoxStorageModel) GetMaxTaskCount() int32 {
	if o == nil || isNil(o.MaxTaskCount) {
		var ret int32
		return ret
	}
	return *o.MaxTaskCount
}

// GetMaxTaskCountOk returns a tuple with the MaxTaskCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureDataBoxStorageModel) GetMaxTaskCountOk() (*int32, bool) {
	if o == nil || isNil(o.MaxTaskCount) {
    return nil, false
	}
	return o.MaxTaskCount, true
}

// HasMaxTaskCount returns a boolean if a field has been set.
func (o *AzureDataBoxStorageModel) HasMaxTaskCount() bool {
	if o != nil && !isNil(o.MaxTaskCount) {
		return true
	}

	return false
}

// SetMaxTaskCount gets a reference to the given int32 and assigns it to the MaxTaskCount field.
func (o *AzureDataBoxStorageModel) SetMaxTaskCount(v int32) {
	o.MaxTaskCount = &v
}

// GetAccount returns the Account field value
func (o *AzureDataBoxStorageModel) GetAccount() AzureDataBoxStorageAccountModel {
	if o == nil {
		var ret AzureDataBoxStorageAccountModel
		return ret
	}

	return o.Account
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
func (o *AzureDataBoxStorageModel) GetAccountOk() (*AzureDataBoxStorageAccountModel, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Account, true
}

// SetAccount sets field value
func (o *AzureDataBoxStorageModel) SetAccount(v AzureDataBoxStorageAccountModel) {
	o.Account = v
}

// GetContainer returns the Container field value
func (o *AzureDataBoxStorageModel) GetContainer() AzureDataBoxStorageContainerModel {
	if o == nil {
		var ret AzureDataBoxStorageContainerModel
		return ret
	}

	return o.Container
}

// GetContainerOk returns a tuple with the Container field value
// and a boolean to check if the value has been set.
func (o *AzureDataBoxStorageModel) GetContainerOk() (*AzureDataBoxStorageContainerModel, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Container, true
}

// SetContainer sets field value
func (o *AzureDataBoxStorageModel) SetContainer(v AzureDataBoxStorageContainerModel) {
	o.Container = v
}

func (o AzureDataBoxStorageModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedRepositoryModel, errRepositoryModel := json.Marshal(o.RepositoryModel)
	if errRepositoryModel != nil {
		return []byte{}, errRepositoryModel
	}
	errRepositoryModel = json.Unmarshal([]byte(serializedRepositoryModel), &toSerialize)
	if errRepositoryModel != nil {
		return []byte{}, errRepositoryModel
	}
	if !isNil(o.EnableTaskLimit) {
		toSerialize["enableTaskLimit"] = o.EnableTaskLimit
	}
	if !isNil(o.MaxTaskCount) {
		toSerialize["maxTaskCount"] = o.MaxTaskCount
	}
	if true {
		toSerialize["account"] = o.Account
	}
	if true {
		toSerialize["container"] = o.Container
	}
	return json.Marshal(toSerialize)
}

type NullableAzureDataBoxStorageModel struct {
	value *AzureDataBoxStorageModel
	isSet bool
}

func (v NullableAzureDataBoxStorageModel) Get() *AzureDataBoxStorageModel {
	return v.value
}

func (v *NullableAzureDataBoxStorageModel) Set(val *AzureDataBoxStorageModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureDataBoxStorageModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureDataBoxStorageModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureDataBoxStorageModel(val *AzureDataBoxStorageModel) *NullableAzureDataBoxStorageModel {
	return &NullableAzureDataBoxStorageModel{value: val, isSet: true}
}

func (v NullableAzureDataBoxStorageModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureDataBoxStorageModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


