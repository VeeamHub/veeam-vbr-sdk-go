/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// RepositoryShareGatewayImportSpec Settings for the gateway server.
type RepositoryShareGatewayImportSpec struct {
	// If *true*, Veeam Backup & Replication automatically selects a gateway server.
	AutoSelect *bool `json:"autoSelect,omitempty"`
	// Name of the gateway server.
	GatewayServerName *string `json:"gatewayServerName,omitempty"`
}

// NewRepositoryShareGatewayImportSpec instantiates a new RepositoryShareGatewayImportSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryShareGatewayImportSpec() *RepositoryShareGatewayImportSpec {
	this := RepositoryShareGatewayImportSpec{}
	return &this
}

// NewRepositoryShareGatewayImportSpecWithDefaults instantiates a new RepositoryShareGatewayImportSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryShareGatewayImportSpecWithDefaults() *RepositoryShareGatewayImportSpec {
	this := RepositoryShareGatewayImportSpec{}
	return &this
}

// GetAutoSelect returns the AutoSelect field value if set, zero value otherwise.
func (o *RepositoryShareGatewayImportSpec) GetAutoSelect() bool {
	if o == nil || isNil(o.AutoSelect) {
		var ret bool
		return ret
	}
	return *o.AutoSelect
}

// GetAutoSelectOk returns a tuple with the AutoSelect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryShareGatewayImportSpec) GetAutoSelectOk() (*bool, bool) {
	if o == nil || isNil(o.AutoSelect) {
    return nil, false
	}
	return o.AutoSelect, true
}

// HasAutoSelect returns a boolean if a field has been set.
func (o *RepositoryShareGatewayImportSpec) HasAutoSelect() bool {
	if o != nil && !isNil(o.AutoSelect) {
		return true
	}

	return false
}

// SetAutoSelect gets a reference to the given bool and assigns it to the AutoSelect field.
func (o *RepositoryShareGatewayImportSpec) SetAutoSelect(v bool) {
	o.AutoSelect = &v
}

// GetGatewayServerName returns the GatewayServerName field value if set, zero value otherwise.
func (o *RepositoryShareGatewayImportSpec) GetGatewayServerName() string {
	if o == nil || isNil(o.GatewayServerName) {
		var ret string
		return ret
	}
	return *o.GatewayServerName
}

// GetGatewayServerNameOk returns a tuple with the GatewayServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryShareGatewayImportSpec) GetGatewayServerNameOk() (*string, bool) {
	if o == nil || isNil(o.GatewayServerName) {
    return nil, false
	}
	return o.GatewayServerName, true
}

// HasGatewayServerName returns a boolean if a field has been set.
func (o *RepositoryShareGatewayImportSpec) HasGatewayServerName() bool {
	if o != nil && !isNil(o.GatewayServerName) {
		return true
	}

	return false
}

// SetGatewayServerName gets a reference to the given string and assigns it to the GatewayServerName field.
func (o *RepositoryShareGatewayImportSpec) SetGatewayServerName(v string) {
	o.GatewayServerName = &v
}

func (o RepositoryShareGatewayImportSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AutoSelect) {
		toSerialize["autoSelect"] = o.AutoSelect
	}
	if !isNil(o.GatewayServerName) {
		toSerialize["gatewayServerName"] = o.GatewayServerName
	}
	return json.Marshal(toSerialize)
}

type NullableRepositoryShareGatewayImportSpec struct {
	value *RepositoryShareGatewayImportSpec
	isSet bool
}

func (v NullableRepositoryShareGatewayImportSpec) Get() *RepositoryShareGatewayImportSpec {
	return v.value
}

func (v *NullableRepositoryShareGatewayImportSpec) Set(val *RepositoryShareGatewayImportSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryShareGatewayImportSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryShareGatewayImportSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryShareGatewayImportSpec(val *RepositoryShareGatewayImportSpec) *NullableRepositoryShareGatewayImportSpec {
	return &NullableRepositoryShareGatewayImportSpec{value: val, isSet: true}
}

func (v NullableRepositoryShareGatewayImportSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryShareGatewayImportSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


