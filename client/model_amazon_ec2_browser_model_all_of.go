/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AmazonEC2BrowserModelAllOf struct for AmazonEC2BrowserModelAllOf
type AmazonEC2BrowserModelAllOf struct {
	// ID of a server used to connect to the object storage.
	HostId string `json:"hostId"`
	RegionType EAmazonRegionType `json:"regionType"`
	// Array of regions.
	Regions []AmazonEC2RegionBrowserModel `json:"regions"`
}

// NewAmazonEC2BrowserModelAllOf instantiates a new AmazonEC2BrowserModelAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmazonEC2BrowserModelAllOf(hostId string, regionType EAmazonRegionType, regions []AmazonEC2RegionBrowserModel) *AmazonEC2BrowserModelAllOf {
	this := AmazonEC2BrowserModelAllOf{}
	this.HostId = hostId
	this.RegionType = regionType
	this.Regions = regions
	return &this
}

// NewAmazonEC2BrowserModelAllOfWithDefaults instantiates a new AmazonEC2BrowserModelAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmazonEC2BrowserModelAllOfWithDefaults() *AmazonEC2BrowserModelAllOf {
	this := AmazonEC2BrowserModelAllOf{}
	return &this
}

// GetHostId returns the HostId field value
func (o *AmazonEC2BrowserModelAllOf) GetHostId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HostId
}

// GetHostIdOk returns a tuple with the HostId field value
// and a boolean to check if the value has been set.
func (o *AmazonEC2BrowserModelAllOf) GetHostIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.HostId, true
}

// SetHostId sets field value
func (o *AmazonEC2BrowserModelAllOf) SetHostId(v string) {
	o.HostId = v
}

// GetRegionType returns the RegionType field value
func (o *AmazonEC2BrowserModelAllOf) GetRegionType() EAmazonRegionType {
	if o == nil {
		var ret EAmazonRegionType
		return ret
	}

	return o.RegionType
}

// GetRegionTypeOk returns a tuple with the RegionType field value
// and a boolean to check if the value has been set.
func (o *AmazonEC2BrowserModelAllOf) GetRegionTypeOk() (*EAmazonRegionType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.RegionType, true
}

// SetRegionType sets field value
func (o *AmazonEC2BrowserModelAllOf) SetRegionType(v EAmazonRegionType) {
	o.RegionType = v
}

// GetRegions returns the Regions field value
func (o *AmazonEC2BrowserModelAllOf) GetRegions() []AmazonEC2RegionBrowserModel {
	if o == nil {
		var ret []AmazonEC2RegionBrowserModel
		return ret
	}

	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value
// and a boolean to check if the value has been set.
func (o *AmazonEC2BrowserModelAllOf) GetRegionsOk() ([]AmazonEC2RegionBrowserModel, bool) {
	if o == nil {
    return nil, false
	}
	return o.Regions, true
}

// SetRegions sets field value
func (o *AmazonEC2BrowserModelAllOf) SetRegions(v []AmazonEC2RegionBrowserModel) {
	o.Regions = v
}

func (o AmazonEC2BrowserModelAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["hostId"] = o.HostId
	}
	if true {
		toSerialize["regionType"] = o.RegionType
	}
	if true {
		toSerialize["regions"] = o.Regions
	}
	return json.Marshal(toSerialize)
}

type NullableAmazonEC2BrowserModelAllOf struct {
	value *AmazonEC2BrowserModelAllOf
	isSet bool
}

func (v NullableAmazonEC2BrowserModelAllOf) Get() *AmazonEC2BrowserModelAllOf {
	return v.value
}

func (v *NullableAmazonEC2BrowserModelAllOf) Set(val *AmazonEC2BrowserModelAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAmazonEC2BrowserModelAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAmazonEC2BrowserModelAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmazonEC2BrowserModelAllOf(val *AmazonEC2BrowserModelAllOf) *NullableAmazonEC2BrowserModelAllOf {
	return &NullableAmazonEC2BrowserModelAllOf{value: val, isSet: true}
}

func (v NullableAmazonEC2BrowserModelAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmazonEC2BrowserModelAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


