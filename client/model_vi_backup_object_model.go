/*
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic. 
 *
 * API version: 1.0-rev1
 * Contact: support@veeam.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ViBackupObjectModel struct for ViBackupObjectModel
type ViBackupObjectModel struct {
	BackupObjectModel
	// ID of the virtual infrastructure object: mo-ref or ID, depending on the virtualization platform. 
	ObjectId *string `json:"objectId,omitempty"`
	ViType *EVmwareInventoryType `json:"viType,omitempty"`
	// Path to the object.
	Path *string `json:"path,omitempty"`
}

// NewViBackupObjectModel instantiates a new ViBackupObjectModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViBackupObjectModel(id string, platformName EPlatformType) *ViBackupObjectModel {
	this := ViBackupObjectModel{}
	this.Id = id
	this.PlatformName = platformName
	return &this
}

// NewViBackupObjectModelWithDefaults instantiates a new ViBackupObjectModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViBackupObjectModelWithDefaults() *ViBackupObjectModel {
	this := ViBackupObjectModel{}
	return &this
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise.
func (o *ViBackupObjectModel) GetObjectId() string {
	if o == nil || o.ObjectId == nil {
		var ret string
		return ret
	}
	return *o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViBackupObjectModel) GetObjectIdOk() (*string, bool) {
	if o == nil || o.ObjectId == nil {
		return nil, false
	}
	return o.ObjectId, true
}

// HasObjectId returns a boolean if a field has been set.
func (o *ViBackupObjectModel) HasObjectId() bool {
	if o != nil && o.ObjectId != nil {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given string and assigns it to the ObjectId field.
func (o *ViBackupObjectModel) SetObjectId(v string) {
	o.ObjectId = &v
}

// GetViType returns the ViType field value if set, zero value otherwise.
func (o *ViBackupObjectModel) GetViType() EVmwareInventoryType {
	if o == nil || o.ViType == nil {
		var ret EVmwareInventoryType
		return ret
	}
	return *o.ViType
}

// GetViTypeOk returns a tuple with the ViType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViBackupObjectModel) GetViTypeOk() (*EVmwareInventoryType, bool) {
	if o == nil || o.ViType == nil {
		return nil, false
	}
	return o.ViType, true
}

// HasViType returns a boolean if a field has been set.
func (o *ViBackupObjectModel) HasViType() bool {
	if o != nil && o.ViType != nil {
		return true
	}

	return false
}

// SetViType gets a reference to the given EVmwareInventoryType and assigns it to the ViType field.
func (o *ViBackupObjectModel) SetViType(v EVmwareInventoryType) {
	o.ViType = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *ViBackupObjectModel) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViBackupObjectModel) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *ViBackupObjectModel) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *ViBackupObjectModel) SetPath(v string) {
	o.Path = &v
}

func (o ViBackupObjectModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedBackupObjectModel, errBackupObjectModel := json.Marshal(o.BackupObjectModel)
	if errBackupObjectModel != nil {
		return []byte{}, errBackupObjectModel
	}
	errBackupObjectModel = json.Unmarshal([]byte(serializedBackupObjectModel), &toSerialize)
	if errBackupObjectModel != nil {
		return []byte{}, errBackupObjectModel
	}
	if o.ObjectId != nil {
		toSerialize["objectId"] = o.ObjectId
	}
	if o.ViType != nil {
		toSerialize["viType"] = o.ViType
	}
	if o.Path != nil {
		toSerialize["path"] = o.Path
	}
	return json.Marshal(toSerialize)
}

type NullableViBackupObjectModel struct {
	value *ViBackupObjectModel
	isSet bool
}

func (v NullableViBackupObjectModel) Get() *ViBackupObjectModel {
	return v.value
}

func (v *NullableViBackupObjectModel) Set(val *ViBackupObjectModel) {
	v.value = val
	v.isSet = true
}

func (v NullableViBackupObjectModel) IsSet() bool {
	return v.isSet
}

func (v *NullableViBackupObjectModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViBackupObjectModel(val *ViBackupObjectModel) *NullableViBackupObjectModel {
	return &NullableViBackupObjectModel{value: val, isSet: true}
}

func (v NullableViBackupObjectModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViBackupObjectModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


