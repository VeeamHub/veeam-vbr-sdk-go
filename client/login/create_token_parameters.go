// Code generated by go-swagger; DO NOT EDIT.

package login

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCreateTokenParams creates a new CreateTokenParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateTokenParams() *CreateTokenParams {
	return &CreateTokenParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateTokenParamsWithTimeout creates a new CreateTokenParams object
// with the ability to set a timeout on a request.
func NewCreateTokenParamsWithTimeout(timeout time.Duration) *CreateTokenParams {
	return &CreateTokenParams{
		timeout: timeout,
	}
}

// NewCreateTokenParamsWithContext creates a new CreateTokenParams object
// with the ability to set a context for a request.
func NewCreateTokenParamsWithContext(ctx context.Context) *CreateTokenParams {
	return &CreateTokenParams{
		Context: ctx,
	}
}

// NewCreateTokenParamsWithHTTPClient creates a new CreateTokenParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateTokenParamsWithHTTPClient(client *http.Client) *CreateTokenParams {
	return &CreateTokenParams{
		HTTPClient: client,
	}
}

/* CreateTokenParams contains all the parameters to send to the API endpoint
   for the create token operation.

   Typically these are written to a http.Request.
*/
type CreateTokenParams struct {

	/* Code.

	   Authorization code. Required if the `grant_type` value is `authorization_code`.
	*/
	Code *string

	/* GrantType.

	     Authorization grant type.

	Available values:
	- `password` — used to obtain an access token by providing a user name and password.
	- `refresh_token` — used to refresh an expired or lost access token by providing a refresh token.
	- `authorization_code` — used to obtain an access token by providing an authorization code.


	     Default: "password"
	*/
	GrantType string

	/* Password.

	   Password. Required if the `grant_type` value is `password`.

	   Format: password
	*/
	Password *strfmt.Password

	/* RefreshToken.

	   Refresh token. Required if the `grant_type` value is `refresh_token`.
	*/
	RefreshToken *string

	/* UseShortTermRefresh.

	   If *true*, a short-term refresh token is used. Lifetime of the short-term refresh token is the access token lifetime plus 15 minutes.
	*/
	UseShortTermRefresh *bool

	/* Username.

	   User name. Required if the `grant_type` value is `password`.
	*/
	Username *string

	/* XAPIVersion.

	     Version and revision of the client REST API. Must be in the following
	format: *\<version\>-\<revision\>*.


	     Default: "1.0-rev1"
	*/
	XAPIVersion string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create token params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateTokenParams) WithDefaults() *CreateTokenParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create token params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateTokenParams) SetDefaults() {
	var (
		grantTypeDefault = string("password")

		xAPIVersionDefault = string("1.0-rev1")
	)

	val := CreateTokenParams{
		GrantType:   grantTypeDefault,
		XAPIVersion: xAPIVersionDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the create token params
func (o *CreateTokenParams) WithTimeout(timeout time.Duration) *CreateTokenParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create token params
func (o *CreateTokenParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create token params
func (o *CreateTokenParams) WithContext(ctx context.Context) *CreateTokenParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create token params
func (o *CreateTokenParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create token params
func (o *CreateTokenParams) WithHTTPClient(client *http.Client) *CreateTokenParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create token params
func (o *CreateTokenParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCode adds the code to the create token params
func (o *CreateTokenParams) WithCode(code *string) *CreateTokenParams {
	o.SetCode(code)
	return o
}

// SetCode adds the code to the create token params
func (o *CreateTokenParams) SetCode(code *string) {
	o.Code = code
}

// WithGrantType adds the grantType to the create token params
func (o *CreateTokenParams) WithGrantType(grantType string) *CreateTokenParams {
	o.SetGrantType(grantType)
	return o
}

// SetGrantType adds the grantType to the create token params
func (o *CreateTokenParams) SetGrantType(grantType string) {
	o.GrantType = grantType
}

// WithPassword adds the password to the create token params
func (o *CreateTokenParams) WithPassword(password *strfmt.Password) *CreateTokenParams {
	o.SetPassword(password)
	return o
}

// SetPassword adds the password to the create token params
func (o *CreateTokenParams) SetPassword(password *strfmt.Password) {
	o.Password = password
}

// WithRefreshToken adds the refreshToken to the create token params
func (o *CreateTokenParams) WithRefreshToken(refreshToken *string) *CreateTokenParams {
	o.SetRefreshToken(refreshToken)
	return o
}

// SetRefreshToken adds the refreshToken to the create token params
func (o *CreateTokenParams) SetRefreshToken(refreshToken *string) {
	o.RefreshToken = refreshToken
}

// WithUseShortTermRefresh adds the useShortTermRefresh to the create token params
func (o *CreateTokenParams) WithUseShortTermRefresh(useShortTermRefresh *bool) *CreateTokenParams {
	o.SetUseShortTermRefresh(useShortTermRefresh)
	return o
}

// SetUseShortTermRefresh adds the useShortTermRefresh to the create token params
func (o *CreateTokenParams) SetUseShortTermRefresh(useShortTermRefresh *bool) {
	o.UseShortTermRefresh = useShortTermRefresh
}

// WithUsername adds the username to the create token params
func (o *CreateTokenParams) WithUsername(username *string) *CreateTokenParams {
	o.SetUsername(username)
	return o
}

// SetUsername adds the username to the create token params
func (o *CreateTokenParams) SetUsername(username *string) {
	o.Username = username
}

// WithXAPIVersion adds the xAPIVersion to the create token params
func (o *CreateTokenParams) WithXAPIVersion(xAPIVersion string) *CreateTokenParams {
	o.SetXAPIVersion(xAPIVersion)
	return o
}

// SetXAPIVersion adds the xApiVersion to the create token params
func (o *CreateTokenParams) SetXAPIVersion(xAPIVersion string) {
	o.XAPIVersion = xAPIVersion
}

// WriteToRequest writes these params to a swagger request
func (o *CreateTokenParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Code != nil {

		// form param code
		var frCode string
		if o.Code != nil {
			frCode = *o.Code
		}
		fCode := frCode
		if fCode != "" {
			if err := r.SetFormParam("code", fCode); err != nil {
				return err
			}
		}
	}

	// form param grant_type
	frGrantType := o.GrantType
	fGrantType := frGrantType
	if fGrantType != "" {
		if err := r.SetFormParam("grant_type", fGrantType); err != nil {
			return err
		}
	}

	if o.Password != nil {

		// form param password
		var frPassword strfmt.Password
		if o.Password != nil {
			frPassword = *o.Password
		}
		fPassword := frPassword.String()
		if fPassword != "" {
			if err := r.SetFormParam("password", fPassword); err != nil {
				return err
			}
		}
	}

	if o.RefreshToken != nil {

		// form param refresh_token
		var frRefreshToken string
		if o.RefreshToken != nil {
			frRefreshToken = *o.RefreshToken
		}
		fRefreshToken := frRefreshToken
		if fRefreshToken != "" {
			if err := r.SetFormParam("refresh_token", fRefreshToken); err != nil {
				return err
			}
		}
	}

	if o.UseShortTermRefresh != nil {

		// form param use_short_term_refresh
		var frUseShortTermRefresh bool
		if o.UseShortTermRefresh != nil {
			frUseShortTermRefresh = *o.UseShortTermRefresh
		}
		fUseShortTermRefresh := swag.FormatBool(frUseShortTermRefresh)
		if fUseShortTermRefresh != "" {
			if err := r.SetFormParam("use_short_term_refresh", fUseShortTermRefresh); err != nil {
				return err
			}
		}
	}

	if o.Username != nil {

		// form param username
		var frUsername string
		if o.Username != nil {
			frUsername = *o.Username
		}
		fUsername := frUsername
		if fUsername != "" {
			if err := r.SetFormParam("username", fUsername); err != nil {
				return err
			}
		}
	}

	// header param x-api-version
	if err := r.SetHeaderParam("x-api-version", o.XAPIVersion); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
