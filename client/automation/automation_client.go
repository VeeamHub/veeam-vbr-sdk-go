// Code generated by go-swagger; DO NOT EDIT.

package automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new automation API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for automation API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ExportCredentials(params *ExportCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportCredentialsOK, error)

	ExportEncryptionPasswords(params *ExportEncryptionPasswordsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportEncryptionPasswordsOK, error)

	ExportJobs(params *ExportJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportJobsOK, error)

	ExportManagedServers(params *ExportManagedServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportManagedServersOK, error)

	ExportProxies(params *ExportProxiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportProxiesOK, error)

	ExportRepositories(params *ExportRepositoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportRepositoriesOK, error)

	GetAllAutomationSessions(params *GetAllAutomationSessionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllAutomationSessionsOK, error)

	GetAutomationSession(params *GetAutomationSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAutomationSessionOK, error)

	GetAutomationSessionLogs(params *GetAutomationSessionLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAutomationSessionLogsOK, error)

	ImportCredentials(params *ImportCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportCredentialsCreated, error)

	ImportEncryptionPasswords(params *ImportEncryptionPasswordsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportEncryptionPasswordsCreated, error)

	ImportJobs(params *ImportJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportJobsCreated, error)

	ImportManagedServers(params *ImportManagedServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportManagedServersCreated, error)

	ImportProxies(params *ImportProxiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportProxiesCreated, error)

	ImportRepositories(params *ImportRepositoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportRepositoriesCreated, error)

	StopAutomationSession(params *StopAutomationSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopAutomationSessionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ExportCredentials exports credentials

  The HTTP POST request to the `/api/v1/automation/credentials/export` path allows you to export credentials from Veeam Backup & Replication.
*/
func (a *Client) ExportCredentials(params *ExportCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportCredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExportCredentials",
		Method:             "POST",
		PathPattern:        "/api/v1/automation/credentials/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExportCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExportCredentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExportEncryptionPasswords exports encryption passwords

  The HTTP POST request to the `/api/v1/automation/encryptionPasswords/export` path allows you to export encryption passwords from Veeam Backup & Replication.
*/
func (a *Client) ExportEncryptionPasswords(params *ExportEncryptionPasswordsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportEncryptionPasswordsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportEncryptionPasswordsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExportEncryptionPasswords",
		Method:             "POST",
		PathPattern:        "/api/v1/automation/encryptionPasswords/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExportEncryptionPasswordsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportEncryptionPasswordsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExportEncryptionPasswords: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExportJobs exports jobs

  The HTTP POST request to the `/api/v1/automation/jobs/export` path allows you to export jobs from Veeam Backup & Replication.
*/
func (a *Client) ExportJobs(params *ExportJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportJobsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExportJobs",
		Method:             "POST",
		PathPattern:        "/api/v1/automation/jobs/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExportJobsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExportJobs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExportManagedServers exports servers

  The HTTP POST request to the `/api/v1/automation/managedServers/export` path allows you to export managed servers from Veeam Backup & Replication.
*/
func (a *Client) ExportManagedServers(params *ExportManagedServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportManagedServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportManagedServersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExportManagedServers",
		Method:             "POST",
		PathPattern:        "/api/v1/automation/managedServers/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExportManagedServersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportManagedServersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExportManagedServers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExportProxies exports proxies

  The HTTP POST request to the `/api/v1/automation/proxies/export` path allows you to export backup proxies from Veeam Backup & Replication.
*/
func (a *Client) ExportProxies(params *ExportProxiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportProxiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportProxiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExportProxies",
		Method:             "POST",
		PathPattern:        "/api/v1/automation/proxies/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExportProxiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportProxiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExportProxies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExportRepositories exports repositories

  The HTTP POST request to the `/api/v1/automation/repositories/export` path allows you to export backup repositories from Veeam Backup & Replication.
*/
func (a *Client) ExportRepositories(params *ExportRepositoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExportRepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportRepositoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ExportRepositories",
		Method:             "POST",
		PathPattern:        "/api/v1/automation/repositories/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExportRepositoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportRepositoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ExportRepositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllAutomationSessions gets all automation sessions

  The HTTP GET request to the `/api/v1/automation/sessions` path allows you to get an array of all automation sessions performed on the backup server.
*/
func (a *Client) GetAllAutomationSessions(params *GetAllAutomationSessionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllAutomationSessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllAutomationSessionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllAutomationSessions",
		Method:             "GET",
		PathPattern:        "/api/v1/automation/sessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllAutomationSessionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllAutomationSessionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllAutomationSessions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAutomationSession gets automation session

  The HTTP GET request to the `/api/v1/automation/sessions/{id}` path allows you to get an automation session that has the specified `id`.
*/
func (a *Client) GetAutomationSession(params *GetAutomationSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAutomationSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAutomationSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAutomationSession",
		Method:             "GET",
		PathPattern:        "/api/v1/automation/sessions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAutomationSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAutomationSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAutomationSession: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAutomationSessionLogs gets automation session logs

  The HTTP GET request to the `/api/v1/automation/sessions/{id}/logs` path allows you to get an array of log records of an automation session that has the specified `id`.
*/
func (a *Client) GetAutomationSessionLogs(params *GetAutomationSessionLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAutomationSessionLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAutomationSessionLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAutomationSessionLogs",
		Method:             "GET",
		PathPattern:        "/api/v1/automation/sessions/{id}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAutomationSessionLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAutomationSessionLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAutomationSessionLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImportCredentials imports credentials

  The HTTP POST request to the `/api/v1/automation/credentials/import` path allows you to import credentials to Veeam Backup & Replication.
*/
func (a *Client) ImportCredentials(params *ImportCredentialsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportCredentialsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportCredentialsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImportCredentials",
		Method:             "POST",
		PathPattern:        "/api/v1/automation/credentials/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ImportCredentialsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportCredentialsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImportCredentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImportEncryptionPasswords imports encryption passwords

  The HTTP POST request to the `/api/v1/automation/encryptionPasswords/import` path allows you to import encryption passwords to Veeam Backup & Replication.
*/
func (a *Client) ImportEncryptionPasswords(params *ImportEncryptionPasswordsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportEncryptionPasswordsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportEncryptionPasswordsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImportEncryptionPasswords",
		Method:             "POST",
		PathPattern:        "/api/v1/automation/encryptionPasswords/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ImportEncryptionPasswordsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportEncryptionPasswordsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImportEncryptionPasswords: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImportJobs imports jobs

  The HTTP POST request to the `/api/v1/automation/jobs/import` path allows you to import jobs to Veeam Backup & Replication.
*/
func (a *Client) ImportJobs(params *ImportJobsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportJobsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportJobsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImportJobs",
		Method:             "POST",
		PathPattern:        "/api/v1/automation/jobs/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ImportJobsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportJobsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImportJobs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImportManagedServers imports servers

  The HTTP POST request to the `/api/v1/automation/managedServers/import` path allows you to import managed servers to Veeam Backup & Replication.
*/
func (a *Client) ImportManagedServers(params *ImportManagedServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportManagedServersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportManagedServersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImportManagedServers",
		Method:             "POST",
		PathPattern:        "/api/v1/automation/managedServers/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ImportManagedServersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportManagedServersCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImportManagedServers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImportProxies imports proxies

  The HTTP POST request to the `/api/v1/automation/proxies/import` path allows you to import backup proxies to Veeam Backup & Replication.
*/
func (a *Client) ImportProxies(params *ImportProxiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportProxiesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportProxiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImportProxies",
		Method:             "POST",
		PathPattern:        "/api/v1/automation/proxies/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ImportProxiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportProxiesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImportProxies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ImportRepositories imports repositories

  The HTTP POST request to the `/api/v1/automation/repositories/import` path allows you to import backup repositories to Veeam Backup & Replication.
*/
func (a *Client) ImportRepositories(params *ImportRepositoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ImportRepositoriesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewImportRepositoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ImportRepositories",
		Method:             "POST",
		PathPattern:        "/api/v1/automation/repositories/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ImportRepositoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ImportRepositoriesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ImportRepositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopAutomationSession stops automation session

  The HTTP POST request to the `/api/v1/automation/sessions/{id}/stop` path allows you to stop an automation session that has the specified `id`.
*/
func (a *Client) StopAutomationSession(params *StopAutomationSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopAutomationSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopAutomationSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StopAutomationSession",
		Method:             "POST",
		PathPattern:        "/api/v1/automation/sessions/{id}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StopAutomationSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopAutomationSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopAutomationSession: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
