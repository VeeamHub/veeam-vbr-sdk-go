// Code generated by go-swagger; DO NOT EDIT.

package automation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/veeamhub/veeam-vbr-sdk-go/models"
)

// GetAutomationSessionLogsReader is a Reader for the GetAutomationSessionLogs structure.
type GetAutomationSessionLogsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAutomationSessionLogsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAutomationSessionLogsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAutomationSessionLogsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAutomationSessionLogsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAutomationSessionLogsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAutomationSessionLogsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAutomationSessionLogsOK creates a GetAutomationSessionLogsOK with default headers values
func NewGetAutomationSessionLogsOK() *GetAutomationSessionLogsOK {
	return &GetAutomationSessionLogsOK{}
}

/* GetAutomationSessionLogsOK describes a response with status code 200, with default header values.

OK
*/
type GetAutomationSessionLogsOK struct {
	Payload *models.SessionLogResult
}

func (o *GetAutomationSessionLogsOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/automation/sessions/{id}/logs][%d] getAutomationSessionLogsOK  %+v", 200, o.Payload)
}
func (o *GetAutomationSessionLogsOK) GetPayload() *models.SessionLogResult {
	return o.Payload
}

func (o *GetAutomationSessionLogsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SessionLogResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAutomationSessionLogsUnauthorized creates a GetAutomationSessionLogsUnauthorized with default headers values
func NewGetAutomationSessionLogsUnauthorized() *GetAutomationSessionLogsUnauthorized {
	return &GetAutomationSessionLogsUnauthorized{}
}

/* GetAutomationSessionLogsUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The authorization header has been expected but not found (or found but is expired).
*/
type GetAutomationSessionLogsUnauthorized struct {
	Payload *models.Error
}

func (o *GetAutomationSessionLogsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/automation/sessions/{id}/logs][%d] getAutomationSessionLogsUnauthorized  %+v", 401, o.Payload)
}
func (o *GetAutomationSessionLogsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAutomationSessionLogsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAutomationSessionLogsForbidden creates a GetAutomationSessionLogsForbidden with default headers values
func NewGetAutomationSessionLogsForbidden() *GetAutomationSessionLogsForbidden {
	return &GetAutomationSessionLogsForbidden{}
}

/* GetAutomationSessionLogsForbidden describes a response with status code 403, with default header values.

Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.
*/
type GetAutomationSessionLogsForbidden struct {
	Payload *models.Error
}

func (o *GetAutomationSessionLogsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/automation/sessions/{id}/logs][%d] getAutomationSessionLogsForbidden  %+v", 403, o.Payload)
}
func (o *GetAutomationSessionLogsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAutomationSessionLogsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAutomationSessionLogsNotFound creates a GetAutomationSessionLogsNotFound with default headers values
func NewGetAutomationSessionLogsNotFound() *GetAutomationSessionLogsNotFound {
	return &GetAutomationSessionLogsNotFound{}
}

/* GetAutomationSessionLogsNotFound describes a response with status code 404, with default header values.

Not found. No object was found with the path parameter specified in the request.
*/
type GetAutomationSessionLogsNotFound struct {
	Payload *models.Error
}

func (o *GetAutomationSessionLogsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/automation/sessions/{id}/logs][%d] getAutomationSessionLogsNotFound  %+v", 404, o.Payload)
}
func (o *GetAutomationSessionLogsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAutomationSessionLogsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAutomationSessionLogsInternalServerError creates a GetAutomationSessionLogsInternalServerError with default headers values
func NewGetAutomationSessionLogsInternalServerError() *GetAutomationSessionLogsInternalServerError {
	return &GetAutomationSessionLogsInternalServerError{}
}

/* GetAutomationSessionLogsInternalServerError describes a response with status code 500, with default header values.

Internal server error. The request has been received but could not be completed because of an internal error at the server side.
*/
type GetAutomationSessionLogsInternalServerError struct {
	Payload *models.Error
}

func (o *GetAutomationSessionLogsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/automation/sessions/{id}/logs][%d] getAutomationSessionLogsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetAutomationSessionLogsInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAutomationSessionLogsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
