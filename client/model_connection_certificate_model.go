/*
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic. 
 *
 * API version: 1.0-rev2
 * Contact: support@veeam.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ConnectionCertificateModel struct for ConnectionCertificateModel
type ConnectionCertificateModel struct {
	// SSH key fingerprint used to verify the server identity.
	Fingerprint *string `json:"fingerprint,omitempty"`
	Certificate *CertificateModel `json:"certificate,omitempty"`
}

// NewConnectionCertificateModel instantiates a new ConnectionCertificateModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionCertificateModel() *ConnectionCertificateModel {
	this := ConnectionCertificateModel{}
	return &this
}

// NewConnectionCertificateModelWithDefaults instantiates a new ConnectionCertificateModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionCertificateModelWithDefaults() *ConnectionCertificateModel {
	this := ConnectionCertificateModel{}
	return &this
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise.
func (o *ConnectionCertificateModel) GetFingerprint() string {
	if o == nil || o.Fingerprint == nil {
		var ret string
		return ret
	}
	return *o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionCertificateModel) GetFingerprintOk() (*string, bool) {
	if o == nil || o.Fingerprint == nil {
		return nil, false
	}
	return o.Fingerprint, true
}

// HasFingerprint returns a boolean if a field has been set.
func (o *ConnectionCertificateModel) HasFingerprint() bool {
	if o != nil && o.Fingerprint != nil {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given string and assigns it to the Fingerprint field.
func (o *ConnectionCertificateModel) SetFingerprint(v string) {
	o.Fingerprint = &v
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *ConnectionCertificateModel) GetCertificate() CertificateModel {
	if o == nil || o.Certificate == nil {
		var ret CertificateModel
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionCertificateModel) GetCertificateOk() (*CertificateModel, bool) {
	if o == nil || o.Certificate == nil {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *ConnectionCertificateModel) HasCertificate() bool {
	if o != nil && o.Certificate != nil {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given CertificateModel and assigns it to the Certificate field.
func (o *ConnectionCertificateModel) SetCertificate(v CertificateModel) {
	o.Certificate = &v
}

func (o ConnectionCertificateModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Fingerprint != nil {
		toSerialize["fingerprint"] = o.Fingerprint
	}
	if o.Certificate != nil {
		toSerialize["certificate"] = o.Certificate
	}
	return json.Marshal(toSerialize)
}

type NullableConnectionCertificateModel struct {
	value *ConnectionCertificateModel
	isSet bool
}

func (v NullableConnectionCertificateModel) Get() *ConnectionCertificateModel {
	return v.value
}

func (v *NullableConnectionCertificateModel) Set(val *ConnectionCertificateModel) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionCertificateModel) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionCertificateModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionCertificateModel(val *ConnectionCertificateModel) *NullableConnectionCertificateModel {
	return &NullableConnectionCertificateModel{value: val, isSet: true}
}

func (v NullableConnectionCertificateModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionCertificateModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


