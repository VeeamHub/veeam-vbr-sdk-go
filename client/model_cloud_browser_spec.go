/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// CloudBrowserSpec - struct for CloudBrowserSpec
type CloudBrowserSpec struct {
	AmazonEC2BrowserSpec *AmazonEC2BrowserSpec
	AmazonS3BrowserSpec *AmazonS3BrowserSpec
	AmazonSnowballEdgeBrowserSpec *AmazonSnowballEdgeBrowserSpec
	AzureBlobBrowserSpec *AzureBlobBrowserSpec
	AzureComputeBrowserSpec *AzureComputeBrowserSpec
	AzureDataBoxBrowserSpec *AzureDataBoxBrowserSpec
	GoogleCloudStorageBrowserSpec *GoogleCloudStorageBrowserSpec
	IBMCloudStorageBrowserSpec *IBMCloudStorageBrowserSpec
	S3CompatibleBrowserSpec *S3CompatibleBrowserSpec
	WasabiCloudStorageBrowserSpec *WasabiCloudStorageBrowserSpec
}

// AmazonEC2BrowserSpecAsCloudBrowserSpec is a convenience function that returns AmazonEC2BrowserSpec wrapped in CloudBrowserSpec
func AmazonEC2BrowserSpecAsCloudBrowserSpec(v *AmazonEC2BrowserSpec) CloudBrowserSpec {
	return CloudBrowserSpec{
		AmazonEC2BrowserSpec: v,
	}
}

// AmazonS3BrowserSpecAsCloudBrowserSpec is a convenience function that returns AmazonS3BrowserSpec wrapped in CloudBrowserSpec
func AmazonS3BrowserSpecAsCloudBrowserSpec(v *AmazonS3BrowserSpec) CloudBrowserSpec {
	return CloudBrowserSpec{
		AmazonS3BrowserSpec: v,
	}
}

// AmazonSnowballEdgeBrowserSpecAsCloudBrowserSpec is a convenience function that returns AmazonSnowballEdgeBrowserSpec wrapped in CloudBrowserSpec
func AmazonSnowballEdgeBrowserSpecAsCloudBrowserSpec(v *AmazonSnowballEdgeBrowserSpec) CloudBrowserSpec {
	return CloudBrowserSpec{
		AmazonSnowballEdgeBrowserSpec: v,
	}
}

// AzureBlobBrowserSpecAsCloudBrowserSpec is a convenience function that returns AzureBlobBrowserSpec wrapped in CloudBrowserSpec
func AzureBlobBrowserSpecAsCloudBrowserSpec(v *AzureBlobBrowserSpec) CloudBrowserSpec {
	return CloudBrowserSpec{
		AzureBlobBrowserSpec: v,
	}
}

// AzureComputeBrowserSpecAsCloudBrowserSpec is a convenience function that returns AzureComputeBrowserSpec wrapped in CloudBrowserSpec
func AzureComputeBrowserSpecAsCloudBrowserSpec(v *AzureComputeBrowserSpec) CloudBrowserSpec {
	return CloudBrowserSpec{
		AzureComputeBrowserSpec: v,
	}
}

// AzureDataBoxBrowserSpecAsCloudBrowserSpec is a convenience function that returns AzureDataBoxBrowserSpec wrapped in CloudBrowserSpec
func AzureDataBoxBrowserSpecAsCloudBrowserSpec(v *AzureDataBoxBrowserSpec) CloudBrowserSpec {
	return CloudBrowserSpec{
		AzureDataBoxBrowserSpec: v,
	}
}

// GoogleCloudStorageBrowserSpecAsCloudBrowserSpec is a convenience function that returns GoogleCloudStorageBrowserSpec wrapped in CloudBrowserSpec
func GoogleCloudStorageBrowserSpecAsCloudBrowserSpec(v *GoogleCloudStorageBrowserSpec) CloudBrowserSpec {
	return CloudBrowserSpec{
		GoogleCloudStorageBrowserSpec: v,
	}
}

// IBMCloudStorageBrowserSpecAsCloudBrowserSpec is a convenience function that returns IBMCloudStorageBrowserSpec wrapped in CloudBrowserSpec
func IBMCloudStorageBrowserSpecAsCloudBrowserSpec(v *IBMCloudStorageBrowserSpec) CloudBrowserSpec {
	return CloudBrowserSpec{
		IBMCloudStorageBrowserSpec: v,
	}
}

// S3CompatibleBrowserSpecAsCloudBrowserSpec is a convenience function that returns S3CompatibleBrowserSpec wrapped in CloudBrowserSpec
func S3CompatibleBrowserSpecAsCloudBrowserSpec(v *S3CompatibleBrowserSpec) CloudBrowserSpec {
	return CloudBrowserSpec{
		S3CompatibleBrowserSpec: v,
	}
}

// WasabiCloudStorageBrowserSpecAsCloudBrowserSpec is a convenience function that returns WasabiCloudStorageBrowserSpec wrapped in CloudBrowserSpec
func WasabiCloudStorageBrowserSpecAsCloudBrowserSpec(v *WasabiCloudStorageBrowserSpec) CloudBrowserSpec {
	return CloudBrowserSpec{
		WasabiCloudStorageBrowserSpec: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CloudBrowserSpec) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AmazonEC2BrowserSpec
	err = newStrictDecoder(data).Decode(&dst.AmazonEC2BrowserSpec)
	if err == nil {
		jsonAmazonEC2BrowserSpec, _ := json.Marshal(dst.AmazonEC2BrowserSpec)
		if string(jsonAmazonEC2BrowserSpec) == "{}" { // empty struct
			dst.AmazonEC2BrowserSpec = nil
		} else {
			match++
		}
	} else {
		dst.AmazonEC2BrowserSpec = nil
	}

	// try to unmarshal data into AmazonS3BrowserSpec
	err = newStrictDecoder(data).Decode(&dst.AmazonS3BrowserSpec)
	if err == nil {
		jsonAmazonS3BrowserSpec, _ := json.Marshal(dst.AmazonS3BrowserSpec)
		if string(jsonAmazonS3BrowserSpec) == "{}" { // empty struct
			dst.AmazonS3BrowserSpec = nil
		} else {
			match++
		}
	} else {
		dst.AmazonS3BrowserSpec = nil
	}

	// try to unmarshal data into AmazonSnowballEdgeBrowserSpec
	err = newStrictDecoder(data).Decode(&dst.AmazonSnowballEdgeBrowserSpec)
	if err == nil {
		jsonAmazonSnowballEdgeBrowserSpec, _ := json.Marshal(dst.AmazonSnowballEdgeBrowserSpec)
		if string(jsonAmazonSnowballEdgeBrowserSpec) == "{}" { // empty struct
			dst.AmazonSnowballEdgeBrowserSpec = nil
		} else {
			match++
		}
	} else {
		dst.AmazonSnowballEdgeBrowserSpec = nil
	}

	// try to unmarshal data into AzureBlobBrowserSpec
	err = newStrictDecoder(data).Decode(&dst.AzureBlobBrowserSpec)
	if err == nil {
		jsonAzureBlobBrowserSpec, _ := json.Marshal(dst.AzureBlobBrowserSpec)
		if string(jsonAzureBlobBrowserSpec) == "{}" { // empty struct
			dst.AzureBlobBrowserSpec = nil
		} else {
			match++
		}
	} else {
		dst.AzureBlobBrowserSpec = nil
	}

	// try to unmarshal data into AzureComputeBrowserSpec
	err = newStrictDecoder(data).Decode(&dst.AzureComputeBrowserSpec)
	if err == nil {
		jsonAzureComputeBrowserSpec, _ := json.Marshal(dst.AzureComputeBrowserSpec)
		if string(jsonAzureComputeBrowserSpec) == "{}" { // empty struct
			dst.AzureComputeBrowserSpec = nil
		} else {
			match++
		}
	} else {
		dst.AzureComputeBrowserSpec = nil
	}

	// try to unmarshal data into AzureDataBoxBrowserSpec
	err = newStrictDecoder(data).Decode(&dst.AzureDataBoxBrowserSpec)
	if err == nil {
		jsonAzureDataBoxBrowserSpec, _ := json.Marshal(dst.AzureDataBoxBrowserSpec)
		if string(jsonAzureDataBoxBrowserSpec) == "{}" { // empty struct
			dst.AzureDataBoxBrowserSpec = nil
		} else {
			match++
		}
	} else {
		dst.AzureDataBoxBrowserSpec = nil
	}

	// try to unmarshal data into GoogleCloudStorageBrowserSpec
	err = newStrictDecoder(data).Decode(&dst.GoogleCloudStorageBrowserSpec)
	if err == nil {
		jsonGoogleCloudStorageBrowserSpec, _ := json.Marshal(dst.GoogleCloudStorageBrowserSpec)
		if string(jsonGoogleCloudStorageBrowserSpec) == "{}" { // empty struct
			dst.GoogleCloudStorageBrowserSpec = nil
		} else {
			match++
		}
	} else {
		dst.GoogleCloudStorageBrowserSpec = nil
	}

	// try to unmarshal data into IBMCloudStorageBrowserSpec
	err = newStrictDecoder(data).Decode(&dst.IBMCloudStorageBrowserSpec)
	if err == nil {
		jsonIBMCloudStorageBrowserSpec, _ := json.Marshal(dst.IBMCloudStorageBrowserSpec)
		if string(jsonIBMCloudStorageBrowserSpec) == "{}" { // empty struct
			dst.IBMCloudStorageBrowserSpec = nil
		} else {
			match++
		}
	} else {
		dst.IBMCloudStorageBrowserSpec = nil
	}

	// try to unmarshal data into S3CompatibleBrowserSpec
	err = newStrictDecoder(data).Decode(&dst.S3CompatibleBrowserSpec)
	if err == nil {
		jsonS3CompatibleBrowserSpec, _ := json.Marshal(dst.S3CompatibleBrowserSpec)
		if string(jsonS3CompatibleBrowserSpec) == "{}" { // empty struct
			dst.S3CompatibleBrowserSpec = nil
		} else {
			match++
		}
	} else {
		dst.S3CompatibleBrowserSpec = nil
	}

	// try to unmarshal data into WasabiCloudStorageBrowserSpec
	err = newStrictDecoder(data).Decode(&dst.WasabiCloudStorageBrowserSpec)
	if err == nil {
		jsonWasabiCloudStorageBrowserSpec, _ := json.Marshal(dst.WasabiCloudStorageBrowserSpec)
		if string(jsonWasabiCloudStorageBrowserSpec) == "{}" { // empty struct
			dst.WasabiCloudStorageBrowserSpec = nil
		} else {
			match++
		}
	} else {
		dst.WasabiCloudStorageBrowserSpec = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AmazonEC2BrowserSpec = nil
		dst.AmazonS3BrowserSpec = nil
		dst.AmazonSnowballEdgeBrowserSpec = nil
		dst.AzureBlobBrowserSpec = nil
		dst.AzureComputeBrowserSpec = nil
		dst.AzureDataBoxBrowserSpec = nil
		dst.GoogleCloudStorageBrowserSpec = nil
		dst.IBMCloudStorageBrowserSpec = nil
		dst.S3CompatibleBrowserSpec = nil
		dst.WasabiCloudStorageBrowserSpec = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CloudBrowserSpec)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CloudBrowserSpec)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CloudBrowserSpec) MarshalJSON() ([]byte, error) {
	if src.AmazonEC2BrowserSpec != nil {
		return json.Marshal(&src.AmazonEC2BrowserSpec)
	}

	if src.AmazonS3BrowserSpec != nil {
		return json.Marshal(&src.AmazonS3BrowserSpec)
	}

	if src.AmazonSnowballEdgeBrowserSpec != nil {
		return json.Marshal(&src.AmazonSnowballEdgeBrowserSpec)
	}

	if src.AzureBlobBrowserSpec != nil {
		return json.Marshal(&src.AzureBlobBrowserSpec)
	}

	if src.AzureComputeBrowserSpec != nil {
		return json.Marshal(&src.AzureComputeBrowserSpec)
	}

	if src.AzureDataBoxBrowserSpec != nil {
		return json.Marshal(&src.AzureDataBoxBrowserSpec)
	}

	if src.GoogleCloudStorageBrowserSpec != nil {
		return json.Marshal(&src.GoogleCloudStorageBrowserSpec)
	}

	if src.IBMCloudStorageBrowserSpec != nil {
		return json.Marshal(&src.IBMCloudStorageBrowserSpec)
	}

	if src.S3CompatibleBrowserSpec != nil {
		return json.Marshal(&src.S3CompatibleBrowserSpec)
	}

	if src.WasabiCloudStorageBrowserSpec != nil {
		return json.Marshal(&src.WasabiCloudStorageBrowserSpec)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CloudBrowserSpec) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AmazonEC2BrowserSpec != nil {
		return obj.AmazonEC2BrowserSpec
	}

	if obj.AmazonS3BrowserSpec != nil {
		return obj.AmazonS3BrowserSpec
	}

	if obj.AmazonSnowballEdgeBrowserSpec != nil {
		return obj.AmazonSnowballEdgeBrowserSpec
	}

	if obj.AzureBlobBrowserSpec != nil {
		return obj.AzureBlobBrowserSpec
	}

	if obj.AzureComputeBrowserSpec != nil {
		return obj.AzureComputeBrowserSpec
	}

	if obj.AzureDataBoxBrowserSpec != nil {
		return obj.AzureDataBoxBrowserSpec
	}

	if obj.GoogleCloudStorageBrowserSpec != nil {
		return obj.GoogleCloudStorageBrowserSpec
	}

	if obj.IBMCloudStorageBrowserSpec != nil {
		return obj.IBMCloudStorageBrowserSpec
	}

	if obj.S3CompatibleBrowserSpec != nil {
		return obj.S3CompatibleBrowserSpec
	}

	if obj.WasabiCloudStorageBrowserSpec != nil {
		return obj.WasabiCloudStorageBrowserSpec
	}

	// all schemas are nil
	return nil
}

type NullableCloudBrowserSpec struct {
	value *CloudBrowserSpec
	isSet bool
}

func (v NullableCloudBrowserSpec) Get() *CloudBrowserSpec {
	return v.value
}

func (v *NullableCloudBrowserSpec) Set(val *CloudBrowserSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudBrowserSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudBrowserSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudBrowserSpec(val *CloudBrowserSpec) *NullableCloudBrowserSpec {
	return &NullableCloudBrowserSpec{value: val, isSet: true}
}

func (v NullableCloudBrowserSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudBrowserSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


