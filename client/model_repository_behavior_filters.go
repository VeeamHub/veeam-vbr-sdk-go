/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// RepositoryBehaviorFilters struct for RepositoryBehaviorFilters
type RepositoryBehaviorFilters struct {
	OverwriteOwner *bool `json:"overwriteOwner,omitempty"`
}

// NewRepositoryBehaviorFilters instantiates a new RepositoryBehaviorFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryBehaviorFilters() *RepositoryBehaviorFilters {
	this := RepositoryBehaviorFilters{}
	return &this
}

// NewRepositoryBehaviorFiltersWithDefaults instantiates a new RepositoryBehaviorFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryBehaviorFiltersWithDefaults() *RepositoryBehaviorFilters {
	this := RepositoryBehaviorFilters{}
	return &this
}

// GetOverwriteOwner returns the OverwriteOwner field value if set, zero value otherwise.
func (o *RepositoryBehaviorFilters) GetOverwriteOwner() bool {
	if o == nil || isNil(o.OverwriteOwner) {
		var ret bool
		return ret
	}
	return *o.OverwriteOwner
}

// GetOverwriteOwnerOk returns a tuple with the OverwriteOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryBehaviorFilters) GetOverwriteOwnerOk() (*bool, bool) {
	if o == nil || isNil(o.OverwriteOwner) {
    return nil, false
	}
	return o.OverwriteOwner, true
}

// HasOverwriteOwner returns a boolean if a field has been set.
func (o *RepositoryBehaviorFilters) HasOverwriteOwner() bool {
	if o != nil && !isNil(o.OverwriteOwner) {
		return true
	}

	return false
}

// SetOverwriteOwner gets a reference to the given bool and assigns it to the OverwriteOwner field.
func (o *RepositoryBehaviorFilters) SetOverwriteOwner(v bool) {
	o.OverwriteOwner = &v
}

func (o RepositoryBehaviorFilters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.OverwriteOwner) {
		toSerialize["overwriteOwner"] = o.OverwriteOwner
	}
	return json.Marshal(toSerialize)
}

type NullableRepositoryBehaviorFilters struct {
	value *RepositoryBehaviorFilters
	isSet bool
}

func (v NullableRepositoryBehaviorFilters) Get() *RepositoryBehaviorFilters {
	return v.value
}

func (v *NullableRepositoryBehaviorFilters) Set(val *RepositoryBehaviorFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryBehaviorFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryBehaviorFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryBehaviorFilters(val *RepositoryBehaviorFilters) *NullableRepositoryBehaviorFilters {
	return &NullableRepositoryBehaviorFilters{value: val, isSet: true}
}

func (v NullableRepositoryBehaviorFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryBehaviorFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


