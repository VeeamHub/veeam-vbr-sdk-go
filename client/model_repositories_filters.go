/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// RepositoriesFilters struct for RepositoriesFilters
type RepositoriesFilters struct {
	// Number of repositories to skip.
	Skip *int32 `json:"skip,omitempty"`
	// Maximum number of repositories to return.
	Limit *int32 `json:"limit,omitempty"`
	OrderColumn *ERepositoryFiltersOrderColumn `json:"orderColumn,omitempty"`
	// Sorts repositories in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `json:"orderAsc,omitempty"`
	// Filters repositories by the `nameFilter` pattern. The pattern can match any repository parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	NameFilter *string `json:"nameFilter,omitempty"`
	TypeFilter *ERepositoryType `json:"typeFilter,omitempty"`
	// Filters repositories by ID of the backup server.
	HostIdFilter *string `json:"hostIdFilter,omitempty"`
	// Filters repositories by path to the folder where backup files are stored.
	PathFilter *string `json:"pathFilter,omitempty"`
	// Filters repositories by VM Backup API parameters converted to the base64 string. To obtain the string, call the `GetApiProductInfoString` method of VM Backup API.
	VmbApiFilter *string `json:"vmbApiFilter,omitempty"`
	// Filters repositories by ID of a platform that you use to communicate with VM Backup API.
	VmbApiPlatform *string `json:"vmbApiPlatform,omitempty"`
}

// NewRepositoriesFilters instantiates a new RepositoriesFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoriesFilters() *RepositoriesFilters {
	this := RepositoriesFilters{}
	return &this
}

// NewRepositoriesFiltersWithDefaults instantiates a new RepositoriesFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoriesFiltersWithDefaults() *RepositoriesFilters {
	this := RepositoriesFilters{}
	return &this
}

// GetSkip returns the Skip field value if set, zero value otherwise.
func (o *RepositoriesFilters) GetSkip() int32 {
	if o == nil || isNil(o.Skip) {
		var ret int32
		return ret
	}
	return *o.Skip
}

// GetSkipOk returns a tuple with the Skip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoriesFilters) GetSkipOk() (*int32, bool) {
	if o == nil || isNil(o.Skip) {
    return nil, false
	}
	return o.Skip, true
}

// HasSkip returns a boolean if a field has been set.
func (o *RepositoriesFilters) HasSkip() bool {
	if o != nil && !isNil(o.Skip) {
		return true
	}

	return false
}

// SetSkip gets a reference to the given int32 and assigns it to the Skip field.
func (o *RepositoriesFilters) SetSkip(v int32) {
	o.Skip = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *RepositoriesFilters) GetLimit() int32 {
	if o == nil || isNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoriesFilters) GetLimitOk() (*int32, bool) {
	if o == nil || isNil(o.Limit) {
    return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *RepositoriesFilters) HasLimit() bool {
	if o != nil && !isNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *RepositoriesFilters) SetLimit(v int32) {
	o.Limit = &v
}

// GetOrderColumn returns the OrderColumn field value if set, zero value otherwise.
func (o *RepositoriesFilters) GetOrderColumn() ERepositoryFiltersOrderColumn {
	if o == nil || isNil(o.OrderColumn) {
		var ret ERepositoryFiltersOrderColumn
		return ret
	}
	return *o.OrderColumn
}

// GetOrderColumnOk returns a tuple with the OrderColumn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoriesFilters) GetOrderColumnOk() (*ERepositoryFiltersOrderColumn, bool) {
	if o == nil || isNil(o.OrderColumn) {
    return nil, false
	}
	return o.OrderColumn, true
}

// HasOrderColumn returns a boolean if a field has been set.
func (o *RepositoriesFilters) HasOrderColumn() bool {
	if o != nil && !isNil(o.OrderColumn) {
		return true
	}

	return false
}

// SetOrderColumn gets a reference to the given ERepositoryFiltersOrderColumn and assigns it to the OrderColumn field.
func (o *RepositoriesFilters) SetOrderColumn(v ERepositoryFiltersOrderColumn) {
	o.OrderColumn = &v
}

// GetOrderAsc returns the OrderAsc field value if set, zero value otherwise.
func (o *RepositoriesFilters) GetOrderAsc() bool {
	if o == nil || isNil(o.OrderAsc) {
		var ret bool
		return ret
	}
	return *o.OrderAsc
}

// GetOrderAscOk returns a tuple with the OrderAsc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoriesFilters) GetOrderAscOk() (*bool, bool) {
	if o == nil || isNil(o.OrderAsc) {
    return nil, false
	}
	return o.OrderAsc, true
}

// HasOrderAsc returns a boolean if a field has been set.
func (o *RepositoriesFilters) HasOrderAsc() bool {
	if o != nil && !isNil(o.OrderAsc) {
		return true
	}

	return false
}

// SetOrderAsc gets a reference to the given bool and assigns it to the OrderAsc field.
func (o *RepositoriesFilters) SetOrderAsc(v bool) {
	o.OrderAsc = &v
}

// GetNameFilter returns the NameFilter field value if set, zero value otherwise.
func (o *RepositoriesFilters) GetNameFilter() string {
	if o == nil || isNil(o.NameFilter) {
		var ret string
		return ret
	}
	return *o.NameFilter
}

// GetNameFilterOk returns a tuple with the NameFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoriesFilters) GetNameFilterOk() (*string, bool) {
	if o == nil || isNil(o.NameFilter) {
    return nil, false
	}
	return o.NameFilter, true
}

// HasNameFilter returns a boolean if a field has been set.
func (o *RepositoriesFilters) HasNameFilter() bool {
	if o != nil && !isNil(o.NameFilter) {
		return true
	}

	return false
}

// SetNameFilter gets a reference to the given string and assigns it to the NameFilter field.
func (o *RepositoriesFilters) SetNameFilter(v string) {
	o.NameFilter = &v
}

// GetTypeFilter returns the TypeFilter field value if set, zero value otherwise.
func (o *RepositoriesFilters) GetTypeFilter() ERepositoryType {
	if o == nil || isNil(o.TypeFilter) {
		var ret ERepositoryType
		return ret
	}
	return *o.TypeFilter
}

// GetTypeFilterOk returns a tuple with the TypeFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoriesFilters) GetTypeFilterOk() (*ERepositoryType, bool) {
	if o == nil || isNil(o.TypeFilter) {
    return nil, false
	}
	return o.TypeFilter, true
}

// HasTypeFilter returns a boolean if a field has been set.
func (o *RepositoriesFilters) HasTypeFilter() bool {
	if o != nil && !isNil(o.TypeFilter) {
		return true
	}

	return false
}

// SetTypeFilter gets a reference to the given ERepositoryType and assigns it to the TypeFilter field.
func (o *RepositoriesFilters) SetTypeFilter(v ERepositoryType) {
	o.TypeFilter = &v
}

// GetHostIdFilter returns the HostIdFilter field value if set, zero value otherwise.
func (o *RepositoriesFilters) GetHostIdFilter() string {
	if o == nil || isNil(o.HostIdFilter) {
		var ret string
		return ret
	}
	return *o.HostIdFilter
}

// GetHostIdFilterOk returns a tuple with the HostIdFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoriesFilters) GetHostIdFilterOk() (*string, bool) {
	if o == nil || isNil(o.HostIdFilter) {
    return nil, false
	}
	return o.HostIdFilter, true
}

// HasHostIdFilter returns a boolean if a field has been set.
func (o *RepositoriesFilters) HasHostIdFilter() bool {
	if o != nil && !isNil(o.HostIdFilter) {
		return true
	}

	return false
}

// SetHostIdFilter gets a reference to the given string and assigns it to the HostIdFilter field.
func (o *RepositoriesFilters) SetHostIdFilter(v string) {
	o.HostIdFilter = &v
}

// GetPathFilter returns the PathFilter field value if set, zero value otherwise.
func (o *RepositoriesFilters) GetPathFilter() string {
	if o == nil || isNil(o.PathFilter) {
		var ret string
		return ret
	}
	return *o.PathFilter
}

// GetPathFilterOk returns a tuple with the PathFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoriesFilters) GetPathFilterOk() (*string, bool) {
	if o == nil || isNil(o.PathFilter) {
    return nil, false
	}
	return o.PathFilter, true
}

// HasPathFilter returns a boolean if a field has been set.
func (o *RepositoriesFilters) HasPathFilter() bool {
	if o != nil && !isNil(o.PathFilter) {
		return true
	}

	return false
}

// SetPathFilter gets a reference to the given string and assigns it to the PathFilter field.
func (o *RepositoriesFilters) SetPathFilter(v string) {
	o.PathFilter = &v
}

// GetVmbApiFilter returns the VmbApiFilter field value if set, zero value otherwise.
func (o *RepositoriesFilters) GetVmbApiFilter() string {
	if o == nil || isNil(o.VmbApiFilter) {
		var ret string
		return ret
	}
	return *o.VmbApiFilter
}

// GetVmbApiFilterOk returns a tuple with the VmbApiFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoriesFilters) GetVmbApiFilterOk() (*string, bool) {
	if o == nil || isNil(o.VmbApiFilter) {
    return nil, false
	}
	return o.VmbApiFilter, true
}

// HasVmbApiFilter returns a boolean if a field has been set.
func (o *RepositoriesFilters) HasVmbApiFilter() bool {
	if o != nil && !isNil(o.VmbApiFilter) {
		return true
	}

	return false
}

// SetVmbApiFilter gets a reference to the given string and assigns it to the VmbApiFilter field.
func (o *RepositoriesFilters) SetVmbApiFilter(v string) {
	o.VmbApiFilter = &v
}

// GetVmbApiPlatform returns the VmbApiPlatform field value if set, zero value otherwise.
func (o *RepositoriesFilters) GetVmbApiPlatform() string {
	if o == nil || isNil(o.VmbApiPlatform) {
		var ret string
		return ret
	}
	return *o.VmbApiPlatform
}

// GetVmbApiPlatformOk returns a tuple with the VmbApiPlatform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoriesFilters) GetVmbApiPlatformOk() (*string, bool) {
	if o == nil || isNil(o.VmbApiPlatform) {
    return nil, false
	}
	return o.VmbApiPlatform, true
}

// HasVmbApiPlatform returns a boolean if a field has been set.
func (o *RepositoriesFilters) HasVmbApiPlatform() bool {
	if o != nil && !isNil(o.VmbApiPlatform) {
		return true
	}

	return false
}

// SetVmbApiPlatform gets a reference to the given string and assigns it to the VmbApiPlatform field.
func (o *RepositoriesFilters) SetVmbApiPlatform(v string) {
	o.VmbApiPlatform = &v
}

func (o RepositoriesFilters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Skip) {
		toSerialize["skip"] = o.Skip
	}
	if !isNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !isNil(o.OrderColumn) {
		toSerialize["orderColumn"] = o.OrderColumn
	}
	if !isNil(o.OrderAsc) {
		toSerialize["orderAsc"] = o.OrderAsc
	}
	if !isNil(o.NameFilter) {
		toSerialize["nameFilter"] = o.NameFilter
	}
	if !isNil(o.TypeFilter) {
		toSerialize["typeFilter"] = o.TypeFilter
	}
	if !isNil(o.HostIdFilter) {
		toSerialize["hostIdFilter"] = o.HostIdFilter
	}
	if !isNil(o.PathFilter) {
		toSerialize["pathFilter"] = o.PathFilter
	}
	if !isNil(o.VmbApiFilter) {
		toSerialize["vmbApiFilter"] = o.VmbApiFilter
	}
	if !isNil(o.VmbApiPlatform) {
		toSerialize["vmbApiPlatform"] = o.VmbApiPlatform
	}
	return json.Marshal(toSerialize)
}

type NullableRepositoriesFilters struct {
	value *RepositoriesFilters
	isSet bool
}

func (v NullableRepositoriesFilters) Get() *RepositoriesFilters {
	return v.value
}

func (v *NullableRepositoriesFilters) Set(val *RepositoriesFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoriesFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoriesFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoriesFilters(val *RepositoriesFilters) *NullableRepositoriesFilters {
	return &NullableRepositoriesFilters{value: val, isSet: true}
}

func (v NullableRepositoriesFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoriesFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


