/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// CloudCredentialsSpec - struct for CloudCredentialsSpec
type CloudCredentialsSpec struct {
	AmazonCloudCredentialsSpec *AmazonCloudCredentialsSpec
	AzureComputeCloudCredentialsSpec *AzureComputeCloudCredentialsSpec
	AzureStorageCloudCredentialsSpec *AzureStorageCloudCredentialsSpec
	GoogleCloudCredentialsSpec *GoogleCloudCredentialsSpec
}

// AmazonCloudCredentialsSpecAsCloudCredentialsSpec is a convenience function that returns AmazonCloudCredentialsSpec wrapped in CloudCredentialsSpec
func AmazonCloudCredentialsSpecAsCloudCredentialsSpec(v *AmazonCloudCredentialsSpec) CloudCredentialsSpec {
	return CloudCredentialsSpec{
		AmazonCloudCredentialsSpec: v,
	}
}

// AzureComputeCloudCredentialsSpecAsCloudCredentialsSpec is a convenience function that returns AzureComputeCloudCredentialsSpec wrapped in CloudCredentialsSpec
func AzureComputeCloudCredentialsSpecAsCloudCredentialsSpec(v *AzureComputeCloudCredentialsSpec) CloudCredentialsSpec {
	return CloudCredentialsSpec{
		AzureComputeCloudCredentialsSpec: v,
	}
}

// AzureStorageCloudCredentialsSpecAsCloudCredentialsSpec is a convenience function that returns AzureStorageCloudCredentialsSpec wrapped in CloudCredentialsSpec
func AzureStorageCloudCredentialsSpecAsCloudCredentialsSpec(v *AzureStorageCloudCredentialsSpec) CloudCredentialsSpec {
	return CloudCredentialsSpec{
		AzureStorageCloudCredentialsSpec: v,
	}
}

// GoogleCloudCredentialsSpecAsCloudCredentialsSpec is a convenience function that returns GoogleCloudCredentialsSpec wrapped in CloudCredentialsSpec
func GoogleCloudCredentialsSpecAsCloudCredentialsSpec(v *GoogleCloudCredentialsSpec) CloudCredentialsSpec {
	return CloudCredentialsSpec{
		GoogleCloudCredentialsSpec: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CloudCredentialsSpec) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AmazonCloudCredentialsSpec
	err = newStrictDecoder(data).Decode(&dst.AmazonCloudCredentialsSpec)
	if err == nil {
		jsonAmazonCloudCredentialsSpec, _ := json.Marshal(dst.AmazonCloudCredentialsSpec)
		if string(jsonAmazonCloudCredentialsSpec) == "{}" { // empty struct
			dst.AmazonCloudCredentialsSpec = nil
		} else {
			match++
		}
	} else {
		dst.AmazonCloudCredentialsSpec = nil
	}

	// try to unmarshal data into AzureComputeCloudCredentialsSpec
	err = newStrictDecoder(data).Decode(&dst.AzureComputeCloudCredentialsSpec)
	if err == nil {
		jsonAzureComputeCloudCredentialsSpec, _ := json.Marshal(dst.AzureComputeCloudCredentialsSpec)
		if string(jsonAzureComputeCloudCredentialsSpec) == "{}" { // empty struct
			dst.AzureComputeCloudCredentialsSpec = nil
		} else {
			match++
		}
	} else {
		dst.AzureComputeCloudCredentialsSpec = nil
	}

	// try to unmarshal data into AzureStorageCloudCredentialsSpec
	err = newStrictDecoder(data).Decode(&dst.AzureStorageCloudCredentialsSpec)
	if err == nil {
		jsonAzureStorageCloudCredentialsSpec, _ := json.Marshal(dst.AzureStorageCloudCredentialsSpec)
		if string(jsonAzureStorageCloudCredentialsSpec) == "{}" { // empty struct
			dst.AzureStorageCloudCredentialsSpec = nil
		} else {
			match++
		}
	} else {
		dst.AzureStorageCloudCredentialsSpec = nil
	}

	// try to unmarshal data into GoogleCloudCredentialsSpec
	err = newStrictDecoder(data).Decode(&dst.GoogleCloudCredentialsSpec)
	if err == nil {
		jsonGoogleCloudCredentialsSpec, _ := json.Marshal(dst.GoogleCloudCredentialsSpec)
		if string(jsonGoogleCloudCredentialsSpec) == "{}" { // empty struct
			dst.GoogleCloudCredentialsSpec = nil
		} else {
			match++
		}
	} else {
		dst.GoogleCloudCredentialsSpec = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AmazonCloudCredentialsSpec = nil
		dst.AzureComputeCloudCredentialsSpec = nil
		dst.AzureStorageCloudCredentialsSpec = nil
		dst.GoogleCloudCredentialsSpec = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CloudCredentialsSpec)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CloudCredentialsSpec)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CloudCredentialsSpec) MarshalJSON() ([]byte, error) {
	if src.AmazonCloudCredentialsSpec != nil {
		return json.Marshal(&src.AmazonCloudCredentialsSpec)
	}

	if src.AzureComputeCloudCredentialsSpec != nil {
		return json.Marshal(&src.AzureComputeCloudCredentialsSpec)
	}

	if src.AzureStorageCloudCredentialsSpec != nil {
		return json.Marshal(&src.AzureStorageCloudCredentialsSpec)
	}

	if src.GoogleCloudCredentialsSpec != nil {
		return json.Marshal(&src.GoogleCloudCredentialsSpec)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CloudCredentialsSpec) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AmazonCloudCredentialsSpec != nil {
		return obj.AmazonCloudCredentialsSpec
	}

	if obj.AzureComputeCloudCredentialsSpec != nil {
		return obj.AzureComputeCloudCredentialsSpec
	}

	if obj.AzureStorageCloudCredentialsSpec != nil {
		return obj.AzureStorageCloudCredentialsSpec
	}

	if obj.GoogleCloudCredentialsSpec != nil {
		return obj.GoogleCloudCredentialsSpec
	}

	// all schemas are nil
	return nil
}

type NullableCloudCredentialsSpec struct {
	value *CloudCredentialsSpec
	isSet bool
}

func (v NullableCloudCredentialsSpec) Get() *CloudCredentialsSpec {
	return v.value
}

func (v *NullableCloudCredentialsSpec) Set(val *CloudCredentialsSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudCredentialsSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudCredentialsSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudCredentialsSpec(val *CloudCredentialsSpec) *NullableCloudCredentialsSpec {
	return &NullableCloudCredentialsSpec{value: val, isSet: true}
}

func (v NullableCloudCredentialsSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudCredentialsSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


