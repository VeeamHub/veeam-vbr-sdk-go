/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// RestoreTargetFolderSpec Destination VM folder.
type RestoreTargetFolderSpec struct {
	// VM name.
	VmName *string `json:"vmName,omitempty"`
	Folder VmwareObjectModel `json:"folder"`
	// If *true*, Veeam Backup & Replication restores tags that were assigned to the original VMs, and assigns them to the restored VMs.
	RestoreVmTags *bool `json:"restoreVmTags,omitempty"`
}

// NewRestoreTargetFolderSpec instantiates a new RestoreTargetFolderSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreTargetFolderSpec(folder VmwareObjectModel) *RestoreTargetFolderSpec {
	this := RestoreTargetFolderSpec{}
	this.Folder = folder
	return &this
}

// NewRestoreTargetFolderSpecWithDefaults instantiates a new RestoreTargetFolderSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreTargetFolderSpecWithDefaults() *RestoreTargetFolderSpec {
	this := RestoreTargetFolderSpec{}
	return &this
}

// GetVmName returns the VmName field value if set, zero value otherwise.
func (o *RestoreTargetFolderSpec) GetVmName() string {
	if o == nil || isNil(o.VmName) {
		var ret string
		return ret
	}
	return *o.VmName
}

// GetVmNameOk returns a tuple with the VmName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreTargetFolderSpec) GetVmNameOk() (*string, bool) {
	if o == nil || isNil(o.VmName) {
    return nil, false
	}
	return o.VmName, true
}

// HasVmName returns a boolean if a field has been set.
func (o *RestoreTargetFolderSpec) HasVmName() bool {
	if o != nil && !isNil(o.VmName) {
		return true
	}

	return false
}

// SetVmName gets a reference to the given string and assigns it to the VmName field.
func (o *RestoreTargetFolderSpec) SetVmName(v string) {
	o.VmName = &v
}

// GetFolder returns the Folder field value
func (o *RestoreTargetFolderSpec) GetFolder() VmwareObjectModel {
	if o == nil {
		var ret VmwareObjectModel
		return ret
	}

	return o.Folder
}

// GetFolderOk returns a tuple with the Folder field value
// and a boolean to check if the value has been set.
func (o *RestoreTargetFolderSpec) GetFolderOk() (*VmwareObjectModel, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Folder, true
}

// SetFolder sets field value
func (o *RestoreTargetFolderSpec) SetFolder(v VmwareObjectModel) {
	o.Folder = v
}

// GetRestoreVmTags returns the RestoreVmTags field value if set, zero value otherwise.
func (o *RestoreTargetFolderSpec) GetRestoreVmTags() bool {
	if o == nil || isNil(o.RestoreVmTags) {
		var ret bool
		return ret
	}
	return *o.RestoreVmTags
}

// GetRestoreVmTagsOk returns a tuple with the RestoreVmTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreTargetFolderSpec) GetRestoreVmTagsOk() (*bool, bool) {
	if o == nil || isNil(o.RestoreVmTags) {
    return nil, false
	}
	return o.RestoreVmTags, true
}

// HasRestoreVmTags returns a boolean if a field has been set.
func (o *RestoreTargetFolderSpec) HasRestoreVmTags() bool {
	if o != nil && !isNil(o.RestoreVmTags) {
		return true
	}

	return false
}

// SetRestoreVmTags gets a reference to the given bool and assigns it to the RestoreVmTags field.
func (o *RestoreTargetFolderSpec) SetRestoreVmTags(v bool) {
	o.RestoreVmTags = &v
}

func (o RestoreTargetFolderSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.VmName) {
		toSerialize["vmName"] = o.VmName
	}
	if true {
		toSerialize["folder"] = o.Folder
	}
	if !isNil(o.RestoreVmTags) {
		toSerialize["restoreVmTags"] = o.RestoreVmTags
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreTargetFolderSpec struct {
	value *RestoreTargetFolderSpec
	isSet bool
}

func (v NullableRestoreTargetFolderSpec) Get() *RestoreTargetFolderSpec {
	return v.value
}

func (v *NullableRestoreTargetFolderSpec) Set(val *RestoreTargetFolderSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreTargetFolderSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreTargetFolderSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreTargetFolderSpec(val *RestoreTargetFolderSpec) *NullableRestoreTargetFolderSpec {
	return &NullableRestoreTargetFolderSpec{value: val, isSet: true}
}

func (v NullableRestoreTargetFolderSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreTargetFolderSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


