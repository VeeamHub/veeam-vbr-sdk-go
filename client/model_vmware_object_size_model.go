/*
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic. 
 *
 * API version: 1.0-rev1
 * Contact: support@veeam.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// VmwareObjectSizeModel struct for VmwareObjectSizeModel
type VmwareObjectSizeModel struct {
	InventoryObject VmwareObjectModel `json:"inventoryObject"`
	// Size used by the VMware vSphere object.
	Size *string `json:"size,omitempty"`
}

// NewVmwareObjectSizeModel instantiates a new VmwareObjectSizeModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmwareObjectSizeModel(inventoryObject VmwareObjectModel) *VmwareObjectSizeModel {
	this := VmwareObjectSizeModel{}
	this.InventoryObject = inventoryObject
	return &this
}

// NewVmwareObjectSizeModelWithDefaults instantiates a new VmwareObjectSizeModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmwareObjectSizeModelWithDefaults() *VmwareObjectSizeModel {
	this := VmwareObjectSizeModel{}
	return &this
}

// GetInventoryObject returns the InventoryObject field value
func (o *VmwareObjectSizeModel) GetInventoryObject() VmwareObjectModel {
	if o == nil {
		var ret VmwareObjectModel
		return ret
	}

	return o.InventoryObject
}

// GetInventoryObjectOk returns a tuple with the InventoryObject field value
// and a boolean to check if the value has been set.
func (o *VmwareObjectSizeModel) GetInventoryObjectOk() (*VmwareObjectModel, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.InventoryObject, true
}

// SetInventoryObject sets field value
func (o *VmwareObjectSizeModel) SetInventoryObject(v VmwareObjectModel) {
	o.InventoryObject = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *VmwareObjectSizeModel) GetSize() string {
	if o == nil || o.Size == nil {
		var ret string
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareObjectSizeModel) GetSizeOk() (*string, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *VmwareObjectSizeModel) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given string and assigns it to the Size field.
func (o *VmwareObjectSizeModel) SetSize(v string) {
	o.Size = &v
}

func (o VmwareObjectSizeModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["inventoryObject"] = o.InventoryObject
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	return json.Marshal(toSerialize)
}

type NullableVmwareObjectSizeModel struct {
	value *VmwareObjectSizeModel
	isSet bool
}

func (v NullableVmwareObjectSizeModel) Get() *VmwareObjectSizeModel {
	return v.value
}

func (v *NullableVmwareObjectSizeModel) Set(val *VmwareObjectSizeModel) {
	v.value = val
	v.isSet = true
}

func (v NullableVmwareObjectSizeModel) IsSet() bool {
	return v.isSet
}

func (v *NullableVmwareObjectSizeModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmwareObjectSizeModel(val *VmwareObjectSizeModel) *NullableVmwareObjectSizeModel {
	return &NullableVmwareObjectSizeModel{value: val, isSet: true}
}

func (v NullableVmwareObjectSizeModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmwareObjectSizeModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


