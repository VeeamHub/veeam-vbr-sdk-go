/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// BackupScriptSettingsModel Pre-freeze and post-thaw scripts.
type BackupScriptSettingsModel struct {
	ScriptProcessingMode EBackupScriptProcessingMode `json:"scriptProcessingMode"`
	WindowsScripts *BackupWindowsScriptModel `json:"windowsScripts,omitempty"`
	LinuxScripts *BackupLinuxScriptModel `json:"linuxScripts,omitempty"`
}

// NewBackupScriptSettingsModel instantiates a new BackupScriptSettingsModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupScriptSettingsModel(scriptProcessingMode EBackupScriptProcessingMode) *BackupScriptSettingsModel {
	this := BackupScriptSettingsModel{}
	this.ScriptProcessingMode = scriptProcessingMode
	return &this
}

// NewBackupScriptSettingsModelWithDefaults instantiates a new BackupScriptSettingsModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupScriptSettingsModelWithDefaults() *BackupScriptSettingsModel {
	this := BackupScriptSettingsModel{}
	return &this
}

// GetScriptProcessingMode returns the ScriptProcessingMode field value
func (o *BackupScriptSettingsModel) GetScriptProcessingMode() EBackupScriptProcessingMode {
	if o == nil {
		var ret EBackupScriptProcessingMode
		return ret
	}

	return o.ScriptProcessingMode
}

// GetScriptProcessingModeOk returns a tuple with the ScriptProcessingMode field value
// and a boolean to check if the value has been set.
func (o *BackupScriptSettingsModel) GetScriptProcessingModeOk() (*EBackupScriptProcessingMode, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ScriptProcessingMode, true
}

// SetScriptProcessingMode sets field value
func (o *BackupScriptSettingsModel) SetScriptProcessingMode(v EBackupScriptProcessingMode) {
	o.ScriptProcessingMode = v
}

// GetWindowsScripts returns the WindowsScripts field value if set, zero value otherwise.
func (o *BackupScriptSettingsModel) GetWindowsScripts() BackupWindowsScriptModel {
	if o == nil || isNil(o.WindowsScripts) {
		var ret BackupWindowsScriptModel
		return ret
	}
	return *o.WindowsScripts
}

// GetWindowsScriptsOk returns a tuple with the WindowsScripts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupScriptSettingsModel) GetWindowsScriptsOk() (*BackupWindowsScriptModel, bool) {
	if o == nil || isNil(o.WindowsScripts) {
    return nil, false
	}
	return o.WindowsScripts, true
}

// HasWindowsScripts returns a boolean if a field has been set.
func (o *BackupScriptSettingsModel) HasWindowsScripts() bool {
	if o != nil && !isNil(o.WindowsScripts) {
		return true
	}

	return false
}

// SetWindowsScripts gets a reference to the given BackupWindowsScriptModel and assigns it to the WindowsScripts field.
func (o *BackupScriptSettingsModel) SetWindowsScripts(v BackupWindowsScriptModel) {
	o.WindowsScripts = &v
}

// GetLinuxScripts returns the LinuxScripts field value if set, zero value otherwise.
func (o *BackupScriptSettingsModel) GetLinuxScripts() BackupLinuxScriptModel {
	if o == nil || isNil(o.LinuxScripts) {
		var ret BackupLinuxScriptModel
		return ret
	}
	return *o.LinuxScripts
}

// GetLinuxScriptsOk returns a tuple with the LinuxScripts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupScriptSettingsModel) GetLinuxScriptsOk() (*BackupLinuxScriptModel, bool) {
	if o == nil || isNil(o.LinuxScripts) {
    return nil, false
	}
	return o.LinuxScripts, true
}

// HasLinuxScripts returns a boolean if a field has been set.
func (o *BackupScriptSettingsModel) HasLinuxScripts() bool {
	if o != nil && !isNil(o.LinuxScripts) {
		return true
	}

	return false
}

// SetLinuxScripts gets a reference to the given BackupLinuxScriptModel and assigns it to the LinuxScripts field.
func (o *BackupScriptSettingsModel) SetLinuxScripts(v BackupLinuxScriptModel) {
	o.LinuxScripts = &v
}

func (o BackupScriptSettingsModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["scriptProcessingMode"] = o.ScriptProcessingMode
	}
	if !isNil(o.WindowsScripts) {
		toSerialize["windowsScripts"] = o.WindowsScripts
	}
	if !isNil(o.LinuxScripts) {
		toSerialize["linuxScripts"] = o.LinuxScripts
	}
	return json.Marshal(toSerialize)
}

type NullableBackupScriptSettingsModel struct {
	value *BackupScriptSettingsModel
	isSet bool
}

func (v NullableBackupScriptSettingsModel) Get() *BackupScriptSettingsModel {
	return v.value
}

func (v *NullableBackupScriptSettingsModel) Set(val *BackupScriptSettingsModel) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupScriptSettingsModel) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupScriptSettingsModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupScriptSettingsModel(val *BackupScriptSettingsModel) *NullableBackupScriptSettingsModel {
	return &NullableBackupScriptSettingsModel{value: val, isSet: true}
}

func (v NullableBackupScriptSettingsModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupScriptSettingsModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


