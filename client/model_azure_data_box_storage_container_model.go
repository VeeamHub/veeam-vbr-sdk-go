/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AzureDataBoxStorageContainerModel Azure Data Box container where backup data is stored.
type AzureDataBoxStorageContainerModel struct {
	// Container name.
	ContainerName *string `json:"containerName,omitempty"`
	// Name of the folder that the object storage repository is mapped to.
	FolderName *string `json:"folderName,omitempty"`
}

// NewAzureDataBoxStorageContainerModel instantiates a new AzureDataBoxStorageContainerModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureDataBoxStorageContainerModel() *AzureDataBoxStorageContainerModel {
	this := AzureDataBoxStorageContainerModel{}
	return &this
}

// NewAzureDataBoxStorageContainerModelWithDefaults instantiates a new AzureDataBoxStorageContainerModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureDataBoxStorageContainerModelWithDefaults() *AzureDataBoxStorageContainerModel {
	this := AzureDataBoxStorageContainerModel{}
	return &this
}

// GetContainerName returns the ContainerName field value if set, zero value otherwise.
func (o *AzureDataBoxStorageContainerModel) GetContainerName() string {
	if o == nil || isNil(o.ContainerName) {
		var ret string
		return ret
	}
	return *o.ContainerName
}

// GetContainerNameOk returns a tuple with the ContainerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureDataBoxStorageContainerModel) GetContainerNameOk() (*string, bool) {
	if o == nil || isNil(o.ContainerName) {
    return nil, false
	}
	return o.ContainerName, true
}

// HasContainerName returns a boolean if a field has been set.
func (o *AzureDataBoxStorageContainerModel) HasContainerName() bool {
	if o != nil && !isNil(o.ContainerName) {
		return true
	}

	return false
}

// SetContainerName gets a reference to the given string and assigns it to the ContainerName field.
func (o *AzureDataBoxStorageContainerModel) SetContainerName(v string) {
	o.ContainerName = &v
}

// GetFolderName returns the FolderName field value if set, zero value otherwise.
func (o *AzureDataBoxStorageContainerModel) GetFolderName() string {
	if o == nil || isNil(o.FolderName) {
		var ret string
		return ret
	}
	return *o.FolderName
}

// GetFolderNameOk returns a tuple with the FolderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureDataBoxStorageContainerModel) GetFolderNameOk() (*string, bool) {
	if o == nil || isNil(o.FolderName) {
    return nil, false
	}
	return o.FolderName, true
}

// HasFolderName returns a boolean if a field has been set.
func (o *AzureDataBoxStorageContainerModel) HasFolderName() bool {
	if o != nil && !isNil(o.FolderName) {
		return true
	}

	return false
}

// SetFolderName gets a reference to the given string and assigns it to the FolderName field.
func (o *AzureDataBoxStorageContainerModel) SetFolderName(v string) {
	o.FolderName = &v
}

func (o AzureDataBoxStorageContainerModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ContainerName) {
		toSerialize["containerName"] = o.ContainerName
	}
	if !isNil(o.FolderName) {
		toSerialize["folderName"] = o.FolderName
	}
	return json.Marshal(toSerialize)
}

type NullableAzureDataBoxStorageContainerModel struct {
	value *AzureDataBoxStorageContainerModel
	isSet bool
}

func (v NullableAzureDataBoxStorageContainerModel) Get() *AzureDataBoxStorageContainerModel {
	return v.value
}

func (v *NullableAzureDataBoxStorageContainerModel) Set(val *AzureDataBoxStorageContainerModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureDataBoxStorageContainerModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureDataBoxStorageContainerModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureDataBoxStorageContainerModel(val *AzureDataBoxStorageContainerModel) *NullableAzureDataBoxStorageContainerModel {
	return &NullableAzureDataBoxStorageContainerModel{value: val, isSet: true}
}

func (v NullableAzureDataBoxStorageContainerModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureDataBoxStorageContainerModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


