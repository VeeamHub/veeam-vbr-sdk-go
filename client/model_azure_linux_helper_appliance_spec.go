/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AzureLinuxHelperApplianceSpec struct for AzureLinuxHelperApplianceSpec
type AzureLinuxHelperApplianceSpec struct {
	CloudHelperApplianceSpec
}

// NewAzureLinuxHelperApplianceSpec instantiates a new AzureLinuxHelperApplianceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureLinuxHelperApplianceSpec() *AzureLinuxHelperApplianceSpec {
	this := AzureLinuxHelperApplianceSpec{}
	return &this
}

// NewAzureLinuxHelperApplianceSpecWithDefaults instantiates a new AzureLinuxHelperApplianceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureLinuxHelperApplianceSpecWithDefaults() *AzureLinuxHelperApplianceSpec {
	this := AzureLinuxHelperApplianceSpec{}
	return &this
}

func (o AzureLinuxHelperApplianceSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedCloudHelperApplianceSpec, errCloudHelperApplianceSpec := json.Marshal(o.CloudHelperApplianceSpec)
	if errCloudHelperApplianceSpec != nil {
		return []byte{}, errCloudHelperApplianceSpec
	}
	errCloudHelperApplianceSpec = json.Unmarshal([]byte(serializedCloudHelperApplianceSpec), &toSerialize)
	if errCloudHelperApplianceSpec != nil {
		return []byte{}, errCloudHelperApplianceSpec
	}
	return json.Marshal(toSerialize)
}

type NullableAzureLinuxHelperApplianceSpec struct {
	value *AzureLinuxHelperApplianceSpec
	isSet bool
}

func (v NullableAzureLinuxHelperApplianceSpec) Get() *AzureLinuxHelperApplianceSpec {
	return v.value
}

func (v *NullableAzureLinuxHelperApplianceSpec) Set(val *AzureLinuxHelperApplianceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureLinuxHelperApplianceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureLinuxHelperApplianceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureLinuxHelperApplianceSpec(val *AzureLinuxHelperApplianceSpec) *NullableAzureLinuxHelperApplianceSpec {
	return &NullableAzureLinuxHelperApplianceSpec{value: val, isSet: true}
}

func (v NullableAzureLinuxHelperApplianceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureLinuxHelperApplianceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


