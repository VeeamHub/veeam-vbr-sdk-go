/*
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic. 
 *
 * API version: 1.0-rev2
 * Contact: support@veeam.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// EPlatformType the model 'EPlatformType'
type EPlatformType string

// List of EPlatformType
const (
	EPLATFORMTYPE_V_MWARE EPlatformType = "VMware"
	EPLATFORMTYPE_HYPER_V EPlatformType = "HyperV"
	EPLATFORMTYPE_VCD EPlatformType = "Vcd"
	EPLATFORMTYPE_WINDOWS_PHYSICAL EPlatformType = "WindowsPhysical"
	EPLATFORMTYPE_LINUX_PHYSICAL EPlatformType = "LinuxPhysical"
	EPLATFORMTYPE_TAPE EPlatformType = "Tape"
	EPLATFORMTYPE_NAS_BACKUP EPlatformType = "NasBackup"
	EPLATFORMTYPE_CUSTOM_PLATFORM EPlatformType = "CustomPlatform"
)

func (v *EPlatformType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EPlatformType(value)
	for _, existing := range []EPlatformType{ "VMware", "HyperV", "Vcd", "WindowsPhysical", "LinuxPhysical", "Tape", "NasBackup", "CustomPlatform",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EPlatformType", value)
}

// Ptr returns reference to EPlatformType value
func (v EPlatformType) Ptr() *EPlatformType {
	return &v
}

type NullableEPlatformType struct {
	value *EPlatformType
	isSet bool
}

func (v NullableEPlatformType) Get() *EPlatformType {
	return v.value
}

func (v *NullableEPlatformType) Set(val *EPlatformType) {
	v.value = val
	v.isSet = true
}

func (v NullableEPlatformType) IsSet() bool {
	return v.isSet
}

func (v *NullableEPlatformType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEPlatformType(val *EPlatformType) *NullableEPlatformType {
	return &NullableEPlatformType{value: val, isSet: true}
}

func (v NullableEPlatformType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEPlatformType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

