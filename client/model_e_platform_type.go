/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// EPlatformType Platform name.
type EPlatformType string

// List of EPlatformType
const (
	EPLATFORMTYPE_V_MWARE EPlatformType = "VMware"
	EPLATFORMTYPE_HYPER_V EPlatformType = "HyperV"
	EPLATFORMTYPE_VCD EPlatformType = "Vcd"
	EPLATFORMTYPE_WINDOWS_PHYSICAL EPlatformType = "WindowsPhysical"
	EPLATFORMTYPE_LINUX_PHYSICAL EPlatformType = "LinuxPhysical"
	EPLATFORMTYPE_TAPE EPlatformType = "Tape"
	EPLATFORMTYPE_NAS_BACKUP EPlatformType = "NasBackup"
	EPLATFORMTYPE_CUSTOM_PLATFORM EPlatformType = "CustomPlatform"
)

// All allowed values of EPlatformType enum
var AllowedEPlatformTypeEnumValues = []EPlatformType{
	"VMware",
	"HyperV",
	"Vcd",
	"WindowsPhysical",
	"LinuxPhysical",
	"Tape",
	"NasBackup",
	"CustomPlatform",
}

func (v *EPlatformType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EPlatformType(value)
	for _, existing := range AllowedEPlatformTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EPlatformType", value)
}

// NewEPlatformTypeFromValue returns a pointer to a valid EPlatformType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEPlatformTypeFromValue(v string) (*EPlatformType, error) {
	ev := EPlatformType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EPlatformType: valid values are %v", v, AllowedEPlatformTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EPlatformType) IsValid() bool {
	for _, existing := range AllowedEPlatformTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EPlatformType value
func (v EPlatformType) Ptr() *EPlatformType {
	return &v
}

type NullableEPlatformType struct {
	value *EPlatformType
	isSet bool
}

func (v NullableEPlatformType) Get() *EPlatformType {
	return v.value
}

func (v *NullableEPlatformType) Set(val *EPlatformType) {
	v.value = val
	v.isSet = true
}

func (v NullableEPlatformType) IsSet() bool {
	return v.isSet
}

func (v *NullableEPlatformType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEPlatformType(val *EPlatformType) *NullableEPlatformType {
	return &NullableEPlatformType{value: val, isSet: true}
}

func (v NullableEPlatformType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEPlatformType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

