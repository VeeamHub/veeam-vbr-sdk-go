/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AmazonS3BrowserModelAllOf struct for AmazonS3BrowserModelAllOf
type AmazonS3BrowserModelAllOf struct {
	// ID of a server used to connect to the object storage.
	HostId string `json:"hostId"`
	RegionType EAmazonRegionType `json:"regionType"`
	// Array of AWS regions belonged to the region type.
	Regions []AmazonS3RegionBrowserModel `json:"regions,omitempty"`
}

// NewAmazonS3BrowserModelAllOf instantiates a new AmazonS3BrowserModelAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmazonS3BrowserModelAllOf(hostId string, regionType EAmazonRegionType) *AmazonS3BrowserModelAllOf {
	this := AmazonS3BrowserModelAllOf{}
	this.HostId = hostId
	this.RegionType = regionType
	return &this
}

// NewAmazonS3BrowserModelAllOfWithDefaults instantiates a new AmazonS3BrowserModelAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmazonS3BrowserModelAllOfWithDefaults() *AmazonS3BrowserModelAllOf {
	this := AmazonS3BrowserModelAllOf{}
	return &this
}

// GetHostId returns the HostId field value
func (o *AmazonS3BrowserModelAllOf) GetHostId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HostId
}

// GetHostIdOk returns a tuple with the HostId field value
// and a boolean to check if the value has been set.
func (o *AmazonS3BrowserModelAllOf) GetHostIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.HostId, true
}

// SetHostId sets field value
func (o *AmazonS3BrowserModelAllOf) SetHostId(v string) {
	o.HostId = v
}

// GetRegionType returns the RegionType field value
func (o *AmazonS3BrowserModelAllOf) GetRegionType() EAmazonRegionType {
	if o == nil {
		var ret EAmazonRegionType
		return ret
	}

	return o.RegionType
}

// GetRegionTypeOk returns a tuple with the RegionType field value
// and a boolean to check if the value has been set.
func (o *AmazonS3BrowserModelAllOf) GetRegionTypeOk() (*EAmazonRegionType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.RegionType, true
}

// SetRegionType sets field value
func (o *AmazonS3BrowserModelAllOf) SetRegionType(v EAmazonRegionType) {
	o.RegionType = v
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *AmazonS3BrowserModelAllOf) GetRegions() []AmazonS3RegionBrowserModel {
	if o == nil || isNil(o.Regions) {
		var ret []AmazonS3RegionBrowserModel
		return ret
	}
	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmazonS3BrowserModelAllOf) GetRegionsOk() ([]AmazonS3RegionBrowserModel, bool) {
	if o == nil || isNil(o.Regions) {
    return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *AmazonS3BrowserModelAllOf) HasRegions() bool {
	if o != nil && !isNil(o.Regions) {
		return true
	}

	return false
}

// SetRegions gets a reference to the given []AmazonS3RegionBrowserModel and assigns it to the Regions field.
func (o *AmazonS3BrowserModelAllOf) SetRegions(v []AmazonS3RegionBrowserModel) {
	o.Regions = v
}

func (o AmazonS3BrowserModelAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["hostId"] = o.HostId
	}
	if true {
		toSerialize["regionType"] = o.RegionType
	}
	if !isNil(o.Regions) {
		toSerialize["regions"] = o.Regions
	}
	return json.Marshal(toSerialize)
}

type NullableAmazonS3BrowserModelAllOf struct {
	value *AmazonS3BrowserModelAllOf
	isSet bool
}

func (v NullableAmazonS3BrowserModelAllOf) Get() *AmazonS3BrowserModelAllOf {
	return v.value
}

func (v *NullableAmazonS3BrowserModelAllOf) Set(val *AmazonS3BrowserModelAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAmazonS3BrowserModelAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAmazonS3BrowserModelAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmazonS3BrowserModelAllOf(val *AmazonS3BrowserModelAllOf) *NullableAmazonS3BrowserModelAllOf {
	return &NullableAmazonS3BrowserModelAllOf{value: val, isSet: true}
}

func (v NullableAmazonS3BrowserModelAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmazonS3BrowserModelAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


