// Code generated by go-swagger; DO NOT EDIT.

package managed_servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/veeamhub/veeam-vbr-sdk-go/models"
)

// GetManagedServerReader is a Reader for the GetManagedServer structure.
type GetManagedServerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetManagedServerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetManagedServerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetManagedServerUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetManagedServerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetManagedServerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetManagedServerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetManagedServerOK creates a GetManagedServerOK with default headers values
func NewGetManagedServerOK() *GetManagedServerOK {
	return &GetManagedServerOK{}
}

/* GetManagedServerOK describes a response with status code 200, with default header values.

OK
*/
type GetManagedServerOK struct {
	Payload *models.ManagedServerModel
}

func (o *GetManagedServerOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/backupInfrastructure/managedServers/{id}][%d] getManagedServerOK  %+v", 200, o.Payload)
}
func (o *GetManagedServerOK) GetPayload() *models.ManagedServerModel {
	return o.Payload
}

func (o *GetManagedServerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ManagedServerModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetManagedServerUnauthorized creates a GetManagedServerUnauthorized with default headers values
func NewGetManagedServerUnauthorized() *GetManagedServerUnauthorized {
	return &GetManagedServerUnauthorized{}
}

/* GetManagedServerUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The authorization header has been expected but not found (or found but is expired).
*/
type GetManagedServerUnauthorized struct {
	Payload *models.Error
}

func (o *GetManagedServerUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/backupInfrastructure/managedServers/{id}][%d] getManagedServerUnauthorized  %+v", 401, o.Payload)
}
func (o *GetManagedServerUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetManagedServerUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetManagedServerForbidden creates a GetManagedServerForbidden with default headers values
func NewGetManagedServerForbidden() *GetManagedServerForbidden {
	return &GetManagedServerForbidden{}
}

/* GetManagedServerForbidden describes a response with status code 403, with default header values.

Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.
*/
type GetManagedServerForbidden struct {
	Payload *models.Error
}

func (o *GetManagedServerForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/backupInfrastructure/managedServers/{id}][%d] getManagedServerForbidden  %+v", 403, o.Payload)
}
func (o *GetManagedServerForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetManagedServerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetManagedServerNotFound creates a GetManagedServerNotFound with default headers values
func NewGetManagedServerNotFound() *GetManagedServerNotFound {
	return &GetManagedServerNotFound{}
}

/* GetManagedServerNotFound describes a response with status code 404, with default header values.

Not found. No object was found with the path parameter specified in the request.
*/
type GetManagedServerNotFound struct {
	Payload *models.Error
}

func (o *GetManagedServerNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/backupInfrastructure/managedServers/{id}][%d] getManagedServerNotFound  %+v", 404, o.Payload)
}
func (o *GetManagedServerNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetManagedServerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetManagedServerInternalServerError creates a GetManagedServerInternalServerError with default headers values
func NewGetManagedServerInternalServerError() *GetManagedServerInternalServerError {
	return &GetManagedServerInternalServerError{}
}

/* GetManagedServerInternalServerError describes a response with status code 500, with default header values.

Internal server error. The request has been received but could not be completed because of an internal error at the server side.
*/
type GetManagedServerInternalServerError struct {
	Payload *models.Error
}

func (o *GetManagedServerInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/backupInfrastructure/managedServers/{id}][%d] getManagedServerInternalServerError  %+v", 500, o.Payload)
}
func (o *GetManagedServerInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetManagedServerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
