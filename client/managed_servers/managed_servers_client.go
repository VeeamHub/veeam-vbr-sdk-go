// Code generated by go-swagger; DO NOT EDIT.

package managed_servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new managed servers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for managed servers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateManagedServer(params *CreateManagedServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateManagedServerCreated, error)

	DeleteManagedServer(params *DeleteManagedServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteManagedServerCreated, error)

	GetAllManagedServers(params *GetAllManagedServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllManagedServersOK, error)

	GetManagedServer(params *GetManagedServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetManagedServerOK, error)

	UpdateManagedServer(params *UpdateManagedServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateManagedServerCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateManagedServer adds server

  The HTTP POST request to the `/api/v1/backupInfrastructure/managedServers` path allows you to add a server to the backup infrastructure.
*/
func (a *Client) CreateManagedServer(params *CreateManagedServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateManagedServerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateManagedServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateManagedServer",
		Method:             "POST",
		PathPattern:        "/api/v1/backupInfrastructure/managedServers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateManagedServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateManagedServerCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateManagedServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteManagedServer removes server

  The HTTP DELETE request to the `/api/v1/backupInfrastructure/managedServers/{id}` path allows you to remove a managed server that has the specified `id` from the backup infrastructure.
*/
func (a *Client) DeleteManagedServer(params *DeleteManagedServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteManagedServerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteManagedServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteManagedServer",
		Method:             "DELETE",
		PathPattern:        "/api/v1/backupInfrastructure/managedServers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteManagedServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteManagedServerCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteManagedServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllManagedServers gets all servers

  The HTTP GET request to the `/api/v1/backupInfrastructure/managedServers` path allows you to get an array of all servers that are added to the backup infrastructure.
*/
func (a *Client) GetAllManagedServers(params *GetAllManagedServersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllManagedServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllManagedServersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllManagedServers",
		Method:             "GET",
		PathPattern:        "/api/v1/backupInfrastructure/managedServers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllManagedServersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllManagedServersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllManagedServers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetManagedServer gets server

  The HTTP GET request to the `/api/v1/backupInfrastructure/managedServers/{id}` path allows you to get a managed server that has the specified `id`.
*/
func (a *Client) GetManagedServer(params *GetManagedServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetManagedServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetManagedServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetManagedServer",
		Method:             "GET",
		PathPattern:        "/api/v1/backupInfrastructure/managedServers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetManagedServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetManagedServerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetManagedServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateManagedServer edits server

  The HTTP PUT request to the `/api/v1/backupInfrastructure/managedServers/{id}` path allows you to edit a managed server that has the specified `id`.
*/
func (a *Client) UpdateManagedServer(params *UpdateManagedServerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateManagedServerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateManagedServerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateManagedServer",
		Method:             "PUT",
		PathPattern:        "/api/v1/backupInfrastructure/managedServers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateManagedServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateManagedServerCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateManagedServer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
