/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ViHostModelAllOf struct for ViHostModelAllOf
type ViHostModelAllOf struct {
	ViHostType *EViHostType `json:"viHostType,omitempty"`
	// Port used to communicate with the server.
	Port int32 `json:"port"`
}

// NewViHostModelAllOf instantiates a new ViHostModelAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViHostModelAllOf(port int32) *ViHostModelAllOf {
	this := ViHostModelAllOf{}
	this.Port = port
	return &this
}

// NewViHostModelAllOfWithDefaults instantiates a new ViHostModelAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViHostModelAllOfWithDefaults() *ViHostModelAllOf {
	this := ViHostModelAllOf{}
	return &this
}

// GetViHostType returns the ViHostType field value if set, zero value otherwise.
func (o *ViHostModelAllOf) GetViHostType() EViHostType {
	if o == nil || isNil(o.ViHostType) {
		var ret EViHostType
		return ret
	}
	return *o.ViHostType
}

// GetViHostTypeOk returns a tuple with the ViHostType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViHostModelAllOf) GetViHostTypeOk() (*EViHostType, bool) {
	if o == nil || isNil(o.ViHostType) {
    return nil, false
	}
	return o.ViHostType, true
}

// HasViHostType returns a boolean if a field has been set.
func (o *ViHostModelAllOf) HasViHostType() bool {
	if o != nil && !isNil(o.ViHostType) {
		return true
	}

	return false
}

// SetViHostType gets a reference to the given EViHostType and assigns it to the ViHostType field.
func (o *ViHostModelAllOf) SetViHostType(v EViHostType) {
	o.ViHostType = &v
}

// GetPort returns the Port field value
func (o *ViHostModelAllOf) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *ViHostModelAllOf) GetPortOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *ViHostModelAllOf) SetPort(v int32) {
	o.Port = v
}

func (o ViHostModelAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ViHostType) {
		toSerialize["viHostType"] = o.ViHostType
	}
	if true {
		toSerialize["port"] = o.Port
	}
	return json.Marshal(toSerialize)
}

type NullableViHostModelAllOf struct {
	value *ViHostModelAllOf
	isSet bool
}

func (v NullableViHostModelAllOf) Get() *ViHostModelAllOf {
	return v.value
}

func (v *NullableViHostModelAllOf) Set(val *ViHostModelAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableViHostModelAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableViHostModelAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViHostModelAllOf(val *ViHostModelAllOf) *NullableViHostModelAllOf {
	return &NullableViHostModelAllOf{value: val, isSet: true}
}

func (v NullableViHostModelAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViHostModelAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


