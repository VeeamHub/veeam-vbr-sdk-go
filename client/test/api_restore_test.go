/*
Veeam Backup & Replication REST API

Testing RestoreApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    "github.com/veeamhub/veeam-vbr-sdk-go/client"
)

func Test_client_RestoreApiService(t *testing.T) {

    configuration := client.NewConfiguration()
    apiClient := client.NewAPIClient(configuration)

    t.Run("Test RestoreApiService EntireVmRestoreVmware", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.RestoreApi.EntireVmRestoreVmware(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RestoreApiService GetAllInstantViVMRecoveryMounts", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.RestoreApi.GetAllInstantViVMRecoveryMounts(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RestoreApiService GetAllVmwareFcdInstantRecoveryMountModels", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.RestoreApi.GetAllVmwareFcdInstantRecoveryMountModels(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RestoreApiService GetInstantViVMRecoveryMount", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var mountId string

        resp, httpRes, err := apiClient.RestoreApi.GetInstantViVMRecoveryMount(context.Background(), mountId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RestoreApiService GetVmwareFcdInstantRecoveryMountModel", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var mountId string

        resp, httpRes, err := apiClient.RestoreApi.GetVmwareFcdInstantRecoveryMountModel(context.Background(), mountId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RestoreApiService InstantRecoveryVmwareFcdDismountWithSession", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var mountId string

        resp, httpRes, err := apiClient.RestoreApi.InstantRecoveryVmwareFcdDismountWithSession(context.Background(), mountId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RestoreApiService InstantRecoveryVmwareFcdMigrateWithSession", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var mountId string

        resp, httpRes, err := apiClient.RestoreApi.InstantRecoveryVmwareFcdMigrateWithSession(context.Background(), mountId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RestoreApiService InstantRecoveryVmwareFcdMountWithSession", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.RestoreApi.InstantRecoveryVmwareFcdMountWithSession(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RestoreApiService InstantViVMRecoveryMigrate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var mountId string

        resp, httpRes, err := apiClient.RestoreApi.InstantViVMRecoveryMigrate(context.Background(), mountId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RestoreApiService InstantViVMRecoveryMount", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.RestoreApi.InstantViVMRecoveryMount(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RestoreApiService InstantViVMRecoveryUnmount", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var mountId string

        resp, httpRes, err := apiClient.RestoreApi.InstantViVMRecoveryUnmount(context.Background(), mountId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
