/*
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic. 
 *
 * API version: 1.0-rev1
 * Contact: support@veeam.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// TokenLoginSpec struct for TokenLoginSpec
type TokenLoginSpec struct {
	GrantType ELoginGrantType `json:"grant_type"`
	// User name. Required if the `grant_type` value is `password`.
	Username *string `json:"username,omitempty"`
	// Password. Required if the `grant_type` value is `password`.
	Password *string `json:"password,omitempty"`
	// Refresh token. Required if the `grant_type` value is `refresh_token`.
	RefreshToken *string `json:"refresh_token,omitempty"`
	// Authorization code. Required if the `grant_type` value is `authorization_code`.
	Code *string `json:"code,omitempty"`
	// If *true*, a short-term refresh token is used. Lifetime of the short-term refresh token is the access token lifetime plus 15 minutes.
	UseShortTermRefresh *bool `json:"use_short_term_refresh,omitempty"`
}

// NewTokenLoginSpec instantiates a new TokenLoginSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenLoginSpec(grantType ELoginGrantType) *TokenLoginSpec {
	this := TokenLoginSpec{}
	this.GrantType = grantType
	return &this
}

// NewTokenLoginSpecWithDefaults instantiates a new TokenLoginSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenLoginSpecWithDefaults() *TokenLoginSpec {
	this := TokenLoginSpec{}
	var grantType ELoginGrantType = ELOGINGRANTTYPE_PASSWORD
	this.GrantType = grantType
	return &this
}

// GetGrantType returns the GrantType field value
func (o *TokenLoginSpec) GetGrantType() ELoginGrantType {
	if o == nil {
		var ret ELoginGrantType
		return ret
	}

	return o.GrantType
}

// GetGrantTypeOk returns a tuple with the GrantType field value
// and a boolean to check if the value has been set.
func (o *TokenLoginSpec) GetGrantTypeOk() (*ELoginGrantType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GrantType, true
}

// SetGrantType sets field value
func (o *TokenLoginSpec) SetGrantType(v ELoginGrantType) {
	o.GrantType = v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *TokenLoginSpec) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenLoginSpec) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *TokenLoginSpec) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *TokenLoginSpec) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *TokenLoginSpec) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenLoginSpec) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *TokenLoginSpec) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *TokenLoginSpec) SetPassword(v string) {
	o.Password = &v
}

// GetRefreshToken returns the RefreshToken field value if set, zero value otherwise.
func (o *TokenLoginSpec) GetRefreshToken() string {
	if o == nil || o.RefreshToken == nil {
		var ret string
		return ret
	}
	return *o.RefreshToken
}

// GetRefreshTokenOk returns a tuple with the RefreshToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenLoginSpec) GetRefreshTokenOk() (*string, bool) {
	if o == nil || o.RefreshToken == nil {
		return nil, false
	}
	return o.RefreshToken, true
}

// HasRefreshToken returns a boolean if a field has been set.
func (o *TokenLoginSpec) HasRefreshToken() bool {
	if o != nil && o.RefreshToken != nil {
		return true
	}

	return false
}

// SetRefreshToken gets a reference to the given string and assigns it to the RefreshToken field.
func (o *TokenLoginSpec) SetRefreshToken(v string) {
	o.RefreshToken = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *TokenLoginSpec) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenLoginSpec) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *TokenLoginSpec) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *TokenLoginSpec) SetCode(v string) {
	o.Code = &v
}

// GetUseShortTermRefresh returns the UseShortTermRefresh field value if set, zero value otherwise.
func (o *TokenLoginSpec) GetUseShortTermRefresh() bool {
	if o == nil || o.UseShortTermRefresh == nil {
		var ret bool
		return ret
	}
	return *o.UseShortTermRefresh
}

// GetUseShortTermRefreshOk returns a tuple with the UseShortTermRefresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenLoginSpec) GetUseShortTermRefreshOk() (*bool, bool) {
	if o == nil || o.UseShortTermRefresh == nil {
		return nil, false
	}
	return o.UseShortTermRefresh, true
}

// HasUseShortTermRefresh returns a boolean if a field has been set.
func (o *TokenLoginSpec) HasUseShortTermRefresh() bool {
	if o != nil && o.UseShortTermRefresh != nil {
		return true
	}

	return false
}

// SetUseShortTermRefresh gets a reference to the given bool and assigns it to the UseShortTermRefresh field.
func (o *TokenLoginSpec) SetUseShortTermRefresh(v bool) {
	o.UseShortTermRefresh = &v
}

func (o TokenLoginSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["grant_type"] = o.GrantType
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.RefreshToken != nil {
		toSerialize["refresh_token"] = o.RefreshToken
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.UseShortTermRefresh != nil {
		toSerialize["use_short_term_refresh"] = o.UseShortTermRefresh
	}
	return json.Marshal(toSerialize)
}

type NullableTokenLoginSpec struct {
	value *TokenLoginSpec
	isSet bool
}

func (v NullableTokenLoginSpec) Get() *TokenLoginSpec {
	return v.value
}

func (v *NullableTokenLoginSpec) Set(val *TokenLoginSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenLoginSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenLoginSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenLoginSpec(val *TokenLoginSpec) *NullableTokenLoginSpec {
	return &NullableTokenLoginSpec{value: val, isSet: true}
}

func (v NullableTokenLoginSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenLoginSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


