/*
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic. 
 *
 * API version: 1.0-rev2
 * Contact: support@veeam.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// ERepositoryType Repository type.
type ERepositoryType string

// List of ERepositoryType
const (
	EREPOSITORYTYPE_WIN_LOCAL ERepositoryType = "WinLocal"
	EREPOSITORYTYPE_LINUX_LOCAL ERepositoryType = "LinuxLocal"
	EREPOSITORYTYPE_SMB ERepositoryType = "Smb"
	EREPOSITORYTYPE_NFS ERepositoryType = "Nfs"
	EREPOSITORYTYPE_AZURE_BLOB ERepositoryType = "AzureBlob"
	EREPOSITORYTYPE_AZURE_ARCHIVE ERepositoryType = "AzureArchive"
	EREPOSITORYTYPE_AMAZON_S3 ERepositoryType = "AmazonS3"
	EREPOSITORYTYPE_AMAZON_S3_GLACIER ERepositoryType = "AmazonS3Glacier"
	EREPOSITORYTYPE_S3_COMPATIBLE ERepositoryType = "S3Compatible"
	EREPOSITORYTYPE_GOOGLE_CLOUD ERepositoryType = "GoogleCloud"
	EREPOSITORYTYPE_IBM_CLOUD ERepositoryType = "IBMCloud"
)

func (v *ERepositoryType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ERepositoryType(value)
	for _, existing := range []ERepositoryType{ "WinLocal", "LinuxLocal", "Smb", "Nfs", "AzureBlob", "AzureArchive", "AmazonS3", "AmazonS3Glacier", "S3Compatible", "GoogleCloud", "IBMCloud",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ERepositoryType", value)
}

// Ptr returns reference to ERepositoryType value
func (v ERepositoryType) Ptr() *ERepositoryType {
	return &v
}

type NullableERepositoryType struct {
	value *ERepositoryType
	isSet bool
}

func (v NullableERepositoryType) Get() *ERepositoryType {
	return v.value
}

func (v *NullableERepositoryType) Set(val *ERepositoryType) {
	v.value = val
	v.isSet = true
}

func (v NullableERepositoryType) IsSet() bool {
	return v.isSet
}

func (v *NullableERepositoryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableERepositoryType(val *ERepositoryType) *NullableERepositoryType {
	return &NullableERepositoryType{value: val, isSet: true}
}

func (v NullableERepositoryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableERepositoryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

