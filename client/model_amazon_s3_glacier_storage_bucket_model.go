/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AmazonS3GlacierStorageBucketModel Amazon S3 Glacier bucket where backup data is stored.
type AmazonS3GlacierStorageBucketModel struct {
	// ID of a region where the Amazon S3 bucket is located.
	RegionId string `json:"regionId"`
	// Name of an Amazon S3 Glacier bucket.
	BucketName string `json:"bucketName"`
	// Name of the folder that the object storage repository is mapped to.
	FolderName string `json:"folderName"`
	// If *true*, storage immutability is enabled.
	ImmutabilityEnabled *bool `json:"immutabilityEnabled,omitempty"`
	// If *true*, Glacier Deep Archive is used for backups with the retention policy over 180 days.
	UseDeepArchive *bool `json:"useDeepArchive,omitempty"`
}

// NewAmazonS3GlacierStorageBucketModel instantiates a new AmazonS3GlacierStorageBucketModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmazonS3GlacierStorageBucketModel(regionId string, bucketName string, folderName string) *AmazonS3GlacierStorageBucketModel {
	this := AmazonS3GlacierStorageBucketModel{}
	this.RegionId = regionId
	this.BucketName = bucketName
	this.FolderName = folderName
	return &this
}

// NewAmazonS3GlacierStorageBucketModelWithDefaults instantiates a new AmazonS3GlacierStorageBucketModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmazonS3GlacierStorageBucketModelWithDefaults() *AmazonS3GlacierStorageBucketModel {
	this := AmazonS3GlacierStorageBucketModel{}
	return &this
}

// GetRegionId returns the RegionId field value
func (o *AmazonS3GlacierStorageBucketModel) GetRegionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value
// and a boolean to check if the value has been set.
func (o *AmazonS3GlacierStorageBucketModel) GetRegionIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.RegionId, true
}

// SetRegionId sets field value
func (o *AmazonS3GlacierStorageBucketModel) SetRegionId(v string) {
	o.RegionId = v
}

// GetBucketName returns the BucketName field value
func (o *AmazonS3GlacierStorageBucketModel) GetBucketName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value
// and a boolean to check if the value has been set.
func (o *AmazonS3GlacierStorageBucketModel) GetBucketNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.BucketName, true
}

// SetBucketName sets field value
func (o *AmazonS3GlacierStorageBucketModel) SetBucketName(v string) {
	o.BucketName = v
}

// GetFolderName returns the FolderName field value
func (o *AmazonS3GlacierStorageBucketModel) GetFolderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FolderName
}

// GetFolderNameOk returns a tuple with the FolderName field value
// and a boolean to check if the value has been set.
func (o *AmazonS3GlacierStorageBucketModel) GetFolderNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.FolderName, true
}

// SetFolderName sets field value
func (o *AmazonS3GlacierStorageBucketModel) SetFolderName(v string) {
	o.FolderName = v
}

// GetImmutabilityEnabled returns the ImmutabilityEnabled field value if set, zero value otherwise.
func (o *AmazonS3GlacierStorageBucketModel) GetImmutabilityEnabled() bool {
	if o == nil || isNil(o.ImmutabilityEnabled) {
		var ret bool
		return ret
	}
	return *o.ImmutabilityEnabled
}

// GetImmutabilityEnabledOk returns a tuple with the ImmutabilityEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmazonS3GlacierStorageBucketModel) GetImmutabilityEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.ImmutabilityEnabled) {
    return nil, false
	}
	return o.ImmutabilityEnabled, true
}

// HasImmutabilityEnabled returns a boolean if a field has been set.
func (o *AmazonS3GlacierStorageBucketModel) HasImmutabilityEnabled() bool {
	if o != nil && !isNil(o.ImmutabilityEnabled) {
		return true
	}

	return false
}

// SetImmutabilityEnabled gets a reference to the given bool and assigns it to the ImmutabilityEnabled field.
func (o *AmazonS3GlacierStorageBucketModel) SetImmutabilityEnabled(v bool) {
	o.ImmutabilityEnabled = &v
}

// GetUseDeepArchive returns the UseDeepArchive field value if set, zero value otherwise.
func (o *AmazonS3GlacierStorageBucketModel) GetUseDeepArchive() bool {
	if o == nil || isNil(o.UseDeepArchive) {
		var ret bool
		return ret
	}
	return *o.UseDeepArchive
}

// GetUseDeepArchiveOk returns a tuple with the UseDeepArchive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmazonS3GlacierStorageBucketModel) GetUseDeepArchiveOk() (*bool, bool) {
	if o == nil || isNil(o.UseDeepArchive) {
    return nil, false
	}
	return o.UseDeepArchive, true
}

// HasUseDeepArchive returns a boolean if a field has been set.
func (o *AmazonS3GlacierStorageBucketModel) HasUseDeepArchive() bool {
	if o != nil && !isNil(o.UseDeepArchive) {
		return true
	}

	return false
}

// SetUseDeepArchive gets a reference to the given bool and assigns it to the UseDeepArchive field.
func (o *AmazonS3GlacierStorageBucketModel) SetUseDeepArchive(v bool) {
	o.UseDeepArchive = &v
}

func (o AmazonS3GlacierStorageBucketModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["regionId"] = o.RegionId
	}
	if true {
		toSerialize["bucketName"] = o.BucketName
	}
	if true {
		toSerialize["folderName"] = o.FolderName
	}
	if !isNil(o.ImmutabilityEnabled) {
		toSerialize["immutabilityEnabled"] = o.ImmutabilityEnabled
	}
	if !isNil(o.UseDeepArchive) {
		toSerialize["useDeepArchive"] = o.UseDeepArchive
	}
	return json.Marshal(toSerialize)
}

type NullableAmazonS3GlacierStorageBucketModel struct {
	value *AmazonS3GlacierStorageBucketModel
	isSet bool
}

func (v NullableAmazonS3GlacierStorageBucketModel) Get() *AmazonS3GlacierStorageBucketModel {
	return v.value
}

func (v *NullableAmazonS3GlacierStorageBucketModel) Set(val *AmazonS3GlacierStorageBucketModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAmazonS3GlacierStorageBucketModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAmazonS3GlacierStorageBucketModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmazonS3GlacierStorageBucketModel(val *AmazonS3GlacierStorageBucketModel) *NullableAmazonS3GlacierStorageBucketModel {
	return &NullableAmazonS3GlacierStorageBucketModel{value: val, isSet: true}
}

func (v NullableAmazonS3GlacierStorageBucketModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmazonS3GlacierStorageBucketModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


