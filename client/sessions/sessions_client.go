// Code generated by go-swagger; DO NOT EDIT.

package sessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new sessions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sessions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAllSessions(params *GetAllSessionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSessionsOK, error)

	GetSession(params *GetSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSessionOK, error)

	GetSessionLogs(params *GetSessionLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSessionLogsOK, error)

	StopSession(params *StopSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopSessionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetAllSessions gets all sessions

  The HTTP GET request to the `/api/v1/sessions` path allows you to get an array of sessions performed on the backup server.
*/
func (a *Client) GetAllSessions(params *GetAllSessionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSessionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllSessions",
		Method:             "GET",
		PathPattern:        "/api/v1/sessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllSessionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllSessionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllSessions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSession gets session

  The HTTP GET request to the `/api/v1/sessions/{id}` path allows you to get a session that has the specified `id`.
*/
func (a *Client) GetSession(params *GetSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSession",
		Method:             "GET",
		PathPattern:        "/api/v1/sessions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSession: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSessionLogs gets session logs

  The HTTP GET request to the `/api/v1/sessions/{id}/logs` path allows you to get an array of log records of a session that has the specified `id`.
*/
func (a *Client) GetSessionLogs(params *GetSessionLogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSessionLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSessionLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSessionLogs",
		Method:             "GET",
		PathPattern:        "/api/v1/sessions/{id}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSessionLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSessionLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSessionLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopSession stops session

  The HTTP POST request to the `/api/v1/sessions/{id}/stop` path allows you to stop a session that has the specified `id`.
*/
func (a *Client) StopSession(params *StopSessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StopSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StopSession",
		Method:             "POST",
		PathPattern:        "/api/v1/sessions/{id}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StopSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopSessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopSession: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
