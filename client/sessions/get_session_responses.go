// Code generated by go-swagger; DO NOT EDIT.

package sessions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/veeamhub/veeam-vbr-sdk-go/models"
)

// GetSessionReader is a Reader for the GetSession structure.
type GetSessionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSessionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSessionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetSessionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSessionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSessionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSessionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSessionOK creates a GetSessionOK with default headers values
func NewGetSessionOK() *GetSessionOK {
	return &GetSessionOK{}
}

/* GetSessionOK describes a response with status code 200, with default header values.

OK
*/
type GetSessionOK struct {
	Payload *models.SessionModel
}

func (o *GetSessionOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/sessions/{id}][%d] getSessionOK  %+v", 200, o.Payload)
}
func (o *GetSessionOK) GetPayload() *models.SessionModel {
	return o.Payload
}

func (o *GetSessionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SessionModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSessionUnauthorized creates a GetSessionUnauthorized with default headers values
func NewGetSessionUnauthorized() *GetSessionUnauthorized {
	return &GetSessionUnauthorized{}
}

/* GetSessionUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The authorization header has been expected but not found (or found but is expired).
*/
type GetSessionUnauthorized struct {
	Payload *models.Error
}

func (o *GetSessionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/sessions/{id}][%d] getSessionUnauthorized  %+v", 401, o.Payload)
}
func (o *GetSessionUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetSessionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSessionForbidden creates a GetSessionForbidden with default headers values
func NewGetSessionForbidden() *GetSessionForbidden {
	return &GetSessionForbidden{}
}

/* GetSessionForbidden describes a response with status code 403, with default header values.

Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.
*/
type GetSessionForbidden struct {
	Payload *models.Error
}

func (o *GetSessionForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/sessions/{id}][%d] getSessionForbidden  %+v", 403, o.Payload)
}
func (o *GetSessionForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetSessionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSessionNotFound creates a GetSessionNotFound with default headers values
func NewGetSessionNotFound() *GetSessionNotFound {
	return &GetSessionNotFound{}
}

/* GetSessionNotFound describes a response with status code 404, with default header values.

Not found. No object was found with the path parameter specified in the request.
*/
type GetSessionNotFound struct {
	Payload *models.Error
}

func (o *GetSessionNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/sessions/{id}][%d] getSessionNotFound  %+v", 404, o.Payload)
}
func (o *GetSessionNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetSessionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSessionInternalServerError creates a GetSessionInternalServerError with default headers values
func NewGetSessionInternalServerError() *GetSessionInternalServerError {
	return &GetSessionInternalServerError{}
}

/* GetSessionInternalServerError describes a response with status code 500, with default header values.

Internal server error. The request has been received but could not be completed because of an internal error at the server side.
*/
type GetSessionInternalServerError struct {
	Payload *models.Error
}

func (o *GetSessionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/sessions/{id}][%d] getSessionInternalServerError  %+v", 500, o.Payload)
}
func (o *GetSessionInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetSessionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
