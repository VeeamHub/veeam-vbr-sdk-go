/*
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic. 
 *
 * API version: 1.0-rev1
 * Contact: support@veeam.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// VmwareObjectModel VMware object.
type VmwareObjectModel struct {
	// Name of the host.
	HostName string `json:"hostName"`
	// Name of the VMware vSphere object.
	Name string `json:"name"`
	Type EVmwareInventoryType `json:"type"`
	// ID of the VMware vSphere object.
	ObjectId *string `json:"objectId,omitempty"`
}

// NewVmwareObjectModel instantiates a new VmwareObjectModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmwareObjectModel(hostName string, name string, type_ EVmwareInventoryType) *VmwareObjectModel {
	this := VmwareObjectModel{}
	this.HostName = hostName
	this.Name = name
	this.Type = type_
	return &this
}

// NewVmwareObjectModelWithDefaults instantiates a new VmwareObjectModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmwareObjectModelWithDefaults() *VmwareObjectModel {
	this := VmwareObjectModel{}
	return &this
}

// GetHostName returns the HostName field value
func (o *VmwareObjectModel) GetHostName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HostName
}

// GetHostNameOk returns a tuple with the HostName field value
// and a boolean to check if the value has been set.
func (o *VmwareObjectModel) GetHostNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.HostName, true
}

// SetHostName sets field value
func (o *VmwareObjectModel) SetHostName(v string) {
	o.HostName = v
}

// GetName returns the Name field value
func (o *VmwareObjectModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VmwareObjectModel) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VmwareObjectModel) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *VmwareObjectModel) GetType() EVmwareInventoryType {
	if o == nil {
		var ret EVmwareInventoryType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VmwareObjectModel) GetTypeOk() (*EVmwareInventoryType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VmwareObjectModel) SetType(v EVmwareInventoryType) {
	o.Type = v
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise.
func (o *VmwareObjectModel) GetObjectId() string {
	if o == nil || o.ObjectId == nil {
		var ret string
		return ret
	}
	return *o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareObjectModel) GetObjectIdOk() (*string, bool) {
	if o == nil || o.ObjectId == nil {
		return nil, false
	}
	return o.ObjectId, true
}

// HasObjectId returns a boolean if a field has been set.
func (o *VmwareObjectModel) HasObjectId() bool {
	if o != nil && o.ObjectId != nil {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given string and assigns it to the ObjectId field.
func (o *VmwareObjectModel) SetObjectId(v string) {
	o.ObjectId = &v
}

func (o VmwareObjectModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["hostName"] = o.HostName
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.ObjectId != nil {
		toSerialize["objectId"] = o.ObjectId
	}
	return json.Marshal(toSerialize)
}

type NullableVmwareObjectModel struct {
	value *VmwareObjectModel
	isSet bool
}

func (v NullableVmwareObjectModel) Get() *VmwareObjectModel {
	return v.value
}

func (v *NullableVmwareObjectModel) Set(val *VmwareObjectModel) {
	v.value = val
	v.isSet = true
}

func (v NullableVmwareObjectModel) IsSet() bool {
	return v.isSet
}

func (v *NullableVmwareObjectModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmwareObjectModel(val *VmwareObjectModel) *NullableVmwareObjectModel {
	return &NullableVmwareObjectModel{value: val, isSet: true}
}

func (v NullableVmwareObjectModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmwareObjectModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


