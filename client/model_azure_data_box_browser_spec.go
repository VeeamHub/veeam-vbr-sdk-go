/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AzureDataBoxBrowserSpec struct for AzureDataBoxBrowserSpec
type AzureDataBoxBrowserSpec struct {
	CloudBrowserSpec
	// Service endpoint used to connect to the Azure Data Box object storage.
	ServicePoint *string `json:"servicePoint,omitempty"`
	// ID of a gateway server you want to use to connect to the object storage. Specify this parameter to check internet connection of the server. As a gateway server you can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.
	GatewayServerId *string `json:"gatewayServerId,omitempty"`
}

// NewAzureDataBoxBrowserSpec instantiates a new AzureDataBoxBrowserSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureDataBoxBrowserSpec(regionType EAmazonRegionType, regionId string) *AzureDataBoxBrowserSpec {
	this := AzureDataBoxBrowserSpec{}
	this.RegionType = regionType
	this.RegionId = regionId
	return &this
}

// NewAzureDataBoxBrowserSpecWithDefaults instantiates a new AzureDataBoxBrowserSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureDataBoxBrowserSpecWithDefaults() *AzureDataBoxBrowserSpec {
	this := AzureDataBoxBrowserSpec{}
	return &this
}

// GetServicePoint returns the ServicePoint field value if set, zero value otherwise.
func (o *AzureDataBoxBrowserSpec) GetServicePoint() string {
	if o == nil || isNil(o.ServicePoint) {
		var ret string
		return ret
	}
	return *o.ServicePoint
}

// GetServicePointOk returns a tuple with the ServicePoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureDataBoxBrowserSpec) GetServicePointOk() (*string, bool) {
	if o == nil || isNil(o.ServicePoint) {
    return nil, false
	}
	return o.ServicePoint, true
}

// HasServicePoint returns a boolean if a field has been set.
func (o *AzureDataBoxBrowserSpec) HasServicePoint() bool {
	if o != nil && !isNil(o.ServicePoint) {
		return true
	}

	return false
}

// SetServicePoint gets a reference to the given string and assigns it to the ServicePoint field.
func (o *AzureDataBoxBrowserSpec) SetServicePoint(v string) {
	o.ServicePoint = &v
}

// GetGatewayServerId returns the GatewayServerId field value if set, zero value otherwise.
func (o *AzureDataBoxBrowserSpec) GetGatewayServerId() string {
	if o == nil || isNil(o.GatewayServerId) {
		var ret string
		return ret
	}
	return *o.GatewayServerId
}

// GetGatewayServerIdOk returns a tuple with the GatewayServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureDataBoxBrowserSpec) GetGatewayServerIdOk() (*string, bool) {
	if o == nil || isNil(o.GatewayServerId) {
    return nil, false
	}
	return o.GatewayServerId, true
}

// HasGatewayServerId returns a boolean if a field has been set.
func (o *AzureDataBoxBrowserSpec) HasGatewayServerId() bool {
	if o != nil && !isNil(o.GatewayServerId) {
		return true
	}

	return false
}

// SetGatewayServerId gets a reference to the given string and assigns it to the GatewayServerId field.
func (o *AzureDataBoxBrowserSpec) SetGatewayServerId(v string) {
	o.GatewayServerId = &v
}

func (o AzureDataBoxBrowserSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedCloudBrowserSpec, errCloudBrowserSpec := json.Marshal(o.CloudBrowserSpec)
	if errCloudBrowserSpec != nil {
		return []byte{}, errCloudBrowserSpec
	}
	errCloudBrowserSpec = json.Unmarshal([]byte(serializedCloudBrowserSpec), &toSerialize)
	if errCloudBrowserSpec != nil {
		return []byte{}, errCloudBrowserSpec
	}
	if !isNil(o.ServicePoint) {
		toSerialize["servicePoint"] = o.ServicePoint
	}
	if !isNil(o.GatewayServerId) {
		toSerialize["gatewayServerId"] = o.GatewayServerId
	}
	return json.Marshal(toSerialize)
}

type NullableAzureDataBoxBrowserSpec struct {
	value *AzureDataBoxBrowserSpec
	isSet bool
}

func (v NullableAzureDataBoxBrowserSpec) Get() *AzureDataBoxBrowserSpec {
	return v.value
}

func (v *NullableAzureDataBoxBrowserSpec) Set(val *AzureDataBoxBrowserSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureDataBoxBrowserSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureDataBoxBrowserSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureDataBoxBrowserSpec(val *AzureDataBoxBrowserSpec) *NullableAzureDataBoxBrowserSpec {
	return &NullableAzureDataBoxBrowserSpec{value: val, isSet: true}
}

func (v NullableAzureDataBoxBrowserSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureDataBoxBrowserSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


