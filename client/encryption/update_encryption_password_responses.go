// Code generated by go-swagger; DO NOT EDIT.

package encryption

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/veeamhub/veeam-vbr-sdk-go/models"
)

// UpdateEncryptionPasswordReader is a Reader for the UpdateEncryptionPassword structure.
type UpdateEncryptionPasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateEncryptionPasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateEncryptionPasswordOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateEncryptionPasswordBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateEncryptionPasswordUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateEncryptionPasswordForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateEncryptionPasswordNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateEncryptionPasswordInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateEncryptionPasswordOK creates a UpdateEncryptionPasswordOK with default headers values
func NewUpdateEncryptionPasswordOK() *UpdateEncryptionPasswordOK {
	return &UpdateEncryptionPasswordOK{}
}

/* UpdateEncryptionPasswordOK describes a response with status code 200, with default header values.

Password has been updated.
*/
type UpdateEncryptionPasswordOK struct {
	Payload *models.EncryptionPasswordModel
}

func (o *UpdateEncryptionPasswordOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/encryptionPasswords/{id}][%d] updateEncryptionPasswordOK  %+v", 200, o.Payload)
}
func (o *UpdateEncryptionPasswordOK) GetPayload() *models.EncryptionPasswordModel {
	return o.Payload
}

func (o *UpdateEncryptionPasswordOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EncryptionPasswordModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEncryptionPasswordBadRequest creates a UpdateEncryptionPasswordBadRequest with default headers values
func NewUpdateEncryptionPasswordBadRequest() *UpdateEncryptionPasswordBadRequest {
	return &UpdateEncryptionPasswordBadRequest{}
}

/* UpdateEncryptionPasswordBadRequest describes a response with status code 400, with default header values.

Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.
*/
type UpdateEncryptionPasswordBadRequest struct {
	Payload *models.Error
}

func (o *UpdateEncryptionPasswordBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v1/encryptionPasswords/{id}][%d] updateEncryptionPasswordBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateEncryptionPasswordBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateEncryptionPasswordBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEncryptionPasswordUnauthorized creates a UpdateEncryptionPasswordUnauthorized with default headers values
func NewUpdateEncryptionPasswordUnauthorized() *UpdateEncryptionPasswordUnauthorized {
	return &UpdateEncryptionPasswordUnauthorized{}
}

/* UpdateEncryptionPasswordUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The authorization header has been expected but not found (or found but is expired).
*/
type UpdateEncryptionPasswordUnauthorized struct {
	Payload *models.Error
}

func (o *UpdateEncryptionPasswordUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v1/encryptionPasswords/{id}][%d] updateEncryptionPasswordUnauthorized  %+v", 401, o.Payload)
}
func (o *UpdateEncryptionPasswordUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateEncryptionPasswordUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEncryptionPasswordForbidden creates a UpdateEncryptionPasswordForbidden with default headers values
func NewUpdateEncryptionPasswordForbidden() *UpdateEncryptionPasswordForbidden {
	return &UpdateEncryptionPasswordForbidden{}
}

/* UpdateEncryptionPasswordForbidden describes a response with status code 403, with default header values.

Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.
*/
type UpdateEncryptionPasswordForbidden struct {
	Payload *models.Error
}

func (o *UpdateEncryptionPasswordForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v1/encryptionPasswords/{id}][%d] updateEncryptionPasswordForbidden  %+v", 403, o.Payload)
}
func (o *UpdateEncryptionPasswordForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateEncryptionPasswordForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEncryptionPasswordNotFound creates a UpdateEncryptionPasswordNotFound with default headers values
func NewUpdateEncryptionPasswordNotFound() *UpdateEncryptionPasswordNotFound {
	return &UpdateEncryptionPasswordNotFound{}
}

/* UpdateEncryptionPasswordNotFound describes a response with status code 404, with default header values.

Not found. No object was found with the path parameter specified in the request.
*/
type UpdateEncryptionPasswordNotFound struct {
	Payload *models.Error
}

func (o *UpdateEncryptionPasswordNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/encryptionPasswords/{id}][%d] updateEncryptionPasswordNotFound  %+v", 404, o.Payload)
}
func (o *UpdateEncryptionPasswordNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateEncryptionPasswordNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEncryptionPasswordInternalServerError creates a UpdateEncryptionPasswordInternalServerError with default headers values
func NewUpdateEncryptionPasswordInternalServerError() *UpdateEncryptionPasswordInternalServerError {
	return &UpdateEncryptionPasswordInternalServerError{}
}

/* UpdateEncryptionPasswordInternalServerError describes a response with status code 500, with default header values.

Internal server error. The request has been received but could not be completed because of an internal error at the server side.
*/
type UpdateEncryptionPasswordInternalServerError struct {
	Payload *models.Error
}

func (o *UpdateEncryptionPasswordInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /api/v1/encryptionPasswords/{id}][%d] updateEncryptionPasswordInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateEncryptionPasswordInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *UpdateEncryptionPasswordInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
