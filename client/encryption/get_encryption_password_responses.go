// Code generated by go-swagger; DO NOT EDIT.

package encryption

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/veeamhub/veeam-vbr-sdk-go/models"
)

// GetEncryptionPasswordReader is a Reader for the GetEncryptionPassword structure.
type GetEncryptionPasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEncryptionPasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEncryptionPasswordOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetEncryptionPasswordUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetEncryptionPasswordForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetEncryptionPasswordNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetEncryptionPasswordInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetEncryptionPasswordOK creates a GetEncryptionPasswordOK with default headers values
func NewGetEncryptionPasswordOK() *GetEncryptionPasswordOK {
	return &GetEncryptionPasswordOK{}
}

/* GetEncryptionPasswordOK describes a response with status code 200, with default header values.

OK
*/
type GetEncryptionPasswordOK struct {
	Payload *models.EncryptionPasswordModel
}

func (o *GetEncryptionPasswordOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/encryptionPasswords/{id}][%d] getEncryptionPasswordOK  %+v", 200, o.Payload)
}
func (o *GetEncryptionPasswordOK) GetPayload() *models.EncryptionPasswordModel {
	return o.Payload
}

func (o *GetEncryptionPasswordOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EncryptionPasswordModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEncryptionPasswordUnauthorized creates a GetEncryptionPasswordUnauthorized with default headers values
func NewGetEncryptionPasswordUnauthorized() *GetEncryptionPasswordUnauthorized {
	return &GetEncryptionPasswordUnauthorized{}
}

/* GetEncryptionPasswordUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The authorization header has been expected but not found (or found but is expired).
*/
type GetEncryptionPasswordUnauthorized struct {
	Payload *models.Error
}

func (o *GetEncryptionPasswordUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/encryptionPasswords/{id}][%d] getEncryptionPasswordUnauthorized  %+v", 401, o.Payload)
}
func (o *GetEncryptionPasswordUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetEncryptionPasswordUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEncryptionPasswordForbidden creates a GetEncryptionPasswordForbidden with default headers values
func NewGetEncryptionPasswordForbidden() *GetEncryptionPasswordForbidden {
	return &GetEncryptionPasswordForbidden{}
}

/* GetEncryptionPasswordForbidden describes a response with status code 403, with default header values.

Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.
*/
type GetEncryptionPasswordForbidden struct {
	Payload *models.Error
}

func (o *GetEncryptionPasswordForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/encryptionPasswords/{id}][%d] getEncryptionPasswordForbidden  %+v", 403, o.Payload)
}
func (o *GetEncryptionPasswordForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetEncryptionPasswordForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEncryptionPasswordNotFound creates a GetEncryptionPasswordNotFound with default headers values
func NewGetEncryptionPasswordNotFound() *GetEncryptionPasswordNotFound {
	return &GetEncryptionPasswordNotFound{}
}

/* GetEncryptionPasswordNotFound describes a response with status code 404, with default header values.

Not found. No object was found with the path parameter specified in the request.
*/
type GetEncryptionPasswordNotFound struct {
	Payload *models.Error
}

func (o *GetEncryptionPasswordNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/encryptionPasswords/{id}][%d] getEncryptionPasswordNotFound  %+v", 404, o.Payload)
}
func (o *GetEncryptionPasswordNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetEncryptionPasswordNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEncryptionPasswordInternalServerError creates a GetEncryptionPasswordInternalServerError with default headers values
func NewGetEncryptionPasswordInternalServerError() *GetEncryptionPasswordInternalServerError {
	return &GetEncryptionPasswordInternalServerError{}
}

/* GetEncryptionPasswordInternalServerError describes a response with status code 500, with default header values.

Internal server error. The request has been received but could not be completed because of an internal error at the server side.
*/
type GetEncryptionPasswordInternalServerError struct {
	Payload *models.Error
}

func (o *GetEncryptionPasswordInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/encryptionPasswords/{id}][%d] getEncryptionPasswordInternalServerError  %+v", 500, o.Payload)
}
func (o *GetEncryptionPasswordInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetEncryptionPasswordInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
