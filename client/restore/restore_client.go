// Code generated by go-swagger; DO NOT EDIT.

package restore

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new restore API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for restore API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetVmwareFcdInstantRecoveryMountModel(params *GetVmwareFcdInstantRecoveryMountModelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVmwareFcdInstantRecoveryMountModelOK, error)

	InstantRecoveryVmwareFcdDismount(params *InstantRecoveryVmwareFcdDismountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstantRecoveryVmwareFcdDismountOK, error)

	InstantRecoveryVmwareFcdMigrate(params *InstantRecoveryVmwareFcdMigrateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstantRecoveryVmwareFcdMigrateOK, error)

	InstantRecoveryVmwareFcdMount(params *InstantRecoveryVmwareFcdMountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstantRecoveryVmwareFcdMountCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetVmwareFcdInstantRecoveryMountModel gets mount information

  The HTTP GET request to the `/api/v1/restore/instantRecovery/vmware/fcd/{mountId}` path allows you to get information about the mounted vPower NFS datastore, such as restore session ID, mount state, instant recovery settings and disks that will be recovered.
*/
func (a *Client) GetVmwareFcdInstantRecoveryMountModel(params *GetVmwareFcdInstantRecoveryMountModelParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetVmwareFcdInstantRecoveryMountModelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVmwareFcdInstantRecoveryMountModelParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetVmwareFcdInstantRecoveryMountModel",
		Method:             "GET",
		PathPattern:        "/api/v1/restore/instantRecovery/vmware/fcd/{mountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVmwareFcdInstantRecoveryMountModelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetVmwareFcdInstantRecoveryMountModelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetVmwareFcdInstantRecoveryMountModel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InstantRecoveryVmwareFcdDismount stops f c d publishing

  The HTTP POST request to the `/api/v1/restore/instantRecovery/vmware/fcd/{mountId}/dismount` path allows you to stop publishing the recovered FCDs and remove the disks from the datastore.
*/
func (a *Client) InstantRecoveryVmwareFcdDismount(params *InstantRecoveryVmwareFcdDismountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstantRecoveryVmwareFcdDismountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstantRecoveryVmwareFcdDismountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InstantRecoveryVmwareFcdDismount",
		Method:             "POST",
		PathPattern:        "/api/v1/restore/instantRecovery/vmware/fcd/{mountId}/dismount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InstantRecoveryVmwareFcdDismountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstantRecoveryVmwareFcdDismountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InstantRecoveryVmwareFcdDismount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InstantRecoveryVmwareFcdMigrate starts f c d migration

  The HTTP POST request to the `/api/v1/restore/instantRecovery/vmware/fcd/{mountId}/migrate` path allows you to start migration of FCDs from the specified mount.
*/
func (a *Client) InstantRecoveryVmwareFcdMigrate(params *InstantRecoveryVmwareFcdMigrateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstantRecoveryVmwareFcdMigrateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstantRecoveryVmwareFcdMigrateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InstantRecoveryVmwareFcdMigrate",
		Method:             "POST",
		PathPattern:        "/api/v1/restore/instantRecovery/vmware/fcd/{mountId}/migrate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InstantRecoveryVmwareFcdMigrateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstantRecoveryVmwareFcdMigrateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InstantRecoveryVmwareFcdMigrate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InstantRecoveryVmwareFcdMount starts instant f c d recovery

  The HTTP POST request to the `/api/v1/restore/instantRecovery/vmware/fcd/` path allows you to start Instant FCD Recovery from the specified restore point to the specified cluster. For details on how to get a cluster model, see [Get VMware vSphere Server Objects](#operation/GetVmwareHostObject).
*/
func (a *Client) InstantRecoveryVmwareFcdMount(params *InstantRecoveryVmwareFcdMountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstantRecoveryVmwareFcdMountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstantRecoveryVmwareFcdMountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "InstantRecoveryVmwareFcdMount",
		Method:             "POST",
		PathPattern:        "/api/v1/restore/instantRecovery/vmware/fcd/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InstantRecoveryVmwareFcdMountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstantRecoveryVmwareFcdMountCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for InstantRecoveryVmwareFcdMount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
