/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InstantViVMOriginalLocationRecoverySpec Instant Recovery to the original location with initial settings.
type InstantViVMOriginalLocationRecoverySpec struct {
	InstantViVMRecoverySpec
}

// NewInstantViVMOriginalLocationRecoverySpec instantiates a new InstantViVMOriginalLocationRecoverySpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstantViVMOriginalLocationRecoverySpec(destination InstantViVMCustomizedRecoveryDestinationSpec, datastore InstantViVMCustomizedRecoveryDatastoreSpec) *InstantViVMOriginalLocationRecoverySpec {
	this := InstantViVMOriginalLocationRecoverySpec{}
	this.Destination = destination
	this.Datastore = datastore
	return &this
}

// NewInstantViVMOriginalLocationRecoverySpecWithDefaults instantiates a new InstantViVMOriginalLocationRecoverySpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstantViVMOriginalLocationRecoverySpecWithDefaults() *InstantViVMOriginalLocationRecoverySpec {
	this := InstantViVMOriginalLocationRecoverySpec{}
	return &this
}

func (o InstantViVMOriginalLocationRecoverySpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedInstantViVMRecoverySpec, errInstantViVMRecoverySpec := json.Marshal(o.InstantViVMRecoverySpec)
	if errInstantViVMRecoverySpec != nil {
		return []byte{}, errInstantViVMRecoverySpec
	}
	errInstantViVMRecoverySpec = json.Unmarshal([]byte(serializedInstantViVMRecoverySpec), &toSerialize)
	if errInstantViVMRecoverySpec != nil {
		return []byte{}, errInstantViVMRecoverySpec
	}
	return json.Marshal(toSerialize)
}

type NullableInstantViVMOriginalLocationRecoverySpec struct {
	value *InstantViVMOriginalLocationRecoverySpec
	isSet bool
}

func (v NullableInstantViVMOriginalLocationRecoverySpec) Get() *InstantViVMOriginalLocationRecoverySpec {
	return v.value
}

func (v *NullableInstantViVMOriginalLocationRecoverySpec) Set(val *InstantViVMOriginalLocationRecoverySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableInstantViVMOriginalLocationRecoverySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableInstantViVMOriginalLocationRecoverySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstantViVMOriginalLocationRecoverySpec(val *InstantViVMOriginalLocationRecoverySpec) *NullableInstantViVMOriginalLocationRecoverySpec {
	return &NullableInstantViVMOriginalLocationRecoverySpec{value: val, isSet: true}
}

func (v NullableInstantViVMOriginalLocationRecoverySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstantViVMOriginalLocationRecoverySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


