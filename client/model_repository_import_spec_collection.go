/*
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic. 
 *
 * API version: 1.0-rev2
 * Contact: support@veeam.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// RepositoryImportSpecCollection struct for RepositoryImportSpecCollection
type RepositoryImportSpecCollection struct {
	// Array of windows local storages.
	WindowsLocalRepositories *[]WindowsLocalStorageImportSpec `json:"WindowsLocalRepositories,omitempty"`
	// Array of linux local storages.
	LinuxLocalRepositories *[]LinuxLocalStorageImportSpec `json:"LinuxLocalRepositories,omitempty"`
	// Array of network attached storages.
	SmbRepositories *[]SmbStorageImportSpec `json:"SmbRepositories,omitempty"`
	// Array of network attached storages.
	NfsRepositories *[]NfsStorageImportSpec `json:"NfsRepositories,omitempty"`
}

// NewRepositoryImportSpecCollection instantiates a new RepositoryImportSpecCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryImportSpecCollection() *RepositoryImportSpecCollection {
	this := RepositoryImportSpecCollection{}
	return &this
}

// NewRepositoryImportSpecCollectionWithDefaults instantiates a new RepositoryImportSpecCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryImportSpecCollectionWithDefaults() *RepositoryImportSpecCollection {
	this := RepositoryImportSpecCollection{}
	return &this
}

// GetWindowsLocalRepositories returns the WindowsLocalRepositories field value if set, zero value otherwise.
func (o *RepositoryImportSpecCollection) GetWindowsLocalRepositories() []WindowsLocalStorageImportSpec {
	if o == nil || o.WindowsLocalRepositories == nil {
		var ret []WindowsLocalStorageImportSpec
		return ret
	}
	return *o.WindowsLocalRepositories
}

// GetWindowsLocalRepositoriesOk returns a tuple with the WindowsLocalRepositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryImportSpecCollection) GetWindowsLocalRepositoriesOk() (*[]WindowsLocalStorageImportSpec, bool) {
	if o == nil || o.WindowsLocalRepositories == nil {
		return nil, false
	}
	return o.WindowsLocalRepositories, true
}

// HasWindowsLocalRepositories returns a boolean if a field has been set.
func (o *RepositoryImportSpecCollection) HasWindowsLocalRepositories() bool {
	if o != nil && o.WindowsLocalRepositories != nil {
		return true
	}

	return false
}

// SetWindowsLocalRepositories gets a reference to the given []WindowsLocalStorageImportSpec and assigns it to the WindowsLocalRepositories field.
func (o *RepositoryImportSpecCollection) SetWindowsLocalRepositories(v []WindowsLocalStorageImportSpec) {
	o.WindowsLocalRepositories = &v
}

// GetLinuxLocalRepositories returns the LinuxLocalRepositories field value if set, zero value otherwise.
func (o *RepositoryImportSpecCollection) GetLinuxLocalRepositories() []LinuxLocalStorageImportSpec {
	if o == nil || o.LinuxLocalRepositories == nil {
		var ret []LinuxLocalStorageImportSpec
		return ret
	}
	return *o.LinuxLocalRepositories
}

// GetLinuxLocalRepositoriesOk returns a tuple with the LinuxLocalRepositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryImportSpecCollection) GetLinuxLocalRepositoriesOk() (*[]LinuxLocalStorageImportSpec, bool) {
	if o == nil || o.LinuxLocalRepositories == nil {
		return nil, false
	}
	return o.LinuxLocalRepositories, true
}

// HasLinuxLocalRepositories returns a boolean if a field has been set.
func (o *RepositoryImportSpecCollection) HasLinuxLocalRepositories() bool {
	if o != nil && o.LinuxLocalRepositories != nil {
		return true
	}

	return false
}

// SetLinuxLocalRepositories gets a reference to the given []LinuxLocalStorageImportSpec and assigns it to the LinuxLocalRepositories field.
func (o *RepositoryImportSpecCollection) SetLinuxLocalRepositories(v []LinuxLocalStorageImportSpec) {
	o.LinuxLocalRepositories = &v
}

// GetSmbRepositories returns the SmbRepositories field value if set, zero value otherwise.
func (o *RepositoryImportSpecCollection) GetSmbRepositories() []SmbStorageImportSpec {
	if o == nil || o.SmbRepositories == nil {
		var ret []SmbStorageImportSpec
		return ret
	}
	return *o.SmbRepositories
}

// GetSmbRepositoriesOk returns a tuple with the SmbRepositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryImportSpecCollection) GetSmbRepositoriesOk() (*[]SmbStorageImportSpec, bool) {
	if o == nil || o.SmbRepositories == nil {
		return nil, false
	}
	return o.SmbRepositories, true
}

// HasSmbRepositories returns a boolean if a field has been set.
func (o *RepositoryImportSpecCollection) HasSmbRepositories() bool {
	if o != nil && o.SmbRepositories != nil {
		return true
	}

	return false
}

// SetSmbRepositories gets a reference to the given []SmbStorageImportSpec and assigns it to the SmbRepositories field.
func (o *RepositoryImportSpecCollection) SetSmbRepositories(v []SmbStorageImportSpec) {
	o.SmbRepositories = &v
}

// GetNfsRepositories returns the NfsRepositories field value if set, zero value otherwise.
func (o *RepositoryImportSpecCollection) GetNfsRepositories() []NfsStorageImportSpec {
	if o == nil || o.NfsRepositories == nil {
		var ret []NfsStorageImportSpec
		return ret
	}
	return *o.NfsRepositories
}

// GetNfsRepositoriesOk returns a tuple with the NfsRepositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryImportSpecCollection) GetNfsRepositoriesOk() (*[]NfsStorageImportSpec, bool) {
	if o == nil || o.NfsRepositories == nil {
		return nil, false
	}
	return o.NfsRepositories, true
}

// HasNfsRepositories returns a boolean if a field has been set.
func (o *RepositoryImportSpecCollection) HasNfsRepositories() bool {
	if o != nil && o.NfsRepositories != nil {
		return true
	}

	return false
}

// SetNfsRepositories gets a reference to the given []NfsStorageImportSpec and assigns it to the NfsRepositories field.
func (o *RepositoryImportSpecCollection) SetNfsRepositories(v []NfsStorageImportSpec) {
	o.NfsRepositories = &v
}

func (o RepositoryImportSpecCollection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.WindowsLocalRepositories != nil {
		toSerialize["WindowsLocalRepositories"] = o.WindowsLocalRepositories
	}
	if o.LinuxLocalRepositories != nil {
		toSerialize["LinuxLocalRepositories"] = o.LinuxLocalRepositories
	}
	if o.SmbRepositories != nil {
		toSerialize["SmbRepositories"] = o.SmbRepositories
	}
	if o.NfsRepositories != nil {
		toSerialize["NfsRepositories"] = o.NfsRepositories
	}
	return json.Marshal(toSerialize)
}

type NullableRepositoryImportSpecCollection struct {
	value *RepositoryImportSpecCollection
	isSet bool
}

func (v NullableRepositoryImportSpecCollection) Get() *RepositoryImportSpecCollection {
	return v.value
}

func (v *NullableRepositoryImportSpecCollection) Set(val *RepositoryImportSpecCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryImportSpecCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryImportSpecCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryImportSpecCollection(val *RepositoryImportSpecCollection) *NullableRepositoryImportSpecCollection {
	return &NullableRepositoryImportSpecCollection{value: val, isSet: true}
}

func (v NullableRepositoryImportSpecCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryImportSpecCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


