/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AzureArchiveStorageImportSpec struct for AzureArchiveStorageImportSpec
type AzureArchiveStorageImportSpec struct {
	// Name of the object storage repository.
	Name string `json:"name"`
	// Description of the object storage repository.
	Description string `json:"description"`
	// Tag that identifies the object storage repository.
	Tag string `json:"tag"`
	Type ERepositoryType `json:"type"`
	Account AzureArchiveStorageAccountImportModel `json:"account"`
	Container AzureArchiveStorageContainerModel `json:"container"`
	ProxyAppliance *AzureStorageProxyModel `json:"proxyAppliance,omitempty"`
}

// NewAzureArchiveStorageImportSpec instantiates a new AzureArchiveStorageImportSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureArchiveStorageImportSpec(name string, description string, tag string, type_ ERepositoryType, account AzureArchiveStorageAccountImportModel, container AzureArchiveStorageContainerModel) *AzureArchiveStorageImportSpec {
	this := AzureArchiveStorageImportSpec{}
	this.Name = name
	this.Description = description
	this.Tag = tag
	this.Type = type_
	this.Account = account
	this.Container = container
	return &this
}

// NewAzureArchiveStorageImportSpecWithDefaults instantiates a new AzureArchiveStorageImportSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureArchiveStorageImportSpecWithDefaults() *AzureArchiveStorageImportSpec {
	this := AzureArchiveStorageImportSpec{}
	return &this
}

// GetName returns the Name field value
func (o *AzureArchiveStorageImportSpec) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AzureArchiveStorageImportSpec) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AzureArchiveStorageImportSpec) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *AzureArchiveStorageImportSpec) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *AzureArchiveStorageImportSpec) GetDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *AzureArchiveStorageImportSpec) SetDescription(v string) {
	o.Description = v
}

// GetTag returns the Tag field value
func (o *AzureArchiveStorageImportSpec) GetTag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *AzureArchiveStorageImportSpec) GetTagOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *AzureArchiveStorageImportSpec) SetTag(v string) {
	o.Tag = v
}

// GetType returns the Type field value
func (o *AzureArchiveStorageImportSpec) GetType() ERepositoryType {
	if o == nil {
		var ret ERepositoryType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AzureArchiveStorageImportSpec) GetTypeOk() (*ERepositoryType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AzureArchiveStorageImportSpec) SetType(v ERepositoryType) {
	o.Type = v
}

// GetAccount returns the Account field value
func (o *AzureArchiveStorageImportSpec) GetAccount() AzureArchiveStorageAccountImportModel {
	if o == nil {
		var ret AzureArchiveStorageAccountImportModel
		return ret
	}

	return o.Account
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
func (o *AzureArchiveStorageImportSpec) GetAccountOk() (*AzureArchiveStorageAccountImportModel, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Account, true
}

// SetAccount sets field value
func (o *AzureArchiveStorageImportSpec) SetAccount(v AzureArchiveStorageAccountImportModel) {
	o.Account = v
}

// GetContainer returns the Container field value
func (o *AzureArchiveStorageImportSpec) GetContainer() AzureArchiveStorageContainerModel {
	if o == nil {
		var ret AzureArchiveStorageContainerModel
		return ret
	}

	return o.Container
}

// GetContainerOk returns a tuple with the Container field value
// and a boolean to check if the value has been set.
func (o *AzureArchiveStorageImportSpec) GetContainerOk() (*AzureArchiveStorageContainerModel, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Container, true
}

// SetContainer sets field value
func (o *AzureArchiveStorageImportSpec) SetContainer(v AzureArchiveStorageContainerModel) {
	o.Container = v
}

// GetProxyAppliance returns the ProxyAppliance field value if set, zero value otherwise.
func (o *AzureArchiveStorageImportSpec) GetProxyAppliance() AzureStorageProxyModel {
	if o == nil || isNil(o.ProxyAppliance) {
		var ret AzureStorageProxyModel
		return ret
	}
	return *o.ProxyAppliance
}

// GetProxyApplianceOk returns a tuple with the ProxyAppliance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureArchiveStorageImportSpec) GetProxyApplianceOk() (*AzureStorageProxyModel, bool) {
	if o == nil || isNil(o.ProxyAppliance) {
    return nil, false
	}
	return o.ProxyAppliance, true
}

// HasProxyAppliance returns a boolean if a field has been set.
func (o *AzureArchiveStorageImportSpec) HasProxyAppliance() bool {
	if o != nil && !isNil(o.ProxyAppliance) {
		return true
	}

	return false
}

// SetProxyAppliance gets a reference to the given AzureStorageProxyModel and assigns it to the ProxyAppliance field.
func (o *AzureArchiveStorageImportSpec) SetProxyAppliance(v AzureStorageProxyModel) {
	o.ProxyAppliance = &v
}

func (o AzureArchiveStorageImportSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["tag"] = o.Tag
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["account"] = o.Account
	}
	if true {
		toSerialize["container"] = o.Container
	}
	if !isNil(o.ProxyAppliance) {
		toSerialize["proxyAppliance"] = o.ProxyAppliance
	}
	return json.Marshal(toSerialize)
}

type NullableAzureArchiveStorageImportSpec struct {
	value *AzureArchiveStorageImportSpec
	isSet bool
}

func (v NullableAzureArchiveStorageImportSpec) Get() *AzureArchiveStorageImportSpec {
	return v.value
}

func (v *NullableAzureArchiveStorageImportSpec) Set(val *AzureArchiveStorageImportSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureArchiveStorageImportSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureArchiveStorageImportSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureArchiveStorageImportSpec(val *AzureArchiveStorageImportSpec) *NullableAzureArchiveStorageImportSpec {
	return &NullableAzureArchiveStorageImportSpec{value: val, isSet: true}
}

func (v NullableAzureArchiveStorageImportSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureArchiveStorageImportSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


