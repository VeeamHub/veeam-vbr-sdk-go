// Code generated by go-swagger; DO NOT EDIT.

package jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/veeamhub/veeam-vbr-sdk-go/models"
)

// GetJobReader is a Reader for the GetJob structure.
type GetJobReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetJobReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetJobOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetJobUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetJobForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetJobNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetJobInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetJobOK creates a GetJobOK with default headers values
func NewGetJobOK() *GetJobOK {
	return &GetJobOK{}
}

/* GetJobOK describes a response with status code 200, with default header values.

OK
*/
type GetJobOK struct {
	Payload *models.JobModel
}

func (o *GetJobOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/jobs/{id}][%d] getJobOK  %+v", 200, o.Payload)
}
func (o *GetJobOK) GetPayload() *models.JobModel {
	return o.Payload
}

func (o *GetJobOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.JobModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetJobUnauthorized creates a GetJobUnauthorized with default headers values
func NewGetJobUnauthorized() *GetJobUnauthorized {
	return &GetJobUnauthorized{}
}

/* GetJobUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The authorization header has been expected but not found (or found but is expired).
*/
type GetJobUnauthorized struct {
	Payload *models.Error
}

func (o *GetJobUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/jobs/{id}][%d] getJobUnauthorized  %+v", 401, o.Payload)
}
func (o *GetJobUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetJobUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetJobForbidden creates a GetJobForbidden with default headers values
func NewGetJobForbidden() *GetJobForbidden {
	return &GetJobForbidden{}
}

/* GetJobForbidden describes a response with status code 403, with default header values.

Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.
*/
type GetJobForbidden struct {
	Payload *models.Error
}

func (o *GetJobForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/jobs/{id}][%d] getJobForbidden  %+v", 403, o.Payload)
}
func (o *GetJobForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetJobForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetJobNotFound creates a GetJobNotFound with default headers values
func NewGetJobNotFound() *GetJobNotFound {
	return &GetJobNotFound{}
}

/* GetJobNotFound describes a response with status code 404, with default header values.

Not found. No object was found with the path parameter specified in the request.
*/
type GetJobNotFound struct {
	Payload *models.Error
}

func (o *GetJobNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/jobs/{id}][%d] getJobNotFound  %+v", 404, o.Payload)
}
func (o *GetJobNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetJobNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetJobInternalServerError creates a GetJobInternalServerError with default headers values
func NewGetJobInternalServerError() *GetJobInternalServerError {
	return &GetJobInternalServerError{}
}

/* GetJobInternalServerError describes a response with status code 500, with default header values.

Internal server error. The request has been received but could not be completed because of an internal error at the server side.
*/
type GetJobInternalServerError struct {
	Payload *models.Error
}

func (o *GetJobInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/jobs/{id}][%d] getJobInternalServerError  %+v", 500, o.Payload)
}
func (o *GetJobInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetJobInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
