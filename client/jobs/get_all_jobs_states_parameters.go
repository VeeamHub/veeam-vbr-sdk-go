// Code generated by go-swagger; DO NOT EDIT.

package jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAllJobsStatesParams creates a new GetAllJobsStatesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAllJobsStatesParams() *GetAllJobsStatesParams {
	return &GetAllJobsStatesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllJobsStatesParamsWithTimeout creates a new GetAllJobsStatesParams object
// with the ability to set a timeout on a request.
func NewGetAllJobsStatesParamsWithTimeout(timeout time.Duration) *GetAllJobsStatesParams {
	return &GetAllJobsStatesParams{
		timeout: timeout,
	}
}

// NewGetAllJobsStatesParamsWithContext creates a new GetAllJobsStatesParams object
// with the ability to set a context for a request.
func NewGetAllJobsStatesParamsWithContext(ctx context.Context) *GetAllJobsStatesParams {
	return &GetAllJobsStatesParams{
		Context: ctx,
	}
}

// NewGetAllJobsStatesParamsWithHTTPClient creates a new GetAllJobsStatesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAllJobsStatesParamsWithHTTPClient(client *http.Client) *GetAllJobsStatesParams {
	return &GetAllJobsStatesParams{
		HTTPClient: client,
	}
}

/* GetAllJobsStatesParams contains all the parameters to send to the API endpoint
   for the get all jobs states operation.

   Typically these are written to a http.Request.
*/
type GetAllJobsStatesParams struct {

	/* IDFilter.

	   Filters job states by job ID.

	   Format: uuid
	*/
	IDFilter *strfmt.UUID

	/* IsHighPriorityJobFilter.

	   If *true*, Returns job states for jobs with high priority.
	*/
	IsHighPriorityJobFilter *bool

	/* LastResultFilter.

	   Filters job states by status with which jobs must finish.
	*/
	LastResultFilter *string

	/* LastRunAfterFilter.

	   Returns job states for jobs that have run after the specified date and time.

	   Format: date-time
	*/
	LastRunAfterFilter *strfmt.DateTime

	/* LastRunBeforeFilter.

	   Returns job states for jobs that have not run after the specified date and time.

	   Format: date-time
	*/
	LastRunBeforeFilter *strfmt.DateTime

	/* Limit.

	   Maximum number of job states to return.

	   Format: int32
	*/
	Limit *int32

	/* NameFilter.

	   Filters job states by the `nameFilter` pattern. The pattern can match any state parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	*/
	NameFilter *string

	/* ObjectsCountFilter.

	   Filters job states by number of objects processed by the job.
	*/
	ObjectsCountFilter *int64

	/* OrderAsc.

	   Sorts job states in the ascending order by the `orderColumn` parameter.
	*/
	OrderAsc *bool

	/* OrderColumn.

	   Sorts job states by one of the state parameters.
	*/
	OrderColumn *string

	/* RepositoryIDFilter.

	   Filters job states by repository ID.

	   Format: uuid
	*/
	RepositoryIDFilter *strfmt.UUID

	/* Skip.

	   Number of job states to skip.

	   Format: int32
	*/
	Skip *int32

	/* StatusFilter.

	   Filters job states by current status of the job.
	*/
	StatusFilter *string

	/* TypeFilter.

	   Filters job states by job type.
	*/
	TypeFilter *string

	/* WorkloadFilter.

	   Filters job states by workloads that jobs must process.
	*/
	WorkloadFilter *string

	/* XAPIVersion.

	     Version and revision of the client REST API. Must be in the following
	format: *\<version\>-\<revision\>*.


	     Default: "1.0-rev1"
	*/
	XAPIVersion string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get all jobs states params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllJobsStatesParams) WithDefaults() *GetAllJobsStatesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get all jobs states params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllJobsStatesParams) SetDefaults() {
	var (
		xAPIVersionDefault = string("1.0-rev1")
	)

	val := GetAllJobsStatesParams{
		XAPIVersion: xAPIVersionDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get all jobs states params
func (o *GetAllJobsStatesParams) WithTimeout(timeout time.Duration) *GetAllJobsStatesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all jobs states params
func (o *GetAllJobsStatesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all jobs states params
func (o *GetAllJobsStatesParams) WithContext(ctx context.Context) *GetAllJobsStatesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all jobs states params
func (o *GetAllJobsStatesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all jobs states params
func (o *GetAllJobsStatesParams) WithHTTPClient(client *http.Client) *GetAllJobsStatesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all jobs states params
func (o *GetAllJobsStatesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIDFilter adds the iDFilter to the get all jobs states params
func (o *GetAllJobsStatesParams) WithIDFilter(iDFilter *strfmt.UUID) *GetAllJobsStatesParams {
	o.SetIDFilter(iDFilter)
	return o
}

// SetIDFilter adds the idFilter to the get all jobs states params
func (o *GetAllJobsStatesParams) SetIDFilter(iDFilter *strfmt.UUID) {
	o.IDFilter = iDFilter
}

// WithIsHighPriorityJobFilter adds the isHighPriorityJobFilter to the get all jobs states params
func (o *GetAllJobsStatesParams) WithIsHighPriorityJobFilter(isHighPriorityJobFilter *bool) *GetAllJobsStatesParams {
	o.SetIsHighPriorityJobFilter(isHighPriorityJobFilter)
	return o
}

// SetIsHighPriorityJobFilter adds the isHighPriorityJobFilter to the get all jobs states params
func (o *GetAllJobsStatesParams) SetIsHighPriorityJobFilter(isHighPriorityJobFilter *bool) {
	o.IsHighPriorityJobFilter = isHighPriorityJobFilter
}

// WithLastResultFilter adds the lastResultFilter to the get all jobs states params
func (o *GetAllJobsStatesParams) WithLastResultFilter(lastResultFilter *string) *GetAllJobsStatesParams {
	o.SetLastResultFilter(lastResultFilter)
	return o
}

// SetLastResultFilter adds the lastResultFilter to the get all jobs states params
func (o *GetAllJobsStatesParams) SetLastResultFilter(lastResultFilter *string) {
	o.LastResultFilter = lastResultFilter
}

// WithLastRunAfterFilter adds the lastRunAfterFilter to the get all jobs states params
func (o *GetAllJobsStatesParams) WithLastRunAfterFilter(lastRunAfterFilter *strfmt.DateTime) *GetAllJobsStatesParams {
	o.SetLastRunAfterFilter(lastRunAfterFilter)
	return o
}

// SetLastRunAfterFilter adds the lastRunAfterFilter to the get all jobs states params
func (o *GetAllJobsStatesParams) SetLastRunAfterFilter(lastRunAfterFilter *strfmt.DateTime) {
	o.LastRunAfterFilter = lastRunAfterFilter
}

// WithLastRunBeforeFilter adds the lastRunBeforeFilter to the get all jobs states params
func (o *GetAllJobsStatesParams) WithLastRunBeforeFilter(lastRunBeforeFilter *strfmt.DateTime) *GetAllJobsStatesParams {
	o.SetLastRunBeforeFilter(lastRunBeforeFilter)
	return o
}

// SetLastRunBeforeFilter adds the lastRunBeforeFilter to the get all jobs states params
func (o *GetAllJobsStatesParams) SetLastRunBeforeFilter(lastRunBeforeFilter *strfmt.DateTime) {
	o.LastRunBeforeFilter = lastRunBeforeFilter
}

// WithLimit adds the limit to the get all jobs states params
func (o *GetAllJobsStatesParams) WithLimit(limit *int32) *GetAllJobsStatesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get all jobs states params
func (o *GetAllJobsStatesParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithNameFilter adds the nameFilter to the get all jobs states params
func (o *GetAllJobsStatesParams) WithNameFilter(nameFilter *string) *GetAllJobsStatesParams {
	o.SetNameFilter(nameFilter)
	return o
}

// SetNameFilter adds the nameFilter to the get all jobs states params
func (o *GetAllJobsStatesParams) SetNameFilter(nameFilter *string) {
	o.NameFilter = nameFilter
}

// WithObjectsCountFilter adds the objectsCountFilter to the get all jobs states params
func (o *GetAllJobsStatesParams) WithObjectsCountFilter(objectsCountFilter *int64) *GetAllJobsStatesParams {
	o.SetObjectsCountFilter(objectsCountFilter)
	return o
}

// SetObjectsCountFilter adds the objectsCountFilter to the get all jobs states params
func (o *GetAllJobsStatesParams) SetObjectsCountFilter(objectsCountFilter *int64) {
	o.ObjectsCountFilter = objectsCountFilter
}

// WithOrderAsc adds the orderAsc to the get all jobs states params
func (o *GetAllJobsStatesParams) WithOrderAsc(orderAsc *bool) *GetAllJobsStatesParams {
	o.SetOrderAsc(orderAsc)
	return o
}

// SetOrderAsc adds the orderAsc to the get all jobs states params
func (o *GetAllJobsStatesParams) SetOrderAsc(orderAsc *bool) {
	o.OrderAsc = orderAsc
}

// WithOrderColumn adds the orderColumn to the get all jobs states params
func (o *GetAllJobsStatesParams) WithOrderColumn(orderColumn *string) *GetAllJobsStatesParams {
	o.SetOrderColumn(orderColumn)
	return o
}

// SetOrderColumn adds the orderColumn to the get all jobs states params
func (o *GetAllJobsStatesParams) SetOrderColumn(orderColumn *string) {
	o.OrderColumn = orderColumn
}

// WithRepositoryIDFilter adds the repositoryIDFilter to the get all jobs states params
func (o *GetAllJobsStatesParams) WithRepositoryIDFilter(repositoryIDFilter *strfmt.UUID) *GetAllJobsStatesParams {
	o.SetRepositoryIDFilter(repositoryIDFilter)
	return o
}

// SetRepositoryIDFilter adds the repositoryIdFilter to the get all jobs states params
func (o *GetAllJobsStatesParams) SetRepositoryIDFilter(repositoryIDFilter *strfmt.UUID) {
	o.RepositoryIDFilter = repositoryIDFilter
}

// WithSkip adds the skip to the get all jobs states params
func (o *GetAllJobsStatesParams) WithSkip(skip *int32) *GetAllJobsStatesParams {
	o.SetSkip(skip)
	return o
}

// SetSkip adds the skip to the get all jobs states params
func (o *GetAllJobsStatesParams) SetSkip(skip *int32) {
	o.Skip = skip
}

// WithStatusFilter adds the statusFilter to the get all jobs states params
func (o *GetAllJobsStatesParams) WithStatusFilter(statusFilter *string) *GetAllJobsStatesParams {
	o.SetStatusFilter(statusFilter)
	return o
}

// SetStatusFilter adds the statusFilter to the get all jobs states params
func (o *GetAllJobsStatesParams) SetStatusFilter(statusFilter *string) {
	o.StatusFilter = statusFilter
}

// WithTypeFilter adds the typeFilter to the get all jobs states params
func (o *GetAllJobsStatesParams) WithTypeFilter(typeFilter *string) *GetAllJobsStatesParams {
	o.SetTypeFilter(typeFilter)
	return o
}

// SetTypeFilter adds the typeFilter to the get all jobs states params
func (o *GetAllJobsStatesParams) SetTypeFilter(typeFilter *string) {
	o.TypeFilter = typeFilter
}

// WithWorkloadFilter adds the workloadFilter to the get all jobs states params
func (o *GetAllJobsStatesParams) WithWorkloadFilter(workloadFilter *string) *GetAllJobsStatesParams {
	o.SetWorkloadFilter(workloadFilter)
	return o
}

// SetWorkloadFilter adds the workloadFilter to the get all jobs states params
func (o *GetAllJobsStatesParams) SetWorkloadFilter(workloadFilter *string) {
	o.WorkloadFilter = workloadFilter
}

// WithXAPIVersion adds the xAPIVersion to the get all jobs states params
func (o *GetAllJobsStatesParams) WithXAPIVersion(xAPIVersion string) *GetAllJobsStatesParams {
	o.SetXAPIVersion(xAPIVersion)
	return o
}

// SetXAPIVersion adds the xApiVersion to the get all jobs states params
func (o *GetAllJobsStatesParams) SetXAPIVersion(xAPIVersion string) {
	o.XAPIVersion = xAPIVersion
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllJobsStatesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IDFilter != nil {

		// query param idFilter
		var qrIDFilter strfmt.UUID

		if o.IDFilter != nil {
			qrIDFilter = *o.IDFilter
		}
		qIDFilter := qrIDFilter.String()
		if qIDFilter != "" {

			if err := r.SetQueryParam("idFilter", qIDFilter); err != nil {
				return err
			}
		}
	}

	if o.IsHighPriorityJobFilter != nil {

		// query param isHighPriorityJobFilter
		var qrIsHighPriorityJobFilter bool

		if o.IsHighPriorityJobFilter != nil {
			qrIsHighPriorityJobFilter = *o.IsHighPriorityJobFilter
		}
		qIsHighPriorityJobFilter := swag.FormatBool(qrIsHighPriorityJobFilter)
		if qIsHighPriorityJobFilter != "" {

			if err := r.SetQueryParam("isHighPriorityJobFilter", qIsHighPriorityJobFilter); err != nil {
				return err
			}
		}
	}

	if o.LastResultFilter != nil {

		// query param lastResultFilter
		var qrLastResultFilter string

		if o.LastResultFilter != nil {
			qrLastResultFilter = *o.LastResultFilter
		}
		qLastResultFilter := qrLastResultFilter
		if qLastResultFilter != "" {

			if err := r.SetQueryParam("lastResultFilter", qLastResultFilter); err != nil {
				return err
			}
		}
	}

	if o.LastRunAfterFilter != nil {

		// query param lastRunAfterFilter
		var qrLastRunAfterFilter strfmt.DateTime

		if o.LastRunAfterFilter != nil {
			qrLastRunAfterFilter = *o.LastRunAfterFilter
		}
		qLastRunAfterFilter := qrLastRunAfterFilter.String()
		if qLastRunAfterFilter != "" {

			if err := r.SetQueryParam("lastRunAfterFilter", qLastRunAfterFilter); err != nil {
				return err
			}
		}
	}

	if o.LastRunBeforeFilter != nil {

		// query param lastRunBeforeFilter
		var qrLastRunBeforeFilter strfmt.DateTime

		if o.LastRunBeforeFilter != nil {
			qrLastRunBeforeFilter = *o.LastRunBeforeFilter
		}
		qLastRunBeforeFilter := qrLastRunBeforeFilter.String()
		if qLastRunBeforeFilter != "" {

			if err := r.SetQueryParam("lastRunBeforeFilter", qLastRunBeforeFilter); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.NameFilter != nil {

		// query param nameFilter
		var qrNameFilter string

		if o.NameFilter != nil {
			qrNameFilter = *o.NameFilter
		}
		qNameFilter := qrNameFilter
		if qNameFilter != "" {

			if err := r.SetQueryParam("nameFilter", qNameFilter); err != nil {
				return err
			}
		}
	}

	if o.ObjectsCountFilter != nil {

		// query param objectsCountFilter
		var qrObjectsCountFilter int64

		if o.ObjectsCountFilter != nil {
			qrObjectsCountFilter = *o.ObjectsCountFilter
		}
		qObjectsCountFilter := swag.FormatInt64(qrObjectsCountFilter)
		if qObjectsCountFilter != "" {

			if err := r.SetQueryParam("objectsCountFilter", qObjectsCountFilter); err != nil {
				return err
			}
		}
	}

	if o.OrderAsc != nil {

		// query param orderAsc
		var qrOrderAsc bool

		if o.OrderAsc != nil {
			qrOrderAsc = *o.OrderAsc
		}
		qOrderAsc := swag.FormatBool(qrOrderAsc)
		if qOrderAsc != "" {

			if err := r.SetQueryParam("orderAsc", qOrderAsc); err != nil {
				return err
			}
		}
	}

	if o.OrderColumn != nil {

		// query param orderColumn
		var qrOrderColumn string

		if o.OrderColumn != nil {
			qrOrderColumn = *o.OrderColumn
		}
		qOrderColumn := qrOrderColumn
		if qOrderColumn != "" {

			if err := r.SetQueryParam("orderColumn", qOrderColumn); err != nil {
				return err
			}
		}
	}

	if o.RepositoryIDFilter != nil {

		// query param repositoryIdFilter
		var qrRepositoryIDFilter strfmt.UUID

		if o.RepositoryIDFilter != nil {
			qrRepositoryIDFilter = *o.RepositoryIDFilter
		}
		qRepositoryIDFilter := qrRepositoryIDFilter.String()
		if qRepositoryIDFilter != "" {

			if err := r.SetQueryParam("repositoryIdFilter", qRepositoryIDFilter); err != nil {
				return err
			}
		}
	}

	if o.Skip != nil {

		// query param skip
		var qrSkip int32

		if o.Skip != nil {
			qrSkip = *o.Skip
		}
		qSkip := swag.FormatInt32(qrSkip)
		if qSkip != "" {

			if err := r.SetQueryParam("skip", qSkip); err != nil {
				return err
			}
		}
	}

	if o.StatusFilter != nil {

		// query param statusFilter
		var qrStatusFilter string

		if o.StatusFilter != nil {
			qrStatusFilter = *o.StatusFilter
		}
		qStatusFilter := qrStatusFilter
		if qStatusFilter != "" {

			if err := r.SetQueryParam("statusFilter", qStatusFilter); err != nil {
				return err
			}
		}
	}

	if o.TypeFilter != nil {

		// query param typeFilter
		var qrTypeFilter string

		if o.TypeFilter != nil {
			qrTypeFilter = *o.TypeFilter
		}
		qTypeFilter := qrTypeFilter
		if qTypeFilter != "" {

			if err := r.SetQueryParam("typeFilter", qTypeFilter); err != nil {
				return err
			}
		}
	}

	if o.WorkloadFilter != nil {

		// query param workloadFilter
		var qrWorkloadFilter string

		if o.WorkloadFilter != nil {
			qrWorkloadFilter = *o.WorkloadFilter
		}
		qWorkloadFilter := qrWorkloadFilter
		if qWorkloadFilter != "" {

			if err := r.SetQueryParam("workloadFilter", qWorkloadFilter); err != nil {
				return err
			}
		}
	}

	// header param x-api-version
	if err := r.SetHeaderParam("x-api-version", o.XAPIVersion); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
