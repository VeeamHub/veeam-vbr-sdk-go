/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// EAmazonS3Region Amazon S3 region code.
type EAmazonS3Region string

// List of EAmazonS3Region
const (
	EAMAZONS3REGION_UNKNOWN EAmazonS3Region = "unknown"
	EAMAZONS3REGION_US_EAST_1 EAmazonS3Region = "us-east-1"
	EAMAZONS3REGION_US_EAST_2 EAmazonS3Region = "us-east-2"
	EAMAZONS3REGION_US_WEST_1 EAmazonS3Region = "us-west-1"
	EAMAZONS3REGION_US_WEST_2 EAmazonS3Region = "us-west-2"
	EAMAZONS3REGION_AF_SOUTH_1 EAmazonS3Region = "af-south-1"
	EAMAZONS3REGION_AP_EAST_1 EAmazonS3Region = "ap-east-1"
	EAMAZONS3REGION_AP_SOUTH_1 EAmazonS3Region = "ap-south-1"
	EAMAZONS3REGION_AP_NORTHEAST_1 EAmazonS3Region = "ap-northeast-1"
	EAMAZONS3REGION_AP_NORTHEAST_2 EAmazonS3Region = "ap-northeast-2"
	EAMAZONS3REGION_AP_SOUTHEAST_1 EAmazonS3Region = "ap-southeast-1"
	EAMAZONS3REGION_AP_SOUTHEAST_2 EAmazonS3Region = "ap-southeast-2"
	EAMAZONS3REGION_CA_CENTRAL_1 EAmazonS3Region = "ca-central-1"
	EAMAZONS3REGION_EU_CENTRAL_1 EAmazonS3Region = "eu-central-1"
	EAMAZONS3REGION_EU_WEST_1 EAmazonS3Region = "eu-west-1"
	EAMAZONS3REGION_EU_WEST_2 EAmazonS3Region = "eu-west-2"
	EAMAZONS3REGION_EU_SOUTH_1 EAmazonS3Region = "eu-south-1"
	EAMAZONS3REGION_EU_WEST_3 EAmazonS3Region = "eu-west-3"
	EAMAZONS3REGION_EU_NORTH_1 EAmazonS3Region = "eu-north-1"
	EAMAZONS3REGION_ME_SOUTH_1 EAmazonS3Region = "me-south-1"
	EAMAZONS3REGION_SA_EAST_1 EAmazonS3Region = "sa-east-1"
)

// All allowed values of EAmazonS3Region enum
var AllowedEAmazonS3RegionEnumValues = []EAmazonS3Region{
	"unknown",
	"us-east-1",
	"us-east-2",
	"us-west-1",
	"us-west-2",
	"af-south-1",
	"ap-east-1",
	"ap-south-1",
	"ap-northeast-1",
	"ap-northeast-2",
	"ap-southeast-1",
	"ap-southeast-2",
	"ca-central-1",
	"eu-central-1",
	"eu-west-1",
	"eu-west-2",
	"eu-south-1",
	"eu-west-3",
	"eu-north-1",
	"me-south-1",
	"sa-east-1",
}

func (v *EAmazonS3Region) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EAmazonS3Region(value)
	for _, existing := range AllowedEAmazonS3RegionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EAmazonS3Region", value)
}

// NewEAmazonS3RegionFromValue returns a pointer to a valid EAmazonS3Region
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEAmazonS3RegionFromValue(v string) (*EAmazonS3Region, error) {
	ev := EAmazonS3Region(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EAmazonS3Region: valid values are %v", v, AllowedEAmazonS3RegionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EAmazonS3Region) IsValid() bool {
	for _, existing := range AllowedEAmazonS3RegionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EAmazonS3Region value
func (v EAmazonS3Region) Ptr() *EAmazonS3Region {
	return &v
}

type NullableEAmazonS3Region struct {
	value *EAmazonS3Region
	isSet bool
}

func (v NullableEAmazonS3Region) Get() *EAmazonS3Region {
	return v.value
}

func (v *NullableEAmazonS3Region) Set(val *EAmazonS3Region) {
	v.value = val
	v.isSet = true
}

func (v NullableEAmazonS3Region) IsSet() bool {
	return v.isSet
}

func (v *NullableEAmazonS3Region) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEAmazonS3Region(val *EAmazonS3Region) *NullableEAmazonS3Region {
	return &NullableEAmazonS3Region{value: val, isSet: true}
}

func (v NullableEAmazonS3Region) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEAmazonS3Region) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

