openapi: 3.0.1
info:
  contact:
    email: support@veeam.com
  description: |
    This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>
    Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br>
    Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic.
  title: Veeam Backup & Replication REST API
  version: 1.0-rev2
  x-veeam-prev-version: 1.0-rev1
servers:
- url: /
security:
- Bearer: []
tags:
- description: |
    The authorization process involves obtaining an access token and a refresh token.<br> For details on the authorization process and security settings, see the [Authorization and Security](https://helpcenter.veeam.com/docs/backup/vbr_rest/authorization_security.html?ver=110) section of the Veeam Backup & Replication REST API Reference.
    <SecurityDefinitions />
  name: Login
- description: |
    The Service section defines paths and operations for retrieving current date and time and a certificate of the backup server where the REST API service is running.
  name: Service
- description: |
    The Services section defines a path and operation for retrieving information about associated backend services. You may need to connect to these services for integration with Veeam Backup & Replication only.
  name: Services
- description: |
    The Traffic Rules section defines paths and operations for retrieving and editing information about network traffic rules that are configured on the backup server.
  name: Traffic Rules
- description: |
    The General Options section defines paths and operations for retrieving and editing general options of Veeam Backup & Replication.
  name: General Options
- description: |
    The Configuration Backup section defines paths and operations for retrieving and editing general options of Veeam Backup & Replication.
  name: Configuration Backup
- description: |
    The Sessions section defines paths and operations for managing sessions (except [automation sessions](#operation/GetAllAutomationSessions)) performed on the backup server.
  name: Sessions
- description: |
    The Connection section defines a path and operation for retrieving a TLS certificate or SSH fingerprint used to establish a secure connection between the backup server and the specified server.
  name: Connection
- description: |
    The Inventory Browser section defines paths and operations for retrieving VMware vSphere servers and their virtual infrastructure objects (datacenters, clusters, hosts, resource pools, VMs).<br> <div class="note"><strong>NOTE</strong><br>In the current version, you can browse VMware vSphere objects only.</div>
  name: Inventory Browser
- description: |
    The Managed Servers section defines paths and operations for managing servers that are added to the backup infrastructure.<br> <div class="note"><strong>NOTE</strong><br>In the current version, the REST API supports the following server types: VMware vSphere, Linux and Windows.</div>
  name: Managed Servers
- description: |
    The Repositories section defines paths and operations for managing backup repositories that are added to the backup infrastructure.<br> <div class="note"><strong>NOTE</strong><br>In the current version, the REST API supports direct attached and network attached storages only.</div>
  name: Repositories
- description: |
    The Proxies section defines paths and operations for managing backup proxies that are added to the backup infrastructure.<br> <div class="note"><strong>NOTE</strong><br>In the current version, the REST API supports VMware backup proxies only.</div>
  name: Proxies
- description: |
    The Jobs section defines paths and operations for managing jobs that are coordinated by the backup server.<br> <div class="note"><strong>NOTE</strong><br>In the current version, the REST API supports backup jobs with VMware VMs only.</div>
  name: Jobs
- description: |
    The Credentials section defines paths and operations for managing credentials records that are added to the backup server.
  name: Credentials
- description: The Encryption section defines paths and operations for managing passwords
    that are used for data encryption.
  name: Encryption
- description: The Backups section defines paths and operations for managing backups
    that are created on or imported to the backup server.
  name: Backups
- description: |
    The Backup Objects section defines paths and operations for managing backup objects — virtual infrastructure objects (VMs and VM containers) that are inсluded in backups created by the backup server.
  name: Backup Objects
- description: The Object Restore Points section defines paths and operations for
    retrieving restore points created on the backup server and backed up disks from
    the restore points.
  name: Object Restore Points
- description: |
    The Restore section defines paths and operations for performing restore.<br> <div class="note"><strong>NOTE</strong><br>In the current version, you can restore only disks that will be registered as First Class Disks (FCD) — a type of virtual disks that can be managed independent of any VM.</div>
  name: Restore
- description: |
    The Automation section defines paths and operations for granular import and export of objects available in the REST API. It can be useful, for example, if you set up the backup infrastructure using JSON specification or migrate the infrastructure to another backup server. For details, see [Mass Deployment](https://helpcenter.veeam.com/docs/backup/vbr_rest/automation.html?ver=110).
  name: Automation
paths:
  /api/v1/serverTime:
    get:
      description: The HTTP GET request to the `/api/v1/serverTime` path allows you
        to get current date and time on the backup server.
      operationId: GetServerTime
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerTimeModel'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      security: []
      summary: Get Server Time
      tags:
      - Service
  /api/v1/serverCertificate:
    get:
      description: The HTTP GET request to the `/api/v1/serverCertificate` path allows
        you to get a certificate of the backup server.
      operationId: GetServerCertificate
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateModel'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      security: []
      summary: Get Server Certificate
      tags:
      - Service
  /api/v1/services:
    get:
      description: The HTTP GET request to the `/api/v1/services` path allows you
        to get associated services for integration with Veeam Backup & Replication.
      operationId: GetAllServices
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: Number of services to skip.
        explode: true
        in: query
        name: skip
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ServicesFilters'
      - description: Maximum number of services to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ServicesFilters'
      - description: Sorts services by one of the service parameters.
        explode: true
        in: query
        name: orderColumn
        required: false
        schema:
          $ref: '#/components/schemas/EServicesFiltersOrderColumn'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ServicesFilters'
      - description: Sorts services in the ascending order by the `orderColumn` parameter.
        explode: true
        in: query
        name: orderAsc
        required: false
        schema:
          type: boolean
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ServicesFilters'
      - description: Filters services by the `nameFilter` pattern. The pattern can
          match any service parameter. To substitute one or more characters, use the
          asterisk (*) character at the beginning and/or at the end.
        explode: true
        in: query
        name: nameFilter
        required: false
        schema:
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ServicesFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicesResult'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get Associated Services
      tags:
      - Services
      x-veeam-authorize:
        claims:
        - ViewServices
  /api/oauth2/token:
    post:
      description: The HTTP POST request to the `/api/oauth2/token` path allows you
        to get an access token and a refresh token.
      operationId: CreateToken
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenLoginSpec'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenModel'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      security: []
      summary: Get Access Token
      tags:
      - Login
  /api/oauth2/authorization_code:
    post:
      description: The HTTP POST request to the `/api/oauth2/authorization_code` path
        allows you to get an authorization code that is used to obtain an access token.
        For more information on authorization process, see [Requesting Authorization](https://helpcenter.veeam.com/docs/backup/vbr_rest/requesting_authorization.html?ver=110).
      operationId: CreateAuthorizationCode
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationCodeModel'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get Authorization Code
      tags:
      - Login
  /api/oauth2/logout:
    post:
      description: |
        The HTTP POST request to the `/api/oauth2/logout` path allows you to perform the logout operation. After you log out, access and refresh tokens are expired.
      operationId: Logout
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Log Out
      tags:
      - Login
  /api/v1/trafficRules:
    get:
      description: The HTTP GET request to the `/api/v1/trafficRules` path allows
        you to get network traffic rules that control traffic transferred between
        backup infrastructure components.
      operationId: GetAllTrafficRules
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalNetworkTrafficRulesModel'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get Traffic Rules
      tags:
      - Traffic Rules
      x-veeam-authorize:
        claims:
        - ViewTrafficRules
    put:
      description: The HTTP PUT request to the `/api/v1/trafficRules` path allows
        you to edit network traffic rules that are configured on the backup server.
      operationId: UpdateTrafficRules
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalNetworkTrafficRulesModel'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalNetworkTrafficRulesModel'
          description: Infrastructure session has been created to edit the traffic
            rules. To check the progress, track the session `state`.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Edit Traffic Rules
      tags:
      - Traffic Rules
      x-veeam-authorize:
        claims:
        - UpdateTrafficRules
  /api/v1/generalOptions:
    get:
      description: The HTTP GET request to the `/api/v1/generalOptions` path allows
        you to get general options of Veeam Backup & Replication.
      operationId: GetGeneralOptions
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralOptionsModel'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get General Options
      tags:
      - General Options
      x-veeam-authorize:
        claims:
        - ViewGeneralOptions
    put:
      description: The HTTP PUT request to the `/api/v1/generalOptions` path allows
        you to edit general options of Veeam Backup & Replication.
      operationId: UpdateGeneralOptions
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneralOptionsModel'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralOptionsModel'
          description: General options have been updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Edit General Options
      tags:
      - General Options
      x-veeam-authorize:
        claims:
        - UpdateGeneralOptions
  /api/v1/configBackup:
    get:
      description: The HTTP GET request to the `/api/v1/configBackup` path allows
        you to get configuration backup of the backup server.
      operationId: GetConfigBackupOptions
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigBackupModel'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get Configuration Backup
      tags:
      - Configuration Backup
      x-veeam-authorize:
        claims:
        - ViewConfigBackupOptions
    put:
      description: The HTTP PUT request to the `/api/v1/configBackup` path allows
        you to edit configuration backup of the backup server.
      operationId: UpdateConfigBackupOptions
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigBackupModel'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigBackupModel'
          description: Configuration backup settings have been updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Edit Configuration Backup
      tags:
      - Configuration Backup
      x-veeam-authorize:
        claims:
        - UpdateConfigBackupOptions
  /api/v1/configBackup/backup:
    post:
      description: The HTTP POST request to the `/api/v1/configBackup` path allows
        you to start configuration backup.
      operationId: StartConfigBackup
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: Configuration backup has been started.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Start Configuration Backup
      tags:
      - Configuration Backup
      x-veeam-authorize:
        claims:
        - StartConfigBackup
  /api/v1/sessions:
    get:
      description: The HTTP GET request to the `/api/v1/sessions` path allows you
        to get an array of sessions performed on the backup server.
      operationId: GetAllSessions
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: Number of sessions to skip.
        explode: true
        in: query
        name: skip
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      - description: Maximum number of sessions to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      - description: Sorts sessions by one of the session parameters.
        explode: true
        in: query
        name: orderColumn
        required: false
        schema:
          $ref: '#/components/schemas/ESessionsFiltersOrderColumn'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      - description: Sorts sessions in the ascending order by the `orderColumn` parameter.
        explode: true
        in: query
        name: orderAsc
        required: false
        schema:
          type: boolean
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      - description: Filters sessions by the `nameFilter` pattern. The pattern can
          match any session parameter. To substitute one or more characters, use the
          asterisk (*) character at the beginning and/or at the end.
        explode: true
        in: query
        name: nameFilter
        required: false
        schema:
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      - description: Returns sessions that are created after the specified date and
          time.
        explode: true
        in: query
        name: createdAfterFilter
        required: false
        schema:
          format: date-time
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      - description: Returns sessions that are created before the specified date and
          time.
        explode: true
        in: query
        name: createdBeforeFilter
        required: false
        schema:
          format: date-time
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      - description: Returns sessions that are finished after the specified date and
          time.
        explode: true
        in: query
        name: endedAfterFilter
        required: false
        schema:
          format: date-time
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      - description: Returns sessions that are finished before the specified date
          and time.
        explode: true
        in: query
        name: endedBeforeFilter
        required: false
        schema:
          format: date-time
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      - description: Filters sessions by session type.
        explode: true
        in: query
        name: typeFilter
        required: false
        schema:
          $ref: '#/components/schemas/ESessionType'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      - description: Filters sessions by session state.
        explode: true
        in: query
        name: stateFilter
        required: false
        schema:
          $ref: '#/components/schemas/ESessionState'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      - description: Filters sessions by session result.
        explode: true
        in: query
        name: resultFilter
        required: false
        schema:
          $ref: '#/components/schemas/ESessionResult'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      - description: Filters sessions by job ID.
        explode: true
        in: query
        name: jobIdFilter
        required: false
        schema:
          format: uuid
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionsResult'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get All Sessions
      tags:
      - Sessions
      x-veeam-authorize:
        claims:
        - ViewSessions
  /api/v1/sessions/{id}:
    get:
      description: The HTTP GET request to the `/api/v1/sessions/{id}` path allows
        you to get a session that has the specified `id`.
      operationId: GetSession
      parameters:
      - description: ID of the session.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get Session
      tags:
      - Sessions
      x-veeam-authorize:
        claims:
        - ViewSessions
  /api/v1/sessions/{id}/logs:
    get:
      description: The HTTP GET request to the `/api/v1/sessions/{id}/logs` path allows
        you to get an array of log records of a session that has the specified `id`.
      operationId: GetSessionLogs
      parameters:
      - description: ID of the session.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionLogResult'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get Session Logs
      tags:
      - Sessions
      x-veeam-authorize:
        claims:
        - ViewSessions
  /api/v1/sessions/{id}/stop:
    post:
      description: The HTTP POST request to the `/api/v1/sessions/{id}/stop` path
        allows you to stop a session that has the specified `id`.
      operationId: StopSession
      parameters:
      - description: ID of the session.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Stop Session
      tags:
      - Sessions
      x-veeam-authorize:
        claims:
        - StopSessions
  /api/v1/connectionCertificate:
    post:
      description: The HTTP POST request to the `/api/v1/connectionCertificate` path
        allows you to get a TLS certificate or SSH fingerprint of the specified host.
      operationId: GetConnectionCertificate
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostConnectionSpec'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionCertificateModel'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Request TLS Certificate or SSH Fingerprint
      tags:
      - Connection
      x-veeam-authorize:
        claims:
        - CheckCertificate
  /api/v1/inventory/vmware/hosts:
    get:
      description: The HTTP GET request to the `/api/v1/inventory/vmware/hosts` path
        allows you to get an array of all VMware vSphere servers added to the backup
        infrastructure.
      operationId: GetAllInventoryVmwareHosts
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: Number of VMware vSphere servers to skip.
        explode: true
        in: query
        name: skip
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ViRootFilters'
      - description: Maximum number of VMware vSphere servers to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ViRootFilters'
      - description: Sorts VMware vSphere servers by one of the VMware vSphere server
          parameters.
        explode: true
        in: query
        name: orderColumn
        required: false
        schema:
          $ref: '#/components/schemas/EViRootFiltersOrderColumn'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ViRootFilters'
      - description: Sorts VMware vSphere servers in the ascending order by the `orderColumn`
          parameter.
        explode: true
        in: query
        name: orderAsc
        required: false
        schema:
          type: boolean
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ViRootFilters'
      - description: Filters VMware vSphere servers by the `nameFilter` pattern. The
          pattern can match any VMware vSphere server parameter. To substitute one
          or more characters, use the asterisk (*) character at the beginning and/or
          at the end.
        explode: true
        in: query
        name: nameFilter
        required: false
        schema:
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ViRootFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ViRootsResult'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get All VMware vSphere Servers
      tags:
      - Inventory Browser
      x-veeam-authorize:
        claims:
        - ViewViHierarchy
  /api/v1/inventory/vmware/hosts/{name}:
    get:
      description: The HTTP GET request to the `/api/v1/inventory/vmware/hosts/{name}`
        path allows you to get an array of virtual infrastructure objects of the VMware
        vSphere server that has the specified `name`.
      operationId: GetVmwareHostObject
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: Name of the VMware vSphere server.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      - description: Number of objects to skip.
        explode: true
        in: query
        name: skip
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/VCenterInventoryFilters'
      - description: Maximum number of objects to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/VCenterInventoryFilters'
      - description: Sorts objects by one of the object parameters.
        explode: true
        in: query
        name: orderColumn
        required: false
        schema:
          $ref: '#/components/schemas/EvCentersInventoryFiltersOrderColumn'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/VCenterInventoryFilters'
      - description: Sorts objects in the ascending order by the `orderColumn` parameter.
        explode: true
        in: query
        name: orderAsc
        required: false
        schema:
          type: boolean
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/VCenterInventoryFilters'
      - description: Filters objects by object ID.
        explode: true
        in: query
        name: objectIdFilter
        required: false
        schema:
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/VCenterInventoryFilters'
      - description: Filters objects by hierarchy type.
        explode: true
        in: query
        name: hierarchyTypeFilter
        required: false
        schema:
          $ref: '#/components/schemas/EHierarchyType'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/VCenterInventoryFilters'
      - description: Filters objects by the `nameFilter` pattern. The pattern can
          match any object parameter. To substitute one or more characters, use the
          asterisk (*) character at the beginning and/or at the end.
        explode: true
        in: query
        name: nameFilter
        required: false
        schema:
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/VCenterInventoryFilters'
      - description: Filters objects by virtual infrastructure type.
        explode: true
        in: query
        name: typeFilter
        required: false
        schema:
          $ref: '#/components/schemas/EVmwareInventoryType'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/VCenterInventoryFilters'
      - description: Filters objects by name of the parent container.
        explode: true
        in: query
        name: parentContainerNameFilter
        required: false
        schema:
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/VCenterInventoryFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VCenterInventoryResult'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get VMware vSphere Server Objects
      tags:
      - Inventory Browser
      x-veeam-authorize:
        claims:
        - ViewViHierarchy
  /api/v1/backupInfrastructure/managedServers:
    get:
      description: The HTTP GET request to the `/api/v1/backupInfrastructure/managedServers`
        path allows you to get an array of all servers that are added to the backup
        infrastructure.
      operationId: GetAllManagedServers
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: Number of servers to skip.
        explode: true
        in: query
        name: skip
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ManagedServersFilters'
      - description: Maximum number of servers to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ManagedServersFilters'
      - description: Sorts servers by one of the server parameters.
        explode: true
        in: query
        name: orderColumn
        required: false
        schema:
          $ref: '#/components/schemas/EManagedServersFiltersOrderColumn'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ManagedServersFilters'
      - description: Sorts servers in the ascending order by the `orderColumn` parameter.
        explode: true
        in: query
        name: orderAsc
        required: false
        schema:
          type: boolean
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ManagedServersFilters'
      - description: Filters servers by the `nameFilter` pattern. The pattern can
          match any server parameter. To substitute one or more characters, use the
          asterisk (*) character at the beginning and/or at the end.
        explode: true
        in: query
        name: nameFilter
        required: false
        schema:
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ManagedServersFilters'
      - description: Filters servers by server type.
        explode: true
        in: query
        name: typeFilter
        required: false
        schema:
          $ref: '#/components/schemas/EManagedServerType'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ManagedServersFilters'
      - description: Filters servers by the type of VMware vSphere server.
        explode: true
        in: query
        name: viTypeFilter
        required: false
        schema:
          $ref: '#/components/schemas/EViHostType'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ManagedServersFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedServersResult'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get All Servers
      tags:
      - Managed Servers
      x-veeam-authorize:
        claims:
        - ViewManagedServers
    post:
      description: The HTTP POST request to the `/api/v1/backupInfrastructure/managedServers`
        path allows you to add a server to the backup infrastructure.
      operationId: CreateManagedServer
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedServerSpec'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: Infrastructure session has been created to add the server.
            To check the progress, track the session `state`.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Add Server
      tags:
      - Managed Servers
      x-veeam-authorize:
        claims:
        - CreateManagedServers
  /api/v1/backupInfrastructure/managedServers/{id}:
    delete:
      description: The HTTP DELETE request to the `/api/v1/backupInfrastructure/managedServers/{id}`
        path allows you to remove a managed server that has the specified `id` from
        the backup infrastructure.
      operationId: DeleteManagedServer
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the managed server.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: Managed server has been removed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Remove Server
      tags:
      - Managed Servers
      x-veeam-authorize:
        claims:
        - DeleteManagedServers
    get:
      description: The HTTP GET request to the `/api/v1/backupInfrastructure/managedServers/{id}`
        path allows you to get a managed server that has the specified `id`.
      operationId: GetManagedServer
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the managed server.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedServerModel'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get Server
      tags:
      - Managed Servers
      x-veeam-authorize:
        claims:
        - ViewManagedServers
    put:
      description: The HTTP PUT request to the `/api/v1/backupInfrastructure/managedServers/{id}`
        path allows you to edit a managed server that has the specified `id`.
      operationId: UpdateManagedServer
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the managed server.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedServerModel'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: Infrastructure session has been created to edit the server.
            To check the progress, track the session `state`.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Edit Server
      tags:
      - Managed Servers
      x-veeam-authorize:
        claims:
        - UpdateManagedServers
  /api/v1/backupInfrastructure/repositories:
    get:
      description: The HTTP GET request to the `/api/v1/backupInfrastructure/repositories`
        path allows you to get an array of all backup repositories that are added
        to the backup infrastructure.
      operationId: GetAllRepositories
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: Number of repositories to skip.
        explode: true
        in: query
        name: skip
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/RepositoriesFilters'
      - description: Maximum number of repositories to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/RepositoriesFilters'
      - description: Sorts repositories by one of the repository parameters.
        explode: true
        in: query
        name: orderColumn
        required: false
        schema:
          $ref: '#/components/schemas/ERepositoryFiltersOrderColumn'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/RepositoriesFilters'
      - description: Sorts repositories in the ascending order by the `orderColumn`
          parameter.
        explode: true
        in: query
        name: orderAsc
        required: false
        schema:
          type: boolean
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/RepositoriesFilters'
      - description: Filters repositories by the `nameFilter` pattern. The pattern
          can match any repository parameter. To substitute one or more characters,
          use the asterisk (*) character at the beginning and/or at the end.
        explode: true
        in: query
        name: nameFilter
        required: false
        schema:
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/RepositoriesFilters'
      - description: Filters repositories by repository type.
        explode: true
        in: query
        name: typeFilter
        required: false
        schema:
          $ref: '#/components/schemas/ERepositoryType'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/RepositoriesFilters'
      - description: Filters repositories by ID of the backup server.
        explode: true
        in: query
        name: hostIdFilter
        required: false
        schema:
          format: uuid
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/RepositoriesFilters'
      - description: Filters repositories by path to the folder where backup files
          are stored.
        explode: true
        in: query
        name: pathFilter
        required: false
        schema:
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/RepositoriesFilters'
      - description: |
          Filters repositories by VM Backup API parameters converted to the base64 string.<br>
        explode: true
        in: query
        name: vmbApiFilter
        required: false
        schema:
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/RepositoriesFilters'
      - description: TODO Sets a platform for vmb API to work with
        explode: true
        in: query
        name: vmbApiPlatform
        required: false
        schema:
          format: uuid
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/RepositoriesFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoriesResult'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get All Repositories
      tags:
      - Repositories
      x-veeam-authorize:
        claims:
        - ViewRepositories
    post:
      description: The HTTP POST request to the `/api/v1/backupInfrastructure/repositories`
        path allows you to add a repository to the backup infrastructure.
      operationId: CreateRepository
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositorySpec'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: Infrastructure session has been created to add the repository.
            To check the progress, track the session `state`.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Add Repository
      tags:
      - Repositories
      x-veeam-authorize:
        claims:
        - CreateRepositories
  /api/v1/backupInfrastructure/repositories/states:
    get:
      description: The HTTP GET request to the `/api/v1/backupInfrastructure/repositories/states`
        path allows you to get an array of all repository states. The states include
        repository location and brief statistics, such as repository capacity, free
        and used space.
      operationId: GetAllRepositoriesStates
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: Number of repository states to skip.
        explode: true
        in: query
        name: skip
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/RepositoryStatesFilters'
      - description: Maximum number of repository states to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/RepositoryStatesFilters'
      - description: Sorts repository states by one of the state parameters.
        explode: true
        in: query
        name: orderColumn
        required: false
        schema:
          $ref: '#/components/schemas/ERepositoryStatesFiltersOrderColumn'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/RepositoryStatesFilters'
      - description: Sorts repository states in the ascending order by the `orderColumn`
          parameter.
        explode: true
        in: query
        name: orderAsc
        required: false
        schema:
          type: boolean
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/RepositoryStatesFilters'
      - description: Filters repository states by repository ID.
        explode: true
        in: query
        name: idFilter
        required: false
        schema:
          format: uuid
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/RepositoryStatesFilters'
      - description: Filters repository states by the `nameFilter` pattern. The pattern
          can match any repository state parameter. To substitute one or more characters,
          use the asterisk (*) character at the beginning and/or at the end.
        explode: true
        in: query
        name: nameFilter
        required: false
        schema:
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/RepositoryStatesFilters'
      - description: Filters repository states by repository type.
        explode: true
        in: query
        name: typeFilter
        required: false
        schema:
          $ref: '#/components/schemas/ERepositoryType'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/RepositoryStatesFilters'
      - description: Filters repository states by repository capacity.
        explode: true
        in: query
        name: capacityFilter
        required: false
        schema:
          format: double
          type: number
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/RepositoryStatesFilters'
      - description: Filters repository states by repository free space.
        explode: true
        in: query
        name: freeSpaceFilter
        required: false
        schema:
          format: double
          type: number
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/RepositoryStatesFilters'
      - description: Filters repository states by repository used space.
        explode: true
        in: query
        name: usedSpaceFilter
        required: false
        schema:
          format: double
          type: number
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/RepositoryStatesFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryStatesResult'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get All Repository States
      tags:
      - Repositories
      x-veeam-authorize:
        claims:
        - ViewRepositories
  /api/v1/backupInfrastructure/repositories/{id}:
    delete:
      description: The HTTP DELETE request to the `/api/v1/backupInfrastructure/repositories/{id}`
        path allows you to remove a backup repository that has the specified `id`
        from the backup infrastructure.
      operationId: DeleteRepository
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the backup repository.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: If *true*, Veeam Backup & Replication will remove backup files.
        explode: true
        in: query
        name: deleteBackups
        required: false
        schema:
          type: boolean
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/DeleteRepositoryFilters'
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: Removed
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Remove Repository
      tags:
      - Repositories
      x-veeam-authorize:
        claims:
        - DeleteRepositories
    get:
      description: The HTTP GET request to the `/api/v1/backupInfrastructure/repositories/{id}`
        path allows you to get a backup repository that has the specified `id`.
      operationId: GetRepository
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the backup repository.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryModel'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get Repository
      tags:
      - Repositories
      x-veeam-authorize:
        claims:
        - ViewRepositories
    put:
      description: The HTTP PUT request to the `/api/v1/backupInfrastructure/repositories/{id}`
        path allows you to edit a backup repository that has the specified `id`.
      operationId: UpdateRepository
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the backup repository.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositoryModel'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: Infrastructure session has been created to edit the repository.
            To check the progress, track the session `state`.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Edit Repository
      tags:
      - Repositories
      x-veeam-authorize:
        claims:
        - UpdateRepositories
  /api/v1/backupInfrastructure/proxies:
    get:
      description: The HTTP GET request to the `/api/v1/backupInfrastructure/proxies`
        path allows you to get an array of all backup proxies that are added to the
        backup infrastructure.
      operationId: GetAllProxies
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: Number of proxies to skip.
        explode: true
        in: query
        name: skip
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ProxiesFilters'
      - description: Maximum number of proxies to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ProxiesFilters'
      - description: Sorts proxies by one of the proxy parameters.
        explode: true
        in: query
        name: orderColumn
        required: false
        schema:
          $ref: '#/components/schemas/EProxiesFiltersOrderColumn'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ProxiesFilters'
      - description: Sorts proxies in the ascending order by the `orderColumn` parameter.
        explode: true
        in: query
        name: orderAsc
        required: false
        schema:
          type: boolean
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ProxiesFilters'
      - description: Filters proxies by the `nameFilter` pattern. The pattern can
          match any proxy parameter. To substitute one or more characters, use the
          asterisk (*) character at the beginning and/or at the end.
        explode: true
        in: query
        name: nameFilter
        required: false
        schema:
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ProxiesFilters'
      - description: Filters proxies by proxy type.
        explode: true
        in: query
        name: typeFilter
        required: false
        schema:
          $ref: '#/components/schemas/EProxyType'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ProxiesFilters'
      - description: Filters proxies by ID of the backup server.
        explode: true
        in: query
        name: hostIdFilter
        required: false
        schema:
          format: uuid
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ProxiesFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxiesResult'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get All Proxies
      tags:
      - Proxies
      x-veeam-authorize:
        claims:
        - ViewProxies
    post:
      description: The HTTP POST request to the `/api/v1/backupInfrastructure/proxies`
        path allows you to add a proxy to the backup infrastructure.
      operationId: CreateProxy
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProxySpec'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: Infrastructure session has been created to add the proxy. To
            check the progress, track the session `state`.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Add Proxy
      tags:
      - Proxies
      x-veeam-authorize:
        claims:
        - CreateProxies
  /api/v1/backupInfrastructure/proxies/{id}:
    delete:
      description: The HTTP DELETE request to the `/api/v1/backupInfrastructure/proxies/{id}`
        path allows you to remove a backup proxy that has the specified `id` from
        the backup infrastructure.
      operationId: DeleteProxy
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the backup proxy.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: Removed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Remove Proxy
      tags:
      - Proxies
      x-veeam-authorize:
        claims:
        - DeleteProxies
    get:
      description: The HTTP GET request to the `/api/v1/backupInfrastructure/proxies/{id}`
        path allows you to get a backup proxy that has the specified `id`.
      operationId: GetProxy
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the backup proxy.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxyModel'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get Proxy
      tags:
      - Proxies
      x-veeam-authorize:
        claims:
        - ViewProxies
    put:
      description: The HTTP PUT request to the `/api/v1/backupInfrastructure/proxies/{id}`
        path allows you to edit a backup proxy that has the specified `id`.
      operationId: UpdateProxy
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the backup proxy.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProxyModel'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: Infrastructure session has been created to edit the proxy.
            To check the progress, track the session `state`.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Edit Proxy
      tags:
      - Proxies
      x-veeam-authorize:
        claims:
        - UpdateProxies
  /api/v1/backupInfrastructure/scaleOutRepositories:
    get:
      description: The HTTP GET request to the `/api/v1/backupInfrastructure/scaleOutRepositories`
        path allows you to get an array of all scale-out backup repositories that
        are added to the backup infrastructure.
      operationId: GetAllScaleOutRepositories
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: Number of repositories to skip.
        explode: true
        in: query
        name: skip
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ScaleOutRepositoriesFilters'
      - description: Maximum number of repositories to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ScaleOutRepositoriesFilters'
      - description: Sorts repositories by one of the repository parameters.
        explode: true
        in: query
        name: orderColumn
        required: false
        schema:
          $ref: '#/components/schemas/EScaleOutRepositoryFiltersOrderColumn'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ScaleOutRepositoriesFilters'
      - description: Sorts repositories in the ascending order by the `orderColumn`
          parameter.
        explode: true
        in: query
        name: orderAsc
        required: false
        schema:
          type: boolean
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ScaleOutRepositoriesFilters'
      - description: Filters repositories by the `nameFilter` substring. The substring
          can be part of any repository parameter.
        explode: true
        in: query
        name: nameFilter
        required: false
        schema:
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ScaleOutRepositoriesFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScaleOutRepositoriesResult'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get All Scale-Out Backup Repositories
      tags:
      - Repositories
      x-veeam-authorize:
        claims:
        - ViewScaleOutRepositories
  /api/v1/backupInfrastructure/scaleOutRepositories/{id}:
    get:
      description: The HTTP GET request to the `/api/v1/backupInfrastructure/scaleOutRepositories/{id}`
        path allows you to get a scale-out backup repository that has the specified
        `id`.
      operationId: GetScaleOutRepository
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the scale-out backup repository.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScaleOutRepositoryModel'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get Scale-Out Backup Repository
      tags:
      - Repositories
      x-veeam-authorize:
        claims:
        - ViewScaleOutRepositories
  /api/v1/backupInfrastructure/scaleOutRepositories/{id}/enableMaintenanceMode:
    post:
      description: The HTTP POST request to the `/api/v1/backupInfrastructure/scaleOutRepositories/{id}/enableMaintenanceMode`
        path allows you to enable maintenance mode for a scale-out backup repository
        extent that has the specified `id`.
      operationId: EnableScaleOutExtentMaintenanceMode
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the scale-out backup repository extent.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScaleOutExtentMaintenanceSpec'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: RepositoryMaintenance session has been created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Enable Maintenance Mode
      tags:
      - Repositories
      x-veeam-authorize:
        claims:
        - EnableRepositoryMaintenanceMode
  /api/v1/backupInfrastructure/scaleOutRepositories/{id}/disableMaintenanceMode:
    post:
      description: The HTTP POST request to the `/api/v1/backupInfrastructure/scaleOutRepositories/{id}/disableMaintenanceMode`
        path allows you to disable maintenance mode for a scale-out backup repository
        extent that has the specified `id`.
      operationId: DisableScaleOutExtentMaintenanceMode
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the scale-out backup repository extent.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScaleOutExtentMaintenanceSpec'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: RepositoryMaintenance session has been created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Disable Maintenance Mode
      tags:
      - Repositories
      x-veeam-authorize:
        claims:
        - DisableRepositoryMaintenanceMode
  /api/v1/jobs:
    get:
      description: The HTTP GET request to the `/api/v1/jobs` path allows you to get
        an array of all jobs coordinated by the backup server.
      operationId: GetAllJobs
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: Number of jobs to skip.
        explode: true
        in: query
        name: skip
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/JobsFilters'
      - description: Maximum number of jobs to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/JobsFilters'
      - description: Sorts jobs by one of the job parameters.
        explode: true
        in: query
        name: orderColumn
        required: false
        schema:
          $ref: '#/components/schemas/EJobFiltersOrderColumn'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/JobsFilters'
      - description: Sorts jobs in the ascending order by the `orderColumn` parameter.
        explode: true
        in: query
        name: orderAsc
        required: false
        schema:
          type: boolean
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/JobsFilters'
      - description: Filters jobs by the `nameFilter` pattern. The pattern can match
          any job parameter. To substitute one or more characters, use the asterisk
          (*) character at the beginning and/or at the end.
        explode: true
        in: query
        name: nameFilter
        required: false
        schema:
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/JobsFilters'
      - description: Filters jobs by job type.
        explode: true
        in: query
        name: typeFilter
        required: false
        schema:
          $ref: '#/components/schemas/EJobType'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/JobsFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobsResult'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get All Jobs
      tags:
      - Jobs
      x-veeam-authorize:
        claims:
        - ViewJobs
    post:
      description: The HTTP POST request to the `/api/v1/jobs` path allows you to
        create a new job that has the specified parameters.
      operationId: CreateJob
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobSpec'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
          description: Job has been created.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Create Job
      tags:
      - Jobs
      x-veeam-authorize:
        claims:
        - CreateJobs
  /api/v1/jobs/states:
    get:
      description: The HTTP GET request to the `/api/v1/jobs/states` path allows you
        to get an array of all job states. The states include brief job information
        that you can also find under the **Jobs** node in the Veeam Backup & Replication
        console.
      operationId: GetAllJobsStates
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: Number of job states to skip.
        explode: true
        in: query
        name: skip
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/JobStatesFilters'
      - description: Maximum number of job states to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/JobStatesFilters'
      - description: Sorts job states by one of the state parameters.
        explode: true
        in: query
        name: orderColumn
        required: false
        schema:
          $ref: '#/components/schemas/EJobStatesFiltersOrderColumn'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/JobStatesFilters'
      - description: Sorts job states in the ascending order by the `orderColumn`
          parameter.
        explode: true
        in: query
        name: orderAsc
        required: false
        schema:
          type: boolean
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/JobStatesFilters'
      - description: Filters job states by job ID.
        explode: true
        in: query
        name: idFilter
        required: false
        schema:
          format: uuid
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/JobStatesFilters'
      - description: Filters job states by the `nameFilter` pattern. The pattern can
          match any state parameter. To substitute one or more characters, use the
          asterisk (*) character at the beginning and/or at the end.
        explode: true
        in: query
        name: nameFilter
        required: false
        schema:
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/JobStatesFilters'
      - description: Filters job states by job type.
        explode: true
        in: query
        name: typeFilter
        required: false
        schema:
          $ref: '#/components/schemas/EJobType'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/JobStatesFilters'
      - description: Filters job states by status with which jobs must finish.
        explode: true
        in: query
        name: lastResultFilter
        required: false
        schema:
          $ref: '#/components/schemas/ESessionResult'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/JobStatesFilters'
      - description: Filters job states by current status of the job.
        explode: true
        in: query
        name: statusFilter
        required: false
        schema:
          $ref: '#/components/schemas/EJobStatus'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/JobStatesFilters'
      - description: Filters job states by workloads that jobs must process.
        explode: true
        in: query
        name: workloadFilter
        required: false
        schema:
          $ref: '#/components/schemas/EJobWorkload'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/JobStatesFilters'
      - description: Returns job states for jobs that have run after the specified
          date and time.
        explode: true
        in: query
        name: lastRunAfterFilter
        required: false
        schema:
          format: date-time
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/JobStatesFilters'
      - description: Returns job states for jobs that have not run after the specified
          date and time.
        explode: true
        in: query
        name: lastRunBeforeFilter
        required: false
        schema:
          format: date-time
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/JobStatesFilters'
      - description: If *true*, Returns job states for jobs with high priority.
        explode: true
        in: query
        name: isHighPriorityJobFilter
        required: false
        schema:
          type: boolean
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/JobStatesFilters'
      - description: Filters job states by repository ID.
        explode: true
        in: query
        name: repositoryIdFilter
        required: false
        schema:
          format: uuid
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/JobStatesFilters'
      - description: Filters job states by number of objects processed by the job.
        explode: true
        in: query
        name: objectsCountFilter
        required: false
        schema:
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/JobStatesFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatesResult'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get All Job States
      tags:
      - Jobs
      x-veeam-authorize:
        claims:
        - ViewJobs
  /api/v1/jobs/{id}:
    delete:
      description: The HTTP DELETE request to the `/api/v1/jobs/{id}` path allows
        you to delete a job that has the specified `id`.
      operationId: DeleteJob
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: Removed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Delete Job
      tags:
      - Jobs
      x-veeam-authorize:
        claims:
        - DeleteJobs
    get:
      description: The HTTP GET request to the `/api/v1/jobs/{id}` path allows you
        to get a job that has the specified `id`.
      operationId: GetJob
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get Job
      tags:
      - Jobs
      x-veeam-authorize:
        claims:
        - ViewJobs
    put:
      description: The HTTP PUT request to the `/api/v1/jobs/{id}` path allows you
        to edit a job that has the specified `id`.
      operationId: UpdateJob
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobModel'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobModel'
          description: Job has been updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Edit Job
      tags:
      - Jobs
      x-veeam-authorize:
        claims:
        - UpdateJobs
  /api/v1/jobs/{id}/start:
    post:
      description: The HTTP POST request to the `/api/v1/jobs/{id}/start` path allows
        you to start a job that has the specified `id`.
      operationId: StartJob
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobStartSpec'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: Job session has been started.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Start Job
      tags:
      - Jobs
      x-veeam-authorize:
        claims:
        - StartJobs
  /api/v1/jobs/{id}/stop:
    post:
      description: The HTTP POST request to the `/api/v1/jobs/{id}/stop` path allows
        you to stop a job that has the specified `id`.
      operationId: StopJob
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobStopSpec'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: Job session has been stopped.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Stop Job
      tags:
      - Jobs
      x-veeam-authorize:
        claims:
        - StopJobs
  /api/v1/jobs/{id}/disable:
    post:
      description: The HTTP POST request to the `/api/v1/jobs/{id}/disable` path allows
        you to disable a job that has the specified `id`.
      operationId: DisableJob
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: Job has been disabled.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Disable Job
      tags:
      - Jobs
      x-veeam-authorize:
        claims:
        - DisableJobs
  /api/v1/jobs/{id}/enable:
    post:
      description: The HTTP POST request to the `/api/v1/jobs/{id}/enable` path allows
        you to enable a job that has the specified `id`.
      operationId: EnableJob
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: Job has been enabled.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Enable Job
      tags:
      - Jobs
      x-veeam-authorize:
        claims:
        - EnableJobs
  /api/v1/credentials:
    get:
      description: The HTTP GET request to the `/api/v1/credentials` path allows you
        to get an array of credentials records that are added to the backup server.
      operationId: GetAllCreds
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: Number of credentials records to skip.
        explode: true
        in: query
        name: skip
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/CredentialsFilters'
      - description: Maximum number of credentials records to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/CredentialsFilters'
      - description: Sorts credentials by one of the credentials parameters.
        explode: true
        in: query
        name: orderColumn
        required: false
        schema:
          $ref: '#/components/schemas/ECredentialsFiltersOrderColumn'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/CredentialsFilters'
      - description: Sorts credentials in the ascending order by the `orderColumn`
          parameter.
        explode: true
        in: query
        name: orderAsc
        required: false
        schema:
          type: boolean
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/CredentialsFilters'
      - description: Filters credentials by the `nameFilter` pattern. The pattern
          can match any credentials parameter. To substitute one or more characters,
          use the asterisk (*) character at the beginning and/or at the end.
        explode: true
        in: query
        name: nameFilter
        required: false
        schema:
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/CredentialsFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialsResult'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get All Credentials
      tags:
      - Credentials
      x-veeam-authorize:
        claims:
        - ViewCredentials
    post:
      description: The HTTP POST request to the `/api/v1/credentials` path allows
        you to add a credentials record.
      operationId: CreateCreds
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsSpec'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialsModel'
          description: Account has been added.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Add Credentials Record
      tags:
      - Credentials
      x-veeam-authorize:
        claims:
        - CreateCredentials
  /api/v1/credentials/{id}:
    delete:
      description: The HTTP DELETE request to the `/api/v1/credentials/{id}` path
        allows you to remove a credentials record that has the specified `id`.
      operationId: DeleteCreds
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the credentials record.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: Credentials record has been removed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Remove Credentials Record
      tags:
      - Credentials
      x-veeam-authorize:
        claims:
        - DeleteCredentials
    get:
      description: The HTTP GET request to the `/api/v1/credentials/{id}` path allows
        you to get a credentials record that has the specified `id`.
      operationId: GetCreds
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the credentials record.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialsModel'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get Credentials Record
      tags:
      - Credentials
      x-veeam-authorize:
        claims:
        - ViewCredentials
    put:
      description: The HTTP PUT request to the `/api/v1/credentials/{id}` path allows
        you to edit a credentials record that has the specified `id`.
      operationId: UpdateCreds
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the credentials record.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsModel'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialsModel'
          description: Credentials record has been updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Edit Credentials Record
      tags:
      - Credentials
      x-veeam-authorize:
        claims:
        - UpdateCredentials
  /api/v1/credentials/{id}/changepassword:
    post:
      description: The HTTP POST request to the `/api/v1/credentials/{id}/changepassword`
        path allows you to change a password of the credentials record that has the
        specified `id`.
      operationId: ChangePasswordForCreds
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the credentials record.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsPasswordChangeSpec'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: Password has been changed.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Change Password
      tags:
      - Credentials
      x-veeam-authorize:
        claims:
        - ChangeAccountPassword
  /api/v1/credentials/{id}/changeprivatekey:
    post:
      description: The HTTP POST request to the `/api/v1/credentials/{id}/changeprivatekey`
        path allows you to change a Linux private key of the credentials record that
        has the specified `id`.
      operationId: ChangePrivateKeyForCreds
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the credentials record.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivateKeyChangeSpec'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: Private key has been changed.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Change Linux Private Key
      tags:
      - Credentials
      x-veeam-authorize:
        claims:
        - ChangeLinuxPrivateKey
  /api/v1/credentials/{id}/changerootpassword:
    post:
      description: The HTTP POST request to the `/api/v1/credentials/{id}/changerootpassword`
        path allows you to change a Linux root password of the credentials record
        that has the specified `id`.
      operationId: ChangeRootPasswordForCreds
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the credentials record.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsPasswordChangeSpec'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: Root password has been changed.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Change Linux Root Password
      tags:
      - Credentials
      x-veeam-authorize:
        claims:
        - ChangeLinuxRootPassword
  /api/v1/encryptionPasswords:
    get:
      description: The HTTP GET request to the `/api/v1/encryptionPasswords` path
        allows you to get an array of all passwords that are used for data encryption.
      operationId: GetAllEncryptionPasswords
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: Number of passwords to skip.
        explode: true
        in: query
        name: skip
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/EncryptionPasswordsFilters'
      - description: Maximum number of passwords to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/EncryptionPasswordsFilters'
      - description: Sorts passwords by one of the password parameters.
        explode: true
        in: query
        name: orderColumn
        required: false
        schema:
          $ref: '#/components/schemas/EEncryptionPasswordsFiltersOrderColumn'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/EncryptionPasswordsFilters'
      - description: Sorts passwords in the ascending order by the `orderColumn` parameter.
        explode: true
        in: query
        name: orderAsc
        required: false
        schema:
          type: boolean
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/EncryptionPasswordsFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionPasswordsResult'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get All Encryption Passwords
      tags:
      - Encryption
      x-veeam-authorize:
        claims:
        - ViewEncryptionPasswords
    post:
      description: The HTTP POST request to the `/api/v1/encryptionPasswords` path
        allows you to add an encryption password.
      operationId: CreateEncryptionPassword
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncryptionPasswordSpec'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionPasswordModel'
          description: Password has been added.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Add Encryption Password
      tags:
      - Encryption
      x-veeam-authorize:
        claims:
        - CreateEncryptionPasswords
  /api/v1/encryptionPasswords/{id}:
    delete:
      description: The HTTP DELETE request to the `/api/v1/encryptionPasswords/{id}`
        path allows you to remove an encryption password that has the specified `id`.
      operationId: DeleteEncryptionPassword
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the encryption password.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: Password has been removed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Remove Encryption Password
      tags:
      - Encryption
      x-veeam-authorize:
        claims:
        - DeleteEncryptionPasswords
    get:
      description: The HTTP GET request to the `/api/v1/encryptionPasswords/{id}`
        path allows you to get an encryption password that has the specified `id`.
      operationId: GetEncryptionPassword
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the encryption password.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionPasswordModel'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get Encryption Password
      tags:
      - Encryption
      x-veeam-authorize:
        claims:
        - ViewEncryptionPasswords
    put:
      description: The HTTP PUT request to the `/api/v1/encryptionPasswords/{id}`
        path allows you to edit an encryption password that has the specified `id`.
      operationId: UpdateEncryptionPassword
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the encryption password.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncryptionPasswordModel'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionPasswordModel'
          description: Password has been updated.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Edit Encryption Password
      tags:
      - Encryption
      x-veeam-authorize:
        claims:
        - UpdateEncryptionPasswords
  /api/v1/backups:
    get:
      description: The HTTP GET request to the `/api/v1/backups` path allows you to
        get an array of all backups that are created on or imported to the backup
        server.
      operationId: GetAllBackups
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: Number of backups to skip.
        explode: true
        in: query
        name: skip
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/BackupsFilters'
      - description: Maximum number of backups to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/BackupsFilters'
      - description: Sorts backups by one of the backup parameters.
        explode: true
        in: query
        name: orderColumn
        required: false
        schema:
          $ref: '#/components/schemas/EBackupsFiltersOrderColumn'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/BackupsFilters'
      - description: Sorts backups in the ascending order by the `orderColumn` parameter.
        explode: true
        in: query
        name: orderAsc
        required: false
        schema:
          type: boolean
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/BackupsFilters'
      - description: Filters backups by the `nameFilter` pattern. The pattern can
          match any backup parameter. To substitute one or more characters, use the
          asterisk (*) character at the beginning and/or at the end.
        explode: true
        in: query
        name: nameFilter
        required: false
        schema:
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/BackupsFilters'
      - description: Returns backups that are created after the specified date and
          time.
        explode: true
        in: query
        name: createdAfterFilter
        required: false
        schema:
          format: date-time
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/BackupsFilters'
      - description: Returns backups that are created before the specified date and
          time.
        explode: true
        in: query
        name: createdBeforeFilter
        required: false
        schema:
          format: date-time
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/BackupsFilters'
      - description: Filters backups by ID of the backup object platform.
        explode: true
        in: query
        name: platformIdFilter
        required: false
        schema:
          format: uuid
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/BackupsFilters'
      - description: Filters backups by ID of the parent job.
        explode: true
        in: query
        name: jobIdFilter
        required: false
        schema:
          format: uuid
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/BackupsFilters'
      - description: Filters backups by retention policy tag.
        explode: true
        in: query
        name: policyTagFilter
        required: false
        schema:
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/BackupsFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupsResult'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get All Backups
      tags:
      - Backups
      x-veeam-authorize:
        claims:
        - ViewBackups
  /api/v1/backups/{id}:
    get:
      description: The HTTP GET request to the `/api/v1/backups/{id}` path allows
        you to get a backup that has the specified `id`.
      operationId: GetBackup
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the backup.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupModel'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get Backup
      tags:
      - Backups
      x-veeam-authorize:
        claims:
        - ViewBackups
  /api/v1/backups/{id}/objects:
    get:
      description: The HTTP GET request to the `/api/v1/backups/{id}/objects` path
        allows you to get an array of virtual infrastructure objects (VMs and VM containers)
        that are inсluded in a backup that has the specified ID.
      operationId: GetBackupObjects
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the backup.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupObjectsResult'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get Backup Objects
      tags:
      - Backups
      x-veeam-authorize:
        claims:
        - ViewBackupObjects
  /api/v1/backupObjects:
    get:
      description: The HTTP GET request to the `/api/v1/backupObjects` path allows
        you to get an array of virtual infrastructure objects (VMs and VM containers)
        that are inсluded in backups created by the backup server.
      operationId: GetAllBackupObjects
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: Number of backup objects to skip.
        explode: true
        in: query
        name: skip
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/BackupObjectsFilters'
      - description: Maximum number of backup objects to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/BackupObjectsFilters'
      - description: Sorts backup objects by one of the backup object parameters.
        explode: true
        in: query
        name: orderColumn
        required: false
        schema:
          $ref: '#/components/schemas/EBackupObjectsFiltersOrderColumn'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/BackupObjectsFilters'
      - description: Sorts backup objects in the ascending order by the `orderColumn`
          parameter.
        explode: true
        in: query
        name: orderAsc
        required: false
        schema:
          type: boolean
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/BackupObjectsFilters'
      - description: Filters backup objects by the `nameFilter` pattern. The pattern
          can match any backup object parameter. To substitute one or more characters,
          use the asterisk (*) character at the beginning and/or at the end.
        explode: true
        in: query
        name: nameFilter
        required: false
        schema:
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/BackupObjectsFilters'
      - description: Filters backup objects by platform ID.
        explode: true
        in: query
        name: platformNameFilter
        required: false
        schema:
          $ref: '#/components/schemas/EPlatformType'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/BackupObjectsFilters'
      - description: Filters backup objects by platform ID.
        explode: true
        in: query
        name: platformIdFilter
        required: false
        schema:
          format: uuid
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/BackupObjectsFilters'
      - description: Filters backup objects by object type.
        explode: true
        in: query
        name: typeFilter
        required: false
        schema:
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/BackupObjectsFilters'
      - description: Filters backup objects by the type of VMware vSphere server.
        explode: true
        in: query
        name: viTypeFilter
        required: false
        schema:
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/BackupObjectsFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupObjectsResult'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get All Backup Objects
      tags:
      - Backup Objects
      x-veeam-authorize:
        claims:
        - ViewBackupObjects
  /api/v1/backupObjects/{id}:
    get:
      description: The HTTP GET request to the `/api/v1/backupObjects/{id}` path allows
        you to get a backup object that has the specified `id`.
      operationId: GetBackupObject
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the backup object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupObjectModel'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get Backup Object
      tags:
      - Backup Objects
      x-veeam-authorize:
        claims:
        - ViewBackupObjects
  /api/v1/backupObjects/{id}/restorePoints:
    get:
      description: The HTTP GET request to the `/api/v1/backupObjects/{id}/restorePoints`
        path allows you to get an array of restore points of a backup object that
        has the specified `id`.
      operationId: GetBackupObjectRestorePoints
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the backup object.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectRestorePointsResult'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get Restore Points
      tags:
      - Backup Objects
      x-veeam-authorize:
        claims:
        - ViewRestorePoints
  /api/v1/objectRestorePoints:
    get:
      description: The HTTP GET request to the `/api/v1/objectRestorePoints` path
        allows you to get an array of all restore points created on the backup server.
      operationId: GetAllObjectRestorePoints
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: Number of restore points to skip.
        explode: true
        in: query
        name: skip
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ObjectRestorePointsFilters'
      - description: Maximum number of restore points to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ObjectRestorePointsFilters'
      - description: Sorts restore points by one of the restore point parameters.
        explode: true
        in: query
        name: orderColumn
        required: false
        schema:
          $ref: '#/components/schemas/EObjectRestorePointsFiltersOrderColumn'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ObjectRestorePointsFilters'
      - description: Sorts restore points in the ascending order by the `orderColumn`
          parameter.
        explode: true
        in: query
        name: orderAsc
        required: false
        schema:
          type: boolean
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ObjectRestorePointsFilters'
      - description: Returns restore points that are created after the specified date
          and time.
        explode: true
        in: query
        name: createdAfterFilter
        required: false
        schema:
          format: date-time
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ObjectRestorePointsFilters'
      - description: Returns restore points that are created before the specified
          date and time.
        explode: true
        in: query
        name: createdBeforeFilter
        required: false
        schema:
          format: date-time
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ObjectRestorePointsFilters'
      - description: Filters restore points by the `nameFilter` pattern. The pattern
          can match any restore point parameter. To substitute one or more characters,
          use the asterisk (*) character at the beginning and/or at the end.
        explode: true
        in: query
        name: nameFilter
        required: false
        schema:
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ObjectRestorePointsFilters'
      - description: Filters restore points by name of the backup object platform.
        explode: true
        in: query
        name: platformNameFilter
        required: false
        schema:
          $ref: '#/components/schemas/EPlatformType'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ObjectRestorePointsFilters'
      - description: Filters restore points by ID of the backup object platform.
        explode: true
        in: query
        name: platformIdFilter
        required: false
        schema:
          format: uuid
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ObjectRestorePointsFilters'
      - description: Filters restore points by backup ID.
        explode: true
        in: query
        name: backupIdFilter
        required: false
        schema:
          format: uuid
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ObjectRestorePointsFilters'
      - description: Filters restore points by backup object ID.
        explode: true
        in: query
        name: backupObjectIdFilter
        required: false
        schema:
          format: uuid
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/ObjectRestorePointsFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectRestorePointsResult'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get All Restore Points
      tags:
      - Object Restore Points
      x-veeam-authorize:
        claims:
        - ViewRestorePoints
  /api/v1/objectRestorePoints/{id}:
    get:
      description: The HTTP GET request to the `/api/v1/objectRestorePoints/{id}`
        path allows you to get a restore point that has the specified `id`.
      operationId: GetObjectRestorePoint
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the restore point.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectRestorePointModel'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get Restore Point
      tags:
      - Object Restore Points
      x-veeam-authorize:
        claims:
        - ViewRestorePoints
  /api/v1/objectRestorePoints/{id}/disks:
    get:
      description: The HTTP GET request to the `/api/v1/objectRestorePoints/{id}/disks`
        path allows you to get an array of disks from a restore point that has the
        specified `id`.
      operationId: GetObjectRestorePointDisks
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the restore point.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectRestorePointDisksResult'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get Restore Point Disks
      tags:
      - Object Restore Points
      x-veeam-authorize:
        claims:
        - ViewRestorePointDisks
  /api/v1/restore/instantRecovery/vmware/fcd/:
    get:
      description: The HTTP GET request to the `/api/v1/restore/instantRecovery/vmware/vm/`
        [TODO]
      operationId: GetAllVmwareFcdInstantRecoveryMountModels
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: Number of restore points to skip.
        explode: true
        in: query
        name: skip
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/VmwareFcdInstantRecoveryMountsFilters'
      - description: Maximum number of restore points to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/VmwareFcdInstantRecoveryMountsFilters'
      - description: Sorts restore points by one of the restore point parameters.
        explode: true
        in: query
        name: orderColumn
        required: false
        schema:
          $ref: '#/components/schemas/EVmwareFcdInstantRecoveryMountsFiltersOrderColumn'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/VmwareFcdInstantRecoveryMountsFilters'
      - description: Sorts restore points in the ascending order by the `orderColumn`
          parameter.
        explode: true
        in: query
        name: orderAsc
        required: false
        schema:
          type: boolean
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/VmwareFcdInstantRecoveryMountsFilters'
      - description: Filters vm mounts by mount state.
        explode: true
        in: query
        name: stateFilter
        required: false
        schema:
          $ref: '#/components/schemas/EInstantRecoveryMountState'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/VmwareFcdInstantRecoveryMountsFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmwareFcdInstantRecoveryMountsResult'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get All FCD Mounts Information
      tags:
      - Restore
      x-veeam-authorize:
        claims:
        - ViewIRMountedDisks
    post:
      description: |
        The HTTP POST request to the `/api/v1/restore/instantRecovery/vmware/fcd/` path allows you to start Instant FCD Recovery from the restore point to the destination cluster.</br>
        Specify the destination cluster in the `destinationCluster` parameter of the request body as a model of the VMware vSphere object. For details on how to get the cluster model, see [Get VMware vSphere Server Objects](#operation/GetVmwareHostObject).
      operationId: InstantRecoveryVmwareFcdMountWithSession
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VmwareFcdInstantRecoverySpec'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: Instant FCD Recovery has been started.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Start Instant FCD Recovery
      tags:
      - Restore
      x-veeam-authorize:
        claims:
        - StartFCDInstantRecovery
  /api/v1/restore/instantRecovery/vmware/fcd/{mountId}:
    get:
      description: The HTTP GET request to the `/api/v1/restore/instantRecovery/vmware/fcd/{mountId}`
        path allows you to get information about the mounted vPower NFS datastore,
        such as restore session ID, mount state, instant recovery settings and disks
        that will be recovered.
      operationId: GetVmwareFcdInstantRecoveryMountModel
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: Mount ID.
        explode: false
        in: path
        name: mountId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VmwareFcdInstantRecoveryMount'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get Mount Information
      tags:
      - Restore
      x-veeam-authorize:
        claims:
        - ViewIRMountedDisks
  /api/v1/restore/instantRecovery/vmware/fcd/{mountId}/dismount:
    post:
      description: The HTTP POST request to the `/api/v1/restore/instantRecovery/vmware/fcd/{mountId}/dismount`
        path allows you to stop publishing the recovered FCDs and remove the disks
        from the datastore.
      operationId: InstantRecoveryVmwareFcdDismountWithSession
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: Mount ID.
        explode: false
        in: path
        name: mountId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: Disks has been unmounted.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Stop FCD Publishing
      tags:
      - Restore
      x-veeam-authorize:
        claims:
        - DismountIRDisks
  /api/v1/restore/instantRecovery/vmware/fcd/{mountId}/migrate:
    post:
      description: The HTTP POST request to the `/api/v1/restore/instantRecovery/vmware/fcd/{mountId}/migrate`
        path allows you to start migration of FCDs from the specified mount.
      operationId: InstantRecoveryVmwareFcdMigrateWithSession
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: Mount ID.
        explode: false
        in: path
        name: mountId
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VmwareFcdQuickMigrationSpec'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: FCD Migration has been started.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Start FCD Migration
      tags:
      - Restore
      x-veeam-authorize:
        claims:
        - MigrateIRMountedDisks
  /api/v1/automation/jobs/import:
    post:
      description: The HTTP POST request to the `/api/v1/automation/jobs/import` path
        allows you to import jobs to Veeam Backup & Replication.
      operationId: ImportJobs
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobImportSpecCollection'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: Automation session has been created to import the jobs. To
            check the progress, track the session `state`.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Import Jobs
      tags:
      - Automation
      x-veeam-authorize:
        claims:
        - ImportJobs
  /api/v1/automation/jobs/export:
    post:
      description: The HTTP POST request to the `/api/v1/automation/jobs/export` path
        allows you to export jobs from Veeam Backup & Replication.
      operationId: ExportJobs
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobExportSpec'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobImportSpecCollection'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Export Jobs
      tags:
      - Automation
      x-veeam-authorize:
        claims:
        - ExportJobs
  /api/v1/automation/credentials/import:
    post:
      description: The HTTP POST request to the `/api/v1/automation/credentials/import`
        path allows you to import credentials to Veeam Backup & Replication.
      operationId: ImportCredentials
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsImportSpecCollection'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: Automation session has been created to import the credentials.
            To check the progress, track the session `state`.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Import Credentials
      tags:
      - Automation
      x-veeam-authorize:
        claims:
        - ImportCredentials
  /api/v1/automation/credentials/export:
    post:
      description: The HTTP POST request to the `/api/v1/automation/credentials/export`
        path allows you to export credentials from Veeam Backup & Replication.
      operationId: ExportCredentials
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsExportSpec'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialsImportSpecCollection'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Export Credentials
      tags:
      - Automation
      x-veeam-authorize:
        claims:
        - ExportCredentials
  /api/v1/automation/proxies/import:
    post:
      description: The HTTP POST request to the `/api/v1/automation/proxies/import`
        path allows you to import backup proxies to Veeam Backup & Replication.
      operationId: ImportProxies
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProxyImportSpecCollection'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: Automation session has been created to import the proxies.
            To check the progress, track the session `state`.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Import Proxies
      tags:
      - Automation
      x-veeam-authorize:
        claims:
        - ImportProxies
  /api/v1/automation/proxies/export:
    post:
      description: The HTTP POST request to the `/api/v1/automation/proxies/export`
        path allows you to export backup proxies from Veeam Backup & Replication.
      operationId: ExportProxies
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProxyExportSpec'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProxyImportSpecCollection'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Export Proxies
      tags:
      - Automation
      x-veeam-authorize:
        claims:
        - ExportProxies
  /api/v1/automation/managedServers/import:
    post:
      description: The HTTP POST request to the `/api/v1/automation/managedServers/import`
        path allows you to import managed servers to Veeam Backup & Replication.
      operationId: ImportManagedServers
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManageServerImportSpecCollection'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: Automation session has been created to import the servers.
            To check the progress, track the session `state`.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Import Servers
      tags:
      - Automation
      x-veeam-authorize:
        claims:
        - ImportManagedServers
  /api/v1/automation/managedServers/export:
    post:
      description: The HTTP POST request to the `/api/v1/automation/managedServers/export`
        path allows you to export managed servers from Veeam Backup & Replication.
      operationId: ExportManagedServers
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManageServerExportSpec'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManageServerImportSpecCollection'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Export Servers
      tags:
      - Automation
      x-veeam-authorize:
        claims:
        - ExportManagedServers
  /api/v1/automation/repositories/import:
    post:
      description: The HTTP POST request to the `/api/v1/automation/repositories/import`
        path allows you to import backup repositories to Veeam Backup & Replication.
      operationId: ImportRepositories
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositoryImportSpecCollection'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: Automation session has been created to import the repositories.
            To check the progress, track the session `state`.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Import Repositories
      tags:
      - Automation
      x-veeam-authorize:
        claims:
        - ImportRepositories
  /api/v1/automation/repositories/export:
    post:
      description: The HTTP POST request to the `/api/v1/automation/repositories/export`
        path allows you to export backup repositories from Veeam Backup & Replication.
      operationId: ExportRepositories
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositoryExportSpec'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryImportSpecCollection'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Export Repositories
      tags:
      - Automation
      x-veeam-authorize:
        claims:
        - ExportRepositories
  /api/v1/automation/encryptionPasswords/import:
    post:
      description: The HTTP POST request to the `/api/v1/automation/encryptionPasswords/import`
        path allows you to import encryption passwords to Veeam Backup & Replication.
      operationId: ImportEncryptionPasswords
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncryptionPasswordImportSpecCollection'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: Automation session has been created to import the passwords.
            To check the progress, track the session `state`.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Import Encryption Passwords
      tags:
      - Automation
      x-veeam-authorize:
        claims:
        - ImportEncryptionPasswords
  /api/v1/automation/encryptionPasswords/export:
    post:
      description: The HTTP POST request to the `/api/v1/automation/encryptionPasswords/export`
        path allows you to export encryption passwords from Veeam Backup & Replication.
      operationId: ExportEncryptionPasswords
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncryptionPasswordExportSpec'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionPasswordImportSpecCollection'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request. This error is related to POST/PUT requests. The
            request body is malformed, incomplete or otherwise invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Export Encryption Passwords
      tags:
      - Automation
      x-veeam-authorize:
        claims:
        - ExportEncryptionPasswords
  /api/v1/automation/sessions:
    get:
      description: The HTTP GET request to the `/api/v1/automation/sessions` path
        allows you to get an array of all automation sessions performed on the backup
        server.
      operationId: GetAllAutomationSessions
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: Number of sessions to skip.
        explode: true
        in: query
        name: skip
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      - description: Maximum number of sessions to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      - description: Sorts sessions by one of the session parameters.
        explode: true
        in: query
        name: orderColumn
        required: false
        schema:
          $ref: '#/components/schemas/ESessionsFiltersOrderColumn'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      - description: Sorts sessions in the ascending order by the `orderColumn` parameter.
        explode: true
        in: query
        name: orderAsc
        required: false
        schema:
          type: boolean
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      - description: Filters sessions by the `nameFilter` pattern. The pattern can
          match any session parameter. To substitute one or more characters, use the
          asterisk (*) character at the beginning and/or at the end.
        explode: true
        in: query
        name: nameFilter
        required: false
        schema:
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      - description: Returns sessions that are created after the specified date and
          time.
        explode: true
        in: query
        name: createdAfterFilter
        required: false
        schema:
          format: date-time
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      - description: Returns sessions that are created before the specified date and
          time.
        explode: true
        in: query
        name: createdBeforeFilter
        required: false
        schema:
          format: date-time
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      - description: Returns sessions that are finished after the specified date and
          time.
        explode: true
        in: query
        name: endedAfterFilter
        required: false
        schema:
          format: date-time
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      - description: Returns sessions that are finished before the specified date
          and time.
        explode: true
        in: query
        name: endedBeforeFilter
        required: false
        schema:
          format: date-time
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      - description: Filters sessions by session type.
        explode: true
        in: query
        name: typeFilter
        required: false
        schema:
          $ref: '#/components/schemas/ESessionType'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      - description: Filters sessions by session state.
        explode: true
        in: query
        name: stateFilter
        required: false
        schema:
          $ref: '#/components/schemas/ESessionState'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      - description: Filters sessions by session result.
        explode: true
        in: query
        name: resultFilter
        required: false
        schema:
          $ref: '#/components/schemas/ESessionResult'
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      - description: Filters sessions by job ID.
        explode: true
        in: query
        name: jobIdFilter
        required: false
        schema:
          format: uuid
          type: string
        style: form
        x-veeam-spec:
          $ref: '#/components/schemas/SessionsFilters'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionsResult'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get All Automation Sessions
      tags:
      - Automation
      x-veeam-authorize:
        claims:
        - ViewSessions
  /api/v1/automation/sessions/{id}:
    get:
      description: The HTTP GET request to the `/api/v1/automation/sessions/{id}`
        path allows you to get an automation session that has the specified `id`.
      operationId: GetAutomationSession
      parameters:
      - description: ID of the session.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionModel'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get Automation Session
      tags:
      - Automation
      x-veeam-authorize:
        claims:
        - ViewSessions
  /api/v1/automation/sessions/{id}/logs:
    get:
      description: The HTTP GET request to the `/api/v1/automation/sessions/{id}/logs`
        path allows you to get an array of log records of an automation session that
        has the specified `id`.
      operationId: GetAutomationSessionLogs
      parameters:
      - description: ID of the session.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionLogResult'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Get Automation Session Logs
      tags:
      - Automation
      x-veeam-authorize:
        claims:
        - ViewSessions
  /api/v1/automation/sessions/{id}/stop:
    post:
      description: The HTTP POST request to the `/api/v1/automation/sessions/{id}/stop`
        path allows you to stop an automation session that has the specified `id`.
      operationId: StopAutomationSession
      parameters:
      - description: |
          Version and revision of the client REST API. Must be in the following
          format: *\<version\>-\<revision\>*.
        explode: false
        in: header
        name: x-api-version
        required: true
        schema:
          default: 1.0-rev2
          type: string
        style: simple
      - description: ID of the session.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptySuccessResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized. The authorization header has been expected but
            not found (or found but is expired).
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden. The user sending the request does not have adequate
            privileges to access one or more objects specified in the request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not found. No object was found with the path parameter specified
            in the request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error. The request has been received but could
            not be completed because of an internal error at the server side.
      summary: Stop Automation Session
      tags:
      - Automation
      x-veeam-authorize:
        claims:
        - StopSessions
components:
  parameters:
    apiVersionParam:
      description: |
        Version and revision of the client REST API. Must be in the following
        format: *\<version\>-\<revision\>*.
      explode: false
      in: header
      name: x-api-version
      required: true
      schema:
        default: 1.0-rev2
        type: string
      style: simple
  responses:
    Deleted:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EmptySuccessResponse'
      description: Removed.
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad request. This error is related to POST/PUT requests. The request
        body is malformed, incomplete or otherwise invalid.
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Unauthorized. The authorization header has been expected but not
        found (or found but is expired).
    Forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Forbidden. The user sending the request does not have adequate
        privileges to access one or more objects specified in the request.
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Not found. No object was found with the path parameter specified
        in the request.
    InternalServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Internal server error. The request has been received but could
        not be completed because of an internal error at the server side.
  schemas:
    ServerTimeModel:
      example:
        timeZone: timeZone
        serverTime: 2000-01-23T04:56:07.000+00:00
      properties:
        serverTime:
          description: Current date and time on the server.
          format: date-time
          type: string
        timeZone:
          type: string
      required:
      - serverTime
      type: object
    Error:
      properties:
        errorCode:
          description: The error code is a string that uniquely identifies an error
            condition and should be understood by programs that detect and handle
            errors by type
          enum:
          - AccessDenied
          - ExpiredToken
          - InvalidToken
          - InvalidURI
          - MethodNotAllowed
          - NotFound
          - NotImplemented
          - ServiceUnavailable
          - UnexpectedContent
          - UnknownError
          type: string
        message:
          description: The error message contains a generic description of the error
            condition in English. It is intended for a human audience
          type: string
        resourceId:
          description: ID of the object that is involved in the error (or empty)
          type: string
      required:
      - errorCode
      - message
      type: object
    PaginationResult:
      description: Pagination settings.
      example:
        total: 6
        count: 1
        limit: 5
        skip: 5
      properties:
        total:
          description: Total number of results.
          format: int32
          type: integer
        count:
          description: Number of returned results.
          format: int32
          type: integer
        skip:
          description: Number of skipped results.
          format: int32
          type: integer
        limit:
          description: Maximum number of results to return.
          format: int32
          type: integer
      required:
      - count
      - total
      type: object
    EmptySuccessResponse:
      description: Empty success response (200, 201, 204).
      type: object
    SessionsFilters:
      properties:
        skip:
          format: int32
          type: integer
        limit:
          format: int32
          type: integer
        orderColumn:
          $ref: '#/components/schemas/ESessionsFiltersOrderColumn'
        orderAsc:
          type: boolean
        nameFilter:
          type: string
        createdAfterFilter:
          format: date-time
          type: string
        createdBeforeFilter:
          format: date-time
          type: string
        endedAfterFilter:
          format: date-time
          type: string
        endedBeforeFilter:
          format: date-time
          type: string
        typeFilter:
          $ref: '#/components/schemas/ESessionType'
        stateFilter:
          $ref: '#/components/schemas/ESessionState'
        resultFilter:
          $ref: '#/components/schemas/ESessionResult'
        jobIdFilter:
          format: uuid
          type: string
      type: object
    ESessionsFiltersOrderColumn:
      enum:
      - Name
      - SessionType
      - CreationTime
      - EndTime
      - State
      - Result
      type: string
    SessionsResult:
      example:
        pagination:
          total: 6
          count: 1
          limit: 5
          skip: 5
        data:
        - resourceId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          creationTime: 2000-01-23T04:56:07.000+00:00
          parentSessionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          result:
            isCanceled: true
            message: message
          activityId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          usn: 6
          name: name
          progressPercent: 0
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          endTime: 2000-01-23T04:56:07.000+00:00
          resourceReference: resourceReference
        - resourceId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          creationTime: 2000-01-23T04:56:07.000+00:00
          parentSessionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          result:
            isCanceled: true
            message: message
          activityId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          usn: 6
          name: name
          progressPercent: 0
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          endTime: 2000-01-23T04:56:07.000+00:00
          resourceReference: resourceReference
      properties:
        data:
          description: Array of sessions.
          items:
            $ref: '#/components/schemas/SessionModel'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
      - data
      - pagination
      type: object
    SessionModel:
      example:
        resourceId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        creationTime: 2000-01-23T04:56:07.000+00:00
        parentSessionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        result:
          isCanceled: true
          message: message
        activityId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        usn: 6
        name: name
        progressPercent: 0
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        endTime: 2000-01-23T04:56:07.000+00:00
        resourceReference: resourceReference
      properties:
        id:
          description: ID of the session.
          format: uuid
          type: string
        name:
          description: Name of the session.
          type: string
        activityId:
          description: ID of the activity.
          format: uuid
          type: string
        sessionType:
          $ref: '#/components/schemas/ESessionType'
        creationTime:
          description: Date and time the session was created.
          format: date-time
          type: string
        endTime:
          description: Date and time the session was ended.
          format: date-time
          type: string
        state:
          $ref: '#/components/schemas/ESessionState'
        progressPercent:
          description: Progress percentage of the session.
          type: integer
        result:
          $ref: '#/components/schemas/SessionResultModel'
        resourceId:
          description: ID of the resource.
          format: uuid
          type: string
        resourceReference:
          description: URI of the resource.
          type: string
        parentSessionId:
          description: ID of the parent session.
          format: uuid
          type: string
        usn:
          description: Update sequence number.
          format: int64
          type: integer
      required:
      - activityId
      - creationTime
      - id
      - name
      - sessionType
      - state
      - usn
      type: object
    SessionResultModel:
      example:
        isCanceled: true
        message: message
      properties:
        result:
          $ref: '#/components/schemas/ESessionResult'
        message:
          description: Message that explains the session result.
          type: string
        isCanceled:
          description: If *true*, the session has been canceled.
          type: boolean
      required:
      - result
      type: object
    ESessionType:
      description: Type of the session.
      enum:
      - Infrastructure
      - Job
      - Automation
      - ConfigurationBackup
      - RepositoryMaintenance
      - RepositoryEvacuate
      - InfrastructureItemDeletion
      type: string
    ESessionState:
      description: State of the session.
      enum:
      - Stopped
      - Starting
      - Stopping
      - Working
      - Pausing
      - Resuming
      - WaitingTape
      - Idle
      - Postprocessing
      - WaitingRepository
      - WaitingSlot
      type: string
    ESessionResult:
      description: Result of the session.
      enum:
      - None
      - Success
      - Warning
      - Failed
      type: string
    SessionLogResult:
      description: Log of the session.
      example:
        totalRecords: 0
        records:
        - description: description
          startTime: 2000-01-23T04:56:07.000+00:00
          updateTime: 2000-01-23T04:56:07.000+00:00
          id: 6
          title: title
        - description: description
          startTime: 2000-01-23T04:56:07.000+00:00
          updateTime: 2000-01-23T04:56:07.000+00:00
          id: 6
          title: title
      properties:
        totalRecords:
          description: Total number of records.
          type: integer
        records:
          description: Array of log records.
          items:
            $ref: '#/components/schemas/SessionLogRecordModel'
          type: array
      type: object
    SessionLogRecordModel:
      description: Record of the session log.
      example:
        description: description
        startTime: 2000-01-23T04:56:07.000+00:00
        updateTime: 2000-01-23T04:56:07.000+00:00
        id: 6
        title: title
      properties:
        id:
          description: ID of the log record.
          type: integer
        status:
          $ref: '#/components/schemas/ETaskLogRecordStatus'
        startTime:
          description: Date and time the operation was started.
          format: date-time
          type: string
        updateTime:
          description: Date and time the log record was updated.
          format: date-time
          type: string
        title:
          description: Title of the log record.
          type: string
        description:
          description: Description of the log record.
          type: string
      type: object
    ETaskLogRecordStatus:
      enum:
      - None
      - Succeeded
      - Warning
      - Failed
      type: string
    CertificateModel:
      example:
        serialNumber: serialNumber
        keyAlgorithm: keyAlgorithm
        issuedTo: issuedTo
        keySize: keySize
        subject: subject
        issuedBy: issuedBy
        thumbprint: thumbprint
        validFrom: 2000-01-23T04:56:07.000+00:00
        validBy: 2000-01-23T04:56:07.000+00:00
      properties:
        thumbprint:
          description: Thumbprint of the certificate.
          type: string
        serialNumber:
          description: Serial number of the certificate.
          type: string
        keyAlgorithm:
          description: Key algorithm of the certificate.
          type: string
        keySize:
          description: Key size of the certificate.
          type: string
        subject:
          description: Subject of the certificate.
          type: string
        issuedTo:
          description: Acquirer of the certificate.
          type: string
        issuedBy:
          description: Issuer of the certificate.
          type: string
        validFrom:
          description: Date and time the certificate is valid from.
          format: date-time
          type: string
        validBy:
          description: Expiration date and time of the certificate.
          format: date-time
          type: string
      required:
      - issuedBy
      - issuedTo
      - keyAlgorithm
      - keySize
      - serialNumber
      - subject
      - thumbprint
      - validBy
      - validFrom
      type: object
    AuthorizationCodeModel:
      example:
        code: code
      properties:
        code:
          description: String that is used to obtain an access token. Lifetime of
            the authorization code is 60 seconds.
          type: string
      required:
      - code
      type: object
    TokenLoginSpec:
      properties:
        grant_type:
          $ref: '#/components/schemas/ELoginGrantType'
        username:
          description: User name. Required if the `grant_type` value is `password`.
          type: string
        password:
          description: Password. Required if the `grant_type` value is `password`.
          format: password
          type: string
        refresh_token:
          description: Refresh token. Required if the `grant_type` value is `refresh_token`.
          type: string
        code:
          description: Authorization code. Required if the `grant_type` value is `authorization_code`.
          type: string
        use_short_term_refresh:
          description: If *true*, a short-term refresh token is used. Lifetime of
            the short-term refresh token is the access token lifetime plus 15 minutes.
          type: boolean
      required:
      - grant_type
      type: object
    ELoginGrantType:
      default: password
      description: |
        Authorization grant type.

        Available values:
        - `password` — used to obtain an access token by providing a user name and password.
        - `refresh_token` — used to refresh an expired or lost access token by providing a refresh token.
        - `authorization_code` — used to obtain an access token by providing an authorization code.
      enum:
      - password
      - refresh_token
      - authorization_code
      type: string
    TokenModel:
      example:
        access_token: access_token
        refresh_token: refresh_token
        ".expires": 2000-01-23T04:56:07.000+00:00
        token_type: token_type
        expires_in: 0
        ".issued": 2000-01-23T04:56:07.000+00:00
      properties:
        access_token:
          description: String that represents authorization issued to the client.
            It must be specified in all requests. An access token can be used multiple
            times, but its lifetime is 15 minutes.
          type: string
        token_type:
          description: Type of the access token.
          type: string
        refresh_token:
          description: String that is used to obtain a new access token if the current
            access token expires or becomes lost. A refresh token can be used only
            once, and its default lifetime is 14 days.
          type: string
        expires_in:
          description: Lifetime of the access token, in seconds.
          format: int32
          type: integer
        ".issued":
          description: Date and time the access token is issued.
          format: date-time
          type: string
        ".expires":
          description: Date and time the access token expires.
          format: date-time
          type: string
      required:
      - .expires
      - .issued
      - access_token
      - expires_in
      - refresh_token
      - token_type
      type: object
    HostConnectionSpec:
      example:
        port: 0
        serverName: serverName
        credentialsId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        serverName:
          description: Full DNS name or IP address of the server.
          type: string
        credentialsId:
          description: ID of a credentials record used to connect to the server.
          format: uuid
          type: string
        type:
          $ref: '#/components/schemas/EManagedServerType'
        port:
          description: Port used to communicate with the server.
          type: integer
      required:
      - credentialsId
      - serverName
      - type
      type: object
    ERepositoryType:
      description: Repository type.
      enum:
      - WinLocal
      - LinuxLocal
      - Smb
      - Nfs
      - AzureBlob
      - AzureArchive
      - AmazonS3
      - AmazonS3Glacier
      - S3Compatible
      - GoogleCloud
      - IBMCloud
      type: string
    EPlatform:
      enum:
      - VMware
      - HyperV
      - Test
      - Vcd
      - Tape
      - EndPoint
      - LinuxPhysical
      - CustomPlatform
      - Conf
      - NasBackup
      - EmulatedVMware
      - Extension0
      - Extension1
      - Extension
      type: string
    ManagedServersFilters:
      properties:
        skip:
          format: int32
          type: integer
        limit:
          format: int32
          type: integer
        orderColumn:
          $ref: '#/components/schemas/EManagedServersFiltersOrderColumn'
        orderAsc:
          type: boolean
        nameFilter:
          type: string
        typeFilter:
          $ref: '#/components/schemas/EManagedServerType'
        viTypeFilter:
          $ref: '#/components/schemas/EViHostType'
      type: object
    EManagedServersFiltersOrderColumn:
      enum:
      - Name
      - Type
      - Description
      type: string
    ManagedServersResult:
      example:
        pagination:
          total: 6
          count: 1
          limit: 5
          skip: 5
        data:
        - name: name
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          credentialsId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - name: name
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          credentialsId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        data:
          description: Array of managed servers.
          items:
            $ref: '#/components/schemas/ManagedServerModel'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
      - data
      - pagination
      type: object
    ManagedServerModel:
      discriminator:
        mapping:
          WindowsHost: '#/components/schemas/WindowsHostModel'
          LinuxHost: '#/components/schemas/LinuxHostModel'
          ViHost: '#/components/schemas/ViHostModel'
        propertyName: type
      example:
        name: name
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        credentialsId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          description: ID of the server.
          format: uuid
          type: string
        name:
          description: Full DNS name or IP address of the server.
          type: string
        description:
          description: Description of the server.
          type: string
        type:
          $ref: '#/components/schemas/EManagedServerType'
        credentialsId:
          description: ID of a credentials record used to connect to the server.
          format: uuid
          type: string
      required:
      - credentialsId
      - description
      - id
      - name
      - type
      type: object
    EManagedServerType:
      description: Type of the server.
      enum:
      - WindowsHost
      - LinuxHost
      - ViHost
      type: string
    ManagedServerSpec:
      discriminator:
        mapping:
          WindowsHost: '#/components/schemas/WindowsHostSpec'
          LinuxHost: '#/components/schemas/LinuxHostSpec'
          ViHost: '#/components/schemas/ViHostSpec'
        propertyName: type
      example:
        name: name
        description: description
        credentialsId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        name:
          description: Full DNS name or IP address of the server.
          type: string
        description:
          description: Description of the server.
          type: string
        type:
          $ref: '#/components/schemas/EManagedServerType'
        credentialsId:
          description: ID of the credentials used to connect to the server.
          format: uuid
          type: string
      required:
      - credentialsId
      - description
      - name
      - type
      type: object
    WindowsHostSpec:
      allOf:
      - $ref: '#/components/schemas/ManagedServerSpec'
      - $ref: '#/components/schemas/WindowsHostSpec_allOf'
    WindowsHostModel:
      allOf:
      - $ref: '#/components/schemas/ManagedServerModel'
      - $ref: '#/components/schemas/WindowsHostSpec_allOf'
    WindowsHostPortsModel:
      description: Network ports.
      example:
        components:
        - port: 0
        - port: 0
        serverThisSide: true
        portRangeStart: 6
        portRangeEnd: 1
      properties:
        components:
          items:
            $ref: '#/components/schemas/WindowsHostComponentPortModel'
          type: array
        portRangeStart:
          description: Start port used for data transfer.
          type: integer
        portRangeEnd:
          description: End port used for data transfer.
          type: integer
        serverThisSide:
          description: If *true*, the server is run on this side.
          type: boolean
      type: object
    WindowsHostComponentPortModel:
      description: Ports used by Veeam Backup & Replication components.
      example:
        port: 0
      properties:
        componentName:
          $ref: '#/components/schemas/EWindowsHostComponentType'
        port:
          description: Port used by the component.
          type: integer
      required:
      - componentName
      - port
      type: object
    EWindowsHostComponentType:
      description: Veeam Backup & Replication component.
      enum:
      - Transport
      - Nfs
      - HvIntegration
      - DeployerSvc
      - WanAccelerator
      - Tape
      - CloudGate
      - CloudServiceInvoker
      - CloudServiceRemoting
      - RestoreProxy
      - EpAgent
      - EpAgentSqlLocalDB
      - EpAgentSharedManagementObjects
      - EpAgentSqlSysClrTypes
      - AgentConfigureService
      - VawRedist
      - ValRedist
      - GuestControl
      - FileSystemVssIntegration
      - VssHwSnapshotProvider
      - Cdp
      - VamRedist
      type: string
    LinuxHostSpec:
      allOf:
      - $ref: '#/components/schemas/ManagedServerSpec'
      properties:
        sshSettings:
          $ref: '#/components/schemas/LinuxHostSSHSettingsModel'
        sshFingerprint:
          description: |
            SSH key fingerprint used to verify the server identity. For details on how to get the fingerprint, see [Get TLS Certificate or SSH Fingerprint](#operation/GetConnectionCertificate).
          type: string
      required:
      - sshFingerprint
      type: object
    LinuxHostModel:
      allOf:
      - $ref: '#/components/schemas/ManagedServerModel'
      - $ref: '#/components/schemas/LinuxHostModel_allOf'
    LinuxHostSSHSettingsModel:
      description: SSH settings.
      example:
        managementPort: 7
        serverThisSide: true
        portRangeStart: 5
        portRangeEnd: 2
        sshTimeOutMs: 5
      properties:
        sshTimeOutMs:
          description: SSH timeout, in ms. If a task targeted at the server is inactive
            after the timeout, the task is terminated.
          type: integer
        portRangeStart:
          description: Start port used for data transfer.
          type: integer
        portRangeEnd:
          description: End port used for data transfer.
          type: integer
        serverThisSide:
          description: If *true*, the server is run on this side.
          type: boolean
        managementPort:
          description: Port used as a control channel from the Veeam Backup & Replication
            console to the Linux server.
          type: integer
      type: object
    ViHostModel:
      allOf:
      - $ref: '#/components/schemas/ManagedServerModel'
      - $ref: '#/components/schemas/ViHostModel_allOf'
    EViHostType:
      description: Type of the VMware vSphere server.
      enum:
      - ESX
      - ESXi
      - VC
      type: string
    ViHostSpec:
      allOf:
      - $ref: '#/components/schemas/ManagedServerSpec'
      - $ref: '#/components/schemas/ViHostSpec_allOf'
    RepositoriesFilters:
      properties:
        skip:
          format: int32
          type: integer
        limit:
          format: int32
          type: integer
        orderColumn:
          $ref: '#/components/schemas/ERepositoryFiltersOrderColumn'
        orderAsc:
          type: boolean
        nameFilter:
          type: string
        typeFilter:
          $ref: '#/components/schemas/ERepositoryType'
        hostIdFilter:
          format: uuid
          type: string
        pathFilter:
          type: string
        vmbApiFilter:
          description: VmbApiFilterModel as json serialized in base64 format (see
            VmbApiFilterModel)
          type: string
        vmbApiPlatform:
          description: TODO Sets a platform for vmb API to work with
          format: uuid
          type: string
      type: object
    ERepositoryFiltersOrderColumn:
      enum:
      - Name
      - Description
      - Type
      - Host
      - Path
      type: string
    RepositoriesResult:
      example:
        pagination:
          total: 6
          count: 1
          limit: 5
          skip: 5
        data:
        - name: name
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tag: tag
        - name: name
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tag: tag
      properties:
        data:
          description: Array of backup repositories.
          items:
            $ref: '#/components/schemas/RepositoryModel'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
      - data
      - pagination
      type: object
    VmbApiFilterModel:
      properties:
        protocolVersion:
          type: integer
        assemblyVersion:
          type: string
        productId:
          format: uuid
          type: string
        versionFlags:
          type: integer
      required:
      - assemblyVersion
      - productId
      - protocolVersion
      - versionFlags
      type: object
    RepositorySpec:
      discriminator:
        mapping:
          WinLocal: '#/components/schemas/WindowsLocalStorageSpec'
          LinuxLocal: '#/components/schemas/LinuxLocalStorageSpec'
          Smb: '#/components/schemas/SmbStorageSpec'
          Nfs: '#/components/schemas/NfsStorageSpec'
        propertyName: type
      example:
        name: name
        description: description
        tag: tag
      properties:
        name:
          description: Name of the backup repository.
          type: string
        description:
          description: Description of the backup repository.
          type: string
        tag:
          description: VMware vSphere tag assigned to the backup repository.
          type: string
        type:
          $ref: '#/components/schemas/ERepositoryType'
      required:
      - description
      - kind
      - name
      - type
      type: object
    RepositoryModel:
      discriminator:
        mapping:
          WinLocal: '#/components/schemas/WindowsLocalStorageModel'
          LinuxLocal: '#/components/schemas/LinuxLocalStorageModel'
          Smb: '#/components/schemas/SmbStorageModel'
          Nfs: '#/components/schemas/NfsStorageModel'
        propertyName: type
      example:
        name: name
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        tag: tag
      properties:
        id:
          description: ID of the backup repository.
          format: uuid
          type: string
        name:
          description: Name of the backup repository.
          type: string
        description:
          description: Description of the backup repository.
          type: string
        tag:
          description: VMware vSphere tag assigned to the backup repository.
          type: string
        type:
          $ref: '#/components/schemas/ERepositoryType'
      required:
      - description
      - id
      - kind
      - name
      - type
      type: object
    SmbRepositoryShareSettingsModel:
      description: Share settings.
      properties:
        sharePath:
          description: Path to the shared folder that that is used as a backup repository.
          type: string
        credentialsId:
          description: ID of the credentials record used to access the shared folder.
          format: uuid
          type: string
        gatewayServer:
          $ref: '#/components/schemas/RepositoryShareGatewayModel'
      required:
      - credentialsId
      - sharePath
      type: object
    NfsRepositoryShareSettingsModel:
      description: Share settings.
      properties:
        sharePath:
          description: Path to the shared folder that that is used as a backup repository.
          type: string
        gatewayServer:
          $ref: '#/components/schemas/RepositoryShareGatewayModel'
      required:
      - sharePath
      type: object
    RepositoryShareGatewayModel:
      description: Settings for the gateway server.
      properties:
        autoSelect:
          description: If *true*, Veeam Backup & Replication automatically selects
            a gateway server.
          type: boolean
        gatewayServerId:
          description: ID of the gateway server.
          format: uuid
          type: string
      type: object
    WindowsLocalRepositorySettingsModel:
      description: Repository settings.
      example:
        maxTaskCount: 0
        path: path
        advancedSettings:
          perVmBackup: true
          decompressBeforeStoring: true
          rotatedDrives: true
          alignDataBlocks: true
        readWriteRate: 6
      properties:
        path:
          description: Path to the folder where backup files are stored.
          type: string
        maxTaskCount:
          description: Maximum number of concurrent tasks.
          type: integer
        readWriteRate:
          description: Maximum rate that restricts the total speed of reading and
            writing data to the backup repository disk.
          type: integer
        advancedSettings:
          $ref: '#/components/schemas/RepositoryAdvancedSettingsModel'
      type: object
    LinuxLocalRepositorySettingsModel:
      description: Repository settings.
      example:
        maxTaskCount: 5
        path: path
        makeRecentBackupsImmutableDays: 7
        useFastCloningOnXFSVolumes: true
        advancedSettings:
          perVmBackup: true
          decompressBeforeStoring: true
          rotatedDrives: true
          alignDataBlocks: true
        useImmutableBackups: true
        readWriteRate: 2
      properties:
        path:
          description: Path to the folder where backup files are stored.
          type: string
        maxTaskCount:
          description: Maximum number of concurrent tasks.
          type: integer
        readWriteRate:
          description: Maximum rate that restricts the total speed of reading and
            writing data to the backup repository disk.
          type: integer
        useFastCloningOnXFSVolumes:
          description: |
            [For Linux repository] If *true*, fast cloning on XFS volumes is used.
          type: boolean
        useImmutableBackups:
          description: If *true*, the Object Lock feature is used to protect recent
            backups.
          type: boolean
        makeRecentBackupsImmutableDays:
          description: Number of days to keep immutable backups.
          type: integer
        advancedSettings:
          $ref: '#/components/schemas/RepositoryAdvancedSettingsModel'
      type: object
    NetworkRepositorySettingsModel:
      description: Repository settings.
      example:
        maxTaskCount: 9
        advancedSettings:
          perVmBackup: true
          decompressBeforeStoring: true
          rotatedDrives: true
          alignDataBlocks: true
        readWriteRate: 3
      properties:
        maxTaskCount:
          description: Maximum number of concurrent tasks.
          type: integer
        readWriteRate:
          description: Maximum rate that restricts the total speed of reading and
            writing data to the backup repository disk.
          type: integer
        advancedSettings:
          $ref: '#/components/schemas/RepositoryAdvancedSettingsModel'
      type: object
    RepositoryAdvancedSettingsModel:
      description: Advanced settings for the backup repository.
      example:
        perVmBackup: true
        decompressBeforeStoring: true
        rotatedDrives: true
        alignDataBlocks: true
      properties:
        alignDataBlocks:
          description: If *true*, Veeam Backup & Replication aligns VM data saved
            to a backup file at a 4 KB block boundary.
          type: boolean
        decompressBeforeStoring:
          description: If *true*, Veeam Backup & Replication decompresses backup data
            blocks before storing to improve deduplication ratios.
          type: boolean
        rotatedDrives:
          description: If *true*, the repository drive is rotated.
          type: boolean
        perVmBackup:
          description: If *true*, Veeam Backup & Replication creates a separate backup
            file for every VM in the job.
          type: boolean
      type: object
    MountServerSettingsModel:
      description: Settings for the mount server that is used for file-level and application
        items restore.
      properties:
        mountServerId:
          description: ID of the mount server.
          format: uuid
          type: string
        writeCacheFolder:
          description: Path to the folder used for writing cache during mount operations.
          type: string
        vPowerNFSEnabled:
          description: If *true*, the vPower NFS Service is enabled on the mount server.
          type: boolean
        vPowerNFSPortSettings:
          $ref: '#/components/schemas/VPowerNFSPortSettingsModel'
      required:
      - mountServerId
      - vPowerNFSEnabled
      - writeCacheFolder
      type: object
    VPowerNFSPortSettingsModel:
      description: Network ports used by the vPower NFS Service.
      example:
        vPowerNFSPort: 5
        mountPort: 1
      properties:
        mountPort:
          description: Mount port.
          type: integer
        vPowerNFSPort:
          description: vPower NFS port.
          type: integer
      type: object
    WindowsLocalStorageSpec:
      allOf:
      - $ref: '#/components/schemas/RepositorySpec'
      - $ref: '#/components/schemas/WindowsLocalStorageSpec_allOf'
    LinuxLocalStorageSpec:
      allOf:
      - $ref: '#/components/schemas/RepositorySpec'
      - $ref: '#/components/schemas/LinuxLocalStorageSpec_allOf'
    WindowsLocalStorageModel:
      allOf:
      - $ref: '#/components/schemas/RepositoryModel'
      - $ref: '#/components/schemas/WindowsLocalStorageSpec_allOf'
      description: Direct attached storage.
    LinuxLocalStorageModel:
      allOf:
      - $ref: '#/components/schemas/RepositoryModel'
      - $ref: '#/components/schemas/LinuxLocalStorageSpec_allOf'
      description: Direct attached storage.
    NfsStorageSpec:
      allOf:
      - $ref: '#/components/schemas/RepositorySpec'
      - $ref: '#/components/schemas/NfsStorageSpec_allOf'
    SmbStorageSpec:
      allOf:
      - $ref: '#/components/schemas/RepositorySpec'
      - $ref: '#/components/schemas/SmbStorageSpec_allOf'
    NfsStorageModel:
      allOf:
      - $ref: '#/components/schemas/RepositoryModel'
      - $ref: '#/components/schemas/NfsStorageSpec_allOf'
      description: Network attached storage.
    SmbStorageModel:
      allOf:
      - $ref: '#/components/schemas/RepositoryModel'
      - $ref: '#/components/schemas/SmbStorageSpec_allOf'
      description: Network attached storage.
    ProxiesFilters:
      properties:
        skip:
          format: int32
          type: integer
        limit:
          format: int32
          type: integer
        orderColumn:
          $ref: '#/components/schemas/EProxiesFiltersOrderColumn'
        orderAsc:
          type: boolean
        nameFilter:
          type: string
        typeFilter:
          $ref: '#/components/schemas/EProxyType'
        hostIdFilter:
          format: uuid
          type: string
      type: object
    EProxiesFiltersOrderColumn:
      enum:
      - Name
      - Type
      - Description
      type: string
    ProxiesResult:
      example:
        pagination:
          total: 6
          count: 1
          limit: 5
          skip: 5
        data:
        - name: name
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - name: name
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        data:
          description: Array of backup proxies.
          items:
            $ref: '#/components/schemas/ProxyModel'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
      - data
      - pagination
      type: object
    ProxySpec:
      discriminator:
        mapping:
          ViProxy: '#/components/schemas/ViProxySpec'
        propertyName: type
      example:
        description: description
      properties:
        description:
          description: Description of the backup proxy.
          type: string
        type:
          $ref: '#/components/schemas/EProxyType'
      required:
      - description
      - type
      type: object
    ViProxySpec:
      allOf:
      - $ref: '#/components/schemas/ProxySpec'
      - $ref: '#/components/schemas/ViProxySpec_allOf'
    EProxyType:
      description: Type of the backup proxy.
      enum:
      - ViProxy
      type: string
    ProxyModel:
      discriminator:
        mapping:
          ViProxy: '#/components/schemas/ViProxyModel'
        propertyName: type
      example:
        name: name
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          description: ID of the backup proxy.
          format: uuid
          type: string
        name:
          description: Name of the backup proxy.
          type: string
        description:
          description: Description of the backup proxy.
          type: string
        type:
          $ref: '#/components/schemas/EProxyType'
      required:
      - description
      - id
      - name
      - type
      type: object
    ViProxyModel:
      allOf:
      - $ref: '#/components/schemas/ProxyModel'
      - $ref: '#/components/schemas/ViProxySpec_allOf'
    EBackupProxyTransportMode:
      description: Transport mode of the backup proxy.
      enum:
      - auto
      - directAccess
      - virtualAppliance
      - network
      type: string
    ProxyServerSettingsModel:
      description: Server settings for the backup proxy.
      properties:
        hostId:
          description: ID of the server.
          format: uuid
          type: string
        transportMode:
          $ref: '#/components/schemas/EBackupProxyTransportMode'
        failoverToNetwork:
          description: |
            [For the Direct storage access and Virtual appliance transport modes] If *true*, Veeam Backup & Replication failovers to the network transport mode in case the primary mode fails or is unavailable.
          type: boolean
        hostToProxyEncryption:
          description: |
            [For the Network mode] If *true*, VM data is transferred over an encrypted TLS connection.
          type: boolean
        connectedDatastores:
          $ref: '#/components/schemas/ProxyDatastoreSettingsModel'
        maxTaskCount:
          description: Maximum number of concurrent tasks.
          type: integer
      required:
      - hostId
      type: object
    ProxyDatastoreSettingsModel:
      description: Datastores to which the backup proxy has a direct SAN or NFS connection.
      example:
        autoSelect: true
        datastores:
        - datastore:
            hostName: hostName
            name: name
            objectId: objectId
          vmCount: 0
        - datastore:
            hostName: hostName
            name: name
            objectId: objectId
          vmCount: 0
      properties:
        autoSelect:
          description: If *true*, all datastores that the backup proxy can access
            are detected automatically.
          type: boolean
        datastores:
          description: Array of datastores to which the backup proxy has a direct
            SAN or NFS connection.
          items:
            $ref: '#/components/schemas/ProxyDatastoreModel'
          type: array
      required:
      - autoSelect
      type: object
    ProxyDatastoreModel:
      example:
        datastore:
          hostName: hostName
          name: name
          objectId: objectId
        vmCount: 0
      properties:
        datastore:
          $ref: '#/components/schemas/VmwareObjectModel'
        vmCount:
          description: Number of VMs.
          type: integer
      type: object
    GlobalNetworkTrafficRulesModel:
      example:
        trafficRules:
        - throttlingWindowOptions:
            days:
            - hours: hours
            - hours: hours
          encryptionEnabled: true
          sourceIPEnd: sourceIPEnd
          throttlingWindowEnabled: true
          throttlingEnabled: true
          targetIPStart: targetIPStart
          name: name
          throttlingValue: 6
          targetIPEnd: targetIPEnd
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sourceIPStart: sourceIPStart
        - throttlingWindowOptions:
            days:
            - hours: hours
            - hours: hours
          encryptionEnabled: true
          sourceIPEnd: sourceIPEnd
          throttlingWindowEnabled: true
          throttlingEnabled: true
          targetIPStart: targetIPStart
          name: name
          throttlingValue: 6
          targetIPEnd: targetIPEnd
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sourceIPStart: sourceIPStart
        preferredNetworks:
          isEnabled: true
          networks:
          - ipAddress: ipAddress
            subnetMask: subnetMask
            cidrNotation: cidrNotation
          - ipAddress: ipAddress
            subnetMask: subnetMask
            cidrNotation: cidrNotation
        uploadStreamsCount: 0
        useMultipleStreamsPerJob: true
      properties:
        useMultipleStreamsPerJob:
          description: If *true*, Veeam Backup & Replication uses multiple TCP/IP
            transfer connection for every job session.
          type: boolean
        uploadStreamsCount:
          description: Number of TCP/IP connections per job.
          format: integer
          type: integer
        trafficRules:
          description: Array of traffic rules.
          items:
            $ref: '#/components/schemas/TrafficRuleModel'
          type: array
        preferredNetworks:
          $ref: '#/components/schemas/PreferredNetworksModel'
      required:
      - useMultipleStreamsPerJob
      type: object
    TrafficRuleModel:
      example:
        throttlingWindowOptions:
          days:
          - hours: hours
          - hours: hours
        encryptionEnabled: true
        sourceIPEnd: sourceIPEnd
        throttlingWindowEnabled: true
        throttlingEnabled: true
        targetIPStart: targetIPStart
        name: name
        throttlingValue: 6
        targetIPEnd: targetIPEnd
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        sourceIPStart: sourceIPStart
      properties:
        id:
          description: ID of the rule.
          format: uuid
          type: string
        name:
          description: Name of the rule.
          type: string
        sourceIPStart:
          description: Start IP address of the range for the backup infrastructure
            components on the source side.
          type: string
        sourceIPEnd:
          description: End IP address of the range for the backup infrastructure components
            on the source side.
          type: string
        targetIPStart:
          description: Start IP address of the range for the backup infrastructure
            components on the target side.
          type: string
        targetIPEnd:
          description: End IP address of the range for the backup infrastructure components
            on the target side.
          type: string
        encryptionEnabled:
          description: If *true*, traffic encryption is enabled.
          type: boolean
        throttlingEnabled:
          description: If *true*, traffic throttling is enabled.
          type: boolean
        throttlingUnit:
          $ref: '#/components/schemas/ESpeedUnit'
        throttlingValue:
          description: Maximum speed that must be used to transfer data from source
            to target.
          format: int32
          type: integer
        throttlingWindowEnabled:
          description: If *true*, throttling window during which the speed must be
            limited is enabled.
          type: boolean
        throttlingWindowOptions:
          $ref: '#/components/schemas/BackupWindowSettingModel'
      required:
      - name
      - sourceIPEnd
      - sourceIPStart
      - targetIPEnd
      - targetIPStart
      type: object
    ESpeedUnit:
      description: Traffic speed unit.
      enum:
      - KbytePerSec
      - MbitPerSpec
      - MbytePerSec
      type: string
    PreferredNetworksModel:
      description: Preferred networks used for backup and replication traffic.
      example:
        isEnabled: true
        networks:
        - ipAddress: ipAddress
          subnetMask: subnetMask
          cidrNotation: cidrNotation
        - ipAddress: ipAddress
          subnetMask: subnetMask
          cidrNotation: cidrNotation
      properties:
        isEnabled:
          description: If *true*, prefered networks are enabled.
          type: boolean
        networks:
          description: Array of networks.
          items:
            $ref: '#/components/schemas/PreferredNetworkModel'
          type: array
      required:
      - isEnabled
      type: object
    PreferredNetworkModel:
      example:
        ipAddress: ipAddress
        subnetMask: subnetMask
        cidrNotation: cidrNotation
      properties:
        ipAddress:
          description: IP address.
          type: string
        subnetMask:
          description: Subnet mask.
          type: string
        cidrNotation:
          description: CIDR notation.
          type: string
      type: object
    JobStatesFilters:
      description: Filters jobs by the specified parameters.
      properties:
        skip:
          description: Skips the specified number of jobs.
          format: int32
          type: integer
        limit:
          description: Returns the specified number of jobs.
          format: int32
          type: integer
        orderColumn:
          $ref: '#/components/schemas/EJobStatesFiltersOrderColumn'
        orderAsc:
          description: Sorts jobs in the ascending order by the `orderColumn` parameter.
          type: boolean
        idFilter:
          format: uuid
          type: string
        nameFilter:
          description: Filters jobs by the `nameFilter` pattern. The pattern can match
            any job state parameter. To substitute one or more characters, use the
            asterisk (*) character at the beginning and/or at the end.
          type: string
        typeFilter:
          $ref: '#/components/schemas/EJobType'
        lastResultFilter:
          $ref: '#/components/schemas/ESessionResult'
        statusFilter:
          $ref: '#/components/schemas/EJobStatus'
        workloadFilter:
          $ref: '#/components/schemas/EJobWorkload'
        lastRunAfterFilter:
          format: date-time
          type: string
        lastRunBeforeFilter:
          format: date-time
          type: string
        isHighPriorityJobFilter:
          type: boolean
        repositoryIdFilter:
          format: uuid
          type: string
        objectsCountFilter:
          type: integer
      type: object
    EJobStatesFiltersOrderColumn:
      description: Orders job states by the specified column.
      enum:
      - Name
      - Type
      - Status
      - LastRun
      - LastResult
      - NextRun
      - Description
      - RepositoryId
      - ObjectsCount
      type: string
    EJobStatus:
      description: Current status of the job.
      enum:
      - running
      - inactive
      - disabled
      type: string
    EJobWorkload:
      description: Workload which the job must process.
      enum:
      - application
      - cloudVm
      - file
      - server
      - workstation
      - vm
      type: string
    JobStatesResult:
      example:
        pagination:
          total: 6
          count: 1
          limit: 5
          skip: 5
        data:
        - lastRun: 2000-01-23T04:56:07.000+00:00
          description: description
          sessionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          repositoryName: repositoryName
          nextRun: 2000-01-23T04:56:07.000+00:00
          name: name
          repositoryId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          objectsCount: 0
        - lastRun: 2000-01-23T04:56:07.000+00:00
          description: description
          sessionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          repositoryName: repositoryName
          nextRun: 2000-01-23T04:56:07.000+00:00
          name: name
          repositoryId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          objectsCount: 0
      properties:
        data:
          description: Array of job states.
          items:
            $ref: '#/components/schemas/JobStateModel'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
      - data
      - pagination
      type: object
    JobStateModel:
      example:
        lastRun: 2000-01-23T04:56:07.000+00:00
        description: description
        sessionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        repositoryName: repositoryName
        nextRun: 2000-01-23T04:56:07.000+00:00
        name: name
        repositoryId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        objectsCount: 0
      properties:
        id:
          description: ID of the job.
          format: uuid
          type: string
        name:
          description: Name of the job.
          type: string
        type:
          $ref: '#/components/schemas/EJobType'
        description:
          description: Description of the job.
          type: string
        status:
          $ref: '#/components/schemas/EJobStatus'
        lastRun:
          description: Last run of the job.
          format: date-time
          type: string
        lastResult:
          $ref: '#/components/schemas/ESessionResult'
        nextRun:
          description: Next run of the job.
          format: date-time
          type: string
        workload:
          $ref: '#/components/schemas/EJobWorkload'
        repositoryId:
          description: ID of the backup repository.
          format: uuid
          type: string
        repositoryName:
          description: Name of the backup repository.
          type: string
        objectsCount:
          description: Number of objects processed by the job.
          type: integer
        sessionId:
          description: ID of the last job session.
          format: uuid
          type: string
      required:
      - description
      - id
      - lastResult
      - name
      - objectsCount
      - status
      - type
      - workload
      type: object
    JobsFilters:
      description: Filters jobs by the specified parameters.
      properties:
        skip:
          description: Skips the specified number of jobs.
          format: int32
          type: integer
        limit:
          description: Returns the specified number of jobs.
          format: int32
          type: integer
        orderColumn:
          $ref: '#/components/schemas/EJobFiltersOrderColumn'
        orderAsc:
          description: Sorts jobs in the ascending order by the `orderColumn` parameter.
          type: boolean
        nameFilter:
          description: Filters jobs by the `nameFilter` pattern. The pattern can match
            any job parameter. To substitute one or more characters, use the asterisk
            (*) character at the beginning and/or at the end.
          type: string
        typeFilter:
          $ref: '#/components/schemas/EJobType'
      type: object
    EJobFiltersOrderColumn:
      description: Orders jobs by the specified column.
      enum:
      - Name
      - Type
      - Description
      type: string
    JobsResult:
      example:
        pagination:
          total: 6
          count: 1
          limit: 5
          skip: 5
        data:
        - name: name
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          isDisabled: true
        - name: name
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          isDisabled: true
      properties:
        data:
          description: Array of jobs.
          items:
            $ref: '#/components/schemas/JobModel'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
      - data
      - pagination
      type: object
    JobModel:
      discriminator:
        mapping:
          Backup: '#/components/schemas/BackupJobModel'
        propertyName: type
      example:
        name: name
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        isDisabled: true
      properties:
        id:
          description: ID of the job.
          format: uuid
          type: string
        name:
          description: Name of the job.
          type: string
        description:
          description: Description of the job.
          type: string
        type:
          $ref: '#/components/schemas/EJobType'
        isDisabled:
          description: If *true*, the job is disabled.
          type: boolean
      required:
      - description
      - id
      - isDisabled
      - name
      - type
      type: object
    EJobType:
      description: Type of the job.
      enum:
      - Backup
      type: string
    JobStartSpec:
      example:
        performActiveFull: false
        startChainedJobs: false
      properties:
        performActiveFull:
          default: false
          type: boolean
        startChainedJobs:
          default: false
          type: boolean
      required:
      - performActiveFull
      type: object
    JobStopSpec:
      example:
        gracefullStop: true
      properties:
        gracefullStop:
          default: true
          type: boolean
      required:
      - gracefullStop
      type: object
    JobSpec:
      discriminator:
        mapping:
          Backup: '#/components/schemas/BackupJobSpec'
        propertyName: type
      example:
        name: name
        description: description
      properties:
        name:
          description: Name of the job.
          type: string
        description:
          description: Job description specified at the time of the job creation.
          type: string
        type:
          $ref: '#/components/schemas/EJobType'
      required:
      - description
      - name
      - type
      type: object
    BackupJobSpec:
      allOf:
      - $ref: '#/components/schemas/JobSpec'
      - $ref: '#/components/schemas/BackupJobSpec_allOf'
    BackupJobVirtualMachinesSpec:
      example:
        excludes:
          disks:
          - vmObject:
              hostName: hostName
              name: name
              objectId: objectId
            removeFromVMConfiguration: true
            disks:
            - disks
            - disks
          - vmObject:
              hostName: hostName
              name: name
              objectId: objectId
            removeFromVMConfiguration: true
            disks:
            - disks
            - disks
          templates:
            isEnabled: true
            excludeFromIncremental: true
          vms:
          - hostName: hostName
            name: name
            objectId: objectId
          - hostName: hostName
            name: name
            objectId: objectId
        includes:
        - hostName: hostName
          name: name
          objectId: objectId
        - hostName: hostName
          name: name
          objectId: objectId
      properties:
        includes:
          items:
            $ref: '#/components/schemas/VmwareObjectModel'
          type: array
        excludes:
          $ref: '#/components/schemas/BackupJobExclusionsSpec'
      required:
      - includes
      type: object
    BackupJobExclusionsSpec:
      example:
        disks:
        - vmObject:
            hostName: hostName
            name: name
            objectId: objectId
          removeFromVMConfiguration: true
          disks:
          - disks
          - disks
        - vmObject:
            hostName: hostName
            name: name
            objectId: objectId
          removeFromVMConfiguration: true
          disks:
          - disks
          - disks
        templates:
          isEnabled: true
          excludeFromIncremental: true
        vms:
        - hostName: hostName
          name: name
          objectId: objectId
        - hostName: hostName
          name: name
          objectId: objectId
      properties:
        vms:
          items:
            $ref: '#/components/schemas/VmwareObjectModel'
          type: array
        disks:
          items:
            $ref: '#/components/schemas/VmwareObjectDiskModel'
          type: array
        templates:
          $ref: '#/components/schemas/BackupJobExclusionsTemplates'
      type: object
    EVmwareInventoryType:
      description: Type of the VMware vSphere object.
      enum:
      - Unknown
      - VirtualMachine
      - vCenterServer
      - Datacenter
      - Cluster
      - Host
      - ResourcePool
      - Folder
      - Datastore
      - DatastoreCluster
      - StoragePolicy
      - Template
      - ComputeResource
      - VirtualApp
      - Tag
      - Category
      - Multitag
      type: string
    BackupJobStorageModel:
      description: Backup storage settings.
      properties:
        backupRepositoryId:
          description: ID of the backup repository.
          format: uuid
          type: string
        backupProxies:
          $ref: '#/components/schemas/BackupProxiesSettingsModel'
        retentionPolicy:
          $ref: '#/components/schemas/BackupJobRetentionPolicySettingsModel'
        gfsPolicy:
          $ref: '#/components/schemas/GFSPolicySettingsModel'
        advancedSettings:
          $ref: '#/components/schemas/BackupJobAdvancedSettingsModel'
      required:
      - backupProxies
      - backupRepositoryId
      - retentionPolicy
      type: object
    BackupProxiesSettingsModel:
      description: Backup proxy settings.
      properties:
        autoSelection:
          default: true
          description: If *true*, backup proxies are detected and assigned automatically.
          type: boolean
        proxyIds:
          description: Array of proxy IDs.
          items:
            format: uuid
            type: string
          type: array
          uniqueItems: true
      required:
      - autoSelection
      type: object
    BackupJobRetentionPolicySettingsModel:
      description: Retention policy settings.
      example:
        quantity: 0
      properties:
        type:
          $ref: '#/components/schemas/ERetentionPolicyType'
        quantity:
          description: Number of restore points or days to keep.
          type: integer
      required:
      - quantity
      - type
      type: object
    ERetentionPolicyType:
      description: Type of the retention policy.
      enum:
      - RestorePoints
      - Days
      type: string
    GFSPolicySettingsModel:
      description: GFS retention policy settings.
      example:
        isEnabled: true
        monthly:
          isEnabled: true
          keepForNumberOfMonths: 1
        yearly:
          isEnabled: true
          keepForNumberOfYears: 5
        weekly:
          keepForNumberOfWeeks: 6
          isEnabled: true
      properties:
        isEnabled:
          description: If *true*, the long-term (GFS) retention policy is enabled.
          type: boolean
        weekly:
          $ref: '#/components/schemas/GFSPolicySettingsWeeklyModel'
        monthly:
          $ref: '#/components/schemas/GFSPolicySettingsMonthlyModel'
        yearly:
          $ref: '#/components/schemas/GFSPolicySettingsYearlyModel'
      required:
      - isEnabled
      type: object
    GFSPolicySettingsWeeklyModel:
      description: Weekly GFS retention policy.
      example:
        keepForNumberOfWeeks: 6
        isEnabled: true
      properties:
        isEnabled:
          description: If *true*, the weekly GFS retention policy is enabled.
          type: boolean
        keepForNumberOfWeeks:
          description: Number of weeks to keep full backups for archival purposes.
          type: integer
        desiredTime:
          $ref: '#/components/schemas/EDayOfWeek'
      required:
      - isEnabled
      type: object
    GFSPolicySettingsMonthlyModel:
      description: Monthly GFS retention policy.
      example:
        isEnabled: true
        keepForNumberOfMonths: 1
      properties:
        isEnabled:
          description: If *true*, the monthly GFS retention policy is enabled.
          type: boolean
        keepForNumberOfMonths:
          description: Number of months to keep full backups for archival purposes.
          type: integer
        desiredTime:
          $ref: '#/components/schemas/ESennightOfMonth'
      required:
      - isEnabled
      type: object
    GFSPolicySettingsYearlyModel:
      description: Yearly GFS retention policy.
      example:
        isEnabled: true
        keepForNumberOfYears: 5
      properties:
        isEnabled:
          description: If *true*, the yearly GFS retention policy is enabled.
          type: boolean
        keepForNumberOfYears:
          description: Number of years to keep full backups for archival purposes.
          type: integer
        desiredTime:
          $ref: '#/components/schemas/EMonth'
      required:
      - isEnabled
      type: object
    BackupJobAdvancedSettingsModel:
      description: Advanced settings of the backup job.
      example:
        storageData:
          encryption:
            isEnabled: true
            encryptionPasswordTag: encryptionPasswordTag
            encryptionPasswordIdOrNull: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          excludeDeletedFileBlocks: true
          enableInlineDataDedup: true
          excludeSwapFileBlocks: true
        fullBackupMaintenance:
          defragmentAndCompact:
            isEnabled: true
            monthly:
              months:
              - null
              - null
              isEnabled: true
              dayOfMonths: 5
            weekly:
              isEnabled: false
              days:
              - null
              - null
          RemoveData:
            isEnabled: true
            afterDays: 2
        activeFulls:
          isEnabled: true
          monthly:
            months:
            - null
            - null
            isEnabled: true
            dayOfMonths: 5
          weekly:
            isEnabled: false
            days:
            - null
            - null
        synthenticFulls:
          isEnabled: true
          days:
          - null
          - null
        backupHealth:
          isEnabled: true
          monthly:
            months:
            - null
            - null
            isEnabled: true
            dayOfMonths: 5
          weekly:
            isEnabled: false
            days:
            - null
            - null
        storageIntegration:
          limitProcessedVmCount: 7
          isEnabled: true
          failoverToStandardBackup: true
          limitProcessedVm: true
        scripts:
          postCommand:
            isEnabled: true
            command: command
          dayOfWeek:
          - null
          - null
          preCommand:
            isEnabled: true
            command: command
          runScriptEvery: 9
        notifications:
          emailNotifications:
            customNotificationSettings:
              notifyOnWarning: true
              subject: subject
              notifyOnError: true
              SuppressNotificationUntilLastRetry: true
              notifyOnSuccess: true
            recipients:
            - recipients
            - recipients
            isEnabled: true
          sendSNMPNotifications: true
          vmAttribute:
            notes: notes
            appendToExisitingValue: true
            isEnabled: true
        vSphere:
          enableVMWareToolsQuiescence: true
          changedBlockTracking:
            enableCBTautomatically: true
            isEnabled: true
            resetCBTonActiveFull: true
      properties:
        backupModeType:
          $ref: '#/components/schemas/EBackupModeType'
        synthenticFulls:
          $ref: '#/components/schemas/SyntheticFullSettingsModel'
        activeFulls:
          $ref: '#/components/schemas/ActiveFullSettingsModel'
        backupHealth:
          $ref: '#/components/schemas/BackupHealthCheckSettingsModels'
        fullBackupMaintenance:
          $ref: '#/components/schemas/FullBackupMaintenanceModel'
        storageData:
          $ref: '#/components/schemas/BackupStorageSettingModel'
        notifications:
          $ref: '#/components/schemas/NotificationSettingsModel'
        vSphere:
          $ref: '#/components/schemas/BackupJobAdvancedSettingsVSphereModel'
        storageIntegration:
          $ref: '#/components/schemas/PrimaryStorageIntegrationSettingsModel'
        scripts:
          $ref: '#/components/schemas/JobScriptsSettingsModel'
      required:
      - backupModeType
      type: object
    JobScriptsSettingsModel:
      description: Script settings.
      example:
        postCommand:
          isEnabled: true
          command: command
        dayOfWeek:
        - null
        - null
        preCommand:
          isEnabled: true
          command: command
        runScriptEvery: 9
      properties:
        preCommand:
          $ref: '#/components/schemas/ScriptCommand'
        postCommand:
          $ref: '#/components/schemas/ScriptCommand'
        periodicityType:
          $ref: '#/components/schemas/EScriptPeriodicityType'
        runScriptEvery:
          description: Number of the backup job session after which the scripts must
            be executed.
          type: integer
        dayOfWeek:
          description: Days of the week when the scripts must be executed.
          items:
            $ref: '#/components/schemas/EDayOfWeek'
          type: array
          uniqueItems: true
      type: object
    ScriptCommand:
      description: Script settings.
      example:
        isEnabled: true
        command: command
      properties:
        isEnabled:
          description: If *true*, script execution is enabled.
          type: boolean
        command:
          description: Path to the script.
          type: string
      required:
      - isEnabled
      type: object
    EScriptPeriodicityType:
      description: Type of script periodicity.
      enum:
      - Days
      - BackupSessions
      type: string
    PrimaryStorageIntegrationSettingsModel:
      description: Primary storage integration settings for the backup job.
      example:
        limitProcessedVmCount: 7
        isEnabled: true
        failoverToStandardBackup: true
        limitProcessedVm: true
      properties:
        isEnabled:
          description: If *true*, the primary storage integration is enabled. In this
            case, storage snapshots (instead of VM snapshots) are used for VM data
            processing.
          type: boolean
        limitProcessedVm:
          description: If *true*, the number of processed VMs per storage snapshot
            is limited.
          type: boolean
        limitProcessedVmCount:
          description: Number of processed VMs per storage snapshot.
          type: integer
        failoverToStandardBackup:
          description: If *true*, failover to the regular VM processing mode is enabled.
            In this case, if backup from storage snapshot fails, VM snapshots are
            used.
          type: boolean
      required:
      - isEnabled
      type: object
    BackupJobAdvancedSettingsVSphereModel:
      description: VMware vSphere settings for the backup job.
      example:
        enableVMWareToolsQuiescence: true
        changedBlockTracking:
          enableCBTautomatically: true
          isEnabled: true
          resetCBTonActiveFull: true
      properties:
        enableVMWareToolsQuiescence:
          description: If *true*, VMware Tools quiescence is enabled for freezing
            the VM file system and application data.
          type: boolean
        changedBlockTracking:
          $ref: '#/components/schemas/VSphereChangedBlockTrackingSettingsModel'
      type: object
    VSphereChangedBlockTrackingSettingsModel:
      description: CBT settings for the backup job.
      example:
        enableCBTautomatically: true
        isEnabled: true
        resetCBTonActiveFull: true
      properties:
        isEnabled:
          description: If *true*, CBT data is used.
          type: boolean
        enableCBTautomatically:
          description: If *true*, CBT is enabled for all processed VMs even if CBT
            is disabled in VM configuration. CBT is used for VMs with virtual hardware
            version 7 or later. These VMs must not have existing snapshots.
          type: boolean
        resetCBTonActiveFull:
          description: If *true*, CBT is reset before creating active full backups.
          type: boolean
      required:
      - isEnabled
      type: object
    NotificationSettingsModel:
      description: Notification settings for the backup job.
      example:
        emailNotifications:
          customNotificationSettings:
            notifyOnWarning: true
            subject: subject
            notifyOnError: true
            SuppressNotificationUntilLastRetry: true
            notifyOnSuccess: true
          recipients:
          - recipients
          - recipients
          isEnabled: true
        sendSNMPNotifications: true
        vmAttribute:
          notes: notes
          appendToExisitingValue: true
          isEnabled: true
      properties:
        sendSNMPNotifications:
          description: If *true*, SNMP notifications are enabled for this job.
          type: boolean
        emailNotifications:
          $ref: '#/components/schemas/EmailNotificationSettingsModel'
        vmAttribute:
          $ref: '#/components/schemas/NotificationVmAttributeSettingsModel'
      type: object
    EmailNotificationSettingsModel:
      description: Email notification settings for the backup job.
      example:
        customNotificationSettings:
          notifyOnWarning: true
          subject: subject
          notifyOnError: true
          SuppressNotificationUntilLastRetry: true
          notifyOnSuccess: true
        recipients:
        - recipients
        - recipients
        isEnabled: true
      properties:
        isEnabled:
          description: If *true*, email notifications are enabled for this job.
          type: boolean
        recipients:
          description: Array of recipient’s email addresses.
          items:
            type: string
          type: array
          uniqueItems: true
        notificationType:
          $ref: '#/components/schemas/EEmailNotificationType'
        customNotificationSettings:
          $ref: '#/components/schemas/EmailCustomNotificationType'
      required:
      - isEnabled
      type: object
    EEmailNotificationType:
      description: |
        Type of email notification settings: global notification settings specified for the backup server, or custom notification settings specified for this job.
      enum:
      - UseGlobalNotificationSettings
      - UseCustomNotificationSettings
      type: string
    EmailCustomNotificationType:
      example:
        notifyOnWarning: true
        subject: subject
        notifyOnError: true
        SuppressNotificationUntilLastRetry: true
        notifyOnSuccess: true
      properties:
        subject:
          description: |
            Notification subject. Use the following variables in the subject: *%Time%* (completion time), *%JobName%*, *%JobResult%*, *%ObjectCount%* (number of VMs in the job) and *%Issues%* (number of VMs in the job that have finished with the Warning or Failed status).
          type: string
        notifyOnSuccess:
          description: If *true*, email notifications are sent when the job completes
            successfully.
          type: boolean
        notifyOnWarning:
          description: If *true*, email notifications are sent when the job completes
            with a warning.
          type: boolean
        notifyOnError:
          description: If *true*, email notifications are sent when the job fails.
          type: boolean
        SuppressNotificationUntilLastRetry:
          description: If *true*, email notifications are sent about the final job
            status only (not per every job retry).
          type: boolean
      type: object
    NotificationVmAttributeSettingsModel:
      description: VM attribute settings.
      example:
        notes: notes
        appendToExisitingValue: true
        isEnabled: true
      properties:
        isEnabled:
          description: If *true*, information about successfully performed backup
            is written to a VM attribute.
          type: boolean
        notes:
          description: Name of the VM attribute.
          type: string
        appendToExisitingValue:
          description: If *true*, information about successfully performed backup
            is appended to the existing value of the attribute added by the user.
          type: boolean
      required:
      - isEnabled
      type: object
    EBackupModeType:
      description: Type of the backup method used to create a restore point.
      enum:
      - Full
      - Incremental
      - ReverseIncremental
      - Transofrm
      - TransformForeverIncremental
      type: string
    SyntheticFullSettingsModel:
      description: Synthetic full backup settings.
      example:
        isEnabled: true
        days:
        - null
        - null
      properties:
        isEnabled:
          description: If *true*, synthetic full backups are enabled.
          type: boolean
        days:
          description: Days of the week when Veeam Backup & Replication creates a
            synthetic full backup.
          items:
            $ref: '#/components/schemas/EDayOfWeek'
          type: array
          uniqueItems: true
      required:
      - isEnabled
      type: object
    ActiveFullSettingsModel:
      description: Active full backup settings.
      example:
        isEnabled: true
        monthly:
          months:
          - null
          - null
          isEnabled: true
          dayOfMonths: 5
        weekly:
          isEnabled: false
          days:
          - null
          - null
      properties:
        isEnabled:
          description: If *true*, active full backups are enabled.
          type: boolean
        weekly:
          $ref: '#/components/schemas/AdvancedStorageScheduleWeeklyModel'
        monthly:
          $ref: '#/components/schemas/AdvancedStorageScheduleMonthlyModel'
      required:
      - isEnabled
      type: object
    AdvancedStorageScheduleWeeklyModel:
      description: Weekly schedule settings.
      example:
        isEnabled: false
        days:
        - null
        - null
      properties:
        isEnabled:
          default: false
          description: If *true*, the weekly schedule is enabled.
          type: boolean
        days:
          description: Days of the week when the operation is performed.
          items:
            $ref: '#/components/schemas/EDayOfWeek'
          type: array
          uniqueItems: true
      required:
      - isEnabled
      type: object
    AdvancedStorageScheduleMonthlyModel:
      description: Monthly schedule settings.
      example:
        months:
        - null
        - null
        isEnabled: true
        dayOfMonths: 5
      properties:
        isEnabled:
          description: If *true*, the monthly schedule is enabled.
          type: boolean
        dayOfWeek:
          $ref: '#/components/schemas/EDayOfWeek'
        dayNumberInMonth:
          $ref: '#/components/schemas/EDayNumberInMonth'
        dayOfMonths:
          description: Day of the month when the operation is performed.
          type: integer
        months:
          description: Months when the operation is performed.
          items:
            $ref: '#/components/schemas/EMonth'
          type: array
          uniqueItems: true
      required:
      - isEnabled
      type: object
    BackupHealthCheckSettingsModels:
      description: Health check settings for the for the latest restore point in the
        backup chain.
      example:
        isEnabled: true
        monthly:
          months:
          - null
          - null
          isEnabled: true
          dayOfMonths: 5
        weekly:
          isEnabled: false
          days:
          - null
          - null
      properties:
        isEnabled:
          description: If *true*, the health check is enabled.
          type: boolean
        weekly:
          $ref: '#/components/schemas/AdvancedStorageScheduleWeeklyModel'
        monthly:
          $ref: '#/components/schemas/AdvancedStorageScheduleMonthlyModel'
      required:
      - isEnabled
      type: object
    FullBackupMaintenanceModel:
      description: Maintenance settings for full backup files.
      example:
        defragmentAndCompact:
          isEnabled: true
          monthly:
            months:
            - null
            - null
            isEnabled: true
            dayOfMonths: 5
          weekly:
            isEnabled: false
            days:
            - null
            - null
        RemoveData:
          isEnabled: true
          afterDays: 2
      properties:
        RemoveData:
          $ref: '#/components/schemas/FullBackupMaintenanceRemoveDataModel'
        defragmentAndCompact:
          $ref: '#/components/schemas/FullBackupMaintenanceDefragmentAndCompactModel'
      type: object
    FullBackupMaintenanceRemoveDataModel:
      description: Backup data setting for deleted VMs.
      example:
        isEnabled: true
        afterDays: 2
      properties:
        isEnabled:
          description: If *true*, Veeam Backup & Replication keeps the backup data
            of deleted VMs for the `afterDays` number of days.
          type: boolean
        afterDays:
          description: Number of days.
          type: integer
      required:
      - isEnabled
      type: object
    FullBackupMaintenanceDefragmentAndCompactModel:
      description: Compact operation settings.
      example:
        isEnabled: true
        monthly:
          months:
          - null
          - null
          isEnabled: true
          dayOfMonths: 5
        weekly:
          isEnabled: false
          days:
          - null
          - null
      properties:
        isEnabled:
          description: If *true*, Veeam Backup & Replication compacts full backup
            files.
          type: boolean
        weekly:
          $ref: '#/components/schemas/AdvancedStorageScheduleWeeklyModel'
        monthly:
          $ref: '#/components/schemas/AdvancedStorageScheduleMonthlyModel'
      required:
      - isEnabled
      type: object
    BackupStorageSettingModel:
      description: Storage settings.
      example:
        encryption:
          isEnabled: true
          encryptionPasswordTag: encryptionPasswordTag
          encryptionPasswordIdOrNull: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        excludeDeletedFileBlocks: true
        enableInlineDataDedup: true
        excludeSwapFileBlocks: true
      properties:
        enableInlineDataDedup:
          description: If *true*, Veeam Backup & Replication deduplicates VM data
            before storing it in the backup repository.
          type: boolean
        excludeSwapFileBlocks:
          description: If *true*, Veeam Backup & Replication excludes swap file blocks
            from processing.
          type: boolean
        excludeDeletedFileBlocks:
          description: If *true*, Veeam Backup & Replication does not copy deleted
            file blocks.
          type: boolean
        compressionLevel:
          $ref: '#/components/schemas/ECompressionLevel'
        storageOptimization:
          $ref: '#/components/schemas/EStorageOptimization'
        encryption:
          $ref: '#/components/schemas/BackupStorageSettingsEncryptionModel'
      type: object
    EStorageOptimization:
      description: Storage optimization that depends on the target type.
      enum:
      - Auto
      - LocalTargetLarge
      - LocalTarget
      - LANTarget
      - WANTarget
      - LocalTargetLarge8192
      - LocalTargetLarge4096
      type: string
    ECompressionLevel:
      description: Compression level.
      enum:
      - Auto
      - None
      - DedupFriendly
      - Optimal
      - High
      - Extreme
      type: string
    BackupStorageSettingsEncryptionModel:
      description: Encription of backup files.
      example:
        isEnabled: true
        encryptionPasswordTag: encryptionPasswordTag
        encryptionPasswordIdOrNull: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        isEnabled:
          description: If *true*, the content of backup files is encrypted.
          type: boolean
        encryptionPasswordIdOrNull:
          description: ID of the password used for encryption. The value is *null*
            for exported objects.
          format: uuid
          type: string
        encryptionPasswordTag:
          description: Tag used to identify the password.
          type: string
      required:
      - isEnabled
      type: object
    BackupJobGuestProcessingModel:
      description: Guest processing settings.
      properties:
        appAwareProcessing:
          $ref: '#/components/schemas/BackupApplicationAwareProcessingModel'
        guestFSIndexing:
          $ref: '#/components/schemas/GuestFileSystemIndexingModel'
        guestInteractionProxies:
          $ref: '#/components/schemas/GuestInteractionProxiesSettingsModel'
        guestCredentials:
          $ref: '#/components/schemas/GuestOsCredentialsModel'
      required:
      - appAwareProcessing
      - guestFSIndexing
      type: object
    BackupApplicationAwareProcessingModel:
      description: Application-aware processing settings.
      properties:
        isEnabled:
          description: If *true*, application-aware processing is enabled.
          type: boolean
        appSettings:
          description: Array of VMware objects and their application settings.
          items:
            $ref: '#/components/schemas/BackupApplicationSettingsModel'
          type: array
      required:
      - isEnabled
      type: object
    BackupApplicationSettingsModel:
      properties:
        vmObject:
          $ref: '#/components/schemas/VmwareObjectModel'
        vss:
          $ref: '#/components/schemas/EApplicationSettingsVSS'
        usePersistentGuestAgent:
          description: If *true*, persistent guest agent is used.
          type: boolean
        transactionLogs:
          $ref: '#/components/schemas/ETransactionLogsSettings'
        sql:
          $ref: '#/components/schemas/BackupSQLSettingsModel'
        oracle:
          $ref: '#/components/schemas/BackupOracleSettingsModel'
        exclusions:
          $ref: '#/components/schemas/BackupFSExclusionsModel'
        scripts:
          $ref: '#/components/schemas/BackupScriptSettingsModel'
      required:
      - vmObject
      - vss
      type: object
    EApplicationSettingsVSS:
      description: Behavior scenario for application-aware processing.
      enum:
      - requireSuccess
      - ignoreFailures
      - disabled
      type: string
    ETransactionLogsSettings:
      description: |
        Transaction logs settings that define whether copy-only backups must be created or transaction logs for Microsoft Exchange, Microsoft SQL and Oracle VMs must be processed.</br>
        If transaction log processing is selected, specify the following parameters:</br>
        <ul>
        <li>[For Microsoft SQL Server VMs] Microsoft SQL Server transaction log settings</li>
        <li>[For Oracle VMs] Oracle archived log settings</li>
        </ul>
      enum:
      - process
      - copyOnly
      type: string
    BackupSQLSettingsModel:
      description: Microsoft SQL Server transaction log settings.
      properties:
        logsProcessing:
          $ref: '#/components/schemas/ESQLLogsProcessing'
        backupMinsCount:
          description: Frequency of transaction log backup, in minutes.
          type: integer
        retainLogBackups:
          $ref: '#/components/schemas/ERetainLogBackupsType'
        keepDaysCount:
          description: Number of days to keep transaction logs in the backup repository.
          type: integer
        logShippingServers:
          $ref: '#/components/schemas/BackupLogShippingServersModel'
      required:
      - logsProcessing
      type: object
    ESQLLogsProcessing:
      description: Type of transaction logs processing.
      enum:
      - truncate
      - preserve
      - backup
      - neverTruncate
      type: string
    ERetainLogBackupsType:
      description: Retention policy for the logs stored in the backup repository.
      enum:
      - untilBackupDeleted
      - KeepOnlyDays
      type: string
    BackupLogShippingServersModel:
      description: Log shipping server used to transport logs.
      properties:
        autoSelection:
          description: If *true*, Veeam Backup & Replication chooses an optimal log
            shipping server automatically.
          type: boolean
        shippingServerIds:
          description: Array of servers that are explicitly selected for log shipping.
          items:
            format: uuid
            type: string
          type: array
      required:
      - autoSelection
      type: object
    BackupOracleSettingsModel:
      description: Oracle archived log settings.
      properties:
        useGuestCredentials:
          description: If *true*, Veeam Backup & Replication uses credentials specified
            in the guest processing settings.
          type: boolean
        credentialsId:
          description: ID of the credentials record that is used if `useGuestCredentials`
            is *false*.
          format: uuid
          type: string
        archiveLogs:
          $ref: '#/components/schemas/EBackupOracleLogsSettings'
        deleteHoursCount:
          description: Time period in hours to keep archived logs. This parameter
            should be specified if the `EBackupOracleLogsSettings` value is *deleteExpiredHours*.
          type: integer
        deleteGBsCount:
          description: Maximum size for archived logs in GB. This parameter should
            be specified if the `EBackupOracleLogsSettings` value is *deleteExpiredGBs*.
          type: integer
        backupLogs:
          description: If *true*, archived logs are backed up.
          type: boolean
        backupMinsCount:
          description: Frequency of archived log backup, in minutes.
          type: integer
        retainLogBackups:
          $ref: '#/components/schemas/ERetainLogBackupsType'
        keepDaysCount:
          description: Number of days to keep archived logs.
          type: integer
        logShippingServers:
          $ref: '#/components/schemas/BackupLogShippingServersModel'
      required:
      - archiveLogs
      - useGuestCredentials
      type: object
    EBackupOracleLogsSettings:
      description: Type of archived logs processing.
      enum:
      - preserve
      - deleteExpiredHours
      - deleteExpiredGBs
      type: string
    BackupFSExclusionsModel:
      description: VM guest OS file exclusion.
      example:
        itemsList:
        - itemsList
        - itemsList
      properties:
        exclusionPolicy:
          $ref: '#/components/schemas/EBackupExclusionPolicy'
        itemsList:
          description: Array of files and folders. Full paths to files and folders,
            environmental variables and file masks with the asterisk (*) and question
            mark (?) characters can be used.
          items:
            type: string
          type: array
      required:
      - exclusionPolicy
      type: object
    EBackupExclusionPolicy:
      description: Exclusion policy.
      enum:
      - disabled
      - excludeOnly
      - includeOnly
      type: string
    BackupScriptSettingsModel:
      description: Pre-freeze and post-thaw scripts.
      example:
        windowsScripts:
          preFreezeScript: preFreezeScript
          postThawScript: postThawScript
        linuxScripts:
          preFreezeScript: preFreezeScript
          postThawScript: postThawScript
      properties:
        scriptProcessingMode:
          $ref: '#/components/schemas/EBackupScriptProcessingMode'
        windowsScripts:
          $ref: '#/components/schemas/BackupWindowsScriptModel'
        linuxScripts:
          $ref: '#/components/schemas/BackupLinuxScriptModel'
      required:
      - scriptProcessingMode
      type: object
    EBackupScriptProcessingMode:
      description: Scenario for scripts execution.
      enum:
      - disableExec
      - ignoreExecFailures
      - requireSuccess
      type: string
    BackupWindowsScriptModel:
      description: Paths to pre-freeze and post-thaw scripts for Microsoft Windows
        VMs.
      example:
        preFreezeScript: preFreezeScript
        postThawScript: postThawScript
      properties:
        preFreezeScript:
          description: Path to a pre-freeze script.
          type: string
        postThawScript:
          description: Path to a post-thaw script.
          type: string
      type: object
    BackupLinuxScriptModel:
      description: Paths to pre-freeze and post-thaw scripts for Linux VMs.
      example:
        preFreezeScript: preFreezeScript
        postThawScript: postThawScript
      properties:
        preFreezeScript:
          description: Path to a pre-freeze script.
          type: string
        postThawScript:
          description: Path to a post-thaw script.
          type: string
      type: object
    GuestFileSystemIndexingModel:
      description: VM guest OS file indexing.
      example:
        indexingSettings:
        - vmObject:
            hostName: hostName
            name: name
            objectId: objectId
          WindowsIndexing:
            indexingList:
            - indexingList
            - indexingList
          LinuxIndexing:
            indexingList:
            - indexingList
            - indexingList
        - vmObject:
            hostName: hostName
            name: name
            objectId: objectId
          WindowsIndexing:
            indexingList:
            - indexingList
            - indexingList
          LinuxIndexing:
            indexingList:
            - indexingList
            - indexingList
        isEnabled: true
      properties:
        isEnabled:
          type: boolean
        indexingSettings:
          description: Array of VMs with guest OS file indexing options.
          items:
            $ref: '#/components/schemas/BackupIndexingSettingsModel'
          type: array
      required:
      - isEnabled
      type: object
    BackupIndexingSettingsModel:
      example:
        vmObject:
          hostName: hostName
          name: name
          objectId: objectId
        WindowsIndexing:
          indexingList:
          - indexingList
          - indexingList
        LinuxIndexing:
          indexingList:
          - indexingList
          - indexingList
      properties:
        vmObject:
          $ref: '#/components/schemas/VmwareObjectModel'
        WindowsIndexing:
          $ref: '#/components/schemas/BackupObjectIndexingModel'
        LinuxIndexing:
          $ref: '#/components/schemas/BackupObjectIndexingModel'
      required:
      - vmObject
      type: object
    BackupObjectIndexingModel:
      description: Guest OS indexing options for the VM.
      example:
        indexingList:
        - indexingList
        - indexingList
      properties:
        guestFSIndexingMode:
          $ref: '#/components/schemas/EGuestFSIndexingMode'
        indexingList:
          description: Array of folders. Environmental variables and full paths to
            folders can be used.
          items:
            type: string
          type: array
      required:
      - guestFSIndexingMode
      type: object
    EGuestFSIndexingMode:
      description: Indexing mode.
      enum:
      - disable
      - indexAll
      - indexAllExcept
      - indexOnly
      type: string
    EGuestOSType:
      description: Type of the guest OS.
      enum:
      - Windows
      - Linux
      type: string
    GuestInteractionProxiesSettingsModel:
      description: Guest interaction proxy used to deploy the runtime process on the
        VM guest OS.
      properties:
        autoSelection:
          default: true
          description: If *true*, Veeam Backup & Replication automatically selects
            the guest interaction proxy.
          type: boolean
        proxyIds:
          description: Array of proxies specified explicitly. The array must contain
            Microsoft Windows servers added to the backup infrastructure only.
          items:
            format: uuid
            type: string
          type: array
          uniqueItems: true
      required:
      - autoSelection
      type: object
    GuestOsCredentialsModel:
      description: VM custom credentials.
      properties:
        credsId:
          description: Credentials ID for Microsoft Windows VMs.
          format: uuid
          type: string
        credsType:
          $ref: '#/components/schemas/ECredentialsType'
        credentialsPerMachine:
          description: Individual credentials for VMs.
          items:
            $ref: '#/components/schemas/GuestOsCredentialsPerMachineModel'
          type: array
          uniqueItems: true
      required:
      - credsId
      - credsType
      type: object
    GuestOsCredentialsPerMachineModel:
      properties:
        windowsCredsId:
          description: Credentials ID for a Microsoft Windows VM.
          format: uuid
          type: string
        linuxCredsId:
          description: Credentials ID for a Linux VM.
          format: uuid
          type: string
        vmObject:
          $ref: '#/components/schemas/VmwareObjectModel'
      required:
      - vmObject
      type: object
    ECredentialsType:
      description: Credentials type.
      enum:
      - Standard
      - Linux
      type: string
    BackupScheduleModel:
      description: Job scheduling options.
      example:
        runAutomatically: false
        daily:
          localTime: localTime
          isEnabled: true
          days:
          - null
          - null
        monthly:
          localTime: localTime
          months:
          - null
          - null
          dayOfMonth: 6
          isEnabled: false
        periodically:
          startTimeWithinAnHour: 6
          isEnabled: false
          backupWindow:
            days:
            - hours: hours
            - hours: hours
          frequency: 1
        continuously:
          isEnabled: false
          backupWindow:
            days:
            - hours: hours
            - hours: hours
        backupWindow:
          isEnabled: false
          backupWindow:
            days:
            - hours: hours
            - hours: hours
        retry:
          retryCount: 7
          isEnabled: false
          awaitMinutes: 1
        afterThisJob:
          jobName: jobName
          isEnabled: true
      properties:
        runAutomatically:
          default: false
          description: If *true*, job scheduling is enabled.
          type: boolean
        daily:
          $ref: '#/components/schemas/ScheduleDailyModel'
        monthly:
          $ref: '#/components/schemas/ScheduleMonthlyModel'
        periodically:
          $ref: '#/components/schemas/SchedulePeriodicallyModel'
        continuously:
          $ref: '#/components/schemas/ScheduleBackupWindowModel'
        afterThisJob:
          $ref: '#/components/schemas/ScheduleAfterThisJobModel'
        retry:
          $ref: '#/components/schemas/ScheduleRetryModel'
        backupWindow:
          $ref: '#/components/schemas/ScheduleBackupWindowModel'
      required:
      - runAutomatically
      type: object
    ScheduleAfterThisJobModel:
      description: Job chaining options.
      example:
        jobName: jobName
        isEnabled: true
      properties:
        isEnabled:
          description: If *true*, job chaining is enabled.
          type: boolean
        jobName:
          description: Name of the preceding job.
          type: string
      required:
      - isEnabled
      type: object
    ScheduleDailyModel:
      description: Daily scheduling options.
      example:
        localTime: localTime
        isEnabled: true
        days:
        - null
        - null
      properties:
        isEnabled:
          default: true
          description: If *true*, daily schedule is enabled.
          type: boolean
        localTime:
          description: Local time when the job must start.
          format: time
          type: string
        dailyKind:
          $ref: '#/components/schemas/EDailyKinds'
        days:
          description: Days of the week when the job must start.
          items:
            $ref: '#/components/schemas/EDayOfWeek'
          type: array
          uniqueItems: true
      required:
      - isEnabled
      type: object
    EDailyKinds:
      description: Kind of daily scheduling scheme.
      enum:
      - Everyday
      - WeekDays
      - SelectedDays
      type: string
    EDayOfWeek:
      enum:
      - monday
      - tuesday
      - wednesday
      - thursday
      - friday
      - saturday
      - sunday
      type: string
    ScheduleMonthlyModel:
      description: Monthly scheduling options.
      example:
        localTime: localTime
        months:
        - null
        - null
        dayOfMonth: 6
        isEnabled: false
      properties:
        isEnabled:
          default: false
          description: If *true*, monthly schedule is enabled.
          type: boolean
        localTime:
          description: Local time when the job must start.
          format: time
          type: string
        dayOfWeek:
          $ref: '#/components/schemas/EDayOfWeek'
        dayNumberInMonth:
          $ref: '#/components/schemas/EDayNumberInMonth'
        dayOfMonth:
          description: Day of the month when the job must start.
          type: integer
        months:
          description: Months when the job must start.
          items:
            $ref: '#/components/schemas/EMonth'
          type: array
          uniqueItems: true
      required:
      - isEnabled
      type: object
    EDayNumberInMonth:
      enum:
      - First
      - Second
      - Third
      - Fourth
      - Last
      - OnDay
      type: string
    EMonth:
      enum:
      - January
      - February
      - March
      - April
      - May
      - June
      - July
      - August
      - September
      - October
      - November
      - December
      type: string
    SchedulePeriodicallyModel:
      description: Periodic scheduling options.
      example:
        startTimeWithinAnHour: 6
        isEnabled: false
        backupWindow:
          days:
          - hours: hours
          - hours: hours
        frequency: 1
      properties:
        isEnabled:
          default: false
          description: If *true*, periodic schedule is enabled.
          type: boolean
        periodicallyKind:
          $ref: '#/components/schemas/EPeriodicallyKinds'
        frequency:
          description: Number of time units that defines the time interval.
          type: integer
        backupWindow:
          $ref: '#/components/schemas/BackupWindowSettingModel'
        startTimeWithinAnHour:
          type: integer
      required:
      - isEnabled
      type: object
    EPeriodicallyKinds:
      description: Time unit for periodic job scheduling.
      enum:
      - Hours
      - Minutes
      - Seconds
      - Days
      type: string
    ScheduleBackupWindowModel:
      example:
        isEnabled: false
        backupWindow:
          days:
          - hours: hours
          - hours: hours
      properties:
        isEnabled:
          default: false
          description: If *true*, periodic schedule is enabled.
          type: boolean
        backupWindow:
          $ref: '#/components/schemas/BackupWindowSettingModel'
      required:
      - isEnabled
      type: object
    BackupWindowDayHoursModel:
      description: Hourly scheme for a day.
      example:
        hours: hours
      properties:
        day:
          $ref: '#/components/schemas/EDayOfWeek'
        hours:
          description: |
            String of hours in the following format:
            *1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1*
            where *1* means enabled, *0* means disabled.
          type: string
      required:
      - day
      - hours
      type: object
    BackupWindowSettingModel:
      description: Time scheme.
      example:
        days:
        - hours: hours
        - hours: hours
      properties:
        days:
          description: Array of per-day schemes.
          items:
            $ref: '#/components/schemas/BackupWindowDayHoursModel'
          type: array
      required:
      - days
      type: object
    ScheduleRetryModel:
      description: Retry options.
      example:
        retryCount: 7
        isEnabled: false
        awaitMinutes: 1
      properties:
        isEnabled:
          default: false
          description: If *true*, retry options are enabled.
          type: boolean
        retryCount:
          description: Number of retries set for the job.
          type: integer
        awaitMinutes:
          description: Time interval between job retries in minutes.
          type: integer
      type: object
    ESennightOfMonth:
      description: Sennight of the month.
      enum:
      - First
      - Second
      - Third
      - Fourth
      - Fifth
      - Last
      type: string
    BackupJobModel:
      allOf:
      - $ref: '#/components/schemas/JobModel'
      - $ref: '#/components/schemas/BackupJobModel_allOf'
    BackupJobVirtualMachinesModel:
      properties:
        includes:
          description: Array of VM and VM containers processed by the job.
          items:
            $ref: '#/components/schemas/VmwareObjectSizeModel'
          type: array
        excludes:
          $ref: '#/components/schemas/BackupJobExclusions'
      required:
      - includes
      type: object
    BackupJobExclusions:
      properties:
        vms:
          description: Array of VMs excluded from the backup.
          items:
            $ref: '#/components/schemas/VmwareObjectSizeModel'
          type: array
        disks:
          description: Array of VM disks excluded from the backup.
          items:
            $ref: '#/components/schemas/VmwareObjectDiskModel'
          type: array
        templates:
          $ref: '#/components/schemas/BackupJobExclusionsTemplates'
      type: object
    BackupJobExclusionsTemplates:
      description: Array of VM templates excluded from the backup.
      example:
        isEnabled: true
        excludeFromIncremental: true
      properties:
        isEnabled:
          description: If *true*, the template is included into the backup.
          type: boolean
        excludeFromIncremental:
          description: If *true*, the template is excluded from the incremental backup.
          type: boolean
      type: object
    VmwareObjectDiskModel:
      example:
        vmObject:
          hostName: hostName
          name: name
          objectId: objectId
        removeFromVMConfiguration: true
        disks:
        - disks
        - disks
      properties:
        vmObject:
          $ref: '#/components/schemas/VmwareObjectModel'
        disksToProcess:
          $ref: '#/components/schemas/EVmwareDisksTypeToProcess'
        disks:
          description: Array of disks.
          items:
            description: ID of the disk.
            type: string
          type: array
        removeFromVMConfiguration:
          description: If *true*, the disk is removed from VM configuration.
          type: boolean
      required:
      - disks
      - disksToProcess
      - vmObject
      type: object
    EVmwareDisksTypeToProcess:
      description: Type of disk selection.
      enum:
      - AllDisks
      - SystemOnly
      - SelectedDisks
      type: string
    VmwareObjectSizeModel:
      example:
        size: size
        inventoryObject:
          hostName: hostName
          name: name
          objectId: objectId
      properties:
        inventoryObject:
          $ref: '#/components/schemas/VmwareObjectModel'
        size:
          description: Size used by the VMware vSphere object.
          type: string
      required:
      - inventoryObject
      type: object
    VmwareObjectModel:
      description: VMware object.
      example:
        hostName: hostName
        name: name
        objectId: objectId
      properties:
        hostName:
          description: Name of the host.
          type: string
        name:
          description: Name of the VMware vSphere object.
          type: string
        type:
          $ref: '#/components/schemas/EVmwareInventoryType'
        objectId:
          description: ID of the VMware vSphere object.
          type: string
      required:
      - hostName
      - name
      - type
      type: object
    CredentialsFilters:
      properties:
        skip:
          description: Number of credentials records to skip.
          format: int32
          type: integer
        limit:
          description: Maximum number of credentials records to return.
          format: int32
          type: integer
        orderColumn:
          $ref: '#/components/schemas/ECredentialsFiltersOrderColumn'
        orderAsc:
          description: Sorts credentials in the ascending order by the `orderColumn`
            parameter.
          type: boolean
        nameFilter:
          description: Filters credentials by the `nameFilter` pattern. The pattern
            can match any credentials parameter. To substitute one or more characters,
            use the asterisk (*) character at the beginning and/or at the end.
          type: string
      type: object
    ECredentialsFiltersOrderColumn:
      enum:
      - Username
      - Description
      type: string
    CredentialsResult:
      example:
        pagination:
          total: 6
          count: 1
          limit: 5
          skip: 5
        data:
        - creationTime: 2000-01-23T04:56:07.000+00:00
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          username: username
        - creationTime: 2000-01-23T04:56:07.000+00:00
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          username: username
      properties:
        data:
          description: Array of credentials.
          items:
            $ref: '#/components/schemas/CredentialsModel'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
      - data
      - pagination
      type: object
    CredentialsSpec:
      discriminator:
        mapping:
          Standard: '#/components/schemas/StandardCredentialsSpec'
          Linux: '#/components/schemas/LinuxCredentialsSpec'
        propertyName: type
      example:
        password: password
        description: description
        username: username
      properties:
        username:
          description: User name.
          type: string
        password:
          description: Password.
          type: string
        description:
          description: Description of the credentials record.
          type: string
        type:
          $ref: '#/components/schemas/ECredentialsType'
      required:
      - type
      - username
      type: object
    StandardCredentialsSpec:
      allOf:
      - $ref: '#/components/schemas/CredentialsSpec'
      - $ref: '#/components/schemas/StandardCredentialsSpec_allOf'
    LinuxCredentialsSpec:
      allOf:
      - $ref: '#/components/schemas/CredentialsSpec'
      - $ref: '#/components/schemas/LinuxCredentialsSpec_allOf'
    CredentialsModel:
      discriminator:
        mapping:
          Standard: '#/components/schemas/StandardCredentialsModel'
          Linux: '#/components/schemas/LinuxCredentialsModel'
        propertyName: type
      example:
        creationTime: 2000-01-23T04:56:07.000+00:00
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        username: username
      properties:
        id:
          description: ID of the credentials record.
          format: uuid
          type: string
        username:
          description: User name.
          type: string
        description:
          description: Description of the credentials record.
          type: string
        type:
          $ref: '#/components/schemas/ECredentialsType'
        creationTime:
          description: Date and time when the credentials were created.
          format: date-time
          type: string
      required:
      - creationTime
      - description
      - id
      - type
      - username
      type: object
    StandardCredentialsModel:
      allOf:
      - $ref: '#/components/schemas/CredentialsModel'
      - $ref: '#/components/schemas/StandardCredentialsSpec_allOf'
    CredentialsPasswordChangeSpec:
      example:
        password: password
      properties:
        password:
          description: New password.
          type: string
      required:
      - password
      type: object
    LinuxCredentialsModel:
      allOf:
      - $ref: '#/components/schemas/CredentialsModel'
      - $ref: '#/components/schemas/LinuxCredentialsModel_allOf'
    PrivateKeyChangeSpec:
      example:
        privateKey: privateKey
        passphrase: passphrase
      properties:
        privateKey:
          description: Private key.
          type: string
        passphrase:
          description: Passphrase that protects the private key.
          type: string
      required:
      - privateKey
      type: object
    JobImportSpecCollection:
      example:
        jobs:
        - schedule:
            runAutomatically: false
            daily:
              localTime: localTime
              isEnabled: true
              days:
              - null
              - null
            monthly:
              localTime: localTime
              months:
              - null
              - null
              dayOfMonth: 6
              isEnabled: false
            periodically:
              startTimeWithinAnHour: 6
              isEnabled: false
              backupWindow:
                days:
                - hours: hours
                - hours: hours
              frequency: 1
            continuously:
              isEnabled: false
              backupWindow:
                days:
                - hours: hours
                - hours: hours
            backupWindow:
              isEnabled: false
              backupWindow:
                days:
                - hours: hours
                - hours: hours
            retry:
              retryCount: 7
              isEnabled: false
              awaitMinutes: 1
            afterThisJob:
              jobName: jobName
              isEnabled: true
          isHighPriority: true
          name: name
          description: description
          virtualMachines:
            excludes:
              disks:
              - vmObject:
                  hostName: hostName
                  name: name
                  objectId: objectId
                removeFromVMConfiguration: true
                disks:
                - disks
                - disks
              - vmObject:
                  hostName: hostName
                  name: name
                  objectId: objectId
                removeFromVMConfiguration: true
                disks:
                - disks
                - disks
              templates:
                isEnabled: true
                excludeFromIncremental: true
              vms:
              - hostName: hostName
                name: name
                objectId: objectId
              - hostName: hostName
                name: name
                objectId: objectId
            includes:
            - hostName: hostName
              name: name
              objectId: objectId
            - hostName: hostName
              name: name
              objectId: objectId
          storage:
            backupRepository:
              name: name
              tag: tag
            advancedSettings:
              storageData:
                encryption:
                  isEnabled: true
                  encryptionPasswordTag: encryptionPasswordTag
                  encryptionPasswordIdOrNull: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
                excludeDeletedFileBlocks: true
                enableInlineDataDedup: true
                excludeSwapFileBlocks: true
              fullBackupMaintenance:
                defragmentAndCompact:
                  isEnabled: true
                  monthly:
                    months:
                    - null
                    - null
                    isEnabled: true
                    dayOfMonths: 5
                  weekly:
                    isEnabled: false
                    days:
                    - null
                    - null
                RemoveData:
                  isEnabled: true
                  afterDays: 2
              activeFulls:
                isEnabled: true
                monthly:
                  months:
                  - null
                  - null
                  isEnabled: true
                  dayOfMonths: 5
                weekly:
                  isEnabled: false
                  days:
                  - null
                  - null
              synthenticFulls:
                isEnabled: true
                days:
                - null
                - null
              backupHealth:
                isEnabled: true
                monthly:
                  months:
                  - null
                  - null
                  isEnabled: true
                  dayOfMonths: 5
                weekly:
                  isEnabled: false
                  days:
                  - null
                  - null
              storageIntegration:
                limitProcessedVmCount: 7
                isEnabled: true
                failoverToStandardBackup: true
                limitProcessedVm: true
              scripts:
                postCommand:
                  isEnabled: true
                  command: command
                dayOfWeek:
                - null
                - null
                preCommand:
                  isEnabled: true
                  command: command
                runScriptEvery: 9
              notifications:
                emailNotifications:
                  customNotificationSettings:
                    notifyOnWarning: true
                    subject: subject
                    notifyOnError: true
                    SuppressNotificationUntilLastRetry: true
                    notifyOnSuccess: true
                  recipients:
                  - recipients
                  - recipients
                  isEnabled: true
                sendSNMPNotifications: true
                vmAttribute:
                  notes: notes
                  appendToExisitingValue: true
                  isEnabled: true
              vSphere:
                enableVMWareToolsQuiescence: true
                changedBlockTracking:
                  enableCBTautomatically: true
                  isEnabled: true
                  resetCBTonActiveFull: true
            gfsPolicy:
              isEnabled: true
              monthly:
                isEnabled: true
                keepForNumberOfMonths: 1
              yearly:
                isEnabled: true
                keepForNumberOfYears: 5
              weekly:
                keepForNumberOfWeeks: 6
                isEnabled: true
            retentionPolicy:
              quantity: 0
            backupProxies:
              automaticSelection: true
              proxies:
              - name: name
                tag: tag
              - name: name
                tag: tag
          guestProcessing:
            guestCredentials:
              creds:
                credentialsTag: credentialsTag
                credentialsName: credentialsName
              credentialsPerMachine:
              - vmObject:
                  hostName: hostName
                  name: name
                  objectId: objectId
                linuxCreds:
                  credentialsTag: credentialsTag
                  credentialsName: credentialsName
                windowsCreds:
                  credentialsTag: credentialsTag
                  credentialsName: credentialsName
              - vmObject:
                  hostName: hostName
                  name: name
                  objectId: objectId
                linuxCreds:
                  credentialsTag: credentialsTag
                  credentialsName: credentialsName
                windowsCreds:
                  credentialsTag: credentialsTag
                  credentialsName: credentialsName
            applicationAwareProcessing:
              appSettings:
              - vmObject:
                  hostName: hostName
                  name: name
                  objectId: objectId
                oracle:
                  credentials:
                    credentialsTag: credentialsTag
                    credentialsName: credentialsName
                  deleteHoursCount: 4
                  backupMinsCount: 1
                  deleteGBsCount: 7
                  keepDaysCount: 1
                  useGuestCredentials: true
                  backupLogs: true
                  logShippingServers:
                    autoSelection: true
                    shippingServerNames:
                    - shippingServerNames
                    - shippingServerNames
                usePersistentGuestAgent: true
                exclusions:
                  itemsList:
                  - itemsList
                  - itemsList
                scripts:
                  windowsScripts:
                    preFreezeScript: preFreezeScript
                    postThawScript: postThawScript
                  linuxScripts:
                    preFreezeScript: preFreezeScript
                    postThawScript: postThawScript
                sql:
                  backupMinsCount: 3
                  keepDaysCount: 2
                  logShippingServers:
                    autoSelection: true
                    shippingServerNames:
                    - shippingServerNames
                    - shippingServerNames
              - vmObject:
                  hostName: hostName
                  name: name
                  objectId: objectId
                oracle:
                  credentials:
                    credentialsTag: credentialsTag
                    credentialsName: credentialsName
                  deleteHoursCount: 4
                  backupMinsCount: 1
                  deleteGBsCount: 7
                  keepDaysCount: 1
                  useGuestCredentials: true
                  backupLogs: true
                  logShippingServers:
                    autoSelection: true
                    shippingServerNames:
                    - shippingServerNames
                    - shippingServerNames
                usePersistentGuestAgent: true
                exclusions:
                  itemsList:
                  - itemsList
                  - itemsList
                scripts:
                  windowsScripts:
                    preFreezeScript: preFreezeScript
                    postThawScript: postThawScript
                  linuxScripts:
                    preFreezeScript: preFreezeScript
                    postThawScript: postThawScript
                sql:
                  backupMinsCount: 3
                  keepDaysCount: 2
                  logShippingServers:
                    autoSelection: true
                    shippingServerNames:
                    - shippingServerNames
                    - shippingServerNames
              isEnabled: true
            guestFileSystemIndexing:
              indexingSettings:
              - vmObject:
                  hostName: hostName
                  name: name
                  objectId: objectId
                WindowsIndexing:
                  indexingList:
                  - indexingList
                  - indexingList
                LinuxIndexing:
                  indexingList:
                  - indexingList
                  - indexingList
              - vmObject:
                  hostName: hostName
                  name: name
                  objectId: objectId
                WindowsIndexing:
                  indexingList:
                  - indexingList
                  - indexingList
                LinuxIndexing:
                  indexingList:
                  - indexingList
                  - indexingList
              isEnabled: true
            guestInteractionProxies:
              automaticSelection: true
              proxies:
              - proxies
              - proxies
        - schedule:
            runAutomatically: false
            daily:
              localTime: localTime
              isEnabled: true
              days:
              - null
              - null
            monthly:
              localTime: localTime
              months:
              - null
              - null
              dayOfMonth: 6
              isEnabled: false
            periodically:
              startTimeWithinAnHour: 6
              isEnabled: false
              backupWindow:
                days:
                - hours: hours
                - hours: hours
              frequency: 1
            continuously:
              isEnabled: false
              backupWindow:
                days:
                - hours: hours
                - hours: hours
            backupWindow:
              isEnabled: false
              backupWindow:
                days:
                - hours: hours
                - hours: hours
            retry:
              retryCount: 7
              isEnabled: false
              awaitMinutes: 1
            afterThisJob:
              jobName: jobName
              isEnabled: true
          isHighPriority: true
          name: name
          description: description
          virtualMachines:
            excludes:
              disks:
              - vmObject:
                  hostName: hostName
                  name: name
                  objectId: objectId
                removeFromVMConfiguration: true
                disks:
                - disks
                - disks
              - vmObject:
                  hostName: hostName
                  name: name
                  objectId: objectId
                removeFromVMConfiguration: true
                disks:
                - disks
                - disks
              templates:
                isEnabled: true
                excludeFromIncremental: true
              vms:
              - hostName: hostName
                name: name
                objectId: objectId
              - hostName: hostName
                name: name
                objectId: objectId
            includes:
            - hostName: hostName
              name: name
              objectId: objectId
            - hostName: hostName
              name: name
              objectId: objectId
          storage:
            backupRepository:
              name: name
              tag: tag
            advancedSettings:
              storageData:
                encryption:
                  isEnabled: true
                  encryptionPasswordTag: encryptionPasswordTag
                  encryptionPasswordIdOrNull: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
                excludeDeletedFileBlocks: true
                enableInlineDataDedup: true
                excludeSwapFileBlocks: true
              fullBackupMaintenance:
                defragmentAndCompact:
                  isEnabled: true
                  monthly:
                    months:
                    - null
                    - null
                    isEnabled: true
                    dayOfMonths: 5
                  weekly:
                    isEnabled: false
                    days:
                    - null
                    - null
                RemoveData:
                  isEnabled: true
                  afterDays: 2
              activeFulls:
                isEnabled: true
                monthly:
                  months:
                  - null
                  - null
                  isEnabled: true
                  dayOfMonths: 5
                weekly:
                  isEnabled: false
                  days:
                  - null
                  - null
              synthenticFulls:
                isEnabled: true
                days:
                - null
                - null
              backupHealth:
                isEnabled: true
                monthly:
                  months:
                  - null
                  - null
                  isEnabled: true
                  dayOfMonths: 5
                weekly:
                  isEnabled: false
                  days:
                  - null
                  - null
              storageIntegration:
                limitProcessedVmCount: 7
                isEnabled: true
                failoverToStandardBackup: true
                limitProcessedVm: true
              scripts:
                postCommand:
                  isEnabled: true
                  command: command
                dayOfWeek:
                - null
                - null
                preCommand:
                  isEnabled: true
                  command: command
                runScriptEvery: 9
              notifications:
                emailNotifications:
                  customNotificationSettings:
                    notifyOnWarning: true
                    subject: subject
                    notifyOnError: true
                    SuppressNotificationUntilLastRetry: true
                    notifyOnSuccess: true
                  recipients:
                  - recipients
                  - recipients
                  isEnabled: true
                sendSNMPNotifications: true
                vmAttribute:
                  notes: notes
                  appendToExisitingValue: true
                  isEnabled: true
              vSphere:
                enableVMWareToolsQuiescence: true
                changedBlockTracking:
                  enableCBTautomatically: true
                  isEnabled: true
                  resetCBTonActiveFull: true
            gfsPolicy:
              isEnabled: true
              monthly:
                isEnabled: true
                keepForNumberOfMonths: 1
              yearly:
                isEnabled: true
                keepForNumberOfYears: 5
              weekly:
                keepForNumberOfWeeks: 6
                isEnabled: true
            retentionPolicy:
              quantity: 0
            backupProxies:
              automaticSelection: true
              proxies:
              - name: name
                tag: tag
              - name: name
                tag: tag
          guestProcessing:
            guestCredentials:
              creds:
                credentialsTag: credentialsTag
                credentialsName: credentialsName
              credentialsPerMachine:
              - vmObject:
                  hostName: hostName
                  name: name
                  objectId: objectId
                linuxCreds:
                  credentialsTag: credentialsTag
                  credentialsName: credentialsName
                windowsCreds:
                  credentialsTag: credentialsTag
                  credentialsName: credentialsName
              - vmObject:
                  hostName: hostName
                  name: name
                  objectId: objectId
                linuxCreds:
                  credentialsTag: credentialsTag
                  credentialsName: credentialsName
                windowsCreds:
                  credentialsTag: credentialsTag
                  credentialsName: credentialsName
            applicationAwareProcessing:
              appSettings:
              - vmObject:
                  hostName: hostName
                  name: name
                  objectId: objectId
                oracle:
                  credentials:
                    credentialsTag: credentialsTag
                    credentialsName: credentialsName
                  deleteHoursCount: 4
                  backupMinsCount: 1
                  deleteGBsCount: 7
                  keepDaysCount: 1
                  useGuestCredentials: true
                  backupLogs: true
                  logShippingServers:
                    autoSelection: true
                    shippingServerNames:
                    - shippingServerNames
                    - shippingServerNames
                usePersistentGuestAgent: true
                exclusions:
                  itemsList:
                  - itemsList
                  - itemsList
                scripts:
                  windowsScripts:
                    preFreezeScript: preFreezeScript
                    postThawScript: postThawScript
                  linuxScripts:
                    preFreezeScript: preFreezeScript
                    postThawScript: postThawScript
                sql:
                  backupMinsCount: 3
                  keepDaysCount: 2
                  logShippingServers:
                    autoSelection: true
                    shippingServerNames:
                    - shippingServerNames
                    - shippingServerNames
              - vmObject:
                  hostName: hostName
                  name: name
                  objectId: objectId
                oracle:
                  credentials:
                    credentialsTag: credentialsTag
                    credentialsName: credentialsName
                  deleteHoursCount: 4
                  backupMinsCount: 1
                  deleteGBsCount: 7
                  keepDaysCount: 1
                  useGuestCredentials: true
                  backupLogs: true
                  logShippingServers:
                    autoSelection: true
                    shippingServerNames:
                    - shippingServerNames
                    - shippingServerNames
                usePersistentGuestAgent: true
                exclusions:
                  itemsList:
                  - itemsList
                  - itemsList
                scripts:
                  windowsScripts:
                    preFreezeScript: preFreezeScript
                    postThawScript: postThawScript
                  linuxScripts:
                    preFreezeScript: preFreezeScript
                    postThawScript: postThawScript
                sql:
                  backupMinsCount: 3
                  keepDaysCount: 2
                  logShippingServers:
                    autoSelection: true
                    shippingServerNames:
                    - shippingServerNames
                    - shippingServerNames
              isEnabled: true
            guestFileSystemIndexing:
              indexingSettings:
              - vmObject:
                  hostName: hostName
                  name: name
                  objectId: objectId
                WindowsIndexing:
                  indexingList:
                  - indexingList
                  - indexingList
                LinuxIndexing:
                  indexingList:
                  - indexingList
                  - indexingList
              - vmObject:
                  hostName: hostName
                  name: name
                  objectId: objectId
                WindowsIndexing:
                  indexingList:
                  - indexingList
                  - indexingList
                LinuxIndexing:
                  indexingList:
                  - indexingList
                  - indexingList
              isEnabled: true
            guestInteractionProxies:
              automaticSelection: true
              proxies:
              - proxies
              - proxies
      properties:
        jobs:
          description: Array of jobs.
          items:
            $ref: '#/components/schemas/JobImportSpec'
          type: array
          uniqueItems: true
      required:
      - jobs
      type: object
    JobImportSpec:
      example:
        schedule:
          runAutomatically: false
          daily:
            localTime: localTime
            isEnabled: true
            days:
            - null
            - null
          monthly:
            localTime: localTime
            months:
            - null
            - null
            dayOfMonth: 6
            isEnabled: false
          periodically:
            startTimeWithinAnHour: 6
            isEnabled: false
            backupWindow:
              days:
              - hours: hours
              - hours: hours
            frequency: 1
          continuously:
            isEnabled: false
            backupWindow:
              days:
              - hours: hours
              - hours: hours
          backupWindow:
            isEnabled: false
            backupWindow:
              days:
              - hours: hours
              - hours: hours
          retry:
            retryCount: 7
            isEnabled: false
            awaitMinutes: 1
          afterThisJob:
            jobName: jobName
            isEnabled: true
        isHighPriority: true
        name: name
        description: description
        virtualMachines:
          excludes:
            disks:
            - vmObject:
                hostName: hostName
                name: name
                objectId: objectId
              removeFromVMConfiguration: true
              disks:
              - disks
              - disks
            - vmObject:
                hostName: hostName
                name: name
                objectId: objectId
              removeFromVMConfiguration: true
              disks:
              - disks
              - disks
            templates:
              isEnabled: true
              excludeFromIncremental: true
            vms:
            - hostName: hostName
              name: name
              objectId: objectId
            - hostName: hostName
              name: name
              objectId: objectId
          includes:
          - hostName: hostName
            name: name
            objectId: objectId
          - hostName: hostName
            name: name
            objectId: objectId
        storage:
          backupRepository:
            name: name
            tag: tag
          advancedSettings:
            storageData:
              encryption:
                isEnabled: true
                encryptionPasswordTag: encryptionPasswordTag
                encryptionPasswordIdOrNull: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
              excludeDeletedFileBlocks: true
              enableInlineDataDedup: true
              excludeSwapFileBlocks: true
            fullBackupMaintenance:
              defragmentAndCompact:
                isEnabled: true
                monthly:
                  months:
                  - null
                  - null
                  isEnabled: true
                  dayOfMonths: 5
                weekly:
                  isEnabled: false
                  days:
                  - null
                  - null
              RemoveData:
                isEnabled: true
                afterDays: 2
            activeFulls:
              isEnabled: true
              monthly:
                months:
                - null
                - null
                isEnabled: true
                dayOfMonths: 5
              weekly:
                isEnabled: false
                days:
                - null
                - null
            synthenticFulls:
              isEnabled: true
              days:
              - null
              - null
            backupHealth:
              isEnabled: true
              monthly:
                months:
                - null
                - null
                isEnabled: true
                dayOfMonths: 5
              weekly:
                isEnabled: false
                days:
                - null
                - null
            storageIntegration:
              limitProcessedVmCount: 7
              isEnabled: true
              failoverToStandardBackup: true
              limitProcessedVm: true
            scripts:
              postCommand:
                isEnabled: true
                command: command
              dayOfWeek:
              - null
              - null
              preCommand:
                isEnabled: true
                command: command
              runScriptEvery: 9
            notifications:
              emailNotifications:
                customNotificationSettings:
                  notifyOnWarning: true
                  subject: subject
                  notifyOnError: true
                  SuppressNotificationUntilLastRetry: true
                  notifyOnSuccess: true
                recipients:
                - recipients
                - recipients
                isEnabled: true
              sendSNMPNotifications: true
              vmAttribute:
                notes: notes
                appendToExisitingValue: true
                isEnabled: true
            vSphere:
              enableVMWareToolsQuiescence: true
              changedBlockTracking:
                enableCBTautomatically: true
                isEnabled: true
                resetCBTonActiveFull: true
          gfsPolicy:
            isEnabled: true
            monthly:
              isEnabled: true
              keepForNumberOfMonths: 1
            yearly:
              isEnabled: true
              keepForNumberOfYears: 5
            weekly:
              keepForNumberOfWeeks: 6
              isEnabled: true
          retentionPolicy:
            quantity: 0
          backupProxies:
            automaticSelection: true
            proxies:
            - name: name
              tag: tag
            - name: name
              tag: tag
        guestProcessing:
          guestCredentials:
            creds:
              credentialsTag: credentialsTag
              credentialsName: credentialsName
            credentialsPerMachine:
            - vmObject:
                hostName: hostName
                name: name
                objectId: objectId
              linuxCreds:
                credentialsTag: credentialsTag
                credentialsName: credentialsName
              windowsCreds:
                credentialsTag: credentialsTag
                credentialsName: credentialsName
            - vmObject:
                hostName: hostName
                name: name
                objectId: objectId
              linuxCreds:
                credentialsTag: credentialsTag
                credentialsName: credentialsName
              windowsCreds:
                credentialsTag: credentialsTag
                credentialsName: credentialsName
          applicationAwareProcessing:
            appSettings:
            - vmObject:
                hostName: hostName
                name: name
                objectId: objectId
              oracle:
                credentials:
                  credentialsTag: credentialsTag
                  credentialsName: credentialsName
                deleteHoursCount: 4
                backupMinsCount: 1
                deleteGBsCount: 7
                keepDaysCount: 1
                useGuestCredentials: true
                backupLogs: true
                logShippingServers:
                  autoSelection: true
                  shippingServerNames:
                  - shippingServerNames
                  - shippingServerNames
              usePersistentGuestAgent: true
              exclusions:
                itemsList:
                - itemsList
                - itemsList
              scripts:
                windowsScripts:
                  preFreezeScript: preFreezeScript
                  postThawScript: postThawScript
                linuxScripts:
                  preFreezeScript: preFreezeScript
                  postThawScript: postThawScript
              sql:
                backupMinsCount: 3
                keepDaysCount: 2
                logShippingServers:
                  autoSelection: true
                  shippingServerNames:
                  - shippingServerNames
                  - shippingServerNames
            - vmObject:
                hostName: hostName
                name: name
                objectId: objectId
              oracle:
                credentials:
                  credentialsTag: credentialsTag
                  credentialsName: credentialsName
                deleteHoursCount: 4
                backupMinsCount: 1
                deleteGBsCount: 7
                keepDaysCount: 1
                useGuestCredentials: true
                backupLogs: true
                logShippingServers:
                  autoSelection: true
                  shippingServerNames:
                  - shippingServerNames
                  - shippingServerNames
              usePersistentGuestAgent: true
              exclusions:
                itemsList:
                - itemsList
                - itemsList
              scripts:
                windowsScripts:
                  preFreezeScript: preFreezeScript
                  postThawScript: postThawScript
                linuxScripts:
                  preFreezeScript: preFreezeScript
                  postThawScript: postThawScript
              sql:
                backupMinsCount: 3
                keepDaysCount: 2
                logShippingServers:
                  autoSelection: true
                  shippingServerNames:
                  - shippingServerNames
                  - shippingServerNames
            isEnabled: true
          guestFileSystemIndexing:
            indexingSettings:
            - vmObject:
                hostName: hostName
                name: name
                objectId: objectId
              WindowsIndexing:
                indexingList:
                - indexingList
                - indexingList
              LinuxIndexing:
                indexingList:
                - indexingList
                - indexingList
            - vmObject:
                hostName: hostName
                name: name
                objectId: objectId
              WindowsIndexing:
                indexingList:
                - indexingList
                - indexingList
              LinuxIndexing:
                indexingList:
                - indexingList
                - indexingList
            isEnabled: true
          guestInteractionProxies:
            automaticSelection: true
            proxies:
            - proxies
            - proxies
      properties:
        name:
          description: Name of the job.
          type: string
        description:
          description: Description of the job.
          type: string
        isHighPriority:
          description: If *true*, the job has a high priority in getting backup infrastructure
            resources.
          type: boolean
        type:
          $ref: '#/components/schemas/EJobType'
        virtualMachines:
          $ref: '#/components/schemas/BackupJobVirtualMachinesSpec'
        storage:
          $ref: '#/components/schemas/BackupJobStorageImportModel'
        guestProcessing:
          $ref: '#/components/schemas/BackupJobGuestProcessingImportModel'
        schedule:
          $ref: '#/components/schemas/BackupScheduleModel'
      required:
      - description
      - guestProcessing
      - isHighPriority
      - name
      - schedule
      - storage
      - type
      - virtualMachines
      type: object
    BackupJobStorageImportModel:
      description: Backup storage settings.
      example:
        backupRepository:
          name: name
          tag: tag
        advancedSettings:
          storageData:
            encryption:
              isEnabled: true
              encryptionPasswordTag: encryptionPasswordTag
              encryptionPasswordIdOrNull: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            excludeDeletedFileBlocks: true
            enableInlineDataDedup: true
            excludeSwapFileBlocks: true
          fullBackupMaintenance:
            defragmentAndCompact:
              isEnabled: true
              monthly:
                months:
                - null
                - null
                isEnabled: true
                dayOfMonths: 5
              weekly:
                isEnabled: false
                days:
                - null
                - null
            RemoveData:
              isEnabled: true
              afterDays: 2
          activeFulls:
            isEnabled: true
            monthly:
              months:
              - null
              - null
              isEnabled: true
              dayOfMonths: 5
            weekly:
              isEnabled: false
              days:
              - null
              - null
          synthenticFulls:
            isEnabled: true
            days:
            - null
            - null
          backupHealth:
            isEnabled: true
            monthly:
              months:
              - null
              - null
              isEnabled: true
              dayOfMonths: 5
            weekly:
              isEnabled: false
              days:
              - null
              - null
          storageIntegration:
            limitProcessedVmCount: 7
            isEnabled: true
            failoverToStandardBackup: true
            limitProcessedVm: true
          scripts:
            postCommand:
              isEnabled: true
              command: command
            dayOfWeek:
            - null
            - null
            preCommand:
              isEnabled: true
              command: command
            runScriptEvery: 9
          notifications:
            emailNotifications:
              customNotificationSettings:
                notifyOnWarning: true
                subject: subject
                notifyOnError: true
                SuppressNotificationUntilLastRetry: true
                notifyOnSuccess: true
              recipients:
              - recipients
              - recipients
              isEnabled: true
            sendSNMPNotifications: true
            vmAttribute:
              notes: notes
              appendToExisitingValue: true
              isEnabled: true
          vSphere:
            enableVMWareToolsQuiescence: true
            changedBlockTracking:
              enableCBTautomatically: true
              isEnabled: true
              resetCBTonActiveFull: true
        gfsPolicy:
          isEnabled: true
          monthly:
            isEnabled: true
            keepForNumberOfMonths: 1
          yearly:
            isEnabled: true
            keepForNumberOfYears: 5
          weekly:
            keepForNumberOfWeeks: 6
            isEnabled: true
        retentionPolicy:
          quantity: 0
        backupProxies:
          automaticSelection: true
          proxies:
          - name: name
            tag: tag
          - name: name
            tag: tag
      properties:
        backupRepository:
          $ref: '#/components/schemas/BackupRepositoryImportModel'
        backupProxies:
          $ref: '#/components/schemas/BackupJobImportProxiesModel'
        retentionPolicy:
          $ref: '#/components/schemas/BackupJobRetentionPolicySettingsModel'
        gfsPolicy:
          $ref: '#/components/schemas/GFSPolicySettingsModel'
        advancedSettings:
          $ref: '#/components/schemas/BackupJobAdvancedSettingsModel'
      required:
      - backupProxies
      - backupRepository
      - retentionPolicy
      type: object
    BackupRepositoryImportModel:
      description: Backup repository.
      example:
        name: name
        tag: tag
      properties:
        name:
          description: Name of the backup repository.
          type: string
        tag:
          description: Tag assigned to the backup repository.
          type: string
      required:
      - name
      type: object
    BackupJobImportProxiesModel:
      description: Backup proxies.
      example:
        automaticSelection: true
        proxies:
        - name: name
          tag: tag
        - name: name
          tag: tag
      properties:
        automaticSelection:
          default: true
          description: If *true*, backup proxies are detected and assigned automatically.
          type: boolean
        proxies:
          description: Array of backup proxies.
          items:
            $ref: '#/components/schemas/BackupProxyImportModel'
          type: array
      required:
      - automaticSelection
      type: object
    BackupProxyImportModel:
      example:
        name: name
        tag: tag
      properties:
        name:
          description: Name of the backup proxy.
          type: string
        type:
          $ref: '#/components/schemas/EBackupProxyImportType'
        tag:
          description: Tag assigned to the backup proxy.
          type: string
      required:
      - name
      - type
      type: object
    EBackupProxyImportType:
      enum:
      - vmware
      type: string
    BackupJobGuestProcessingImportModel:
      description: Guest processing settings.
      example:
        guestCredentials:
          creds:
            credentialsTag: credentialsTag
            credentialsName: credentialsName
          credentialsPerMachine:
          - vmObject:
              hostName: hostName
              name: name
              objectId: objectId
            linuxCreds:
              credentialsTag: credentialsTag
              credentialsName: credentialsName
            windowsCreds:
              credentialsTag: credentialsTag
              credentialsName: credentialsName
          - vmObject:
              hostName: hostName
              name: name
              objectId: objectId
            linuxCreds:
              credentialsTag: credentialsTag
              credentialsName: credentialsName
            windowsCreds:
              credentialsTag: credentialsTag
              credentialsName: credentialsName
        applicationAwareProcessing:
          appSettings:
          - vmObject:
              hostName: hostName
              name: name
              objectId: objectId
            oracle:
              credentials:
                credentialsTag: credentialsTag
                credentialsName: credentialsName
              deleteHoursCount: 4
              backupMinsCount: 1
              deleteGBsCount: 7
              keepDaysCount: 1
              useGuestCredentials: true
              backupLogs: true
              logShippingServers:
                autoSelection: true
                shippingServerNames:
                - shippingServerNames
                - shippingServerNames
            usePersistentGuestAgent: true
            exclusions:
              itemsList:
              - itemsList
              - itemsList
            scripts:
              windowsScripts:
                preFreezeScript: preFreezeScript
                postThawScript: postThawScript
              linuxScripts:
                preFreezeScript: preFreezeScript
                postThawScript: postThawScript
            sql:
              backupMinsCount: 3
              keepDaysCount: 2
              logShippingServers:
                autoSelection: true
                shippingServerNames:
                - shippingServerNames
                - shippingServerNames
          - vmObject:
              hostName: hostName
              name: name
              objectId: objectId
            oracle:
              credentials:
                credentialsTag: credentialsTag
                credentialsName: credentialsName
              deleteHoursCount: 4
              backupMinsCount: 1
              deleteGBsCount: 7
              keepDaysCount: 1
              useGuestCredentials: true
              backupLogs: true
              logShippingServers:
                autoSelection: true
                shippingServerNames:
                - shippingServerNames
                - shippingServerNames
            usePersistentGuestAgent: true
            exclusions:
              itemsList:
              - itemsList
              - itemsList
            scripts:
              windowsScripts:
                preFreezeScript: preFreezeScript
                postThawScript: postThawScript
              linuxScripts:
                preFreezeScript: preFreezeScript
                postThawScript: postThawScript
            sql:
              backupMinsCount: 3
              keepDaysCount: 2
              logShippingServers:
                autoSelection: true
                shippingServerNames:
                - shippingServerNames
                - shippingServerNames
          isEnabled: true
        guestFileSystemIndexing:
          indexingSettings:
          - vmObject:
              hostName: hostName
              name: name
              objectId: objectId
            WindowsIndexing:
              indexingList:
              - indexingList
              - indexingList
            LinuxIndexing:
              indexingList:
              - indexingList
              - indexingList
          - vmObject:
              hostName: hostName
              name: name
              objectId: objectId
            WindowsIndexing:
              indexingList:
              - indexingList
              - indexingList
            LinuxIndexing:
              indexingList:
              - indexingList
              - indexingList
          isEnabled: true
        guestInteractionProxies:
          automaticSelection: true
          proxies:
          - proxies
          - proxies
      properties:
        applicationAwareProcessing:
          $ref: '#/components/schemas/BackupApplicationAwareProcessingImportModel'
        guestFileSystemIndexing:
          $ref: '#/components/schemas/GuestFileSystemIndexingModel'
        guestInteractionProxies:
          $ref: '#/components/schemas/GuestInteractionProxiesSettingsImportModel'
        guestCredentials:
          $ref: '#/components/schemas/GuestOsCredentialsImportModel'
      required:
      - applicationAwareProcessing
      - guestFileSystemIndexing
      type: object
    BackupApplicationAwareProcessingImportModel:
      description: Application-aware processing settings.
      example:
        appSettings:
        - vmObject:
            hostName: hostName
            name: name
            objectId: objectId
          oracle:
            credentials:
              credentialsTag: credentialsTag
              credentialsName: credentialsName
            deleteHoursCount: 4
            backupMinsCount: 1
            deleteGBsCount: 7
            keepDaysCount: 1
            useGuestCredentials: true
            backupLogs: true
            logShippingServers:
              autoSelection: true
              shippingServerNames:
              - shippingServerNames
              - shippingServerNames
          usePersistentGuestAgent: true
          exclusions:
            itemsList:
            - itemsList
            - itemsList
          scripts:
            windowsScripts:
              preFreezeScript: preFreezeScript
              postThawScript: postThawScript
            linuxScripts:
              preFreezeScript: preFreezeScript
              postThawScript: postThawScript
          sql:
            backupMinsCount: 3
            keepDaysCount: 2
            logShippingServers:
              autoSelection: true
              shippingServerNames:
              - shippingServerNames
              - shippingServerNames
        - vmObject:
            hostName: hostName
            name: name
            objectId: objectId
          oracle:
            credentials:
              credentialsTag: credentialsTag
              credentialsName: credentialsName
            deleteHoursCount: 4
            backupMinsCount: 1
            deleteGBsCount: 7
            keepDaysCount: 1
            useGuestCredentials: true
            backupLogs: true
            logShippingServers:
              autoSelection: true
              shippingServerNames:
              - shippingServerNames
              - shippingServerNames
          usePersistentGuestAgent: true
          exclusions:
            itemsList:
            - itemsList
            - itemsList
          scripts:
            windowsScripts:
              preFreezeScript: preFreezeScript
              postThawScript: postThawScript
            linuxScripts:
              preFreezeScript: preFreezeScript
              postThawScript: postThawScript
          sql:
            backupMinsCount: 3
            keepDaysCount: 2
            logShippingServers:
              autoSelection: true
              shippingServerNames:
              - shippingServerNames
              - shippingServerNames
        isEnabled: true
      properties:
        isEnabled:
          description: If *true*, application-aware processing is enabled.
          type: boolean
        appSettings:
          description: Array of VMware objects and their application settings.
          items:
            $ref: '#/components/schemas/BackupApplicationSettingsImportModel'
          type: array
      required:
      - isEnabled
      type: object
    BackupApplicationSettingsImportModel:
      example:
        vmObject:
          hostName: hostName
          name: name
          objectId: objectId
        oracle:
          credentials:
            credentialsTag: credentialsTag
            credentialsName: credentialsName
          deleteHoursCount: 4
          backupMinsCount: 1
          deleteGBsCount: 7
          keepDaysCount: 1
          useGuestCredentials: true
          backupLogs: true
          logShippingServers:
            autoSelection: true
            shippingServerNames:
            - shippingServerNames
            - shippingServerNames
        usePersistentGuestAgent: true
        exclusions:
          itemsList:
          - itemsList
          - itemsList
        scripts:
          windowsScripts:
            preFreezeScript: preFreezeScript
            postThawScript: postThawScript
          linuxScripts:
            preFreezeScript: preFreezeScript
            postThawScript: postThawScript
        sql:
          backupMinsCount: 3
          keepDaysCount: 2
          logShippingServers:
            autoSelection: true
            shippingServerNames:
            - shippingServerNames
            - shippingServerNames
      properties:
        vmObject:
          $ref: '#/components/schemas/VmwareObjectModel'
        vss:
          $ref: '#/components/schemas/EApplicationSettingsVSS'
        usePersistentGuestAgent:
          description: If *true*, persistent guest agent is used.
          type: boolean
        transactionLogs:
          $ref: '#/components/schemas/ETransactionLogsSettings'
        sql:
          $ref: '#/components/schemas/BackupSQLSettingsImportModel'
        oracle:
          $ref: '#/components/schemas/BackupOracleSettingsImportModel'
        exclusions:
          $ref: '#/components/schemas/BackupFSExclusionsModel'
        scripts:
          $ref: '#/components/schemas/BackupScriptSettingsModel'
      required:
      - vmObject
      - vss
      type: object
    BackupSQLSettingsImportModel:
      description: Microsoft SQL Server transaction log settings.
      example:
        backupMinsCount: 3
        keepDaysCount: 2
        logShippingServers:
          autoSelection: true
          shippingServerNames:
          - shippingServerNames
          - shippingServerNames
      properties:
        logsProcessing:
          $ref: '#/components/schemas/ESQLLogsProcessing'
        backupMinsCount:
          description: Frequency of transaction log backup, in minutes.
          type: integer
        retainLogBackups:
          $ref: '#/components/schemas/ERetainLogBackupsType'
        keepDaysCount:
          description: Number of days to keep transaction logs in the backup repository.
          type: integer
        logShippingServers:
          $ref: '#/components/schemas/BackupLogShippingServersImportModel'
      required:
      - logsProcessing
      type: object
    BackupLogShippingServersImportModel:
      description: Log shipping server used to transport logs.
      example:
        autoSelection: true
        shippingServerNames:
        - shippingServerNames
        - shippingServerNames
      properties:
        autoSelection:
          description: If *true*, Veeam Backup & Replication chooses an optimal log
            shipping server automatically.
          type: boolean
        shippingServerNames:
          description: Array of servers that are explicitly selected for log shipping.
          items:
            type: string
          type: array
      required:
      - autoSelection
      type: object
    BackupOracleSettingsImportModel:
      description: Oracle archived log settings.
      example:
        credentials:
          credentialsTag: credentialsTag
          credentialsName: credentialsName
        deleteHoursCount: 4
        backupMinsCount: 1
        deleteGBsCount: 7
        keepDaysCount: 1
        useGuestCredentials: true
        backupLogs: true
        logShippingServers:
          autoSelection: true
          shippingServerNames:
          - shippingServerNames
          - shippingServerNames
      properties:
        useGuestCredentials:
          description: If *true*, Veeam Backup & Replication uses credentials specified
            in the guest processing settings.
          type: boolean
        credentials:
          $ref: '#/components/schemas/CredentialsImportModel'
        archiveLogs:
          $ref: '#/components/schemas/EBackupOracleLogsSettings'
        deleteHoursCount:
          description: Time period in hours to keep archived logs. This parameter
            should be specified if the `EBackupOracleLogsSettings` value is *deleteExpiredHours*.
          type: integer
        deleteGBsCount:
          description: Maximum size for archived logs in GB. This parameter should
            be specified if the `EBackupOracleLogsSettings` value is *deleteExpiredGBs*.
          type: integer
        backupLogs:
          description: If *true*, archived logs are backed up.
          type: boolean
        backupMinsCount:
          description: Frequency of archived log backup, in minutes.
          type: integer
        retainLogBackups:
          $ref: '#/components/schemas/ERetainLogBackupsType'
        keepDaysCount:
          description: Number of days to keep archived logs.
          type: integer
        logShippingServers:
          $ref: '#/components/schemas/BackupLogShippingServersImportModel'
      required:
      - archiveLogs
      - useGuestCredentials
      type: object
    GuestOsCredentialsImportModel:
      description: VM custom credentials.
      example:
        creds:
          credentialsTag: credentialsTag
          credentialsName: credentialsName
        credentialsPerMachine:
        - vmObject:
            hostName: hostName
            name: name
            objectId: objectId
          linuxCreds:
            credentialsTag: credentialsTag
            credentialsName: credentialsName
          windowsCreds:
            credentialsTag: credentialsTag
            credentialsName: credentialsName
        - vmObject:
            hostName: hostName
            name: name
            objectId: objectId
          linuxCreds:
            credentialsTag: credentialsTag
            credentialsName: credentialsName
          windowsCreds:
            credentialsTag: credentialsTag
            credentialsName: credentialsName
      properties:
        creds:
          $ref: '#/components/schemas/CredentialsImportModel'
        credentialsPerMachine:
          description: Individual credentials for VMs.
          items:
            $ref: '#/components/schemas/GuestOsCredentialsPerMachineImportModel'
          type: array
          uniqueItems: true
      type: object
    GuestOsCredentialsPerMachineImportModel:
      example:
        vmObject:
          hostName: hostName
          name: name
          objectId: objectId
        linuxCreds:
          credentialsTag: credentialsTag
          credentialsName: credentialsName
        windowsCreds:
          credentialsTag: credentialsTag
          credentialsName: credentialsName
      properties:
        windowsCreds:
          $ref: '#/components/schemas/CredentialsImportModel'
        linuxCreds:
          $ref: '#/components/schemas/CredentialsImportModel'
        vmObject:
          $ref: '#/components/schemas/VmwareObjectModel'
      required:
      - vmObject
      type: object
    CredentialsImportModel:
      example:
        credentialsTag: credentialsTag
        credentialsName: credentialsName
      properties:
        credentialsName:
          description: User name, account name or access key.
          type: string
        credentialsTag:
          description: Tag used to identify the credentials record.
          type: string
      required:
      - credentialsName
      type: object
    GuestInteractionProxiesSettingsImportModel:
      description: Guest interaction proxy used to deploy the runtime process on the
        VM guest OS.
      example:
        automaticSelection: true
        proxies:
        - proxies
        - proxies
      properties:
        automaticSelection:
          default: true
          description: If *true*, Veeam Backup & Replication automatically selects
            the guest interaction proxy.
          type: boolean
        proxies:
          description: Array of proxies specified explicitly. The array must contain
            Microsoft Windows servers added to the backup infrastructure only.
          items:
            type: string
          type: array
          uniqueItems: true
      required:
      - automaticSelection
      type: object
    JobExportSpec:
      example:
        types:
        - types
        - types
        names:
        - names
        - names
        ids:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        ids:
          description: Array of job IDs.
          items:
            format: uuid
            type: string
          type: array
          uniqueItems: true
        types:
          description: Array of job types.
          items:
            type: string
          type: array
          uniqueItems: true
        names:
          description: Array of job names. Wildcard characters are supported.
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    ViRootFilters:
      properties:
        skip:
          description: Number of VMware vSphere servers to skip.
          format: int32
          type: integer
        limit:
          description: Maximum number of VMware vSphere servers to return.
          format: int32
          type: integer
        orderColumn:
          $ref: '#/components/schemas/EViRootFiltersOrderColumn'
        orderAsc:
          description: Sorts VMware vSphere servers in the ascending order by the
            `orderColumn` parameter.
          type: boolean
        nameFilter:
          description: Filters VMware vSphere servers by the `nameFilter` pattern.
            The pattern can match any VMware vSphere server parameter. To substitute
            one or more characters, use the asterisk (*) character at the beginning
            and/or at the end.
          type: string
      type: object
    EViRootFiltersOrderColumn:
      description: Sorts VMware vSphere servers by one of the VMware vSphere server
        parameters.
      enum:
      - Name
      - Type
      type: string
    ViRootsResult:
      example:
        pagination:
          total: 6
          count: 1
          limit: 5
          skip: 5
        data:
        - size: size
          inventoryObject:
            hostName: hostName
            name: name
            objectId: objectId
        - size: size
          inventoryObject:
            hostName: hostName
            name: name
            objectId: objectId
      properties:
        data:
          description: Array of VMware vSphere servers.
          items:
            $ref: '#/components/schemas/VmwareObjectSizeModel'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
      - data
      - pagination
      type: object
    VCenterInventoryFilters:
      properties:
        skip:
          description: Number of objects to skip.
          format: int32
          type: integer
        limit:
          description: Maximum number of objects to return.
          format: int32
          type: integer
        orderColumn:
          $ref: '#/components/schemas/EvCentersInventoryFiltersOrderColumn'
        orderAsc:
          description: Sorts objects in the ascending order by the `orderColumn` parameter.
          type: boolean
        objectIdFilter:
          description: Filters objects by object ID.
          type: string
        hierarchyTypeFilter:
          $ref: '#/components/schemas/EHierarchyType'
        nameFilter:
          description: Filters objects by the `nameFilter` pattern. The pattern can
            match any object parameter. To substitute one or more characters, use
            the asterisk (*) character at the beginning and/or at the end.
          type: string
        typeFilter:
          $ref: '#/components/schemas/EVmwareInventoryType'
        parentContainerNameFilter:
          description: Filters objects by name of the parent container.
          type: string
      type: object
    EHierarchyType:
      description: Hierarchy type.
      enum:
      - HostsAndClusters
      - DatastoresAndVms
      - HostsAndDatastores
      - VmsAndTemplates
      - VmsAndTags
      type: string
    EvCentersInventoryFiltersOrderColumn:
      description: Sorts vCenter Servers by one of the job parameters.
      enum:
      - Name
      - ObjectId
      - Type
      type: string
    VCenterInventoryResult:
      example:
        pagination:
          total: 6
          count: 1
          limit: 5
          skip: 5
        data:
        - size: size
          inventoryObject:
            hostName: hostName
            name: name
            objectId: objectId
        - size: size
          inventoryObject:
            hostName: hostName
            name: name
            objectId: objectId
      properties:
        data:
          description: Array of vCenter Servers.
          items:
            $ref: '#/components/schemas/VmwareObjectSizeModel'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
      - data
      - pagination
      type: object
    CredentialsImportSpecCollection:
      example:
        credentials:
        - password: password
          linuxAdditionalSettings:
            addToSudoers: true
            privateKey: privateKey
            autoElevated: true
            passphrase: passphrase
            SSHPort: 0
            rootPassword: rootPassword
            useSu: true
          description: description
          tag: tag
          username: username
        - password: password
          linuxAdditionalSettings:
            addToSudoers: true
            privateKey: privateKey
            autoElevated: true
            passphrase: passphrase
            SSHPort: 0
            rootPassword: rootPassword
            useSu: true
          description: description
          tag: tag
          username: username
      properties:
        credentials:
          description: Array of credentials.
          items:
            $ref: '#/components/schemas/CredentialsImportSpec'
          type: array
          uniqueItems: true
      required:
      - credentials
      type: object
    CredentialsImportSpec:
      example:
        password: password
        linuxAdditionalSettings:
          addToSudoers: true
          privateKey: privateKey
          autoElevated: true
          passphrase: passphrase
          SSHPort: 0
          rootPassword: rootPassword
          useSu: true
        description: description
        tag: tag
        username: username
      properties:
        username:
          description: User name.
          type: string
        password:
          description: Password.
          type: string
        description:
          description: Description of the credentials record.
          type: string
        tag:
          description: Tag used to identify the credentials record.
          type: string
        type:
          $ref: '#/components/schemas/ECredentialsType'
        linuxAdditionalSettings:
          $ref: '#/components/schemas/CredentialsLinuxSettingsImportModel'
      required:
      - tag
      - type
      - username
      type: object
    CredentialsLinuxSettingsImportModel:
      example:
        addToSudoers: true
        privateKey: privateKey
        autoElevated: true
        passphrase: passphrase
        SSHPort: 0
        rootPassword: rootPassword
        useSu: true
      properties:
        SSHPort:
          description: SSH port used to connect to a Linux server.
          type: integer
        autoElevated:
          description: If *true*, the permissions of the account are automatically
            elevated to the root user.
          type: boolean
        addToSudoers:
          description: If *true*, the account is automatically added to the sudoers
            file.
          type: boolean
        useSu:
          description: If *true*, the `su` command is used for Linux distributions
            where the `sudo` command is not available.
          type: boolean
        privateKey:
          description: Private key.
          type: string
        passphrase:
          description: Passphrase that protects the private key.
          type: string
        rootPassword:
          description: Password for the root account.
          type: string
      type: object
    CredentialsExportSpec:
      example:
        types:
        - null
        - null
        names:
        - names
        - names
        ids:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        showHiddenCreds: true
      properties:
        showHiddenCreds:
          description: If *true*, service credentials are exported.
          type: boolean
        ids:
          description: Array of credentials IDs.
          items:
            format: uuid
            type: string
          type: array
          uniqueItems: true
        types:
          description: Array of credentials types.
          items:
            $ref: '#/components/schemas/ECredentialsType'
          type: array
          uniqueItems: true
        names:
          description: Array of credentials user names. Wildcard characters are supported.
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    ProxyExportSpec:
      example:
        types:
        - null
        - null
        names:
        - names
        - names
        ids:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        ids:
          description: Array of backup proxy IDs.
          items:
            format: uuid
            type: string
          type: array
          uniqueItems: true
        types:
          description: Array of backup proxy types.
          items:
            $ref: '#/components/schemas/EProxyType'
          type: array
          uniqueItems: true
        names:
          description: Array of backup proxy names. Wildcard characters are supported.
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    ProxyImportSpecCollection:
      example:
        proxies:
        - server:
            maxTaskCount: 6
            hostName: hostName
            failoverToNetwork: true
            hostToProxyEncryption: true
            connectedDatastores:
              autoSelect: true
              datastores:
              - datastore:
                  hostName: hostName
                  name: name
                  objectId: objectId
                vmCount: 0
              - datastore:
                  hostName: hostName
                  name: name
                  objectId: objectId
                vmCount: 0
            hostTag: hostTag
          description: description
        - server:
            maxTaskCount: 6
            hostName: hostName
            failoverToNetwork: true
            hostToProxyEncryption: true
            connectedDatastores:
              autoSelect: true
              datastores:
              - datastore:
                  hostName: hostName
                  name: name
                  objectId: objectId
                vmCount: 0
              - datastore:
                  hostName: hostName
                  name: name
                  objectId: objectId
                vmCount: 0
            hostTag: hostTag
          description: description
      properties:
        proxies:
          description: Array of backup proxies.
          items:
            $ref: '#/components/schemas/ProxyImportSpec'
          type: array
          uniqueItems: true
      required:
      - proxies
      type: object
    ProxyImportSpec:
      example:
        server:
          maxTaskCount: 6
          hostName: hostName
          failoverToNetwork: true
          hostToProxyEncryption: true
          connectedDatastores:
            autoSelect: true
            datastores:
            - datastore:
                hostName: hostName
                name: name
                objectId: objectId
              vmCount: 0
            - datastore:
                hostName: hostName
                name: name
                objectId: objectId
              vmCount: 0
          hostTag: hostTag
        description: description
      properties:
        description:
          description: Description of the backup proxy.
          type: string
        type:
          $ref: '#/components/schemas/EProxyType'
        server:
          $ref: '#/components/schemas/ProxyServerSettingsImportSpec'
      required:
      - description
      - server
      - type
      type: object
    ProxyServerSettingsImportSpec:
      description: Settings of the server that is used as a backup proxy.
      example:
        maxTaskCount: 6
        hostName: hostName
        failoverToNetwork: true
        hostToProxyEncryption: true
        connectedDatastores:
          autoSelect: true
          datastores:
          - datastore:
              hostName: hostName
              name: name
              objectId: objectId
            vmCount: 0
          - datastore:
              hostName: hostName
              name: name
              objectId: objectId
            vmCount: 0
        hostTag: hostTag
      properties:
        hostName:
          description: Name of the server.
          type: string
        hostTag:
          description: Tag assigned to the server.
          type: string
        transportMode:
          $ref: '#/components/schemas/EBackupProxyTransportMode'
        failoverToNetwork:
          type: boolean
        hostToProxyEncryption:
          description: |
            [For the Network mode] If *true*, VM data is transferred over an encrypted TLS connection.
          type: boolean
        connectedDatastores:
          $ref: '#/components/schemas/ProxyDatastoreSettingsModel'
        maxTaskCount:
          description: Maximum number of concurrent tasks.
          type: integer
      required:
      - hostName
      type: object
    ManageServerExportSpec:
      example:
        types:
        - null
        - null
        names:
        - names
        - names
        ids:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        ids:
          description: Array of server IDs.
          items:
            format: uuid
            type: string
          type: array
          uniqueItems: true
        types:
          description: Array of server types.
          items:
            $ref: '#/components/schemas/EManagedServerType'
          type: array
          uniqueItems: true
        names:
          description: Array of server names. Wildcard characters are supported.
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    ManageServerImportSpecCollection:
      example:
        linuxHosts:
        - sshFingerprint: sshFingerprint
          credentials:
            credentialsTag: credentialsTag
            credentialsName: credentialsName
          name: name
          description: description
          sshSettings:
            managementPort: 7
            serverThisSide: true
            portRangeStart: 5
            portRangeEnd: 2
            sshTimeOutMs: 5
        - sshFingerprint: sshFingerprint
          credentials:
            credentialsTag: credentialsTag
            credentialsName: credentialsName
          name: name
          description: description
          sshSettings:
            managementPort: 7
            serverThisSide: true
            portRangeStart: 5
            portRangeEnd: 2
            sshTimeOutMs: 5
        windowsHosts:
        - networkSettings:
            components:
            - port: 0
            - port: 0
            serverThisSide: true
            portRangeStart: 6
            portRangeEnd: 1
          credentials:
            credentialsTag: credentialsTag
            credentialsName: credentialsName
          name: name
          description: description
        - networkSettings:
            components:
            - port: 0
            - port: 0
            serverThisSide: true
            portRangeStart: 6
            portRangeEnd: 1
          credentials:
            credentialsTag: credentialsTag
            credentialsName: credentialsName
          name: name
          description: description
        viHosts:
        - credentials:
            credentialsTag: credentialsTag
            credentialsName: credentialsName
          port: 9
          certificateThumbprint: certificateThumbprint
          name: name
          description: description
        - credentials:
            credentialsTag: credentialsTag
            credentialsName: credentialsName
          port: 9
          certificateThumbprint: certificateThumbprint
          name: name
          description: description
      properties:
        windowsHosts:
          description: Array of managed Microsoft Windows servers.
          items:
            $ref: '#/components/schemas/WindowsHostImportSpec'
          type: array
          uniqueItems: true
        linuxHosts:
          description: Array of managed Linux servers.
          items:
            $ref: '#/components/schemas/LinuxHostImportSpec'
          type: array
          uniqueItems: true
        viHosts:
          description: Array of VMware vSphere servers.
          items:
            $ref: '#/components/schemas/ViHostImportSpec'
          type: array
          uniqueItems: true
      type: object
    WindowsHostImportSpec:
      example:
        networkSettings:
          components:
          - port: 0
          - port: 0
          serverThisSide: true
          portRangeStart: 6
          portRangeEnd: 1
        credentials:
          credentialsTag: credentialsTag
          credentialsName: credentialsName
        name: name
        description: description
      properties:
        name:
          description: Full DNS name or IP address of the server.
          type: string
        description:
          description: Description of the server.
          type: string
        type:
          $ref: '#/components/schemas/EManagedServerType'
        credentials:
          $ref: '#/components/schemas/CredentialsImportModel'
        networkSettings:
          $ref: '#/components/schemas/WindowsHostPortsModel'
      required:
      - description
      - name
      - type
      type: object
    LinuxHostImportSpec:
      example:
        sshFingerprint: sshFingerprint
        credentials:
          credentialsTag: credentialsTag
          credentialsName: credentialsName
        name: name
        description: description
        sshSettings:
          managementPort: 7
          serverThisSide: true
          portRangeStart: 5
          portRangeEnd: 2
          sshTimeOutMs: 5
      properties:
        name:
          description: Full DNS name or IP address of the server.
          type: string
        description:
          description: Description of the server.
          type: string
        type:
          $ref: '#/components/schemas/EManagedServerType'
        credentials:
          $ref: '#/components/schemas/CredentialsImportModel'
        sshSettings:
          $ref: '#/components/schemas/LinuxHostSSHSettingsModel'
        sshFingerprint:
          description: SSH key fingerprint used to verify the server identity.
          type: string
      required:
      - credentials
      - description
      - name
      - sshFingerprint
      - type
      type: object
    ViHostImportSpec:
      example:
        credentials:
          credentialsTag: credentialsTag
          credentialsName: credentialsName
        port: 9
        certificateThumbprint: certificateThumbprint
        name: name
        description: description
      properties:
        name:
          description: Full DNS name or IP address of the server.
          type: string
        description:
          description: Description of the server.
          type: string
        type:
          $ref: '#/components/schemas/EManagedServerType'
        viHostType:
          $ref: '#/components/schemas/EViHostType'
        credentials:
          $ref: '#/components/schemas/CredentialsImportModel'
        port:
          description: Port used to communicate with the server.
          type: integer
        certificateThumbprint:
          description: |
            [Optional] Certificate thumbprint used to verify the server identity.
          type: string
      required:
      - credentials
      - description
      - name
      - type
      - viHostType
      type: object
    RepositoryExportSpec:
      example:
        types:
        - null
        - null
        names:
        - names
        - names
        ids:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        ids:
          description: Array of backup repository IDs.
          items:
            format: uuid
            type: string
          type: array
          uniqueItems: true
        types:
          description: Array of backup repository types.
          items:
            $ref: '#/components/schemas/ERepositoryType'
          type: array
          uniqueItems: true
        names:
          description: Array of repository names. Wildcard characters are supported.
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    RepositoryImportSpecCollection:
      example:
        SmbRepositories:
        - mountServer:
            writeCacheFolder: writeCacheFolder
            vPowerNFSPortSettings:
              vPowerNFSPort: 5
              mountPort: 1
            vPowerNFSEnabled: true
            mountServerName: mountServerName
          name: name
          description: description
          share:
            credentials:
              credentialsTag: credentialsTag
              credentialsName: credentialsName
            sharePath: sharePath
            gatewayServer:
              autoSelect: true
              gatewayServerName: gatewayServerName
          tag: tag
          repository:
            maxTaskCount: 9
            advancedSettings:
              perVmBackup: true
              decompressBeforeStoring: true
              rotatedDrives: true
              alignDataBlocks: true
            readWriteRate: 3
        - mountServer:
            writeCacheFolder: writeCacheFolder
            vPowerNFSPortSettings:
              vPowerNFSPort: 5
              mountPort: 1
            vPowerNFSEnabled: true
            mountServerName: mountServerName
          name: name
          description: description
          share:
            credentials:
              credentialsTag: credentialsTag
              credentialsName: credentialsName
            sharePath: sharePath
            gatewayServer:
              autoSelect: true
              gatewayServerName: gatewayServerName
          tag: tag
          repository:
            maxTaskCount: 9
            advancedSettings:
              perVmBackup: true
              decompressBeforeStoring: true
              rotatedDrives: true
              alignDataBlocks: true
            readWriteRate: 3
        LinuxLocalRepositories:
        - hostName: hostName
          mountServer:
            writeCacheFolder: writeCacheFolder
            vPowerNFSPortSettings:
              vPowerNFSPort: 5
              mountPort: 1
            vPowerNFSEnabled: true
            mountServerName: mountServerName
          name: name
          description: description
          tag: tag
          repository:
            maxTaskCount: 5
            path: path
            makeRecentBackupsImmutableDays: 7
            useFastCloningOnXFSVolumes: true
            advancedSettings:
              perVmBackup: true
              decompressBeforeStoring: true
              rotatedDrives: true
              alignDataBlocks: true
            useImmutableBackups: true
            readWriteRate: 2
        - hostName: hostName
          mountServer:
            writeCacheFolder: writeCacheFolder
            vPowerNFSPortSettings:
              vPowerNFSPort: 5
              mountPort: 1
            vPowerNFSEnabled: true
            mountServerName: mountServerName
          name: name
          description: description
          tag: tag
          repository:
            maxTaskCount: 5
            path: path
            makeRecentBackupsImmutableDays: 7
            useFastCloningOnXFSVolumes: true
            advancedSettings:
              perVmBackup: true
              decompressBeforeStoring: true
              rotatedDrives: true
              alignDataBlocks: true
            useImmutableBackups: true
            readWriteRate: 2
        WindowsLocalRepositories:
        - hostName: hostName
          mountServer:
            writeCacheFolder: writeCacheFolder
            vPowerNFSPortSettings:
              vPowerNFSPort: 5
              mountPort: 1
            vPowerNFSEnabled: true
            mountServerName: mountServerName
          name: name
          description: description
          tag: tag
          repository:
            maxTaskCount: 0
            path: path
            advancedSettings:
              perVmBackup: true
              decompressBeforeStoring: true
              rotatedDrives: true
              alignDataBlocks: true
            readWriteRate: 6
        - hostName: hostName
          mountServer:
            writeCacheFolder: writeCacheFolder
            vPowerNFSPortSettings:
              vPowerNFSPort: 5
              mountPort: 1
            vPowerNFSEnabled: true
            mountServerName: mountServerName
          name: name
          description: description
          tag: tag
          repository:
            maxTaskCount: 0
            path: path
            advancedSettings:
              perVmBackup: true
              decompressBeforeStoring: true
              rotatedDrives: true
              alignDataBlocks: true
            readWriteRate: 6
        NfsRepositories:
        - mountServer:
            writeCacheFolder: writeCacheFolder
            vPowerNFSPortSettings:
              vPowerNFSPort: 5
              mountPort: 1
            vPowerNFSEnabled: true
            mountServerName: mountServerName
          name: name
          description: description
          share:
            sharePath: sharePath
            gatewayServer:
              autoSelect: true
              gatewayServerName: gatewayServerName
          tag: tag
          repository:
            maxTaskCount: 9
            advancedSettings:
              perVmBackup: true
              decompressBeforeStoring: true
              rotatedDrives: true
              alignDataBlocks: true
            readWriteRate: 3
        - mountServer:
            writeCacheFolder: writeCacheFolder
            vPowerNFSPortSettings:
              vPowerNFSPort: 5
              mountPort: 1
            vPowerNFSEnabled: true
            mountServerName: mountServerName
          name: name
          description: description
          share:
            sharePath: sharePath
            gatewayServer:
              autoSelect: true
              gatewayServerName: gatewayServerName
          tag: tag
          repository:
            maxTaskCount: 9
            advancedSettings:
              perVmBackup: true
              decompressBeforeStoring: true
              rotatedDrives: true
              alignDataBlocks: true
            readWriteRate: 3
      properties:
        WindowsLocalRepositories:
          description: Array of windows local storages.
          items:
            $ref: '#/components/schemas/WindowsLocalStorageImportSpec'
          type: array
          uniqueItems: true
        LinuxLocalRepositories:
          description: Array of linux local storages.
          items:
            $ref: '#/components/schemas/LinuxLocalStorageImportSpec'
          type: array
          uniqueItems: true
        SmbRepositories:
          description: Array of network attached storages.
          items:
            $ref: '#/components/schemas/SmbStorageImportSpec'
          type: array
          uniqueItems: true
        NfsRepositories:
          description: Array of network attached storages.
          items:
            $ref: '#/components/schemas/NfsStorageImportSpec'
          type: array
          uniqueItems: true
      type: object
    WindowsLocalStorageImportSpec:
      example:
        hostName: hostName
        mountServer:
          writeCacheFolder: writeCacheFolder
          vPowerNFSPortSettings:
            vPowerNFSPort: 5
            mountPort: 1
          vPowerNFSEnabled: true
          mountServerName: mountServerName
        name: name
        description: description
        tag: tag
        repository:
          maxTaskCount: 0
          path: path
          advancedSettings:
            perVmBackup: true
            decompressBeforeStoring: true
            rotatedDrives: true
            alignDataBlocks: true
          readWriteRate: 6
      properties:
        name:
          description: Name of the backup repository.
          type: string
        description:
          description: Description of the backup repository.
          type: string
        tag:
          description: VMware vSphere tag assigned to the backup repository.
          type: string
        hostName:
          description: ID of the server that is used as a backup repository.
          type: string
        type:
          $ref: '#/components/schemas/ERepositoryType'
        repository:
          $ref: '#/components/schemas/WindowsLocalRepositorySettingsModel'
        mountServer:
          $ref: '#/components/schemas/MountServerSettingsImportSpec'
      required:
      - description
      - hostName
      - kind
      - mountServer
      - name
      - repository
      - tag
      - type
      type: object
    LinuxLocalStorageImportSpec:
      example:
        hostName: hostName
        mountServer:
          writeCacheFolder: writeCacheFolder
          vPowerNFSPortSettings:
            vPowerNFSPort: 5
            mountPort: 1
          vPowerNFSEnabled: true
          mountServerName: mountServerName
        name: name
        description: description
        tag: tag
        repository:
          maxTaskCount: 5
          path: path
          makeRecentBackupsImmutableDays: 7
          useFastCloningOnXFSVolumes: true
          advancedSettings:
            perVmBackup: true
            decompressBeforeStoring: true
            rotatedDrives: true
            alignDataBlocks: true
          useImmutableBackups: true
          readWriteRate: 2
      properties:
        name:
          description: Name of the backup repository.
          type: string
        description:
          description: Description of the backup repository.
          type: string
        tag:
          description: VMware vSphere tag assigned to the backup repository.
          type: string
        hostName:
          description: ID of the server that is used as a backup repository.
          type: string
        type:
          $ref: '#/components/schemas/ERepositoryType'
        repository:
          $ref: '#/components/schemas/LinuxLocalRepositorySettingsModel'
        mountServer:
          $ref: '#/components/schemas/MountServerSettingsImportSpec'
      required:
      - description
      - hostName
      - kind
      - mountServer
      - name
      - repository
      - tag
      - type
      type: object
    MountServerSettingsImportSpec:
      example:
        writeCacheFolder: writeCacheFolder
        vPowerNFSPortSettings:
          vPowerNFSPort: 5
          mountPort: 1
        vPowerNFSEnabled: true
        mountServerName: mountServerName
      properties:
        mountServerName:
          description: Name of the mount server.
          type: string
        writeCacheFolder:
          description: Path to the folder used for writing cache during mount operations.
          type: string
        vPowerNFSEnabled:
          description: If *true*, the vPower NFS Service is enabled on the mount server.
          type: boolean
        vPowerNFSPortSettings:
          $ref: '#/components/schemas/VPowerNFSPortSettingsModel'
      required:
      - mountServerName
      - vPowerNFSEnabled
      - writeCacheFolder
      type: object
    SmbStorageImportSpec:
      example:
        mountServer:
          writeCacheFolder: writeCacheFolder
          vPowerNFSPortSettings:
            vPowerNFSPort: 5
            mountPort: 1
          vPowerNFSEnabled: true
          mountServerName: mountServerName
        name: name
        description: description
        share:
          credentials:
            credentialsTag: credentialsTag
            credentialsName: credentialsName
          sharePath: sharePath
          gatewayServer:
            autoSelect: true
            gatewayServerName: gatewayServerName
        tag: tag
        repository:
          maxTaskCount: 9
          advancedSettings:
            perVmBackup: true
            decompressBeforeStoring: true
            rotatedDrives: true
            alignDataBlocks: true
          readWriteRate: 3
      properties:
        name:
          description: Name of the backup repository.
          type: string
        description:
          description: Description of the backup repository.
          type: string
        tag:
          description: VMware vSphere tag assigned to the backup repository.
          type: string
        type:
          $ref: '#/components/schemas/ERepositoryType'
        share:
          $ref: '#/components/schemas/SmbRepositoryShareSettingsSpec'
        repository:
          $ref: '#/components/schemas/NetworkRepositorySettingsModel'
        mountServer:
          $ref: '#/components/schemas/MountServerSettingsImportSpec'
      required:
      - description
      - kind
      - mountServer
      - name
      - repository
      - share
      - tag
      - type
      type: object
    NfsStorageImportSpec:
      example:
        mountServer:
          writeCacheFolder: writeCacheFolder
          vPowerNFSPortSettings:
            vPowerNFSPort: 5
            mountPort: 1
          vPowerNFSEnabled: true
          mountServerName: mountServerName
        name: name
        description: description
        share:
          sharePath: sharePath
          gatewayServer:
            autoSelect: true
            gatewayServerName: gatewayServerName
        tag: tag
        repository:
          maxTaskCount: 9
          advancedSettings:
            perVmBackup: true
            decompressBeforeStoring: true
            rotatedDrives: true
            alignDataBlocks: true
          readWriteRate: 3
      properties:
        name:
          description: Name of the backup repository.
          type: string
        description:
          description: Description of the backup repository.
          type: string
        tag:
          description: VMware vSphere tag assigned to the backup repository.
          type: string
        type:
          $ref: '#/components/schemas/ERepositoryType'
        share:
          $ref: '#/components/schemas/NfsRepositoryShareSettingsSpec'
        repository:
          $ref: '#/components/schemas/NetworkRepositorySettingsModel'
        mountServer:
          $ref: '#/components/schemas/MountServerSettingsImportSpec'
      required:
      - description
      - kind
      - mountServer
      - name
      - repository
      - share
      - tag
      - type
      type: object
    SmbRepositoryShareSettingsSpec:
      example:
        credentials:
          credentialsTag: credentialsTag
          credentialsName: credentialsName
        sharePath: sharePath
        gatewayServer:
          autoSelect: true
          gatewayServerName: gatewayServerName
      properties:
        sharePath:
          description: Path to the shared folder that that is used as a backup repository.
          type: string
        credentials:
          $ref: '#/components/schemas/CredentialsImportModel'
        gatewayServer:
          $ref: '#/components/schemas/RepositoryShareGatewayImportSpec'
      required:
      - credentials
      - sharePath
      type: object
    NfsRepositoryShareSettingsSpec:
      example:
        sharePath: sharePath
        gatewayServer:
          autoSelect: true
          gatewayServerName: gatewayServerName
      properties:
        sharePath:
          description: Path to the shared folder that that is used as a backup repository.
          type: string
        gatewayServer:
          $ref: '#/components/schemas/RepositoryShareGatewayImportSpec'
      required:
      - sharePath
      type: object
    RepositoryShareGatewayImportSpec:
      description: Settings for the gateway server.
      example:
        autoSelect: true
        gatewayServerName: gatewayServerName
      properties:
        autoSelect:
          description: If *true*, Veeam Backup & Replication automatically selects
            a gateway server.
          type: boolean
        gatewayServerName:
          description: Name of the gateway server.
          type: string
      type: object
    EncryptionPasswordsFilters:
      properties:
        skip:
          format: int32
          type: integer
        limit:
          format: int32
          type: integer
        orderColumn:
          $ref: '#/components/schemas/EEncryptionPasswordsFiltersOrderColumn'
        orderAsc:
          type: boolean
      type: object
    EEncryptionPasswordsFiltersOrderColumn:
      enum:
      - Hint
      - ModificationTime
      type: string
    EncryptionPasswordSpec:
      example:
        password: password
        hint: hint
        tag: tag
      properties:
        password:
          description: Password for data encryption. If you lose the password, you
            will not be able to restore it.
          type: string
        hint:
          description: Hint for the encryption password. Provide a meaningful hint
            that will help you recall the password.
          type: string
        tag:
          description: Tag for the encryption password.
          type: string
      required:
      - hint
      - password
      type: object
    EncryptionPasswordsResult:
      example:
        pagination:
          total: 6
          count: 1
          limit: 5
          skip: 5
        data:
        - modificationTime: 2000-01-23T04:56:07.000+00:00
          hint: hint
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tag: tag
        - modificationTime: 2000-01-23T04:56:07.000+00:00
          hint: hint
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tag: tag
      properties:
        data:
          description: Array of encryption passwords.
          items:
            $ref: '#/components/schemas/EncryptionPasswordModel'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
      - data
      - pagination
      type: object
    EncryptionPasswordModel:
      example:
        modificationTime: 2000-01-23T04:56:07.000+00:00
        hint: hint
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        tag: tag
      properties:
        id:
          description: ID of the encryption password.
          format: uuid
          type: string
        hint:
          description: Hint for the encryption password.
          type: string
        modificationTime:
          description: Date and time the password was last modified.
          format: date-time
          type: string
        tag:
          description: Tag for the encryption password.
          type: string
      required:
      - hint
      - id
      type: object
    EncryptionPasswordImportSpecCollection:
      example:
        encryptionPasswords:
        - password: password
          hint: hint
          tag: tag
        - password: password
          hint: hint
          tag: tag
      properties:
        encryptionPasswords:
          description: Array of encryption passwords.
          items:
            $ref: '#/components/schemas/EncryptionPasswordImportSpec'
          type: array
          uniqueItems: true
      type: object
    EncryptionPasswordImportSpec:
      example:
        password: password
        hint: hint
        tag: tag
      properties:
        password:
          description: Password.
          type: string
        hint:
          description: Hint for the encryption password.
          type: string
        tag:
          description: Tag for the encryption password.
          type: string
      required:
      - hint
      - password
      type: object
    EncryptionPasswordExportSpec:
      example:
        modificationTimeFrom: 2000-01-23T04:56:07.000+00:00
        hints:
        - hints
        - hints
        ids:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        tags:
        - tags
        - tags
      properties:
        modificationTimeFrom:
          description: Date and time the password was last modified.
          format: date-time
          type: string
        ids:
          description: Array of password IDs.
          items:
            format: uuid
            type: string
          type: array
          uniqueItems: true
        hints:
          description: Array of password hints.
          items:
            type: string
          type: array
          uniqueItems: true
        tags:
          description: Array of password tags.
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    BackupsFilters:
      properties:
        skip:
          format: int32
          type: integer
        limit:
          format: int32
          type: integer
        orderColumn:
          $ref: '#/components/schemas/EBackupsFiltersOrderColumn'
        orderAsc:
          type: boolean
        nameFilter:
          type: string
        createdAfterFilter:
          format: date-time
          type: string
        createdBeforeFilter:
          format: date-time
          type: string
        platformIdFilter:
          format: uuid
          type: string
        jobIdFilter:
          format: uuid
          type: string
        policyTagFilter:
          type: string
      type: object
    EBackupsFiltersOrderColumn:
      enum:
      - Name
      - CreationTime
      - PlatformId
      - JobId
      - PolicyTag
      type: string
    BackupsResult:
      example:
        pagination:
          total: 6
          count: 1
          limit: 5
          skip: 5
        data:
        - jobId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          policyTag: policyTag
          creationTime: 2000-01-23T04:56:07.000+00:00
          name: name
          repositoryId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          platformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - jobId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          policyTag: policyTag
          creationTime: 2000-01-23T04:56:07.000+00:00
          name: name
          repositoryId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          platformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        data:
          description: Array of backups.
          items:
            $ref: '#/components/schemas/BackupModel'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
      - data
      - pagination
      type: object
    BackupModel:
      example:
        jobId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        policyTag: policyTag
        creationTime: 2000-01-23T04:56:07.000+00:00
        name: name
        repositoryId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        platformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          description: ID of the backup.
          format: uuid
          type: string
        jobId:
          description: ID of the job that created the backup.
          format: uuid
          type: string
        policyTag:
          description: Tag that identifies retention policy.
          type: string
        name:
          description: Name of the job that created the backup.
          type: string
        platformName:
          $ref: '#/components/schemas/EPlatformType'
        platformId:
          description: ID of the platform of the backup resource.
          format: uuid
          type: string
        creationTime:
          description: Date and time when the backup was created.
          format: date-time
          type: string
        repositoryId:
          description: ID of the backup repository where the backup is stored.
          format: uuid
          type: string
      required:
      - creationTime
      - id
      - name
      - platformId
      - platformName
      - repositoryId
      - type
      type: object
    EPlatformType:
      enum:
      - VMware
      - HyperV
      - Vcd
      - WindowsPhysical
      - LinuxPhysical
      - Tape
      - NasBackup
      - CustomPlatform
      type: string
    BackupObjectsFilters:
      properties:
        skip:
          format: int32
          type: integer
        limit:
          format: int32
          type: integer
        orderColumn:
          $ref: '#/components/schemas/EBackupObjectsFiltersOrderColumn'
        orderAsc:
          type: boolean
        nameFilter:
          type: string
        platformNameFilter:
          $ref: '#/components/schemas/EPlatformType'
        platformIdFilter:
          format: uuid
          type: string
        typeFilter:
          type: string
        viTypeFilter:
          type: string
      type: object
    EBackupObjectsFiltersOrderColumn:
      enum:
      - Name
      - ObjectId
      - PlatformId
      - Type
      type: string
    BackupObjectsResult:
      example:
        pagination:
          total: 6
          count: 1
          limit: 5
          skip: 5
        data:
        - restorePointsCount: 0
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          platformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          type: type
        - restorePointsCount: 0
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          platformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          type: type
      properties:
        data:
          description: Array of backup objects.
          items:
            $ref: '#/components/schemas/BackupObjectModel'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
      - data
      - pagination
      type: object
    BackupObjectModel:
      discriminator:
        mapping:
          VmWare: '#/components/schemas/ViBackupObjectModel'
        propertyName: platformName
      example:
        restorePointsCount: 0
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        platformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        type: type
      properties:
        id:
          description: ID of the object.
          format: uuid
          type: string
        name:
          description: Name of the object.
          type: string
        type:
          description: Type of the object.
          type: string
        platformName:
          $ref: '#/components/schemas/EPlatformType'
        platformId:
          description: Id of the platform where the object was created.
          format: uuid
          type: string
        restorePointsCount:
          description: Number of restore points.
          type: integer
      required:
      - id
      - platformName
      type: object
    ViBackupObjectModel:
      allOf:
      - $ref: '#/components/schemas/BackupObjectModel'
      - $ref: '#/components/schemas/ViBackupObjectModel_allOf'
    ObjectRestorePointsFilters:
      properties:
        skip:
          format: int32
          type: integer
        limit:
          format: int32
          type: integer
        orderColumn:
          $ref: '#/components/schemas/EObjectRestorePointsFiltersOrderColumn'
        orderAsc:
          type: boolean
        createdAfterFilter:
          format: date-time
          type: string
        createdBeforeFilter:
          format: date-time
          type: string
        nameFilter:
          type: string
        platformNameFilter:
          $ref: '#/components/schemas/EPlatformType'
        platformIdFilter:
          format: uuid
          type: string
        backupIdFilter:
          format: uuid
          type: string
        backupObjectIdFilter:
          format: uuid
          type: string
      type: object
    EObjectRestorePointsFiltersOrderColumn:
      enum:
      - CreationTime
      - PlatformId
      - BackupId
      type: string
    ObjectRestorePointsResult:
      example:
        pagination:
          total: 6
          count: 1
          limit: 5
          skip: 5
        data:
        - allowedOperations:
          - null
          - null
          creationTime: 2000-01-23T04:56:07.000+00:00
          backupId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          platformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - allowedOperations:
          - null
          - null
          creationTime: 2000-01-23T04:56:07.000+00:00
          backupId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          platformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        data:
          description: Array of restore points.
          items:
            $ref: '#/components/schemas/ObjectRestorePointModel'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
      - data
      - pagination
      type: object
    ObjectRestorePointModel:
      example:
        allowedOperations:
        - null
        - null
        creationTime: 2000-01-23T04:56:07.000+00:00
        backupId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        platformId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        platformName:
          $ref: '#/components/schemas/EPlatformType'
        platformId:
          description: ID of a platform on which the object was created.
          format: uuid
          type: string
        creationTime:
          description: Date and time when the restore point was created.
          format: date-time
          type: string
        backupId:
          description: ID of a backup that contains the restore point.
          format: uuid
          type: string
        allowedOperations:
          description: Array of operations allowed for the restore point.
          items:
            $ref: '#/components/schemas/EObjectRestorePointOperation'
          type: array
      required:
      - allowedOperations
      - backupId
      - creationTime
      - id
      - name
      - paltformName
      - platformId
      type: object
    EObjectRestorePointOperation:
      enum:
      - VmwareInstantRecoveryFcd
      type: string
    ObjectRestorePointDisksResult:
      example:
        pagination:
          total: 6
          count: 1
          limit: 5
          skip: 5
        data:
        - uid: uid
          name: name
          capacity: 0
        - uid: uid
          name: name
          capacity: 0
      properties:
        data:
          description: Array of disks.
          items:
            $ref: '#/components/schemas/ObjectRestorePointDiskModel'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
      - data
      - pagination
      type: object
    ObjectRestorePointDiskModel:
      example:
        uid: uid
        name: name
        capacity: 0
      properties:
        uid:
          description: ID of the disk.
          type: string
        type:
          $ref: '#/components/schemas/EDiskInfoType'
        name:
          description: Name of the disk.
          type: string
        capacity:
          description: Capacity of the disk.
          format: int64
          type: integer
        state:
          $ref: '#/components/schemas/EDiskInfoProcessState'
      required:
      - capacity
      - name
      - state
      - type
      - uid
      type: object
    EDiskInfoProcessState:
      description: Process state of the disk.
      enum:
      - NotProcessed
      - InProcessing
      - PartiallyProcessed
      - Processed
      type: string
    EDiskInfoType:
      description: Type of the disk.
      enum:
      - Unknown
      - Simple
      - Vi
      - Hv
      - HvRawDiskFile
      - EndPoint
      type: string
    VmwareFcdInstantRecoverySpec:
      example:
        writeCache:
          redirectIsEnabled: true
          cacheDatastore:
            hostName: hostName
            name: name
            objectId: objectId
          storagePolicy:
            hostName: hostName
            name: name
            objectId: objectId
        destinationCluster:
          hostName: hostName
          name: name
          objectId: objectId
        objectRestorePointId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        disksMapping:
        - mountedDiskName: mountedDiskName
          nameInBackup: nameInBackup
          registeredFcdName: registeredFcdName
        - mountedDiskName: mountedDiskName
          nameInBackup: nameInBackup
          registeredFcdName: registeredFcdName
      properties:
        objectRestorePointId:
          description: ID of the restore point.
          format: uuid
          type: string
        destinationCluster:
          $ref: '#/components/schemas/VmwareObjectModel'
        disksMapping:
          description: Array of disks that will be restored.
          items:
            $ref: '#/components/schemas/VmwareFcdInstantRecoveryDiskSpec'
          type: array
        writeCache:
          $ref: '#/components/schemas/VmwareFcdWriteCacheSpec'
      required:
      - destinationCluster
      - disksMapping
      - objectRestorePointId
      type: object
    VmwareFcdInstantRecoveryMountsFilters:
      properties:
        skip:
          format: int32
          type: integer
        limit:
          format: int32
          type: integer
        orderColumn:
          $ref: '#/components/schemas/EVmwareFcdInstantRecoveryMountsFiltersOrderColumn'
        orderAsc:
          type: boolean
        nameFilter:
          type: string
        stateFilter:
          $ref: '#/components/schemas/EInstantRecoveryMountState'
      type: object
    EVmwareFcdInstantRecoveryMountsFiltersOrderColumn:
      enum:
      - state
      - name
      type: string
    VmwareFcdInstantRecoveryMountsResult:
      example:
        pagination:
          total: 6
          count: 1
          limit: 5
          skip: 5
        data:
        - errorMessage: errorMessage
          mountedDisks:
          - mountedDiskName: mountedDiskName
            nameInBackup: nameInBackup
            registeredFcdName: registeredFcdName
            objectId: objectId
          - mountedDiskName: mountedDiskName
            nameInBackup: nameInBackup
            registeredFcdName: registeredFcdName
            objectId: objectId
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sessionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          spec:
            writeCache:
              redirectIsEnabled: true
              cacheDatastore:
                hostName: hostName
                name: name
                objectId: objectId
              storagePolicy:
                hostName: hostName
                name: name
                objectId: objectId
            destinationCluster:
              hostName: hostName
              name: name
              objectId: objectId
            objectRestorePointId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            disksMapping:
            - mountedDiskName: mountedDiskName
              nameInBackup: nameInBackup
              registeredFcdName: registeredFcdName
            - mountedDiskName: mountedDiskName
              nameInBackup: nameInBackup
              registeredFcdName: registeredFcdName
        - errorMessage: errorMessage
          mountedDisks:
          - mountedDiskName: mountedDiskName
            nameInBackup: nameInBackup
            registeredFcdName: registeredFcdName
            objectId: objectId
          - mountedDiskName: mountedDiskName
            nameInBackup: nameInBackup
            registeredFcdName: registeredFcdName
            objectId: objectId
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sessionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          spec:
            writeCache:
              redirectIsEnabled: true
              cacheDatastore:
                hostName: hostName
                name: name
                objectId: objectId
              storagePolicy:
                hostName: hostName
                name: name
                objectId: objectId
            destinationCluster:
              hostName: hostName
              name: name
              objectId: objectId
            objectRestorePointId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            disksMapping:
            - mountedDiskName: mountedDiskName
              nameInBackup: nameInBackup
              registeredFcdName: registeredFcdName
            - mountedDiskName: mountedDiskName
              nameInBackup: nameInBackup
              registeredFcdName: registeredFcdName
      properties:
        data:
          description: Array of FCD mounts.
          items:
            $ref: '#/components/schemas/VmwareFcdInstantRecoveryMount'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
      - data
      - pagination
      type: object
    VmwareFcdInstantRecoveryMount:
      example:
        errorMessage: errorMessage
        mountedDisks:
        - mountedDiskName: mountedDiskName
          nameInBackup: nameInBackup
          registeredFcdName: registeredFcdName
          objectId: objectId
        - mountedDiskName: mountedDiskName
          nameInBackup: nameInBackup
          registeredFcdName: registeredFcdName
          objectId: objectId
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        sessionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        spec:
          writeCache:
            redirectIsEnabled: true
            cacheDatastore:
              hostName: hostName
              name: name
              objectId: objectId
            storagePolicy:
              hostName: hostName
              name: name
              objectId: objectId
          destinationCluster:
            hostName: hostName
            name: name
            objectId: objectId
          objectRestorePointId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          disksMapping:
          - mountedDiskName: mountedDiskName
            nameInBackup: nameInBackup
            registeredFcdName: registeredFcdName
          - mountedDiskName: mountedDiskName
            nameInBackup: nameInBackup
            registeredFcdName: registeredFcdName
      properties:
        id:
          description: Mount ID.
          format: uuid
          type: string
        sessionId:
          description: ID of the restore session. Use the ID to track the progress.
            For details, see [Get Session](#operation/GetSession).
          format: uuid
          type: string
        state:
          $ref: '#/components/schemas/EInstantRecoveryMountState'
        spec:
          $ref: '#/components/schemas/VmwareFcdInstantRecoverySpec'
        errorMessage:
          type: string
        mountedDisks:
          description: Array of mounted disks.
          items:
            $ref: '#/components/schemas/VmwareFcdInstantRecoveryDiskInfo'
          type: array
      required:
      - id
      - sessionId
      - spec
      - state
      type: object
    VmwareFcdInstantRecoveryDiskSpec:
      example:
        mountedDiskName: mountedDiskName
        nameInBackup: nameInBackup
        registeredFcdName: registeredFcdName
      properties:
        nameInBackup:
          description: Disk name displayed in the backup.
          type: string
        mountedDiskName:
          description: Name of the VMDK file that will be stored in the datastore.
          type: string
        registeredFcdName:
          description: Name under which the disk will be registered as an FCD in the
            vCenter Managed Object Browser.
          type: string
      required:
      - mountedDiskName
      - nameInBackup
      - registeredFcdName
      type: object
    VmwareFcdInstantRecoveryDiskInfo:
      example:
        mountedDiskName: mountedDiskName
        nameInBackup: nameInBackup
        registeredFcdName: registeredFcdName
        objectId: objectId
      properties:
        nameInBackup:
          description: Disk name displayed in the backup.
          type: string
        mountedDiskName:
          description: Name of the VMDK file that is stored in the datastore.
          type: string
        registeredFcdName:
          description: Name under which the disk is registered as an FCD in the vCenter
            Managed Object Browser.
          type: string
        objectId:
          description: FCD ID.
          type: string
      required:
      - mountedDiskName
      - nameInBackup
      - objectId
      - registeredFcdName
      type: object
    VmwareFcdWriteCacheSpec:
      description: Write cache for recovered disks.
      example:
        redirectIsEnabled: true
        cacheDatastore:
          hostName: hostName
          name: name
          objectId: objectId
        storagePolicy:
          hostName: hostName
          name: name
          objectId: objectId
      properties:
        redirectIsEnabled:
          description: If *true*, cache redirection is enabled. In this case, all
            changes made to the recovered disks while the Instant FCD Recovery is
            active are redirected to the specified `cacheDatastore` associated with
            the `storagePolicy`.
          type: boolean
        cacheDatastore:
          $ref: '#/components/schemas/VmwareObjectModel'
        storagePolicy:
          $ref: '#/components/schemas/VmwareObjectModel'
      required:
      - redirectIsEnabled
      type: object
    EInstantRecoveryMountState:
      description: Mount state.
      enum:
      - Failed
      - Mounting
      - Mounted
      - Dismounting
      type: string
    ScaleOutRepositoriesResult:
      example:
        pagination:
          total: 6
          count: 1
          limit: 5
          skip: 5
        data:
        - capacityTier:
            extentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            encryption:
              isEnabled: true
              encryptionPasswordTag: encryptionPasswordTag
              encryptionPasswordIdOrNull: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            offloadWindow:
              days:
              - hours: hours
              - hours: hours
            copyPolicyEnabled: true
            movePolicyEnabled: true
            operationalRestorePeriodDays: 0
            enabled: true
            overridePolicy:
              overrideSpaceThresholdPercents: 6
              isEnabled: true
          performanceTier:
            performanceExtents:
            - name: name
              id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            - name: name
              id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            advancedSettings:
              perVmBackup: true
              fullWhenExtentOffline: true
          name: name
          description: description
          placementPolicy:
            settings:
            - extentName: extentName
            - extentName: extentName
          archiveTier:
            extentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            advancedSettings:
              archiveDeduplicationEnabled: true
              costOptimizedArchiveEnabled: true
            isEnabled: true
            archivePeriodDays: 1
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tag: tag
        - capacityTier:
            extentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            encryption:
              isEnabled: true
              encryptionPasswordTag: encryptionPasswordTag
              encryptionPasswordIdOrNull: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            offloadWindow:
              days:
              - hours: hours
              - hours: hours
            copyPolicyEnabled: true
            movePolicyEnabled: true
            operationalRestorePeriodDays: 0
            enabled: true
            overridePolicy:
              overrideSpaceThresholdPercents: 6
              isEnabled: true
          performanceTier:
            performanceExtents:
            - name: name
              id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            - name: name
              id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            advancedSettings:
              perVmBackup: true
              fullWhenExtentOffline: true
          name: name
          description: description
          placementPolicy:
            settings:
            - extentName: extentName
            - extentName: extentName
          archiveTier:
            extentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            advancedSettings:
              archiveDeduplicationEnabled: true
              costOptimizedArchiveEnabled: true
            isEnabled: true
            archivePeriodDays: 1
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          tag: tag
      properties:
        data:
          description: Array of scale-out backup repositories.
          items:
            $ref: '#/components/schemas/ScaleOutRepositoryModel'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
      - data
      - pagination
      type: object
    ScaleOutRepositoryModel:
      example:
        capacityTier:
          extentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          encryption:
            isEnabled: true
            encryptionPasswordTag: encryptionPasswordTag
            encryptionPasswordIdOrNull: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          offloadWindow:
            days:
            - hours: hours
            - hours: hours
          copyPolicyEnabled: true
          movePolicyEnabled: true
          operationalRestorePeriodDays: 0
          enabled: true
          overridePolicy:
            overrideSpaceThresholdPercents: 6
            isEnabled: true
        performanceTier:
          performanceExtents:
          - name: name
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          - name: name
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          advancedSettings:
            perVmBackup: true
            fullWhenExtentOffline: true
        name: name
        description: description
        placementPolicy:
          settings:
          - extentName: extentName
          - extentName: extentName
        archiveTier:
          extentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          advancedSettings:
            archiveDeduplicationEnabled: true
            costOptimizedArchiveEnabled: true
          isEnabled: true
          archivePeriodDays: 1
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        tag: tag
      properties:
        id:
          description: ID of the scale-out backup repository.
          format: uuid
          type: string
        name:
          description: Name of the scale-out backup repository.
          type: string
        description:
          description: Description of the scale-out backup repository.
          type: string
        tag:
          description: Tag assigned to of the scale-out backup repository.
          type: string
        performanceTier:
          $ref: '#/components/schemas/PerformanceTierModel'
        placementPolicy:
          $ref: '#/components/schemas/PlacementPolicyModel'
        capacityTier:
          $ref: '#/components/schemas/CapacityTierModel'
        archiveTier:
          $ref: '#/components/schemas/ArchiveTierModel'
      required:
      - description
      - id
      - name
      - performanceTier
      - tag
      type: object
    PerformanceTierModel:
      description: Performance tier.
      example:
        performanceExtents:
        - name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        advancedSettings:
          perVmBackup: true
          fullWhenExtentOffline: true
      properties:
        performanceExtents:
          description: Array of performance extents.
          items:
            $ref: '#/components/schemas/PerformanceExtentModel'
          type: array
        advancedSettings:
          $ref: '#/components/schemas/PerformanceTierAdvancedSettingsModel'
      type: object
    PerformanceExtentModel:
      example:
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          description: ID of the backup repository added as a performance extent.
          format: uuid
          type: string
        name:
          description: Name of the backup repository added as a performance extent.
          type: string
        status:
          $ref: '#/components/schemas/ERepositoryExtentStatusType'
      required:
      - id
      - name
      - status
      type: object
    PerformanceTierAdvancedSettingsModel:
      description: Advanced settings of the performance tier.
      example:
        perVmBackup: true
        fullWhenExtentOffline: true
      properties:
        perVmBackup:
          description: If *true*, Veeam Backup & Replication creates a separate backup
            file for every VM in the job.
          type: boolean
        fullWhenExtentOffline:
          description: If *true*, Veeam Backup & Replication creates a full backup
            file instead of an incremental backup file in case the required extent
            is offline.
          type: boolean
      type: object
    PlacementPolicyModel:
      description: Backup file placement policy.
      example:
        settings:
        - extentName: extentName
        - extentName: extentName
      properties:
        type:
          $ref: '#/components/schemas/EPlacementPolicyType'
        settings:
          items:
            $ref: '#/components/schemas/BackupPlacementSettingsModel'
          type: array
      required:
      - settings
      - type
      type: object
    EPlacementPolicyType:
      description: Type of placement policy.
      enum:
      - DataLocality
      - Performance
      type: string
    ERepositoryExtentStatusType:
      enum:
      - Normal
      - Evacuate
      - Pending
      - Sealed
      - Maintenance
      type: string
    BackupPlacementSettingsModel:
      description: Settings of the performance placement policy.
      example:
        extentName: extentName
      properties:
        extentName:
          description: Name of a performance extent.
          type: string
        allowedBackups:
          $ref: '#/components/schemas/EAllowedBackupsType'
      required:
      - allowedBackups
      - extentName
      type: object
    EAllowedBackupsType:
      description: Type of backup files that can be stored on the extent.
      enum:
      - All
      - FullsOnly
      - IncrementsOnly
      type: string
    CapacityTierModel:
      description: Capacity tier.
      example:
        extentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        encryption:
          isEnabled: true
          encryptionPasswordTag: encryptionPasswordTag
          encryptionPasswordIdOrNull: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        offloadWindow:
          days:
          - hours: hours
          - hours: hours
        copyPolicyEnabled: true
        movePolicyEnabled: true
        operationalRestorePeriodDays: 0
        enabled: true
        overridePolicy:
          overrideSpaceThresholdPercents: 6
          isEnabled: true
      properties:
        enabled:
          description: If *true*, the capacity tier is enabled.
          type: boolean
        extentId:
          description: ID of an object storage repository added as a capacity extent.
          format: uuid
          type: string
        offloadWindow:
          $ref: '#/components/schemas/BackupWindowSettingModel'
        copyPolicyEnabled:
          description: If *true*, Veeam Backup & Replication copies backups from the
            performance extents to the capacity extent as soon as the backups are
            created.
          type: boolean
        movePolicyEnabled:
          description: If *true*, Veeam Backup & Replication moves backup files that
            belong to inactive backup chains from the performance extents to the capacity
            extent.
          type: boolean
        operationalRestorePeriodDays:
          description: Number of days after which inactive backup chains on the performance
            extents are moved to the capacity extent. Specify *0* to offload inactive
            backup chains on the same day they are created.
          type: integer
        overridePolicy:
          $ref: '#/components/schemas/CapacityTierOverridePolicyModel'
        encryption:
          $ref: '#/components/schemas/BackupStorageSettingsEncryptionModel'
      type: object
    CapacityTierOverridePolicyModel:
      description: Override policy.
      example:
        overrideSpaceThresholdPercents: 6
        isEnabled: true
      properties:
        isEnabled:
          description: If *true*, Veeam Backup & Replication moves oldest backup files
            sooner if scale-out backup repository is reaching the threshold.
          type: boolean
        overrideSpaceThresholdPercents:
          description: Space threshold of the scale-out backup repository, in percent.
          type: integer
      type: object
    ArchiveTierModel:
      description: Archive tier.
      example:
        extentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        advancedSettings:
          archiveDeduplicationEnabled: true
          costOptimizedArchiveEnabled: true
        isEnabled: true
        archivePeriodDays: 1
      properties:
        isEnabled:
          description: If *true*, the archive tier is enabled.
          type: boolean
        extentId:
          description: ID of an object storage repository added as an archive extent.
          format: uuid
          type: string
        archivePeriodDays:
          description: Number of days after which backup chains on the capacity extent
            are moved to the archive extent. Specify *0* to offload inactive backup
            chains on the same day they are created.
          type: integer
        advancedSettings:
          $ref: '#/components/schemas/ArchiveTierAdvancedSettingsModel'
      required:
      - isEnabled
      type: object
    ArchiveTierAdvancedSettingsModel:
      description: Advanced settings of the archive tier.
      example:
        archiveDeduplicationEnabled: true
        costOptimizedArchiveEnabled: true
      properties:
        costOptimizedArchiveEnabled:
          description: If *true*, backups are archived if the remaining retention
            time is above minimum storage period for the repository.
          type: boolean
        archiveDeduplicationEnabled:
          description: If *true*, each backup is stored as a delta to the previous
            one.
          type: boolean
      type: object
    ScaleOutRepositoriesFilters:
      properties:
        skip:
          description: Number of repositories to skip.
          format: int32
          type: integer
        limit:
          description: Maximum number of repositories to return.
          format: int32
          type: integer
        orderColumn:
          $ref: '#/components/schemas/EScaleOutRepositoryFiltersOrderColumn'
        orderAsc:
          description: Sorts repositories in the ascending order by the `orderColumn`
            parameter.
          type: boolean
        nameFilter:
          description: Filters repositories by the `nameFilter` substring. The substring
            can be part of any repository parameter.
          type: string
      type: object
    EScaleOutRepositoryFiltersOrderColumn:
      enum:
      - Name
      - Description
      - Type
      - Host
      - Path
      type: string
    VmwareFcdQuickMigrationSpec:
      example:
        mountedDiskNames:
        - mountedDiskNames
        - mountedDiskNames
        storagePolicy:
          hostName: hostName
          name: name
          objectId: objectId
        targetDatastore:
          hostName: hostName
          name: name
          objectId: objectId
      properties:
        mountedDiskNames:
          description: Array of disks that will be migrated to the `targetDatastore`
            associated with the `storagePolicy`.
          items:
            type: string
          type: array
        targetDatastore:
          $ref: '#/components/schemas/VmwareObjectModel'
        storagePolicy:
          $ref: '#/components/schemas/VmwareObjectModel'
      required:
      - targetDatastore
      type: object
    RepositoryStatesResult:
      example:
        pagination:
          total: 6
          count: 1
          limit: 5
          skip: 5
        data:
        - hostName: hostName
          path: path
          freeGB: 6.027456183070403
          usedSpaceGB: 1.4658129805029452
          capacityGB: 0.8008281904610115
          name: name
          description: description
          hostId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - hostName: hostName
          path: path
          freeGB: 6.027456183070403
          usedSpaceGB: 1.4658129805029452
          capacityGB: 0.8008281904610115
          name: name
          description: description
          hostId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        data:
          description: Array of repository states.
          items:
            $ref: '#/components/schemas/RepositoryStateModel'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
      - data
      - pagination
      type: object
    RepositoryStateModel:
      example:
        hostName: hostName
        path: path
        freeGB: 6.027456183070403
        usedSpaceGB: 1.4658129805029452
        capacityGB: 0.8008281904610115
        name: name
        description: description
        hostId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          description: ID of the backup repository.
          format: uuid
          type: string
        name:
          description: Name of the backup repository.
          type: string
        type:
          $ref: '#/components/schemas/ERepositoryType'
        description:
          type: string
        hostId:
          description: ID of the server that is used as a backup repository.
          format: uuid
          type: string
        hostName:
          description: Name of the server that is used as a backup repository.
          type: string
        path:
          description: Path to the folder where backup files are stored.
          type: string
        capacityGB:
          description: Repository capacity in GB.
          format: double
          type: number
        freeGB:
          description: Repository free space in GB.
          format: double
          type: number
        usedSpaceGB:
          description: Repository used space in GB.
          format: double
          type: number
      required:
      - capacityGB
      - description
      - freeGB
      - id
      - name
      - type
      - usedSpaceGB
      type: object
    RepositoryStatesFilters:
      description: Filters repositories by the specified parameters.
      properties:
        skip:
          description: Skips the specified number of repositories.
          format: int32
          type: integer
        limit:
          description: Returns the specified number of repositories.
          format: int32
          type: integer
        orderColumn:
          $ref: '#/components/schemas/ERepositoryStatesFiltersOrderColumn'
        orderAsc:
          description: Sorts repositories in the ascending order by the `orderColumn`
            parameter.
          type: boolean
        idFilter:
          format: uuid
          type: string
        nameFilter:
          description: Filters repositories by the `nameFilter` pattern. The pattern
            can match any repository parameter. To substitute one or more characters,
            use the asterisk (*) character at the beginning and/or at the end.
          type: string
        typeFilter:
          $ref: '#/components/schemas/ERepositoryType'
        capacityFilter:
          description: Filters repositories by repository capacity.
          format: double
          type: number
        freeSpaceFilter:
          description: Filters repositories by repository free space.
          format: double
          type: number
        usedSpaceFilter:
          description: Filters repositories by repository used space.
          format: double
          type: number
      type: object
    ERepositoryStatesFiltersOrderColumn:
      description: Orders repositories by the specified column.
      enum:
      - Name
      - Type
      - Host
      - Path
      - CapacityGB
      - FreeGB
      - UsedSpaceGB
      - Description
      type: string
    ServicesResult:
      example:
        pagination:
          total: 6
          count: 1
          limit: 5
          skip: 5
        data:
        - port: 0
          name: name
        - port: 0
          name: name
      properties:
        data:
          description: Array of services.
          items:
            $ref: '#/components/schemas/ServicesModel'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationResult'
      required:
      - data
      - pagination
      type: object
    ServicesModel:
      example:
        port: 0
        name: name
      properties:
        name:
          description: Name of the service.
          type: string
        port:
          description: Port used to communicate with the service.
          type: integer
      required:
      - name
      - port
      type: object
    ServicesFilters:
      properties:
        skip:
          format: int32
          type: integer
        limit:
          format: int32
          type: integer
        orderColumn:
          $ref: '#/components/schemas/EServicesFiltersOrderColumn'
        orderAsc:
          type: boolean
        nameFilter:
          type: string
      type: object
    EServicesFiltersOrderColumn:
      enum:
      - Name
      - Port
      type: string
    DeleteRepositoryFilters:
      properties:
        deleteBackups:
          type: boolean
      type: object
    GeneralOptionsModel:
      example:
        emailSettings:
          sendDailyReportsAt: 2000-01-23T04:56:07.000+00:00
          notifyOnWarning: true
          notifyOnFailure: true
          smtpServerName: smtpServerName
          subject: subject
          isEnabled: true
          notifyOnLastRetry: true
          advancedSmtpOptions:
            SSLEnabled: true
            port: 0
            timeoutMs: 6
            credentialsId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            authRequred: true
          from: from
          to: to
          notifyOnSuccess: true
        notifications:
          notifyOnUpdates: true
          storageSpaceThresholdEnabled: true
          skipVMSpaceThreshold: 5
          skipVMSpaceThresholdEnabled: true
          datastoreSpaceThreshold: 5
          datastoreSpaceThresholdEnabled: true
          storageSpaceThreshold: 1
          notifyOnSupportExpiration: true
      properties:
        emailSettings:
          $ref: '#/components/schemas/GeneralOptionsEmailNotificationsModel'
        notifications:
          $ref: '#/components/schemas/GeneralOptionsNotificationsModel'
      type: object
    GeneralOptionsEmailNotificationsModel:
      description: Global email notification settings.
      example:
        sendDailyReportsAt: 2000-01-23T04:56:07.000+00:00
        notifyOnWarning: true
        notifyOnFailure: true
        smtpServerName: smtpServerName
        subject: subject
        isEnabled: true
        notifyOnLastRetry: true
        advancedSmtpOptions:
          SSLEnabled: true
          port: 0
          timeoutMs: 6
          credentialsId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          authRequred: true
        from: from
        to: to
        notifyOnSuccess: true
      properties:
        isEnabled:
          description: If *true*, global email notification settings are enabled.
          type: boolean
        smtpServerName:
          description: Full DNS name or IP address of the SMTP server.
          type: string
        advancedSmtpOptions:
          $ref: '#/components/schemas/AdvancedSmtpOptionsModel'
        from:
          description: Email address from which email notifications must be sent.
          type: string
        to:
          description: Recipient email addresses. Use a semicolon to separate multiple
            addresses.
          type: string
        subject:
          description: |
            Notification subject. Use the following variables in the subject:<br> <ol>
              <li>%Time% — completion time</li>
              <li>%JobName%</li>
              <li>%JobResult%</li>
              <li>%ObjectCount% — number of VMs in the job</li>
              <li>%Issues% — number of VMs in the job that have been processed with the Warning or Failed status</li>
            </ol>
          type: string
        sendDailyReportsAt:
          description: Time when Veeam Backup & Replication sends daily email reports.
          format: date-time
          type: string
        notifyOnSuccess:
          description: If *true*, email notifications are sent when the job completes
            successfully.
          type: boolean
        notifyOnWarning:
          description: If *true*, email notifications are sent when the job completes
            with a warning.
          type: boolean
        notifyOnFailure:
          description: If *true*, email notifications are sent when the job fails.
          type: boolean
        notifyOnLastRetry:
          description: If *true*, email notifications are sent about the final job
            status only (not per every job retry).
          type: boolean
      required:
      - advancedSmtpOptions
      - from
      - isEnabled
      - notifyOnFailure
      - notifyOnLastRetry
      - notifyOnSuccess
      - notifyOnWarning
      - sendDailyReportsAt
      - smtpServerName
      - subject
      - to
      type: object
    AdvancedSmtpOptionsModel:
      description: advanced global email notification settings.
      example:
        SSLEnabled: true
        port: 0
        timeoutMs: 6
        credentialsId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        authRequred: true
      properties:
        port:
          description: Port number for the SMTP server.
          format: int32
          type: integer
        timeoutMs:
          description: Connection timeout for the SMTP server.
          format: int32
          type: integer
        SSLEnabled:
          description: If *true*, secure connection for email operations is used.
          type: boolean
        authRequred:
          description: If *true*, the `credentialsId` credentials are used to connect
            to the SMTP server.
          type: boolean
        credentialsId:
          description: ID of the credentials used to connect to the server.
          format: uuid
          type: string
      required:
      - SSLEnabled
      - authRequred
      - port
      - timeoutMs
      type: object
    GeneralOptionsNotificationsModel:
      example:
        notifyOnUpdates: true
        storageSpaceThresholdEnabled: true
        skipVMSpaceThreshold: 5
        skipVMSpaceThresholdEnabled: true
        datastoreSpaceThreshold: 5
        datastoreSpaceThresholdEnabled: true
        storageSpaceThreshold: 1
        notifyOnSupportExpiration: true
      properties:
        storageSpaceThresholdEnabled:
          description: If *true*, notifications about critical amount of free space
            in backup storage are enabled.
          type: boolean
        storageSpaceThreshold:
          description: Space threshold of backup storage, in percent.
          format: int32
          type: integer
        datastoreSpaceThresholdEnabled:
          description: If *true*, notifications about critical amount of free space
            in production datastore are enabled.
          type: boolean
        datastoreSpaceThreshold:
          description: Space threshold of production datastore, in percent.
          format: int32
          type: integer
        skipVMSpaceThresholdEnabled:
          description: If *true* and the `skipVMSpaceThreshold` threshold is reached,
            Veeam Backup & Replication terminates backup and replication jobs working
            with production datastores before VM snapshots are taken.
          type: boolean
        skipVMSpaceThreshold:
          description: Space threshold of production datastore, in percent.
          format: int32
          type: integer
        notifyOnSupportExpiration:
          description: If *true*, notifications about support contract expiration
            are enabled.
          type: boolean
        notifyOnUpdates:
          description: If *true*, notifications about updates are enabled.
          type: boolean
      required:
      - datastoreSpaceThreshold
      - datastoreSpaceThresholdEnabled
      - notifyOnSupportExpiration
      - notifyOnUpdates
      - skipVMSpaceThreshold
      - skipVMSpaceThresholdEnabled
      - storageSpaceThreshold
      - storageSpaceThresholdEnabled
      type: object
    ConfigBackupModel:
      example:
        schedule:
          isEnabled: true
          daily:
            localTime: localTime
            isEnabled: true
            days:
            - null
            - null
          monthly:
            localTime: localTime
            months:
            - null
            - null
            dayOfMonth: 6
            isEnabled: false
        encryption:
          passwordId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          isEnabled: true
        isEnabled: true
        backupRepositoryId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        restorePointsToKeep: 0
        lastSuccessfulBackup:
          lastSuccessfulTime: 2000-01-23T04:56:07.000+00:00
          sessionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        notifications:
          SNMPEnabled: true
          SMTPSettings:
            notifyOnWarning: true
            recipients:
            - recipients
            - recipients
            subject: subject
            isEnabled: true
            notifyOnError: true
            notifyOnSuccess: true
      properties:
        isEnabled:
          description: If *true*, configuration backup is enabled.
          type: boolean
        backupRepositoryId:
          description: ID of the backup repository on which the configuration backup
            is stored.
          format: uuid
          type: string
        restorePointsToKeep:
          description: Number of restore points to keep in the backup repository.
          format: int32
          type: integer
        notifications:
          $ref: '#/components/schemas/ConfigBackupNotificationsModel'
        schedule:
          $ref: '#/components/schemas/ConfigBackupScheduleModel'
        lastSuccessfulBackup:
          $ref: '#/components/schemas/ConfigBackupLastSuccessfulModel'
        encryption:
          $ref: '#/components/schemas/ConfigBackupEncryptionModel'
      required:
      - backupRepositoryId
      - encryption
      - isEnabled
      - lastSuccessfulBackup
      - notifications
      - restorePointsToKeep
      - schedule
      type: object
    ConfigBackupNotificationsModel:
      description: Notification settings.
      example:
        SNMPEnabled: true
        SMTPSettings:
          notifyOnWarning: true
          recipients:
          - recipients
          - recipients
          subject: subject
          isEnabled: true
          notifyOnError: true
          notifyOnSuccess: true
      properties:
        SNMPEnabled:
          description: If *true*, SNMP traps are enabled for this job.
          type: boolean
        SMTPSettings:
          $ref: '#/components/schemas/ConfigBackupSMTPSettigsModel'
      required:
      - SNMPEnabled
      type: object
    ConfigBackupSMTPSettigsModel:
      description: Email notification settings.
      example:
        notifyOnWarning: true
        recipients:
        - recipients
        - recipients
        subject: subject
        isEnabled: true
        notifyOnError: true
        notifyOnSuccess: true
      properties:
        isEnabled:
          description: If *true*, email notifications are enabled for this job.
          type: boolean
        recipients:
          description: Array of recipients' email addresses.
          items:
            type: string
          type: array
        settingsType:
          $ref: '#/components/schemas/EConfigBackupSMTPSettingsType'
        subject:
          description: |
            Notification subject. Use the following variables in the subject: *%JobResult%*, *%JobName%*, *%Time%* (completion time).
          type: string
        notifyOnSuccess:
          description: If *true*, email notifications are sent when the job completes
            successfully.
          type: boolean
        notifyOnWarning:
          description: If *true*, email notifications are sent when the job completes
            with a warning.
          type: boolean
        notifyOnError:
          description: If *true*, email notifications are sent when the job fails.
          type: boolean
      required:
      - isEnabled
      - notifyOnError
      - notifyOnSuccess
      - notifyOnWarning
      - recipients
      - settingsType
      - subject
      type: object
    EConfigBackupSMTPSettingsType:
      description: Type of notification settings.
      enum:
      - Global
      - Custom
      type: string
    ConfigBackupLastSuccessfulModel:
      description: Last successful backup.
      example:
        lastSuccessfulTime: 2000-01-23T04:56:07.000+00:00
        sessionId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        lastSuccessfulTime:
          description: Date and time when the last successful backup was created.
          format: date-time
          type: string
        sessionId:
          description: ID of the job session.
          format: uuid
          type: string
      type: object
    ConfigBackupScheduleModel:
      description: Scheduling settings.
      example:
        isEnabled: true
        daily:
          localTime: localTime
          isEnabled: true
          days:
          - null
          - null
        monthly:
          localTime: localTime
          months:
          - null
          - null
          dayOfMonth: 6
          isEnabled: false
      properties:
        isEnabled:
          description: If *true*, backup scheduling is enabled.
          type: boolean
        daily:
          $ref: '#/components/schemas/ScheduleDailyModel'
        monthly:
          $ref: '#/components/schemas/ScheduleMonthlyModel'
      required:
      - isEnabled
      type: object
    ConfigBackupEncryptionModel:
      description: Encryption settings.
      example:
        passwordId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        isEnabled: true
      properties:
        isEnabled:
          description: If *true*, backup encryption is enabled.
          type: boolean
        passwordId:
          description: ID of the password used for encryption.
          format: uuid
          type: string
      required:
      - isEnabled
      - passwordId
      type: object
    ScaleOutExtentMaintenanceSpec:
      example:
        repositoryIds:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        repositoryIds:
          items:
            format: uuid
            type: string
          type: array
      required:
      - repositoryIds
      type: object
    ConnectionCertificateModel:
      example:
        fingerprint: fingerprint
        certificate:
          serialNumber: serialNumber
          keyAlgorithm: keyAlgorithm
          issuedTo: issuedTo
          keySize: keySize
          subject: subject
          issuedBy: issuedBy
          thumbprint: thumbprint
          validFrom: 2000-01-23T04:56:07.000+00:00
          validBy: 2000-01-23T04:56:07.000+00:00
      properties:
        fingerprint:
          description: SSH key fingerprint used to verify the server identity.
          type: string
        certificate:
          $ref: '#/components/schemas/CertificateModel'
      type: object
    WindowsHostSpec_allOf:
      properties:
        networkSettings:
          $ref: '#/components/schemas/WindowsHostPortsModel'
      type: object
    LinuxHostModel_allOf:
      properties:
        sshSettings:
          $ref: '#/components/schemas/LinuxHostSSHSettingsModel'
      type: object
    ViHostModel_allOf:
      properties:
        viHostType:
          $ref: '#/components/schemas/EViHostType'
        port:
          description: Port used to communicate with the server.
          type: integer
      required:
      - port
      type: object
    ViHostSpec_allOf:
      properties:
        port:
          description: Port used to communicate with the server.
          type: integer
        certificateThumbprint:
          description: |
            [Optional] Certificate thumbprint used to verify the server identity. For details on how to get the thumbprint, see [Get TLS Certificate or SSH Fingerprint](#operation/GetConnectionCertificate).
          type: string
      type: object
    WindowsLocalStorageSpec_allOf:
      properties:
        hostId:
          description: ID of the server that is used as a backup repository.
          format: uuid
          type: string
        repository:
          $ref: '#/components/schemas/WindowsLocalRepositorySettingsModel'
        mountServer:
          $ref: '#/components/schemas/MountServerSettingsModel'
      required:
      - hostId
      - mountServer
      - repository
      type: object
    LinuxLocalStorageSpec_allOf:
      properties:
        hostId:
          description: ID of the server that is used as a backup repository.
          format: uuid
          type: string
        repository:
          $ref: '#/components/schemas/LinuxLocalRepositorySettingsModel'
        mountServer:
          $ref: '#/components/schemas/MountServerSettingsModel'
      required:
      - hostId
      - mountServer
      - repository
      type: object
    NfsStorageSpec_allOf:
      properties:
        share:
          $ref: '#/components/schemas/NfsRepositoryShareSettingsModel'
        repository:
          $ref: '#/components/schemas/NetworkRepositorySettingsModel'
        mountServer:
          $ref: '#/components/schemas/MountServerSettingsModel'
      required:
      - mountServer
      - repository
      - share
      type: object
    SmbStorageSpec_allOf:
      properties:
        share:
          $ref: '#/components/schemas/SmbRepositoryShareSettingsModel'
        repository:
          $ref: '#/components/schemas/NetworkRepositorySettingsModel'
        mountServer:
          $ref: '#/components/schemas/MountServerSettingsModel'
      required:
      - mountServer
      - repository
      - share
      type: object
    ViProxySpec_allOf:
      properties:
        server:
          $ref: '#/components/schemas/ProxyServerSettingsModel'
      required:
      - server
      type: object
    BackupJobSpec_allOf:
      properties:
        isHighPriority:
          default: false
          description: If *true*, the job has a high priority in getting backup infrastructure
            resources.
          type: boolean
        virtualMachines:
          $ref: '#/components/schemas/BackupJobVirtualMachinesSpec'
        storage:
          $ref: '#/components/schemas/BackupJobStorageModel'
        guestProcessing:
          $ref: '#/components/schemas/BackupJobGuestProcessingModel'
        schedule:
          $ref: '#/components/schemas/BackupScheduleModel'
      required:
      - guestProcessing
      - isHighPriority
      - schedule
      - storage
      - virtualMachines
      type: object
    BackupJobModel_allOf:
      properties:
        isHighPriority:
          description: If *true*, the job has a high priority in getting backup infrastructure
            resources.
          type: boolean
        virtualMachines:
          $ref: '#/components/schemas/BackupJobVirtualMachinesModel'
        storage:
          $ref: '#/components/schemas/BackupJobStorageModel'
        guestProcessing:
          $ref: '#/components/schemas/BackupJobGuestProcessingModel'
        schedule:
          $ref: '#/components/schemas/BackupScheduleModel'
      required:
      - guestProcessing
      - isHighPriority
      - schedule
      - storage
      - virtualMachines
      type: object
    StandardCredentialsSpec_allOf:
      properties:
        tag:
          description: Tag used to identify the credentials record.
          type: string
      type: object
    LinuxCredentialsSpec_allOf:
      properties:
        tag:
          description: Tag used to identify the credentials record.
          type: string
        SSHPort:
          description: SSH port used to connect to a Linux server.
          type: integer
        autoElevated:
          description: If *true*, the permissions of the account are automatically
            elevated to the root user.
          type: boolean
        addToSudoers:
          description: If *true*, the account is automatically added to the sudoers
            file.
          type: boolean
        useSu:
          description: If *true*, the `su` command is used for Linux distributions
            where the `sudo` command is not available.
          type: boolean
        privateKey:
          description: Private key.
          type: string
        passphrase:
          description: Passphrase that protects the private key.
          type: string
        rootPassword:
          description: Password for the root account.
          type: string
      type: object
    LinuxCredentialsModel_allOf:
      properties:
        tag:
          description: Tag used to identify the credentials record.
          type: string
        SSHPort:
          description: SSH port used to connect to a Linux server.
          type: integer
        autoElevated:
          description: If *true*, the permissions of the account are automatically
            elevated to the root user.
          type: boolean
        addToSudoers:
          description: If *true*, the account is automatically added to the sudoers
            file.
          type: boolean
        useSu:
          description: If *true*, the `su` command is used for Linux distributions
            where the `sudo` command is not available.
          type: boolean
        privateKey:
          description: Private key.
          type: string
        passphrase:
          description: Passphrase that protects the private key.
          type: string
      type: object
    ViBackupObjectModel_allOf:
      properties:
        objectId:
          description: |
            ID of the virtual infrastructure object: mo-ref or ID, depending on the virtualization platform.
          type: string
        viType:
          $ref: '#/components/schemas/EVmwareInventoryType'
        path:
          description: Path to the object.
          type: string
      required:
      - objectId
      - viType
      type: object
  securitySchemes:
    Bearer:
      description: Access token in the *Bearer \<access token\>* format.
      in: header
      name: Authorization
      type: apiKey
