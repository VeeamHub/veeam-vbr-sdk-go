/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// ESQLLogsProcessing Type of transaction logs processing.
type ESQLLogsProcessing string

// List of ESQLLogsProcessing
const (
	ESQLLOGSPROCESSING_TRUNCATE ESQLLogsProcessing = "truncate"
	ESQLLOGSPROCESSING_PRESERVE ESQLLogsProcessing = "preserve"
	ESQLLOGSPROCESSING_BACKUP ESQLLogsProcessing = "backup"
	ESQLLOGSPROCESSING_NEVER_TRUNCATE ESQLLogsProcessing = "neverTruncate"
)

// All allowed values of ESQLLogsProcessing enum
var AllowedESQLLogsProcessingEnumValues = []ESQLLogsProcessing{
	"truncate",
	"preserve",
	"backup",
	"neverTruncate",
}

func (v *ESQLLogsProcessing) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ESQLLogsProcessing(value)
	for _, existing := range AllowedESQLLogsProcessingEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ESQLLogsProcessing", value)
}

// NewESQLLogsProcessingFromValue returns a pointer to a valid ESQLLogsProcessing
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewESQLLogsProcessingFromValue(v string) (*ESQLLogsProcessing, error) {
	ev := ESQLLogsProcessing(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ESQLLogsProcessing: valid values are %v", v, AllowedESQLLogsProcessingEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ESQLLogsProcessing) IsValid() bool {
	for _, existing := range AllowedESQLLogsProcessingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ESQLLogsProcessing value
func (v ESQLLogsProcessing) Ptr() *ESQLLogsProcessing {
	return &v
}

type NullableESQLLogsProcessing struct {
	value *ESQLLogsProcessing
	isSet bool
}

func (v NullableESQLLogsProcessing) Get() *ESQLLogsProcessing {
	return v.value
}

func (v *NullableESQLLogsProcessing) Set(val *ESQLLogsProcessing) {
	v.value = val
	v.isSet = true
}

func (v NullableESQLLogsProcessing) IsSet() bool {
	return v.isSet
}

func (v *NullableESQLLogsProcessing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableESQLLogsProcessing(val *ESQLLogsProcessing) *NullableESQLLogsProcessing {
	return &NullableESQLLogsProcessing{value: val, isSet: true}
}

func (v NullableESQLLogsProcessing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableESQLLogsProcessing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

