/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// RepositorySpec - struct for RepositorySpec
type RepositorySpec struct {
	AmazonS3GlacierStorageSpec *AmazonS3GlacierStorageSpec
	AmazonS3StorageSpec *AmazonS3StorageSpec
	AmazonSnowballEdgeStorageSpec *AmazonSnowballEdgeStorageSpec
	AzureArchiveStorageSpec *AzureArchiveStorageSpec
	AzureBlobStorageSpec *AzureBlobStorageSpec
	AzureDataBoxStorageSpec *AzureDataBoxStorageSpec
	GoogleCloudStorageSpec *GoogleCloudStorageSpec
	IBMCloudStorageSpec *IBMCloudStorageSpec
	LinuxHardenedStorageSpec *LinuxHardenedStorageSpec
	LinuxLocalStorageSpec *LinuxLocalStorageSpec
	NfsStorageSpec *NfsStorageSpec
	S3CompatibleStorageSpec *S3CompatibleStorageSpec
	SmbStorageSpec *SmbStorageSpec
	WasabiCloudStorageSpec *WasabiCloudStorageSpec
	WindowsLocalStorageSpec *WindowsLocalStorageSpec
}

// AmazonS3GlacierStorageSpecAsRepositorySpec is a convenience function that returns AmazonS3GlacierStorageSpec wrapped in RepositorySpec
func AmazonS3GlacierStorageSpecAsRepositorySpec(v *AmazonS3GlacierStorageSpec) RepositorySpec {
	return RepositorySpec{
		AmazonS3GlacierStorageSpec: v,
	}
}

// AmazonS3StorageSpecAsRepositorySpec is a convenience function that returns AmazonS3StorageSpec wrapped in RepositorySpec
func AmazonS3StorageSpecAsRepositorySpec(v *AmazonS3StorageSpec) RepositorySpec {
	return RepositorySpec{
		AmazonS3StorageSpec: v,
	}
}

// AmazonSnowballEdgeStorageSpecAsRepositorySpec is a convenience function that returns AmazonSnowballEdgeStorageSpec wrapped in RepositorySpec
func AmazonSnowballEdgeStorageSpecAsRepositorySpec(v *AmazonSnowballEdgeStorageSpec) RepositorySpec {
	return RepositorySpec{
		AmazonSnowballEdgeStorageSpec: v,
	}
}

// AzureArchiveStorageSpecAsRepositorySpec is a convenience function that returns AzureArchiveStorageSpec wrapped in RepositorySpec
func AzureArchiveStorageSpecAsRepositorySpec(v *AzureArchiveStorageSpec) RepositorySpec {
	return RepositorySpec{
		AzureArchiveStorageSpec: v,
	}
}

// AzureBlobStorageSpecAsRepositorySpec is a convenience function that returns AzureBlobStorageSpec wrapped in RepositorySpec
func AzureBlobStorageSpecAsRepositorySpec(v *AzureBlobStorageSpec) RepositorySpec {
	return RepositorySpec{
		AzureBlobStorageSpec: v,
	}
}

// AzureDataBoxStorageSpecAsRepositorySpec is a convenience function that returns AzureDataBoxStorageSpec wrapped in RepositorySpec
func AzureDataBoxStorageSpecAsRepositorySpec(v *AzureDataBoxStorageSpec) RepositorySpec {
	return RepositorySpec{
		AzureDataBoxStorageSpec: v,
	}
}

// GoogleCloudStorageSpecAsRepositorySpec is a convenience function that returns GoogleCloudStorageSpec wrapped in RepositorySpec
func GoogleCloudStorageSpecAsRepositorySpec(v *GoogleCloudStorageSpec) RepositorySpec {
	return RepositorySpec{
		GoogleCloudStorageSpec: v,
	}
}

// IBMCloudStorageSpecAsRepositorySpec is a convenience function that returns IBMCloudStorageSpec wrapped in RepositorySpec
func IBMCloudStorageSpecAsRepositorySpec(v *IBMCloudStorageSpec) RepositorySpec {
	return RepositorySpec{
		IBMCloudStorageSpec: v,
	}
}

// LinuxHardenedStorageSpecAsRepositorySpec is a convenience function that returns LinuxHardenedStorageSpec wrapped in RepositorySpec
func LinuxHardenedStorageSpecAsRepositorySpec(v *LinuxHardenedStorageSpec) RepositorySpec {
	return RepositorySpec{
		LinuxHardenedStorageSpec: v,
	}
}

// LinuxLocalStorageSpecAsRepositorySpec is a convenience function that returns LinuxLocalStorageSpec wrapped in RepositorySpec
func LinuxLocalStorageSpecAsRepositorySpec(v *LinuxLocalStorageSpec) RepositorySpec {
	return RepositorySpec{
		LinuxLocalStorageSpec: v,
	}
}

// NfsStorageSpecAsRepositorySpec is a convenience function that returns NfsStorageSpec wrapped in RepositorySpec
func NfsStorageSpecAsRepositorySpec(v *NfsStorageSpec) RepositorySpec {
	return RepositorySpec{
		NfsStorageSpec: v,
	}
}

// S3CompatibleStorageSpecAsRepositorySpec is a convenience function that returns S3CompatibleStorageSpec wrapped in RepositorySpec
func S3CompatibleStorageSpecAsRepositorySpec(v *S3CompatibleStorageSpec) RepositorySpec {
	return RepositorySpec{
		S3CompatibleStorageSpec: v,
	}
}

// SmbStorageSpecAsRepositorySpec is a convenience function that returns SmbStorageSpec wrapped in RepositorySpec
func SmbStorageSpecAsRepositorySpec(v *SmbStorageSpec) RepositorySpec {
	return RepositorySpec{
		SmbStorageSpec: v,
	}
}

// WasabiCloudStorageSpecAsRepositorySpec is a convenience function that returns WasabiCloudStorageSpec wrapped in RepositorySpec
func WasabiCloudStorageSpecAsRepositorySpec(v *WasabiCloudStorageSpec) RepositorySpec {
	return RepositorySpec{
		WasabiCloudStorageSpec: v,
	}
}

// WindowsLocalStorageSpecAsRepositorySpec is a convenience function that returns WindowsLocalStorageSpec wrapped in RepositorySpec
func WindowsLocalStorageSpecAsRepositorySpec(v *WindowsLocalStorageSpec) RepositorySpec {
	return RepositorySpec{
		WindowsLocalStorageSpec: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RepositorySpec) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AmazonS3GlacierStorageSpec
	err = newStrictDecoder(data).Decode(&dst.AmazonS3GlacierStorageSpec)
	if err == nil {
		jsonAmazonS3GlacierStorageSpec, _ := json.Marshal(dst.AmazonS3GlacierStorageSpec)
		if string(jsonAmazonS3GlacierStorageSpec) == "{}" { // empty struct
			dst.AmazonS3GlacierStorageSpec = nil
		} else {
			match++
		}
	} else {
		dst.AmazonS3GlacierStorageSpec = nil
	}

	// try to unmarshal data into AmazonS3StorageSpec
	err = newStrictDecoder(data).Decode(&dst.AmazonS3StorageSpec)
	if err == nil {
		jsonAmazonS3StorageSpec, _ := json.Marshal(dst.AmazonS3StorageSpec)
		if string(jsonAmazonS3StorageSpec) == "{}" { // empty struct
			dst.AmazonS3StorageSpec = nil
		} else {
			match++
		}
	} else {
		dst.AmazonS3StorageSpec = nil
	}

	// try to unmarshal data into AmazonSnowballEdgeStorageSpec
	err = newStrictDecoder(data).Decode(&dst.AmazonSnowballEdgeStorageSpec)
	if err == nil {
		jsonAmazonSnowballEdgeStorageSpec, _ := json.Marshal(dst.AmazonSnowballEdgeStorageSpec)
		if string(jsonAmazonSnowballEdgeStorageSpec) == "{}" { // empty struct
			dst.AmazonSnowballEdgeStorageSpec = nil
		} else {
			match++
		}
	} else {
		dst.AmazonSnowballEdgeStorageSpec = nil
	}

	// try to unmarshal data into AzureArchiveStorageSpec
	err = newStrictDecoder(data).Decode(&dst.AzureArchiveStorageSpec)
	if err == nil {
		jsonAzureArchiveStorageSpec, _ := json.Marshal(dst.AzureArchiveStorageSpec)
		if string(jsonAzureArchiveStorageSpec) == "{}" { // empty struct
			dst.AzureArchiveStorageSpec = nil
		} else {
			match++
		}
	} else {
		dst.AzureArchiveStorageSpec = nil
	}

	// try to unmarshal data into AzureBlobStorageSpec
	err = newStrictDecoder(data).Decode(&dst.AzureBlobStorageSpec)
	if err == nil {
		jsonAzureBlobStorageSpec, _ := json.Marshal(dst.AzureBlobStorageSpec)
		if string(jsonAzureBlobStorageSpec) == "{}" { // empty struct
			dst.AzureBlobStorageSpec = nil
		} else {
			match++
		}
	} else {
		dst.AzureBlobStorageSpec = nil
	}

	// try to unmarshal data into AzureDataBoxStorageSpec
	err = newStrictDecoder(data).Decode(&dst.AzureDataBoxStorageSpec)
	if err == nil {
		jsonAzureDataBoxStorageSpec, _ := json.Marshal(dst.AzureDataBoxStorageSpec)
		if string(jsonAzureDataBoxStorageSpec) == "{}" { // empty struct
			dst.AzureDataBoxStorageSpec = nil
		} else {
			match++
		}
	} else {
		dst.AzureDataBoxStorageSpec = nil
	}

	// try to unmarshal data into GoogleCloudStorageSpec
	err = newStrictDecoder(data).Decode(&dst.GoogleCloudStorageSpec)
	if err == nil {
		jsonGoogleCloudStorageSpec, _ := json.Marshal(dst.GoogleCloudStorageSpec)
		if string(jsonGoogleCloudStorageSpec) == "{}" { // empty struct
			dst.GoogleCloudStorageSpec = nil
		} else {
			match++
		}
	} else {
		dst.GoogleCloudStorageSpec = nil
	}

	// try to unmarshal data into IBMCloudStorageSpec
	err = newStrictDecoder(data).Decode(&dst.IBMCloudStorageSpec)
	if err == nil {
		jsonIBMCloudStorageSpec, _ := json.Marshal(dst.IBMCloudStorageSpec)
		if string(jsonIBMCloudStorageSpec) == "{}" { // empty struct
			dst.IBMCloudStorageSpec = nil
		} else {
			match++
		}
	} else {
		dst.IBMCloudStorageSpec = nil
	}

	// try to unmarshal data into LinuxHardenedStorageSpec
	err = newStrictDecoder(data).Decode(&dst.LinuxHardenedStorageSpec)
	if err == nil {
		jsonLinuxHardenedStorageSpec, _ := json.Marshal(dst.LinuxHardenedStorageSpec)
		if string(jsonLinuxHardenedStorageSpec) == "{}" { // empty struct
			dst.LinuxHardenedStorageSpec = nil
		} else {
			match++
		}
	} else {
		dst.LinuxHardenedStorageSpec = nil
	}

	// try to unmarshal data into LinuxLocalStorageSpec
	err = newStrictDecoder(data).Decode(&dst.LinuxLocalStorageSpec)
	if err == nil {
		jsonLinuxLocalStorageSpec, _ := json.Marshal(dst.LinuxLocalStorageSpec)
		if string(jsonLinuxLocalStorageSpec) == "{}" { // empty struct
			dst.LinuxLocalStorageSpec = nil
		} else {
			match++
		}
	} else {
		dst.LinuxLocalStorageSpec = nil
	}

	// try to unmarshal data into NfsStorageSpec
	err = newStrictDecoder(data).Decode(&dst.NfsStorageSpec)
	if err == nil {
		jsonNfsStorageSpec, _ := json.Marshal(dst.NfsStorageSpec)
		if string(jsonNfsStorageSpec) == "{}" { // empty struct
			dst.NfsStorageSpec = nil
		} else {
			match++
		}
	} else {
		dst.NfsStorageSpec = nil
	}

	// try to unmarshal data into S3CompatibleStorageSpec
	err = newStrictDecoder(data).Decode(&dst.S3CompatibleStorageSpec)
	if err == nil {
		jsonS3CompatibleStorageSpec, _ := json.Marshal(dst.S3CompatibleStorageSpec)
		if string(jsonS3CompatibleStorageSpec) == "{}" { // empty struct
			dst.S3CompatibleStorageSpec = nil
		} else {
			match++
		}
	} else {
		dst.S3CompatibleStorageSpec = nil
	}

	// try to unmarshal data into SmbStorageSpec
	err = newStrictDecoder(data).Decode(&dst.SmbStorageSpec)
	if err == nil {
		jsonSmbStorageSpec, _ := json.Marshal(dst.SmbStorageSpec)
		if string(jsonSmbStorageSpec) == "{}" { // empty struct
			dst.SmbStorageSpec = nil
		} else {
			match++
		}
	} else {
		dst.SmbStorageSpec = nil
	}

	// try to unmarshal data into WasabiCloudStorageSpec
	err = newStrictDecoder(data).Decode(&dst.WasabiCloudStorageSpec)
	if err == nil {
		jsonWasabiCloudStorageSpec, _ := json.Marshal(dst.WasabiCloudStorageSpec)
		if string(jsonWasabiCloudStorageSpec) == "{}" { // empty struct
			dst.WasabiCloudStorageSpec = nil
		} else {
			match++
		}
	} else {
		dst.WasabiCloudStorageSpec = nil
	}

	// try to unmarshal data into WindowsLocalStorageSpec
	err = newStrictDecoder(data).Decode(&dst.WindowsLocalStorageSpec)
	if err == nil {
		jsonWindowsLocalStorageSpec, _ := json.Marshal(dst.WindowsLocalStorageSpec)
		if string(jsonWindowsLocalStorageSpec) == "{}" { // empty struct
			dst.WindowsLocalStorageSpec = nil
		} else {
			match++
		}
	} else {
		dst.WindowsLocalStorageSpec = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AmazonS3GlacierStorageSpec = nil
		dst.AmazonS3StorageSpec = nil
		dst.AmazonSnowballEdgeStorageSpec = nil
		dst.AzureArchiveStorageSpec = nil
		dst.AzureBlobStorageSpec = nil
		dst.AzureDataBoxStorageSpec = nil
		dst.GoogleCloudStorageSpec = nil
		dst.IBMCloudStorageSpec = nil
		dst.LinuxHardenedStorageSpec = nil
		dst.LinuxLocalStorageSpec = nil
		dst.NfsStorageSpec = nil
		dst.S3CompatibleStorageSpec = nil
		dst.SmbStorageSpec = nil
		dst.WasabiCloudStorageSpec = nil
		dst.WindowsLocalStorageSpec = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RepositorySpec)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RepositorySpec)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RepositorySpec) MarshalJSON() ([]byte, error) {
	if src.AmazonS3GlacierStorageSpec != nil {
		return json.Marshal(&src.AmazonS3GlacierStorageSpec)
	}

	if src.AmazonS3StorageSpec != nil {
		return json.Marshal(&src.AmazonS3StorageSpec)
	}

	if src.AmazonSnowballEdgeStorageSpec != nil {
		return json.Marshal(&src.AmazonSnowballEdgeStorageSpec)
	}

	if src.AzureArchiveStorageSpec != nil {
		return json.Marshal(&src.AzureArchiveStorageSpec)
	}

	if src.AzureBlobStorageSpec != nil {
		return json.Marshal(&src.AzureBlobStorageSpec)
	}

	if src.AzureDataBoxStorageSpec != nil {
		return json.Marshal(&src.AzureDataBoxStorageSpec)
	}

	if src.GoogleCloudStorageSpec != nil {
		return json.Marshal(&src.GoogleCloudStorageSpec)
	}

	if src.IBMCloudStorageSpec != nil {
		return json.Marshal(&src.IBMCloudStorageSpec)
	}

	if src.LinuxHardenedStorageSpec != nil {
		return json.Marshal(&src.LinuxHardenedStorageSpec)
	}

	if src.LinuxLocalStorageSpec != nil {
		return json.Marshal(&src.LinuxLocalStorageSpec)
	}

	if src.NfsStorageSpec != nil {
		return json.Marshal(&src.NfsStorageSpec)
	}

	if src.S3CompatibleStorageSpec != nil {
		return json.Marshal(&src.S3CompatibleStorageSpec)
	}

	if src.SmbStorageSpec != nil {
		return json.Marshal(&src.SmbStorageSpec)
	}

	if src.WasabiCloudStorageSpec != nil {
		return json.Marshal(&src.WasabiCloudStorageSpec)
	}

	if src.WindowsLocalStorageSpec != nil {
		return json.Marshal(&src.WindowsLocalStorageSpec)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RepositorySpec) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AmazonS3GlacierStorageSpec != nil {
		return obj.AmazonS3GlacierStorageSpec
	}

	if obj.AmazonS3StorageSpec != nil {
		return obj.AmazonS3StorageSpec
	}

	if obj.AmazonSnowballEdgeStorageSpec != nil {
		return obj.AmazonSnowballEdgeStorageSpec
	}

	if obj.AzureArchiveStorageSpec != nil {
		return obj.AzureArchiveStorageSpec
	}

	if obj.AzureBlobStorageSpec != nil {
		return obj.AzureBlobStorageSpec
	}

	if obj.AzureDataBoxStorageSpec != nil {
		return obj.AzureDataBoxStorageSpec
	}

	if obj.GoogleCloudStorageSpec != nil {
		return obj.GoogleCloudStorageSpec
	}

	if obj.IBMCloudStorageSpec != nil {
		return obj.IBMCloudStorageSpec
	}

	if obj.LinuxHardenedStorageSpec != nil {
		return obj.LinuxHardenedStorageSpec
	}

	if obj.LinuxLocalStorageSpec != nil {
		return obj.LinuxLocalStorageSpec
	}

	if obj.NfsStorageSpec != nil {
		return obj.NfsStorageSpec
	}

	if obj.S3CompatibleStorageSpec != nil {
		return obj.S3CompatibleStorageSpec
	}

	if obj.SmbStorageSpec != nil {
		return obj.SmbStorageSpec
	}

	if obj.WasabiCloudStorageSpec != nil {
		return obj.WasabiCloudStorageSpec
	}

	if obj.WindowsLocalStorageSpec != nil {
		return obj.WindowsLocalStorageSpec
	}

	// all schemas are nil
	return nil
}

type NullableRepositorySpec struct {
	value *RepositorySpec
	isSet bool
}

func (v NullableRepositorySpec) Get() *RepositorySpec {
	return v.value
}

func (v *NullableRepositorySpec) Set(val *RepositorySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositorySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositorySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositorySpec(val *RepositorySpec) *NullableRepositorySpec {
	return &NullableRepositorySpec{value: val, isSet: true}
}

func (v NullableRepositorySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositorySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


