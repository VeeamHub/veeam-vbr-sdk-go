/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InstantViVMCustomizedRecoveryDatastoreSpec Datastore that keeps redo logs with changes that take place while a VM is running from a backup.
type InstantViVMCustomizedRecoveryDatastoreSpec struct {
	// If *true*, redo logs are redirected to `cacheDatastore`.
	RedirectIsEnabled bool `json:"redirectIsEnabled"`
	CacheDatastore *VmwareObjectModel `json:"cacheDatastore,omitempty"`
}

// NewInstantViVMCustomizedRecoveryDatastoreSpec instantiates a new InstantViVMCustomizedRecoveryDatastoreSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstantViVMCustomizedRecoveryDatastoreSpec(redirectIsEnabled bool) *InstantViVMCustomizedRecoveryDatastoreSpec {
	this := InstantViVMCustomizedRecoveryDatastoreSpec{}
	this.RedirectIsEnabled = redirectIsEnabled
	return &this
}

// NewInstantViVMCustomizedRecoveryDatastoreSpecWithDefaults instantiates a new InstantViVMCustomizedRecoveryDatastoreSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstantViVMCustomizedRecoveryDatastoreSpecWithDefaults() *InstantViVMCustomizedRecoveryDatastoreSpec {
	this := InstantViVMCustomizedRecoveryDatastoreSpec{}
	return &this
}

// GetRedirectIsEnabled returns the RedirectIsEnabled field value
func (o *InstantViVMCustomizedRecoveryDatastoreSpec) GetRedirectIsEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RedirectIsEnabled
}

// GetRedirectIsEnabledOk returns a tuple with the RedirectIsEnabled field value
// and a boolean to check if the value has been set.
func (o *InstantViVMCustomizedRecoveryDatastoreSpec) GetRedirectIsEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.RedirectIsEnabled, true
}

// SetRedirectIsEnabled sets field value
func (o *InstantViVMCustomizedRecoveryDatastoreSpec) SetRedirectIsEnabled(v bool) {
	o.RedirectIsEnabled = v
}

// GetCacheDatastore returns the CacheDatastore field value if set, zero value otherwise.
func (o *InstantViVMCustomizedRecoveryDatastoreSpec) GetCacheDatastore() VmwareObjectModel {
	if o == nil || isNil(o.CacheDatastore) {
		var ret VmwareObjectModel
		return ret
	}
	return *o.CacheDatastore
}

// GetCacheDatastoreOk returns a tuple with the CacheDatastore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstantViVMCustomizedRecoveryDatastoreSpec) GetCacheDatastoreOk() (*VmwareObjectModel, bool) {
	if o == nil || isNil(o.CacheDatastore) {
    return nil, false
	}
	return o.CacheDatastore, true
}

// HasCacheDatastore returns a boolean if a field has been set.
func (o *InstantViVMCustomizedRecoveryDatastoreSpec) HasCacheDatastore() bool {
	if o != nil && !isNil(o.CacheDatastore) {
		return true
	}

	return false
}

// SetCacheDatastore gets a reference to the given VmwareObjectModel and assigns it to the CacheDatastore field.
func (o *InstantViVMCustomizedRecoveryDatastoreSpec) SetCacheDatastore(v VmwareObjectModel) {
	o.CacheDatastore = &v
}

func (o InstantViVMCustomizedRecoveryDatastoreSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["redirectIsEnabled"] = o.RedirectIsEnabled
	}
	if !isNil(o.CacheDatastore) {
		toSerialize["cacheDatastore"] = o.CacheDatastore
	}
	return json.Marshal(toSerialize)
}

type NullableInstantViVMCustomizedRecoveryDatastoreSpec struct {
	value *InstantViVMCustomizedRecoveryDatastoreSpec
	isSet bool
}

func (v NullableInstantViVMCustomizedRecoveryDatastoreSpec) Get() *InstantViVMCustomizedRecoveryDatastoreSpec {
	return v.value
}

func (v *NullableInstantViVMCustomizedRecoveryDatastoreSpec) Set(val *InstantViVMCustomizedRecoveryDatastoreSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableInstantViVMCustomizedRecoveryDatastoreSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableInstantViVMCustomizedRecoveryDatastoreSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstantViVMCustomizedRecoveryDatastoreSpec(val *InstantViVMCustomizedRecoveryDatastoreSpec) *NullableInstantViVMCustomizedRecoveryDatastoreSpec {
	return &NullableInstantViVMCustomizedRecoveryDatastoreSpec{value: val, isSet: true}
}

func (v NullableInstantViVMCustomizedRecoveryDatastoreSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstantViVMCustomizedRecoveryDatastoreSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


