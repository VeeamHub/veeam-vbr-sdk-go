/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ObjectStorageConsumptionLimitModel Soft consumption limit for the storage. The limit can be exceeded temporarily.
type ObjectStorageConsumptionLimitModel struct {
	// If *true*, the consumption limit is enabled.
	IsEnabled *bool `json:"isEnabled,omitempty"`
	// Limit value.
	ConsumptionLimitCount *int32 `json:"consumptionLimitCount,omitempty"`
	ConsumptionLimitKind *EConsumptionLimitKind `json:"consumptionLimitKind,omitempty"`
}

// NewObjectStorageConsumptionLimitModel instantiates a new ObjectStorageConsumptionLimitModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectStorageConsumptionLimitModel() *ObjectStorageConsumptionLimitModel {
	this := ObjectStorageConsumptionLimitModel{}
	return &this
}

// NewObjectStorageConsumptionLimitModelWithDefaults instantiates a new ObjectStorageConsumptionLimitModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectStorageConsumptionLimitModelWithDefaults() *ObjectStorageConsumptionLimitModel {
	this := ObjectStorageConsumptionLimitModel{}
	return &this
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *ObjectStorageConsumptionLimitModel) GetIsEnabled() bool {
	if o == nil || isNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageConsumptionLimitModel) GetIsEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.IsEnabled) {
    return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *ObjectStorageConsumptionLimitModel) HasIsEnabled() bool {
	if o != nil && !isNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *ObjectStorageConsumptionLimitModel) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetConsumptionLimitCount returns the ConsumptionLimitCount field value if set, zero value otherwise.
func (o *ObjectStorageConsumptionLimitModel) GetConsumptionLimitCount() int32 {
	if o == nil || isNil(o.ConsumptionLimitCount) {
		var ret int32
		return ret
	}
	return *o.ConsumptionLimitCount
}

// GetConsumptionLimitCountOk returns a tuple with the ConsumptionLimitCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageConsumptionLimitModel) GetConsumptionLimitCountOk() (*int32, bool) {
	if o == nil || isNil(o.ConsumptionLimitCount) {
    return nil, false
	}
	return o.ConsumptionLimitCount, true
}

// HasConsumptionLimitCount returns a boolean if a field has been set.
func (o *ObjectStorageConsumptionLimitModel) HasConsumptionLimitCount() bool {
	if o != nil && !isNil(o.ConsumptionLimitCount) {
		return true
	}

	return false
}

// SetConsumptionLimitCount gets a reference to the given int32 and assigns it to the ConsumptionLimitCount field.
func (o *ObjectStorageConsumptionLimitModel) SetConsumptionLimitCount(v int32) {
	o.ConsumptionLimitCount = &v
}

// GetConsumptionLimitKind returns the ConsumptionLimitKind field value if set, zero value otherwise.
func (o *ObjectStorageConsumptionLimitModel) GetConsumptionLimitKind() EConsumptionLimitKind {
	if o == nil || isNil(o.ConsumptionLimitKind) {
		var ret EConsumptionLimitKind
		return ret
	}
	return *o.ConsumptionLimitKind
}

// GetConsumptionLimitKindOk returns a tuple with the ConsumptionLimitKind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageConsumptionLimitModel) GetConsumptionLimitKindOk() (*EConsumptionLimitKind, bool) {
	if o == nil || isNil(o.ConsumptionLimitKind) {
    return nil, false
	}
	return o.ConsumptionLimitKind, true
}

// HasConsumptionLimitKind returns a boolean if a field has been set.
func (o *ObjectStorageConsumptionLimitModel) HasConsumptionLimitKind() bool {
	if o != nil && !isNil(o.ConsumptionLimitKind) {
		return true
	}

	return false
}

// SetConsumptionLimitKind gets a reference to the given EConsumptionLimitKind and assigns it to the ConsumptionLimitKind field.
func (o *ObjectStorageConsumptionLimitModel) SetConsumptionLimitKind(v EConsumptionLimitKind) {
	o.ConsumptionLimitKind = &v
}

func (o ObjectStorageConsumptionLimitModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.IsEnabled) {
		toSerialize["isEnabled"] = o.IsEnabled
	}
	if !isNil(o.ConsumptionLimitCount) {
		toSerialize["consumptionLimitCount"] = o.ConsumptionLimitCount
	}
	if !isNil(o.ConsumptionLimitKind) {
		toSerialize["consumptionLimitKind"] = o.ConsumptionLimitKind
	}
	return json.Marshal(toSerialize)
}

type NullableObjectStorageConsumptionLimitModel struct {
	value *ObjectStorageConsumptionLimitModel
	isSet bool
}

func (v NullableObjectStorageConsumptionLimitModel) Get() *ObjectStorageConsumptionLimitModel {
	return v.value
}

func (v *NullableObjectStorageConsumptionLimitModel) Set(val *ObjectStorageConsumptionLimitModel) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectStorageConsumptionLimitModel) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectStorageConsumptionLimitModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectStorageConsumptionLimitModel(val *ObjectStorageConsumptionLimitModel) *NullableObjectStorageConsumptionLimitModel {
	return &NullableObjectStorageConsumptionLimitModel{value: val, isSet: true}
}

func (v NullableObjectStorageConsumptionLimitModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectStorageConsumptionLimitModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


