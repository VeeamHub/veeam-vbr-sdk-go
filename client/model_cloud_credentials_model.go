/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// CloudCredentialsModel - struct for CloudCredentialsModel
type CloudCredentialsModel struct {
	AmazonCloudCredentialsModel *AmazonCloudCredentialsModel
	AzureComputeCloudCredentialsModel *AzureComputeCloudCredentialsModel
	AzureStorageCloudCredentialsModel *AzureStorageCloudCredentialsModel
	GoogleCloudCredentialsModel *GoogleCloudCredentialsModel
}

// AmazonCloudCredentialsModelAsCloudCredentialsModel is a convenience function that returns AmazonCloudCredentialsModel wrapped in CloudCredentialsModel
func AmazonCloudCredentialsModelAsCloudCredentialsModel(v *AmazonCloudCredentialsModel) CloudCredentialsModel {
	return CloudCredentialsModel{
		AmazonCloudCredentialsModel: v,
	}
}

// AzureComputeCloudCredentialsModelAsCloudCredentialsModel is a convenience function that returns AzureComputeCloudCredentialsModel wrapped in CloudCredentialsModel
func AzureComputeCloudCredentialsModelAsCloudCredentialsModel(v *AzureComputeCloudCredentialsModel) CloudCredentialsModel {
	return CloudCredentialsModel{
		AzureComputeCloudCredentialsModel: v,
	}
}

// AzureStorageCloudCredentialsModelAsCloudCredentialsModel is a convenience function that returns AzureStorageCloudCredentialsModel wrapped in CloudCredentialsModel
func AzureStorageCloudCredentialsModelAsCloudCredentialsModel(v *AzureStorageCloudCredentialsModel) CloudCredentialsModel {
	return CloudCredentialsModel{
		AzureStorageCloudCredentialsModel: v,
	}
}

// GoogleCloudCredentialsModelAsCloudCredentialsModel is a convenience function that returns GoogleCloudCredentialsModel wrapped in CloudCredentialsModel
func GoogleCloudCredentialsModelAsCloudCredentialsModel(v *GoogleCloudCredentialsModel) CloudCredentialsModel {
	return CloudCredentialsModel{
		GoogleCloudCredentialsModel: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CloudCredentialsModel) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AmazonCloudCredentialsModel
	err = newStrictDecoder(data).Decode(&dst.AmazonCloudCredentialsModel)
	if err == nil {
		jsonAmazonCloudCredentialsModel, _ := json.Marshal(dst.AmazonCloudCredentialsModel)
		if string(jsonAmazonCloudCredentialsModel) == "{}" { // empty struct
			dst.AmazonCloudCredentialsModel = nil
		} else {
			match++
		}
	} else {
		dst.AmazonCloudCredentialsModel = nil
	}

	// try to unmarshal data into AzureComputeCloudCredentialsModel
	err = newStrictDecoder(data).Decode(&dst.AzureComputeCloudCredentialsModel)
	if err == nil {
		jsonAzureComputeCloudCredentialsModel, _ := json.Marshal(dst.AzureComputeCloudCredentialsModel)
		if string(jsonAzureComputeCloudCredentialsModel) == "{}" { // empty struct
			dst.AzureComputeCloudCredentialsModel = nil
		} else {
			match++
		}
	} else {
		dst.AzureComputeCloudCredentialsModel = nil
	}

	// try to unmarshal data into AzureStorageCloudCredentialsModel
	err = newStrictDecoder(data).Decode(&dst.AzureStorageCloudCredentialsModel)
	if err == nil {
		jsonAzureStorageCloudCredentialsModel, _ := json.Marshal(dst.AzureStorageCloudCredentialsModel)
		if string(jsonAzureStorageCloudCredentialsModel) == "{}" { // empty struct
			dst.AzureStorageCloudCredentialsModel = nil
		} else {
			match++
		}
	} else {
		dst.AzureStorageCloudCredentialsModel = nil
	}

	// try to unmarshal data into GoogleCloudCredentialsModel
	err = newStrictDecoder(data).Decode(&dst.GoogleCloudCredentialsModel)
	if err == nil {
		jsonGoogleCloudCredentialsModel, _ := json.Marshal(dst.GoogleCloudCredentialsModel)
		if string(jsonGoogleCloudCredentialsModel) == "{}" { // empty struct
			dst.GoogleCloudCredentialsModel = nil
		} else {
			match++
		}
	} else {
		dst.GoogleCloudCredentialsModel = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AmazonCloudCredentialsModel = nil
		dst.AzureComputeCloudCredentialsModel = nil
		dst.AzureStorageCloudCredentialsModel = nil
		dst.GoogleCloudCredentialsModel = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CloudCredentialsModel)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CloudCredentialsModel)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CloudCredentialsModel) MarshalJSON() ([]byte, error) {
	if src.AmazonCloudCredentialsModel != nil {
		return json.Marshal(&src.AmazonCloudCredentialsModel)
	}

	if src.AzureComputeCloudCredentialsModel != nil {
		return json.Marshal(&src.AzureComputeCloudCredentialsModel)
	}

	if src.AzureStorageCloudCredentialsModel != nil {
		return json.Marshal(&src.AzureStorageCloudCredentialsModel)
	}

	if src.GoogleCloudCredentialsModel != nil {
		return json.Marshal(&src.GoogleCloudCredentialsModel)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CloudCredentialsModel) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AmazonCloudCredentialsModel != nil {
		return obj.AmazonCloudCredentialsModel
	}

	if obj.AzureComputeCloudCredentialsModel != nil {
		return obj.AzureComputeCloudCredentialsModel
	}

	if obj.AzureStorageCloudCredentialsModel != nil {
		return obj.AzureStorageCloudCredentialsModel
	}

	if obj.GoogleCloudCredentialsModel != nil {
		return obj.GoogleCloudCredentialsModel
	}

	// all schemas are nil
	return nil
}

type NullableCloudCredentialsModel struct {
	value *CloudCredentialsModel
	isSet bool
}

func (v NullableCloudCredentialsModel) Get() *CloudCredentialsModel {
	return v.value
}

func (v *NullableCloudCredentialsModel) Set(val *CloudCredentialsModel) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudCredentialsModel) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudCredentialsModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudCredentialsModel(val *CloudCredentialsModel) *NullableCloudCredentialsModel {
	return &NullableCloudCredentialsModel{value: val, isSet: true}
}

func (v NullableCloudCredentialsModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudCredentialsModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


