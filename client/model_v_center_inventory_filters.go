/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// VCenterInventoryFilters struct for VCenterInventoryFilters
type VCenterInventoryFilters struct {
	// Number of objects to skip.
	Skip *int32 `json:"skip,omitempty"`
	// Maximum number of objects to return.
	Limit *int32 `json:"limit,omitempty"`
	OrderColumn *EvCentersInventoryFiltersOrderColumn `json:"orderColumn,omitempty"`
	// Sorts objects in the ascending order by the `orderColumn` parameter.
	OrderAsc *bool `json:"orderAsc,omitempty"`
	// Filters objects by object ID.
	ObjectIdFilter *string `json:"objectIdFilter,omitempty"`
	HierarchyTypeFilter *EHierarchyType `json:"hierarchyTypeFilter,omitempty"`
	// Filters objects by the `nameFilter` pattern. The pattern can match any object parameter. To substitute one or more characters, use the asterisk (*) character at the beginning, at the end or both.
	NameFilter *string `json:"nameFilter,omitempty"`
	TypeFilter *EVmwareInventoryType `json:"typeFilter,omitempty"`
	// Filters objects by name of the parent container.
	ParentContainerNameFilter *string `json:"parentContainerNameFilter,omitempty"`
}

// NewVCenterInventoryFilters instantiates a new VCenterInventoryFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVCenterInventoryFilters() *VCenterInventoryFilters {
	this := VCenterInventoryFilters{}
	return &this
}

// NewVCenterInventoryFiltersWithDefaults instantiates a new VCenterInventoryFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVCenterInventoryFiltersWithDefaults() *VCenterInventoryFilters {
	this := VCenterInventoryFilters{}
	return &this
}

// GetSkip returns the Skip field value if set, zero value otherwise.
func (o *VCenterInventoryFilters) GetSkip() int32 {
	if o == nil || isNil(o.Skip) {
		var ret int32
		return ret
	}
	return *o.Skip
}

// GetSkipOk returns a tuple with the Skip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCenterInventoryFilters) GetSkipOk() (*int32, bool) {
	if o == nil || isNil(o.Skip) {
    return nil, false
	}
	return o.Skip, true
}

// HasSkip returns a boolean if a field has been set.
func (o *VCenterInventoryFilters) HasSkip() bool {
	if o != nil && !isNil(o.Skip) {
		return true
	}

	return false
}

// SetSkip gets a reference to the given int32 and assigns it to the Skip field.
func (o *VCenterInventoryFilters) SetSkip(v int32) {
	o.Skip = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *VCenterInventoryFilters) GetLimit() int32 {
	if o == nil || isNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCenterInventoryFilters) GetLimitOk() (*int32, bool) {
	if o == nil || isNil(o.Limit) {
    return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *VCenterInventoryFilters) HasLimit() bool {
	if o != nil && !isNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *VCenterInventoryFilters) SetLimit(v int32) {
	o.Limit = &v
}

// GetOrderColumn returns the OrderColumn field value if set, zero value otherwise.
func (o *VCenterInventoryFilters) GetOrderColumn() EvCentersInventoryFiltersOrderColumn {
	if o == nil || isNil(o.OrderColumn) {
		var ret EvCentersInventoryFiltersOrderColumn
		return ret
	}
	return *o.OrderColumn
}

// GetOrderColumnOk returns a tuple with the OrderColumn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCenterInventoryFilters) GetOrderColumnOk() (*EvCentersInventoryFiltersOrderColumn, bool) {
	if o == nil || isNil(o.OrderColumn) {
    return nil, false
	}
	return o.OrderColumn, true
}

// HasOrderColumn returns a boolean if a field has been set.
func (o *VCenterInventoryFilters) HasOrderColumn() bool {
	if o != nil && !isNil(o.OrderColumn) {
		return true
	}

	return false
}

// SetOrderColumn gets a reference to the given EvCentersInventoryFiltersOrderColumn and assigns it to the OrderColumn field.
func (o *VCenterInventoryFilters) SetOrderColumn(v EvCentersInventoryFiltersOrderColumn) {
	o.OrderColumn = &v
}

// GetOrderAsc returns the OrderAsc field value if set, zero value otherwise.
func (o *VCenterInventoryFilters) GetOrderAsc() bool {
	if o == nil || isNil(o.OrderAsc) {
		var ret bool
		return ret
	}
	return *o.OrderAsc
}

// GetOrderAscOk returns a tuple with the OrderAsc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCenterInventoryFilters) GetOrderAscOk() (*bool, bool) {
	if o == nil || isNil(o.OrderAsc) {
    return nil, false
	}
	return o.OrderAsc, true
}

// HasOrderAsc returns a boolean if a field has been set.
func (o *VCenterInventoryFilters) HasOrderAsc() bool {
	if o != nil && !isNil(o.OrderAsc) {
		return true
	}

	return false
}

// SetOrderAsc gets a reference to the given bool and assigns it to the OrderAsc field.
func (o *VCenterInventoryFilters) SetOrderAsc(v bool) {
	o.OrderAsc = &v
}

// GetObjectIdFilter returns the ObjectIdFilter field value if set, zero value otherwise.
func (o *VCenterInventoryFilters) GetObjectIdFilter() string {
	if o == nil || isNil(o.ObjectIdFilter) {
		var ret string
		return ret
	}
	return *o.ObjectIdFilter
}

// GetObjectIdFilterOk returns a tuple with the ObjectIdFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCenterInventoryFilters) GetObjectIdFilterOk() (*string, bool) {
	if o == nil || isNil(o.ObjectIdFilter) {
    return nil, false
	}
	return o.ObjectIdFilter, true
}

// HasObjectIdFilter returns a boolean if a field has been set.
func (o *VCenterInventoryFilters) HasObjectIdFilter() bool {
	if o != nil && !isNil(o.ObjectIdFilter) {
		return true
	}

	return false
}

// SetObjectIdFilter gets a reference to the given string and assigns it to the ObjectIdFilter field.
func (o *VCenterInventoryFilters) SetObjectIdFilter(v string) {
	o.ObjectIdFilter = &v
}

// GetHierarchyTypeFilter returns the HierarchyTypeFilter field value if set, zero value otherwise.
func (o *VCenterInventoryFilters) GetHierarchyTypeFilter() EHierarchyType {
	if o == nil || isNil(o.HierarchyTypeFilter) {
		var ret EHierarchyType
		return ret
	}
	return *o.HierarchyTypeFilter
}

// GetHierarchyTypeFilterOk returns a tuple with the HierarchyTypeFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCenterInventoryFilters) GetHierarchyTypeFilterOk() (*EHierarchyType, bool) {
	if o == nil || isNil(o.HierarchyTypeFilter) {
    return nil, false
	}
	return o.HierarchyTypeFilter, true
}

// HasHierarchyTypeFilter returns a boolean if a field has been set.
func (o *VCenterInventoryFilters) HasHierarchyTypeFilter() bool {
	if o != nil && !isNil(o.HierarchyTypeFilter) {
		return true
	}

	return false
}

// SetHierarchyTypeFilter gets a reference to the given EHierarchyType and assigns it to the HierarchyTypeFilter field.
func (o *VCenterInventoryFilters) SetHierarchyTypeFilter(v EHierarchyType) {
	o.HierarchyTypeFilter = &v
}

// GetNameFilter returns the NameFilter field value if set, zero value otherwise.
func (o *VCenterInventoryFilters) GetNameFilter() string {
	if o == nil || isNil(o.NameFilter) {
		var ret string
		return ret
	}
	return *o.NameFilter
}

// GetNameFilterOk returns a tuple with the NameFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCenterInventoryFilters) GetNameFilterOk() (*string, bool) {
	if o == nil || isNil(o.NameFilter) {
    return nil, false
	}
	return o.NameFilter, true
}

// HasNameFilter returns a boolean if a field has been set.
func (o *VCenterInventoryFilters) HasNameFilter() bool {
	if o != nil && !isNil(o.NameFilter) {
		return true
	}

	return false
}

// SetNameFilter gets a reference to the given string and assigns it to the NameFilter field.
func (o *VCenterInventoryFilters) SetNameFilter(v string) {
	o.NameFilter = &v
}

// GetTypeFilter returns the TypeFilter field value if set, zero value otherwise.
func (o *VCenterInventoryFilters) GetTypeFilter() EVmwareInventoryType {
	if o == nil || isNil(o.TypeFilter) {
		var ret EVmwareInventoryType
		return ret
	}
	return *o.TypeFilter
}

// GetTypeFilterOk returns a tuple with the TypeFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCenterInventoryFilters) GetTypeFilterOk() (*EVmwareInventoryType, bool) {
	if o == nil || isNil(o.TypeFilter) {
    return nil, false
	}
	return o.TypeFilter, true
}

// HasTypeFilter returns a boolean if a field has been set.
func (o *VCenterInventoryFilters) HasTypeFilter() bool {
	if o != nil && !isNil(o.TypeFilter) {
		return true
	}

	return false
}

// SetTypeFilter gets a reference to the given EVmwareInventoryType and assigns it to the TypeFilter field.
func (o *VCenterInventoryFilters) SetTypeFilter(v EVmwareInventoryType) {
	o.TypeFilter = &v
}

// GetParentContainerNameFilter returns the ParentContainerNameFilter field value if set, zero value otherwise.
func (o *VCenterInventoryFilters) GetParentContainerNameFilter() string {
	if o == nil || isNil(o.ParentContainerNameFilter) {
		var ret string
		return ret
	}
	return *o.ParentContainerNameFilter
}

// GetParentContainerNameFilterOk returns a tuple with the ParentContainerNameFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VCenterInventoryFilters) GetParentContainerNameFilterOk() (*string, bool) {
	if o == nil || isNil(o.ParentContainerNameFilter) {
    return nil, false
	}
	return o.ParentContainerNameFilter, true
}

// HasParentContainerNameFilter returns a boolean if a field has been set.
func (o *VCenterInventoryFilters) HasParentContainerNameFilter() bool {
	if o != nil && !isNil(o.ParentContainerNameFilter) {
		return true
	}

	return false
}

// SetParentContainerNameFilter gets a reference to the given string and assigns it to the ParentContainerNameFilter field.
func (o *VCenterInventoryFilters) SetParentContainerNameFilter(v string) {
	o.ParentContainerNameFilter = &v
}

func (o VCenterInventoryFilters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Skip) {
		toSerialize["skip"] = o.Skip
	}
	if !isNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !isNil(o.OrderColumn) {
		toSerialize["orderColumn"] = o.OrderColumn
	}
	if !isNil(o.OrderAsc) {
		toSerialize["orderAsc"] = o.OrderAsc
	}
	if !isNil(o.ObjectIdFilter) {
		toSerialize["objectIdFilter"] = o.ObjectIdFilter
	}
	if !isNil(o.HierarchyTypeFilter) {
		toSerialize["hierarchyTypeFilter"] = o.HierarchyTypeFilter
	}
	if !isNil(o.NameFilter) {
		toSerialize["nameFilter"] = o.NameFilter
	}
	if !isNil(o.TypeFilter) {
		toSerialize["typeFilter"] = o.TypeFilter
	}
	if !isNil(o.ParentContainerNameFilter) {
		toSerialize["parentContainerNameFilter"] = o.ParentContainerNameFilter
	}
	return json.Marshal(toSerialize)
}

type NullableVCenterInventoryFilters struct {
	value *VCenterInventoryFilters
	isSet bool
}

func (v NullableVCenterInventoryFilters) Get() *VCenterInventoryFilters {
	return v.value
}

func (v *NullableVCenterInventoryFilters) Set(val *VCenterInventoryFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableVCenterInventoryFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableVCenterInventoryFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVCenterInventoryFilters(val *VCenterInventoryFilters) *NullableVCenterInventoryFilters {
	return &NullableVCenterInventoryFilters{value: val, isSet: true}
}

func (v NullableVCenterInventoryFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVCenterInventoryFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


