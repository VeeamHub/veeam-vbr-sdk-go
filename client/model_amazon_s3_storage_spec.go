/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AmazonS3StorageSpec Amazon S3 storage.
type AmazonS3StorageSpec struct {
	RepositorySpec
	// If *true*, the maximum number of concurrent tasks is limited.
	EnableTaskLimit *bool `json:"enableTaskLimit,omitempty"`
	// Maximum number of concurrent tasks.
	MaxTaskCount *int32 `json:"maxTaskCount,omitempty"`
	Account AmazonS3StorageAccountModel `json:"account"`
	Bucket AmazonS3StorageBucketModel `json:"bucket"`
	MountServer MountServerSettingsModel `json:"mountServer"`
	ProxyAppliance *AmazonS3StorageProxyApplianceModel `json:"proxyAppliance,omitempty"`
}

// NewAmazonS3StorageSpec instantiates a new AmazonS3StorageSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmazonS3StorageSpec(account AmazonS3StorageAccountModel, bucket AmazonS3StorageBucketModel, mountServer MountServerSettingsModel, hostId string, repository LinuxHardenedRepositorySettingsModel, share SmbRepositoryShareSettingsModel, container AzureArchiveStorageContainerModel) *AmazonS3StorageSpec {
	this := AmazonS3StorageSpec{}
	this.HostId = hostId
	this.Repository = repository
	this.MountServer = mountServer
	this.Share = share
	this.Account = account
	this.Container = container
	this.Bucket = bucket
	return &this
}

// NewAmazonS3StorageSpecWithDefaults instantiates a new AmazonS3StorageSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmazonS3StorageSpecWithDefaults() *AmazonS3StorageSpec {
	this := AmazonS3StorageSpec{}
	return &this
}

// GetEnableTaskLimit returns the EnableTaskLimit field value if set, zero value otherwise.
func (o *AmazonS3StorageSpec) GetEnableTaskLimit() bool {
	if o == nil || isNil(o.EnableTaskLimit) {
		var ret bool
		return ret
	}
	return *o.EnableTaskLimit
}

// GetEnableTaskLimitOk returns a tuple with the EnableTaskLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmazonS3StorageSpec) GetEnableTaskLimitOk() (*bool, bool) {
	if o == nil || isNil(o.EnableTaskLimit) {
    return nil, false
	}
	return o.EnableTaskLimit, true
}

// HasEnableTaskLimit returns a boolean if a field has been set.
func (o *AmazonS3StorageSpec) HasEnableTaskLimit() bool {
	if o != nil && !isNil(o.EnableTaskLimit) {
		return true
	}

	return false
}

// SetEnableTaskLimit gets a reference to the given bool and assigns it to the EnableTaskLimit field.
func (o *AmazonS3StorageSpec) SetEnableTaskLimit(v bool) {
	o.EnableTaskLimit = &v
}

// GetMaxTaskCount returns the MaxTaskCount field value if set, zero value otherwise.
func (o *AmazonS3StorageSpec) GetMaxTaskCount() int32 {
	if o == nil || isNil(o.MaxTaskCount) {
		var ret int32
		return ret
	}
	return *o.MaxTaskCount
}

// GetMaxTaskCountOk returns a tuple with the MaxTaskCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmazonS3StorageSpec) GetMaxTaskCountOk() (*int32, bool) {
	if o == nil || isNil(o.MaxTaskCount) {
    return nil, false
	}
	return o.MaxTaskCount, true
}

// HasMaxTaskCount returns a boolean if a field has been set.
func (o *AmazonS3StorageSpec) HasMaxTaskCount() bool {
	if o != nil && !isNil(o.MaxTaskCount) {
		return true
	}

	return false
}

// SetMaxTaskCount gets a reference to the given int32 and assigns it to the MaxTaskCount field.
func (o *AmazonS3StorageSpec) SetMaxTaskCount(v int32) {
	o.MaxTaskCount = &v
}

// GetAccount returns the Account field value
func (o *AmazonS3StorageSpec) GetAccount() AmazonS3StorageAccountModel {
	if o == nil {
		var ret AmazonS3StorageAccountModel
		return ret
	}

	return o.Account
}

// GetAccountOk returns a tuple with the Account field value
// and a boolean to check if the value has been set.
func (o *AmazonS3StorageSpec) GetAccountOk() (*AmazonS3StorageAccountModel, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Account, true
}

// SetAccount sets field value
func (o *AmazonS3StorageSpec) SetAccount(v AmazonS3StorageAccountModel) {
	o.Account = v
}

// GetBucket returns the Bucket field value
func (o *AmazonS3StorageSpec) GetBucket() AmazonS3StorageBucketModel {
	if o == nil {
		var ret AmazonS3StorageBucketModel
		return ret
	}

	return o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value
// and a boolean to check if the value has been set.
func (o *AmazonS3StorageSpec) GetBucketOk() (*AmazonS3StorageBucketModel, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Bucket, true
}

// SetBucket sets field value
func (o *AmazonS3StorageSpec) SetBucket(v AmazonS3StorageBucketModel) {
	o.Bucket = v
}

// GetMountServer returns the MountServer field value
func (o *AmazonS3StorageSpec) GetMountServer() MountServerSettingsModel {
	if o == nil {
		var ret MountServerSettingsModel
		return ret
	}

	return o.MountServer
}

// GetMountServerOk returns a tuple with the MountServer field value
// and a boolean to check if the value has been set.
func (o *AmazonS3StorageSpec) GetMountServerOk() (*MountServerSettingsModel, bool) {
	if o == nil {
    return nil, false
	}
	return &o.MountServer, true
}

// SetMountServer sets field value
func (o *AmazonS3StorageSpec) SetMountServer(v MountServerSettingsModel) {
	o.MountServer = v
}

// GetProxyAppliance returns the ProxyAppliance field value if set, zero value otherwise.
func (o *AmazonS3StorageSpec) GetProxyAppliance() AmazonS3StorageProxyApplianceModel {
	if o == nil || isNil(o.ProxyAppliance) {
		var ret AmazonS3StorageProxyApplianceModel
		return ret
	}
	return *o.ProxyAppliance
}

// GetProxyApplianceOk returns a tuple with the ProxyAppliance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmazonS3StorageSpec) GetProxyApplianceOk() (*AmazonS3StorageProxyApplianceModel, bool) {
	if o == nil || isNil(o.ProxyAppliance) {
    return nil, false
	}
	return o.ProxyAppliance, true
}

// HasProxyAppliance returns a boolean if a field has been set.
func (o *AmazonS3StorageSpec) HasProxyAppliance() bool {
	if o != nil && !isNil(o.ProxyAppliance) {
		return true
	}

	return false
}

// SetProxyAppliance gets a reference to the given AmazonS3StorageProxyApplianceModel and assigns it to the ProxyAppliance field.
func (o *AmazonS3StorageSpec) SetProxyAppliance(v AmazonS3StorageProxyApplianceModel) {
	o.ProxyAppliance = &v
}

func (o AmazonS3StorageSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedRepositorySpec, errRepositorySpec := json.Marshal(o.RepositorySpec)
	if errRepositorySpec != nil {
		return []byte{}, errRepositorySpec
	}
	errRepositorySpec = json.Unmarshal([]byte(serializedRepositorySpec), &toSerialize)
	if errRepositorySpec != nil {
		return []byte{}, errRepositorySpec
	}
	if !isNil(o.EnableTaskLimit) {
		toSerialize["enableTaskLimit"] = o.EnableTaskLimit
	}
	if !isNil(o.MaxTaskCount) {
		toSerialize["maxTaskCount"] = o.MaxTaskCount
	}
	if true {
		toSerialize["account"] = o.Account
	}
	if true {
		toSerialize["bucket"] = o.Bucket
	}
	if true {
		toSerialize["mountServer"] = o.MountServer
	}
	if !isNil(o.ProxyAppliance) {
		toSerialize["proxyAppliance"] = o.ProxyAppliance
	}
	return json.Marshal(toSerialize)
}

type NullableAmazonS3StorageSpec struct {
	value *AmazonS3StorageSpec
	isSet bool
}

func (v NullableAmazonS3StorageSpec) Get() *AmazonS3StorageSpec {
	return v.value
}

func (v *NullableAmazonS3StorageSpec) Set(val *AmazonS3StorageSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableAmazonS3StorageSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableAmazonS3StorageSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmazonS3StorageSpec(val *AmazonS3StorageSpec) *NullableAmazonS3StorageSpec {
	return &NullableAmazonS3StorageSpec{value: val, isSet: true}
}

func (v NullableAmazonS3StorageSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmazonS3StorageSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


