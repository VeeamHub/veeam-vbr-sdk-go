/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// ELoginGrantType Authorization grant type.<br>Available values:<ul> <li>`password` — used to obtain an access token by providing a user name and password.</li> <li>`refresh_token` — used to refresh an expired or lost access token by providing a refresh token.</li> <li>`authorization_code` — used to obtain an access token by providing an authorization code.</li> <li>`vbr_token` — used to obtain an access token by providing a Veeam Backup & Replication token. This grant type is only used in a restricted mode for integration with Veeam Backup & Replication.</li></ul>
type ELoginGrantType string

// List of ELoginGrantType
const (
	ELOGINGRANTTYPE_PASSWORD ELoginGrantType = "password"
	ELOGINGRANTTYPE_REFRESH_TOKEN ELoginGrantType = "refresh_token"
	ELOGINGRANTTYPE_AUTHORIZATION_CODE ELoginGrantType = "authorization_code"
	ELOGINGRANTTYPE_VBR_TOKEN ELoginGrantType = "vbr_token"
)

// All allowed values of ELoginGrantType enum
var AllowedELoginGrantTypeEnumValues = []ELoginGrantType{
	"password",
	"refresh_token",
	"authorization_code",
	"vbr_token",
}

func (v *ELoginGrantType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ELoginGrantType(value)
	for _, existing := range AllowedELoginGrantTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ELoginGrantType", value)
}

// NewELoginGrantTypeFromValue returns a pointer to a valid ELoginGrantType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewELoginGrantTypeFromValue(v string) (*ELoginGrantType, error) {
	ev := ELoginGrantType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ELoginGrantType: valid values are %v", v, AllowedELoginGrantTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ELoginGrantType) IsValid() bool {
	for _, existing := range AllowedELoginGrantTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ELoginGrantType value
func (v ELoginGrantType) Ptr() *ELoginGrantType {
	return &v
}

type NullableELoginGrantType struct {
	value *ELoginGrantType
	isSet bool
}

func (v NullableELoginGrantType) Get() *ELoginGrantType {
	return v.value
}

func (v *NullableELoginGrantType) Set(val *ELoginGrantType) {
	v.value = val
	v.isSet = true
}

func (v NullableELoginGrantType) IsSet() bool {
	return v.isSet
}

func (v *NullableELoginGrantType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableELoginGrantType(val *ELoginGrantType) *NullableELoginGrantType {
	return &NullableELoginGrantType{value: val, isSet: true}
}

func (v NullableELoginGrantType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableELoginGrantType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

