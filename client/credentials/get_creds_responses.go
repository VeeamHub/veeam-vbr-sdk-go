// Code generated by go-swagger; DO NOT EDIT.

package credentials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/veeamhub/veeam-vbr-sdk-go/models"
)

// GetCredsReader is a Reader for the GetCreds structure.
type GetCredsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCredsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCredsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetCredsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCredsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCredsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCredsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetCredsOK creates a GetCredsOK with default headers values
func NewGetCredsOK() *GetCredsOK {
	return &GetCredsOK{}
}

/* GetCredsOK describes a response with status code 200, with default header values.

OK
*/
type GetCredsOK struct {
	Payload *models.CredentialsModel
}

func (o *GetCredsOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/credentials/{id}][%d] getCredsOK  %+v", 200, o.Payload)
}
func (o *GetCredsOK) GetPayload() *models.CredentialsModel {
	return o.Payload
}

func (o *GetCredsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CredentialsModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCredsUnauthorized creates a GetCredsUnauthorized with default headers values
func NewGetCredsUnauthorized() *GetCredsUnauthorized {
	return &GetCredsUnauthorized{}
}

/* GetCredsUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The authorization header has been expected but not found (or found but is expired).
*/
type GetCredsUnauthorized struct {
	Payload *models.Error
}

func (o *GetCredsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/credentials/{id}][%d] getCredsUnauthorized  %+v", 401, o.Payload)
}
func (o *GetCredsUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetCredsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCredsForbidden creates a GetCredsForbidden with default headers values
func NewGetCredsForbidden() *GetCredsForbidden {
	return &GetCredsForbidden{}
}

/* GetCredsForbidden describes a response with status code 403, with default header values.

Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.
*/
type GetCredsForbidden struct {
	Payload *models.Error
}

func (o *GetCredsForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/credentials/{id}][%d] getCredsForbidden  %+v", 403, o.Payload)
}
func (o *GetCredsForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetCredsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCredsNotFound creates a GetCredsNotFound with default headers values
func NewGetCredsNotFound() *GetCredsNotFound {
	return &GetCredsNotFound{}
}

/* GetCredsNotFound describes a response with status code 404, with default header values.

Not found. No object was found with the path parameter specified in the request.
*/
type GetCredsNotFound struct {
	Payload *models.Error
}

func (o *GetCredsNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/credentials/{id}][%d] getCredsNotFound  %+v", 404, o.Payload)
}
func (o *GetCredsNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetCredsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCredsInternalServerError creates a GetCredsInternalServerError with default headers values
func NewGetCredsInternalServerError() *GetCredsInternalServerError {
	return &GetCredsInternalServerError{}
}

/* GetCredsInternalServerError describes a response with status code 500, with default header values.

Internal server error. The request has been received but could not be completed because of an internal error at the server side.
*/
type GetCredsInternalServerError struct {
	Payload *models.Error
}

func (o *GetCredsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/credentials/{id}][%d] getCredsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetCredsInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetCredsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
