// Code generated by go-swagger; DO NOT EDIT.

package credentials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/veeamhub/veeam-vbr-sdk-go/models"
)

// NewChangeRootPasswordForCredsParams creates a new ChangeRootPasswordForCredsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewChangeRootPasswordForCredsParams() *ChangeRootPasswordForCredsParams {
	return &ChangeRootPasswordForCredsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewChangeRootPasswordForCredsParamsWithTimeout creates a new ChangeRootPasswordForCredsParams object
// with the ability to set a timeout on a request.
func NewChangeRootPasswordForCredsParamsWithTimeout(timeout time.Duration) *ChangeRootPasswordForCredsParams {
	return &ChangeRootPasswordForCredsParams{
		timeout: timeout,
	}
}

// NewChangeRootPasswordForCredsParamsWithContext creates a new ChangeRootPasswordForCredsParams object
// with the ability to set a context for a request.
func NewChangeRootPasswordForCredsParamsWithContext(ctx context.Context) *ChangeRootPasswordForCredsParams {
	return &ChangeRootPasswordForCredsParams{
		Context: ctx,
	}
}

// NewChangeRootPasswordForCredsParamsWithHTTPClient creates a new ChangeRootPasswordForCredsParams object
// with the ability to set a custom HTTPClient for a request.
func NewChangeRootPasswordForCredsParamsWithHTTPClient(client *http.Client) *ChangeRootPasswordForCredsParams {
	return &ChangeRootPasswordForCredsParams{
		HTTPClient: client,
	}
}

/* ChangeRootPasswordForCredsParams contains all the parameters to send to the API endpoint
   for the change root password for creds operation.

   Typically these are written to a http.Request.
*/
type ChangeRootPasswordForCredsParams struct {

	// Body.
	Body *models.CredentialsPasswordChangeSpec

	/* ID.

	   ID of the credentials record.

	   Format: uuid
	*/
	ID strfmt.UUID

	/* XAPIVersion.

	     Version and revision of the client REST API. Must be in the following
	format: *\<version\>-\<revision\>*.


	     Default: "1.0-rev1"
	*/
	XAPIVersion string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the change root password for creds params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ChangeRootPasswordForCredsParams) WithDefaults() *ChangeRootPasswordForCredsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the change root password for creds params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ChangeRootPasswordForCredsParams) SetDefaults() {
	var (
		xAPIVersionDefault = string("1.0-rev1")
	)

	val := ChangeRootPasswordForCredsParams{
		XAPIVersion: xAPIVersionDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the change root password for creds params
func (o *ChangeRootPasswordForCredsParams) WithTimeout(timeout time.Duration) *ChangeRootPasswordForCredsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the change root password for creds params
func (o *ChangeRootPasswordForCredsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the change root password for creds params
func (o *ChangeRootPasswordForCredsParams) WithContext(ctx context.Context) *ChangeRootPasswordForCredsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the change root password for creds params
func (o *ChangeRootPasswordForCredsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the change root password for creds params
func (o *ChangeRootPasswordForCredsParams) WithHTTPClient(client *http.Client) *ChangeRootPasswordForCredsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the change root password for creds params
func (o *ChangeRootPasswordForCredsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the change root password for creds params
func (o *ChangeRootPasswordForCredsParams) WithBody(body *models.CredentialsPasswordChangeSpec) *ChangeRootPasswordForCredsParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the change root password for creds params
func (o *ChangeRootPasswordForCredsParams) SetBody(body *models.CredentialsPasswordChangeSpec) {
	o.Body = body
}

// WithID adds the id to the change root password for creds params
func (o *ChangeRootPasswordForCredsParams) WithID(id strfmt.UUID) *ChangeRootPasswordForCredsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the change root password for creds params
func (o *ChangeRootPasswordForCredsParams) SetID(id strfmt.UUID) {
	o.ID = id
}

// WithXAPIVersion adds the xAPIVersion to the change root password for creds params
func (o *ChangeRootPasswordForCredsParams) WithXAPIVersion(xAPIVersion string) *ChangeRootPasswordForCredsParams {
	o.SetXAPIVersion(xAPIVersion)
	return o
}

// SetXAPIVersion adds the xApiVersion to the change root password for creds params
func (o *ChangeRootPasswordForCredsParams) SetXAPIVersion(xAPIVersion string) {
	o.XAPIVersion = xAPIVersion
}

// WriteToRequest writes these params to a swagger request
func (o *ChangeRootPasswordForCredsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID.String()); err != nil {
		return err
	}

	// header param x-api-version
	if err := r.SetHeaderParam("x-api-version", o.XAPIVersion); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
