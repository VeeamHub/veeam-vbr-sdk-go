// Code generated by go-swagger; DO NOT EDIT.

package credentials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new credentials API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for credentials API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ChangePasswordForCreds(params *ChangePasswordForCredsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChangePasswordForCredsOK, error)

	ChangePrivateKeyForCreds(params *ChangePrivateKeyForCredsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChangePrivateKeyForCredsOK, error)

	ChangeRootPasswordForCreds(params *ChangeRootPasswordForCredsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChangeRootPasswordForCredsOK, error)

	CreateCreds(params *CreateCredsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCredsCreated, error)

	DeleteCreds(params *DeleteCredsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCredsNoContent, error)

	GetAllCreds(params *GetAllCredsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllCredsOK, error)

	GetCreds(params *GetCredsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCredsOK, error)

	UpdateCreds(params *UpdateCredsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCredsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ChangePasswordForCreds changes password

  The HTTP POST request to the `/api/v1/credentials/{id}/changepassword` path allows you to change a password of the credentials record that has the specified `id`.
*/
func (a *Client) ChangePasswordForCreds(params *ChangePasswordForCredsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChangePasswordForCredsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangePasswordForCredsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ChangePasswordForCreds",
		Method:             "POST",
		PathPattern:        "/api/v1/credentials/{id}/changepassword",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChangePasswordForCredsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangePasswordForCredsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangePasswordForCreds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangePrivateKeyForCreds changes linux private key

  The HTTP POST request to the `/api/v1/credentials/{id}/changeprivatekey` path allows you to change a Linux private key of the credentials record that has the specified `id`.
*/
func (a *Client) ChangePrivateKeyForCreds(params *ChangePrivateKeyForCredsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChangePrivateKeyForCredsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangePrivateKeyForCredsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ChangePrivateKeyForCreds",
		Method:             "POST",
		PathPattern:        "/api/v1/credentials/{id}/changeprivatekey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChangePrivateKeyForCredsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangePrivateKeyForCredsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangePrivateKeyForCreds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ChangeRootPasswordForCreds changes linux root password

  The HTTP POST request to the `/api/v1/credentials/{id}/changerootpassword` path allows you to change a Linux root password of the credentials record that has the specified `id`.
*/
func (a *Client) ChangeRootPasswordForCreds(params *ChangeRootPasswordForCredsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ChangeRootPasswordForCredsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeRootPasswordForCredsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ChangeRootPasswordForCreds",
		Method:             "POST",
		PathPattern:        "/api/v1/credentials/{id}/changerootpassword",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ChangeRootPasswordForCredsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangeRootPasswordForCredsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ChangeRootPasswordForCreds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCreds adds credentials record

  The HTTP POST request to the `/api/v1/credentials` path allows you to add a credentials record.
*/
func (a *Client) CreateCreds(params *CreateCredsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCredsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCredsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateCreds",
		Method:             "POST",
		PathPattern:        "/api/v1/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCredsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCredsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateCreds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCreds removes credentials record

  The HTTP DELETE request to the `/api/v1/credentials/{id}` path allows you to remove a credentials record that has the specified `id`.
*/
func (a *Client) DeleteCreds(params *DeleteCredsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCredsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCredsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteCreds",
		Method:             "DELETE",
		PathPattern:        "/api/v1/credentials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCredsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCredsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteCreds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllCreds gets all credentials

  The HTTP GET request to the `/api/v1/credentials` path allows you to get an array of credentials records that are added to the backup server.
*/
func (a *Client) GetAllCreds(params *GetAllCredsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllCredsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllCredsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllCreds",
		Method:             "GET",
		PathPattern:        "/api/v1/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllCredsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllCredsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllCreds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCreds gets credentials record

  The HTTP GET request to the `/api/v1/credentials/{id}` path allows you to get a credentials record that has the specified `id`.
*/
func (a *Client) GetCreds(params *GetCredsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCredsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCredsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCreds",
		Method:             "GET",
		PathPattern:        "/api/v1/credentials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCredsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCredsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCreds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateCreds edits credentials record

  The HTTP PUT request to the `/api/v1/credentials/{id}` path allows you to edit a credentials record that has the specified `id`.
*/
func (a *Client) UpdateCreds(params *UpdateCredsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCredsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCredsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateCreds",
		Method:             "PUT",
		PathPattern:        "/api/v1/credentials/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateCredsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCredsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateCreds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
