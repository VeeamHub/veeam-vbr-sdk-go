/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AmazonS3BrowserSpecAllOf struct for AmazonS3BrowserSpecAllOf
type AmazonS3BrowserSpecAllOf struct {
	RegionType EAmazonRegionType `json:"regionType"`
	// ID of a gateway server you want to use to connect to the object storage. Specify this parameter to check internet connection of the server. As a gateway server you can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.
	GatewayServerId *string `json:"gatewayServerId,omitempty"`
	FolderType *ECloudBrowserFolderType `json:"folderType,omitempty"`
	Filters *AmazonS3CloudBrowserFilters `json:"filters,omitempty"`
}

// NewAmazonS3BrowserSpecAllOf instantiates a new AmazonS3BrowserSpecAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmazonS3BrowserSpecAllOf(regionType EAmazonRegionType) *AmazonS3BrowserSpecAllOf {
	this := AmazonS3BrowserSpecAllOf{}
	this.RegionType = regionType
	return &this
}

// NewAmazonS3BrowserSpecAllOfWithDefaults instantiates a new AmazonS3BrowserSpecAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmazonS3BrowserSpecAllOfWithDefaults() *AmazonS3BrowserSpecAllOf {
	this := AmazonS3BrowserSpecAllOf{}
	return &this
}

// GetRegionType returns the RegionType field value
func (o *AmazonS3BrowserSpecAllOf) GetRegionType() EAmazonRegionType {
	if o == nil {
		var ret EAmazonRegionType
		return ret
	}

	return o.RegionType
}

// GetRegionTypeOk returns a tuple with the RegionType field value
// and a boolean to check if the value has been set.
func (o *AmazonS3BrowserSpecAllOf) GetRegionTypeOk() (*EAmazonRegionType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.RegionType, true
}

// SetRegionType sets field value
func (o *AmazonS3BrowserSpecAllOf) SetRegionType(v EAmazonRegionType) {
	o.RegionType = v
}

// GetGatewayServerId returns the GatewayServerId field value if set, zero value otherwise.
func (o *AmazonS3BrowserSpecAllOf) GetGatewayServerId() string {
	if o == nil || isNil(o.GatewayServerId) {
		var ret string
		return ret
	}
	return *o.GatewayServerId
}

// GetGatewayServerIdOk returns a tuple with the GatewayServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmazonS3BrowserSpecAllOf) GetGatewayServerIdOk() (*string, bool) {
	if o == nil || isNil(o.GatewayServerId) {
    return nil, false
	}
	return o.GatewayServerId, true
}

// HasGatewayServerId returns a boolean if a field has been set.
func (o *AmazonS3BrowserSpecAllOf) HasGatewayServerId() bool {
	if o != nil && !isNil(o.GatewayServerId) {
		return true
	}

	return false
}

// SetGatewayServerId gets a reference to the given string and assigns it to the GatewayServerId field.
func (o *AmazonS3BrowserSpecAllOf) SetGatewayServerId(v string) {
	o.GatewayServerId = &v
}

// GetFolderType returns the FolderType field value if set, zero value otherwise.
func (o *AmazonS3BrowserSpecAllOf) GetFolderType() ECloudBrowserFolderType {
	if o == nil || isNil(o.FolderType) {
		var ret ECloudBrowserFolderType
		return ret
	}
	return *o.FolderType
}

// GetFolderTypeOk returns a tuple with the FolderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmazonS3BrowserSpecAllOf) GetFolderTypeOk() (*ECloudBrowserFolderType, bool) {
	if o == nil || isNil(o.FolderType) {
    return nil, false
	}
	return o.FolderType, true
}

// HasFolderType returns a boolean if a field has been set.
func (o *AmazonS3BrowserSpecAllOf) HasFolderType() bool {
	if o != nil && !isNil(o.FolderType) {
		return true
	}

	return false
}

// SetFolderType gets a reference to the given ECloudBrowserFolderType and assigns it to the FolderType field.
func (o *AmazonS3BrowserSpecAllOf) SetFolderType(v ECloudBrowserFolderType) {
	o.FolderType = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *AmazonS3BrowserSpecAllOf) GetFilters() AmazonS3CloudBrowserFilters {
	if o == nil || isNil(o.Filters) {
		var ret AmazonS3CloudBrowserFilters
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmazonS3BrowserSpecAllOf) GetFiltersOk() (*AmazonS3CloudBrowserFilters, bool) {
	if o == nil || isNil(o.Filters) {
    return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *AmazonS3BrowserSpecAllOf) HasFilters() bool {
	if o != nil && !isNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given AmazonS3CloudBrowserFilters and assigns it to the Filters field.
func (o *AmazonS3BrowserSpecAllOf) SetFilters(v AmazonS3CloudBrowserFilters) {
	o.Filters = &v
}

func (o AmazonS3BrowserSpecAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["regionType"] = o.RegionType
	}
	if !isNil(o.GatewayServerId) {
		toSerialize["gatewayServerId"] = o.GatewayServerId
	}
	if !isNil(o.FolderType) {
		toSerialize["folderType"] = o.FolderType
	}
	if !isNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	return json.Marshal(toSerialize)
}

type NullableAmazonS3BrowserSpecAllOf struct {
	value *AmazonS3BrowserSpecAllOf
	isSet bool
}

func (v NullableAmazonS3BrowserSpecAllOf) Get() *AmazonS3BrowserSpecAllOf {
	return v.value
}

func (v *NullableAmazonS3BrowserSpecAllOf) Set(val *AmazonS3BrowserSpecAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAmazonS3BrowserSpecAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAmazonS3BrowserSpecAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmazonS3BrowserSpecAllOf(val *AmazonS3BrowserSpecAllOf) *NullableAmazonS3BrowserSpecAllOf {
	return &NullableAmazonS3BrowserSpecAllOf{value: val, isSet: true}
}

func (v NullableAmazonS3BrowserSpecAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmazonS3BrowserSpecAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


