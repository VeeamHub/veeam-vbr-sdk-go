/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// RestoreTargetDatastoreSpec Destination datastore.
type RestoreTargetDatastoreSpec struct {
	Datastore *VmwareObjectModel `json:"datastore,omitempty"`
	DiskType *EDiskCreationMode `json:"diskType,omitempty"`
}

// NewRestoreTargetDatastoreSpec instantiates a new RestoreTargetDatastoreSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreTargetDatastoreSpec() *RestoreTargetDatastoreSpec {
	this := RestoreTargetDatastoreSpec{}
	return &this
}

// NewRestoreTargetDatastoreSpecWithDefaults instantiates a new RestoreTargetDatastoreSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreTargetDatastoreSpecWithDefaults() *RestoreTargetDatastoreSpec {
	this := RestoreTargetDatastoreSpec{}
	return &this
}

// GetDatastore returns the Datastore field value if set, zero value otherwise.
func (o *RestoreTargetDatastoreSpec) GetDatastore() VmwareObjectModel {
	if o == nil || isNil(o.Datastore) {
		var ret VmwareObjectModel
		return ret
	}
	return *o.Datastore
}

// GetDatastoreOk returns a tuple with the Datastore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreTargetDatastoreSpec) GetDatastoreOk() (*VmwareObjectModel, bool) {
	if o == nil || isNil(o.Datastore) {
    return nil, false
	}
	return o.Datastore, true
}

// HasDatastore returns a boolean if a field has been set.
func (o *RestoreTargetDatastoreSpec) HasDatastore() bool {
	if o != nil && !isNil(o.Datastore) {
		return true
	}

	return false
}

// SetDatastore gets a reference to the given VmwareObjectModel and assigns it to the Datastore field.
func (o *RestoreTargetDatastoreSpec) SetDatastore(v VmwareObjectModel) {
	o.Datastore = &v
}

// GetDiskType returns the DiskType field value if set, zero value otherwise.
func (o *RestoreTargetDatastoreSpec) GetDiskType() EDiskCreationMode {
	if o == nil || isNil(o.DiskType) {
		var ret EDiskCreationMode
		return ret
	}
	return *o.DiskType
}

// GetDiskTypeOk returns a tuple with the DiskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreTargetDatastoreSpec) GetDiskTypeOk() (*EDiskCreationMode, bool) {
	if o == nil || isNil(o.DiskType) {
    return nil, false
	}
	return o.DiskType, true
}

// HasDiskType returns a boolean if a field has been set.
func (o *RestoreTargetDatastoreSpec) HasDiskType() bool {
	if o != nil && !isNil(o.DiskType) {
		return true
	}

	return false
}

// SetDiskType gets a reference to the given EDiskCreationMode and assigns it to the DiskType field.
func (o *RestoreTargetDatastoreSpec) SetDiskType(v EDiskCreationMode) {
	o.DiskType = &v
}

func (o RestoreTargetDatastoreSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Datastore) {
		toSerialize["datastore"] = o.Datastore
	}
	if !isNil(o.DiskType) {
		toSerialize["diskType"] = o.DiskType
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreTargetDatastoreSpec struct {
	value *RestoreTargetDatastoreSpec
	isSet bool
}

func (v NullableRestoreTargetDatastoreSpec) Get() *RestoreTargetDatastoreSpec {
	return v.value
}

func (v *NullableRestoreTargetDatastoreSpec) Set(val *RestoreTargetDatastoreSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreTargetDatastoreSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreTargetDatastoreSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreTargetDatastoreSpec(val *RestoreTargetDatastoreSpec) *NullableRestoreTargetDatastoreSpec {
	return &NullableRestoreTargetDatastoreSpec{value: val, isSet: true}
}

func (v NullableRestoreTargetDatastoreSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreTargetDatastoreSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


