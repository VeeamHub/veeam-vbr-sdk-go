/*
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic. 
 *
 * API version: 1.0-rev2
 * Contact: support@veeam.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// BackupRepositoryImportModel Backup repository.
type BackupRepositoryImportModel struct {
	// Name of the backup repository.
	Name string `json:"name"`
	// Tag assigned to the backup repository.
	Tag *string `json:"tag,omitempty"`
}

// NewBackupRepositoryImportModel instantiates a new BackupRepositoryImportModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupRepositoryImportModel(name string, ) *BackupRepositoryImportModel {
	this := BackupRepositoryImportModel{}
	this.Name = name
	return &this
}

// NewBackupRepositoryImportModelWithDefaults instantiates a new BackupRepositoryImportModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupRepositoryImportModelWithDefaults() *BackupRepositoryImportModel {
	this := BackupRepositoryImportModel{}
	return &this
}

// GetName returns the Name field value
func (o *BackupRepositoryImportModel) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BackupRepositoryImportModel) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BackupRepositoryImportModel) SetName(v string) {
	o.Name = v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *BackupRepositoryImportModel) GetTag() string {
	if o == nil || o.Tag == nil {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRepositoryImportModel) GetTagOk() (*string, bool) {
	if o == nil || o.Tag == nil {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *BackupRepositoryImportModel) HasTag() bool {
	if o != nil && o.Tag != nil {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *BackupRepositoryImportModel) SetTag(v string) {
	o.Tag = &v
}

func (o BackupRepositoryImportModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Tag != nil {
		toSerialize["tag"] = o.Tag
	}
	return json.Marshal(toSerialize)
}

type NullableBackupRepositoryImportModel struct {
	value *BackupRepositoryImportModel
	isSet bool
}

func (v NullableBackupRepositoryImportModel) Get() *BackupRepositoryImportModel {
	return v.value
}

func (v *NullableBackupRepositoryImportModel) Set(val *BackupRepositoryImportModel) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupRepositoryImportModel) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupRepositoryImportModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupRepositoryImportModel(val *BackupRepositoryImportModel) *NullableBackupRepositoryImportModel {
	return &NullableBackupRepositoryImportModel{value: val, isSet: true}
}

func (v NullableBackupRepositoryImportModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupRepositoryImportModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


