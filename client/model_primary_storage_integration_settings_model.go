/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// PrimaryStorageIntegrationSettingsModel Primary storage integration settings for the backup job.
type PrimaryStorageIntegrationSettingsModel struct {
	// If *true*, the primary storage integration is enabled. In this case, storage snapshots (instead of VM snapshots) are used for VM data processing.
	IsEnabled bool `json:"isEnabled"`
	// If *true*, the number of processed VMs per storage snapshot is limited.
	LimitProcessedVm *bool `json:"limitProcessedVm,omitempty"`
	// Number of processed VMs per storage snapshot.
	LimitProcessedVmCount *int32 `json:"limitProcessedVmCount,omitempty"`
	// If *true*, failover to the regular VM processing mode is enabled. In this case, if backup from storage snapshot fails, VM snapshots are used.
	FailoverToStandardBackup *bool `json:"failoverToStandardBackup,omitempty"`
}

// NewPrimaryStorageIntegrationSettingsModel instantiates a new PrimaryStorageIntegrationSettingsModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrimaryStorageIntegrationSettingsModel(isEnabled bool) *PrimaryStorageIntegrationSettingsModel {
	this := PrimaryStorageIntegrationSettingsModel{}
	this.IsEnabled = isEnabled
	return &this
}

// NewPrimaryStorageIntegrationSettingsModelWithDefaults instantiates a new PrimaryStorageIntegrationSettingsModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrimaryStorageIntegrationSettingsModelWithDefaults() *PrimaryStorageIntegrationSettingsModel {
	this := PrimaryStorageIntegrationSettingsModel{}
	return &this
}

// GetIsEnabled returns the IsEnabled field value
func (o *PrimaryStorageIntegrationSettingsModel) GetIsEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value
// and a boolean to check if the value has been set.
func (o *PrimaryStorageIntegrationSettingsModel) GetIsEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsEnabled, true
}

// SetIsEnabled sets field value
func (o *PrimaryStorageIntegrationSettingsModel) SetIsEnabled(v bool) {
	o.IsEnabled = v
}

// GetLimitProcessedVm returns the LimitProcessedVm field value if set, zero value otherwise.
func (o *PrimaryStorageIntegrationSettingsModel) GetLimitProcessedVm() bool {
	if o == nil || isNil(o.LimitProcessedVm) {
		var ret bool
		return ret
	}
	return *o.LimitProcessedVm
}

// GetLimitProcessedVmOk returns a tuple with the LimitProcessedVm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrimaryStorageIntegrationSettingsModel) GetLimitProcessedVmOk() (*bool, bool) {
	if o == nil || isNil(o.LimitProcessedVm) {
    return nil, false
	}
	return o.LimitProcessedVm, true
}

// HasLimitProcessedVm returns a boolean if a field has been set.
func (o *PrimaryStorageIntegrationSettingsModel) HasLimitProcessedVm() bool {
	if o != nil && !isNil(o.LimitProcessedVm) {
		return true
	}

	return false
}

// SetLimitProcessedVm gets a reference to the given bool and assigns it to the LimitProcessedVm field.
func (o *PrimaryStorageIntegrationSettingsModel) SetLimitProcessedVm(v bool) {
	o.LimitProcessedVm = &v
}

// GetLimitProcessedVmCount returns the LimitProcessedVmCount field value if set, zero value otherwise.
func (o *PrimaryStorageIntegrationSettingsModel) GetLimitProcessedVmCount() int32 {
	if o == nil || isNil(o.LimitProcessedVmCount) {
		var ret int32
		return ret
	}
	return *o.LimitProcessedVmCount
}

// GetLimitProcessedVmCountOk returns a tuple with the LimitProcessedVmCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrimaryStorageIntegrationSettingsModel) GetLimitProcessedVmCountOk() (*int32, bool) {
	if o == nil || isNil(o.LimitProcessedVmCount) {
    return nil, false
	}
	return o.LimitProcessedVmCount, true
}

// HasLimitProcessedVmCount returns a boolean if a field has been set.
func (o *PrimaryStorageIntegrationSettingsModel) HasLimitProcessedVmCount() bool {
	if o != nil && !isNil(o.LimitProcessedVmCount) {
		return true
	}

	return false
}

// SetLimitProcessedVmCount gets a reference to the given int32 and assigns it to the LimitProcessedVmCount field.
func (o *PrimaryStorageIntegrationSettingsModel) SetLimitProcessedVmCount(v int32) {
	o.LimitProcessedVmCount = &v
}

// GetFailoverToStandardBackup returns the FailoverToStandardBackup field value if set, zero value otherwise.
func (o *PrimaryStorageIntegrationSettingsModel) GetFailoverToStandardBackup() bool {
	if o == nil || isNil(o.FailoverToStandardBackup) {
		var ret bool
		return ret
	}
	return *o.FailoverToStandardBackup
}

// GetFailoverToStandardBackupOk returns a tuple with the FailoverToStandardBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrimaryStorageIntegrationSettingsModel) GetFailoverToStandardBackupOk() (*bool, bool) {
	if o == nil || isNil(o.FailoverToStandardBackup) {
    return nil, false
	}
	return o.FailoverToStandardBackup, true
}

// HasFailoverToStandardBackup returns a boolean if a field has been set.
func (o *PrimaryStorageIntegrationSettingsModel) HasFailoverToStandardBackup() bool {
	if o != nil && !isNil(o.FailoverToStandardBackup) {
		return true
	}

	return false
}

// SetFailoverToStandardBackup gets a reference to the given bool and assigns it to the FailoverToStandardBackup field.
func (o *PrimaryStorageIntegrationSettingsModel) SetFailoverToStandardBackup(v bool) {
	o.FailoverToStandardBackup = &v
}

func (o PrimaryStorageIntegrationSettingsModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["isEnabled"] = o.IsEnabled
	}
	if !isNil(o.LimitProcessedVm) {
		toSerialize["limitProcessedVm"] = o.LimitProcessedVm
	}
	if !isNil(o.LimitProcessedVmCount) {
		toSerialize["limitProcessedVmCount"] = o.LimitProcessedVmCount
	}
	if !isNil(o.FailoverToStandardBackup) {
		toSerialize["failoverToStandardBackup"] = o.FailoverToStandardBackup
	}
	return json.Marshal(toSerialize)
}

type NullablePrimaryStorageIntegrationSettingsModel struct {
	value *PrimaryStorageIntegrationSettingsModel
	isSet bool
}

func (v NullablePrimaryStorageIntegrationSettingsModel) Get() *PrimaryStorageIntegrationSettingsModel {
	return v.value
}

func (v *NullablePrimaryStorageIntegrationSettingsModel) Set(val *PrimaryStorageIntegrationSettingsModel) {
	v.value = val
	v.isSet = true
}

func (v NullablePrimaryStorageIntegrationSettingsModel) IsSet() bool {
	return v.isSet
}

func (v *NullablePrimaryStorageIntegrationSettingsModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrimaryStorageIntegrationSettingsModel(val *PrimaryStorageIntegrationSettingsModel) *NullablePrimaryStorageIntegrationSettingsModel {
	return &NullablePrimaryStorageIntegrationSettingsModel{value: val, isSet: true}
}

func (v NullablePrimaryStorageIntegrationSettingsModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrimaryStorageIntegrationSettingsModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


