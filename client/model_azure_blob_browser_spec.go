/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// AzureBlobBrowserSpec struct for AzureBlobBrowserSpec
type AzureBlobBrowserSpec struct {
	CloudBrowserSpec
	RegionType *EAzureRegionType `json:"regionType,omitempty"`
	FolderType *ECloudBrowserFolderType `json:"folderType,omitempty"`
	// ID of a gateway server you want to use to connect to the object storage. Specify this parameter to check internet connection of the server. As a gateway server you can use the backup server or any Microsoft Windows or Linux server added to your backup infrastructure. By default, the backup server ID is used.
	GatewayServerId *string `json:"gatewayServerId,omitempty"`
}

// NewAzureBlobBrowserSpec instantiates a new AzureBlobBrowserSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureBlobBrowserSpec(credentialsId string, serviceType ECloudServiceType) *AzureBlobBrowserSpec {
	this := AzureBlobBrowserSpec{}
	this.CredentialsId = credentialsId
	this.ServiceType = serviceType
	return &this
}

// NewAzureBlobBrowserSpecWithDefaults instantiates a new AzureBlobBrowserSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureBlobBrowserSpecWithDefaults() *AzureBlobBrowserSpec {
	this := AzureBlobBrowserSpec{}
	return &this
}

// GetRegionType returns the RegionType field value if set, zero value otherwise.
func (o *AzureBlobBrowserSpec) GetRegionType() EAzureRegionType {
	if o == nil || isNil(o.RegionType) {
		var ret EAzureRegionType
		return ret
	}
	return *o.RegionType
}

// GetRegionTypeOk returns a tuple with the RegionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureBlobBrowserSpec) GetRegionTypeOk() (*EAzureRegionType, bool) {
	if o == nil || isNil(o.RegionType) {
    return nil, false
	}
	return o.RegionType, true
}

// HasRegionType returns a boolean if a field has been set.
func (o *AzureBlobBrowserSpec) HasRegionType() bool {
	if o != nil && !isNil(o.RegionType) {
		return true
	}

	return false
}

// SetRegionType gets a reference to the given EAzureRegionType and assigns it to the RegionType field.
func (o *AzureBlobBrowserSpec) SetRegionType(v EAzureRegionType) {
	o.RegionType = &v
}

// GetFolderType returns the FolderType field value if set, zero value otherwise.
func (o *AzureBlobBrowserSpec) GetFolderType() ECloudBrowserFolderType {
	if o == nil || isNil(o.FolderType) {
		var ret ECloudBrowserFolderType
		return ret
	}
	return *o.FolderType
}

// GetFolderTypeOk returns a tuple with the FolderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureBlobBrowserSpec) GetFolderTypeOk() (*ECloudBrowserFolderType, bool) {
	if o == nil || isNil(o.FolderType) {
    return nil, false
	}
	return o.FolderType, true
}

// HasFolderType returns a boolean if a field has been set.
func (o *AzureBlobBrowserSpec) HasFolderType() bool {
	if o != nil && !isNil(o.FolderType) {
		return true
	}

	return false
}

// SetFolderType gets a reference to the given ECloudBrowserFolderType and assigns it to the FolderType field.
func (o *AzureBlobBrowserSpec) SetFolderType(v ECloudBrowserFolderType) {
	o.FolderType = &v
}

// GetGatewayServerId returns the GatewayServerId field value if set, zero value otherwise.
func (o *AzureBlobBrowserSpec) GetGatewayServerId() string {
	if o == nil || isNil(o.GatewayServerId) {
		var ret string
		return ret
	}
	return *o.GatewayServerId
}

// GetGatewayServerIdOk returns a tuple with the GatewayServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureBlobBrowserSpec) GetGatewayServerIdOk() (*string, bool) {
	if o == nil || isNil(o.GatewayServerId) {
    return nil, false
	}
	return o.GatewayServerId, true
}

// HasGatewayServerId returns a boolean if a field has been set.
func (o *AzureBlobBrowserSpec) HasGatewayServerId() bool {
	if o != nil && !isNil(o.GatewayServerId) {
		return true
	}

	return false
}

// SetGatewayServerId gets a reference to the given string and assigns it to the GatewayServerId field.
func (o *AzureBlobBrowserSpec) SetGatewayServerId(v string) {
	o.GatewayServerId = &v
}

func (o AzureBlobBrowserSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedCloudBrowserSpec, errCloudBrowserSpec := json.Marshal(o.CloudBrowserSpec)
	if errCloudBrowserSpec != nil {
		return []byte{}, errCloudBrowserSpec
	}
	errCloudBrowserSpec = json.Unmarshal([]byte(serializedCloudBrowserSpec), &toSerialize)
	if errCloudBrowserSpec != nil {
		return []byte{}, errCloudBrowserSpec
	}
	if !isNil(o.RegionType) {
		toSerialize["regionType"] = o.RegionType
	}
	if !isNil(o.FolderType) {
		toSerialize["folderType"] = o.FolderType
	}
	if !isNil(o.GatewayServerId) {
		toSerialize["gatewayServerId"] = o.GatewayServerId
	}
	return json.Marshal(toSerialize)
}

type NullableAzureBlobBrowserSpec struct {
	value *AzureBlobBrowserSpec
	isSet bool
}

func (v NullableAzureBlobBrowserSpec) Get() *AzureBlobBrowserSpec {
	return v.value
}

func (v *NullableAzureBlobBrowserSpec) Set(val *AzureBlobBrowserSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureBlobBrowserSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureBlobBrowserSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureBlobBrowserSpec(val *AzureBlobBrowserSpec) *NullableAzureBlobBrowserSpec {
	return &NullableAzureBlobBrowserSpec{value: val, isSet: true}
}

func (v NullableAzureBlobBrowserSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureBlobBrowserSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


