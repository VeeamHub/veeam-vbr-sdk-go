/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// CloudBrowserModel - struct for CloudBrowserModel
type CloudBrowserModel struct {
	AmazonEC2BrowserModel *AmazonEC2BrowserModel
	AmazonS3BrowserModel *AmazonS3BrowserModel
	AmazonSnowballEdgeBrowserModel *AmazonSnowballEdgeBrowserModel
	AzureBlobBrowserModel *AzureBlobBrowserModel
	AzureComputeBrowserModel *AzureComputeBrowserModel
	AzureDataBoxBrowserModel *AzureDataBoxBrowserModel
	GoogleCloudStorageBrowserModel *GoogleCloudStorageBrowserModel
	IBMCloudStorageBrowserModel *IBMCloudStorageBrowserModel
	S3CompatibleBrowserModel *S3CompatibleBrowserModel
	WasabiCloudStorageBrowserModel *WasabiCloudStorageBrowserModel
}

// AmazonEC2BrowserModelAsCloudBrowserModel is a convenience function that returns AmazonEC2BrowserModel wrapped in CloudBrowserModel
func AmazonEC2BrowserModelAsCloudBrowserModel(v *AmazonEC2BrowserModel) CloudBrowserModel {
	return CloudBrowserModel{
		AmazonEC2BrowserModel: v,
	}
}

// AmazonS3BrowserModelAsCloudBrowserModel is a convenience function that returns AmazonS3BrowserModel wrapped in CloudBrowserModel
func AmazonS3BrowserModelAsCloudBrowserModel(v *AmazonS3BrowserModel) CloudBrowserModel {
	return CloudBrowserModel{
		AmazonS3BrowserModel: v,
	}
}

// AmazonSnowballEdgeBrowserModelAsCloudBrowserModel is a convenience function that returns AmazonSnowballEdgeBrowserModel wrapped in CloudBrowserModel
func AmazonSnowballEdgeBrowserModelAsCloudBrowserModel(v *AmazonSnowballEdgeBrowserModel) CloudBrowserModel {
	return CloudBrowserModel{
		AmazonSnowballEdgeBrowserModel: v,
	}
}

// AzureBlobBrowserModelAsCloudBrowserModel is a convenience function that returns AzureBlobBrowserModel wrapped in CloudBrowserModel
func AzureBlobBrowserModelAsCloudBrowserModel(v *AzureBlobBrowserModel) CloudBrowserModel {
	return CloudBrowserModel{
		AzureBlobBrowserModel: v,
	}
}

// AzureComputeBrowserModelAsCloudBrowserModel is a convenience function that returns AzureComputeBrowserModel wrapped in CloudBrowserModel
func AzureComputeBrowserModelAsCloudBrowserModel(v *AzureComputeBrowserModel) CloudBrowserModel {
	return CloudBrowserModel{
		AzureComputeBrowserModel: v,
	}
}

// AzureDataBoxBrowserModelAsCloudBrowserModel is a convenience function that returns AzureDataBoxBrowserModel wrapped in CloudBrowserModel
func AzureDataBoxBrowserModelAsCloudBrowserModel(v *AzureDataBoxBrowserModel) CloudBrowserModel {
	return CloudBrowserModel{
		AzureDataBoxBrowserModel: v,
	}
}

// GoogleCloudStorageBrowserModelAsCloudBrowserModel is a convenience function that returns GoogleCloudStorageBrowserModel wrapped in CloudBrowserModel
func GoogleCloudStorageBrowserModelAsCloudBrowserModel(v *GoogleCloudStorageBrowserModel) CloudBrowserModel {
	return CloudBrowserModel{
		GoogleCloudStorageBrowserModel: v,
	}
}

// IBMCloudStorageBrowserModelAsCloudBrowserModel is a convenience function that returns IBMCloudStorageBrowserModel wrapped in CloudBrowserModel
func IBMCloudStorageBrowserModelAsCloudBrowserModel(v *IBMCloudStorageBrowserModel) CloudBrowserModel {
	return CloudBrowserModel{
		IBMCloudStorageBrowserModel: v,
	}
}

// S3CompatibleBrowserModelAsCloudBrowserModel is a convenience function that returns S3CompatibleBrowserModel wrapped in CloudBrowserModel
func S3CompatibleBrowserModelAsCloudBrowserModel(v *S3CompatibleBrowserModel) CloudBrowserModel {
	return CloudBrowserModel{
		S3CompatibleBrowserModel: v,
	}
}

// WasabiCloudStorageBrowserModelAsCloudBrowserModel is a convenience function that returns WasabiCloudStorageBrowserModel wrapped in CloudBrowserModel
func WasabiCloudStorageBrowserModelAsCloudBrowserModel(v *WasabiCloudStorageBrowserModel) CloudBrowserModel {
	return CloudBrowserModel{
		WasabiCloudStorageBrowserModel: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CloudBrowserModel) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AmazonEC2BrowserModel
	err = newStrictDecoder(data).Decode(&dst.AmazonEC2BrowserModel)
	if err == nil {
		jsonAmazonEC2BrowserModel, _ := json.Marshal(dst.AmazonEC2BrowserModel)
		if string(jsonAmazonEC2BrowserModel) == "{}" { // empty struct
			dst.AmazonEC2BrowserModel = nil
		} else {
			match++
		}
	} else {
		dst.AmazonEC2BrowserModel = nil
	}

	// try to unmarshal data into AmazonS3BrowserModel
	err = newStrictDecoder(data).Decode(&dst.AmazonS3BrowserModel)
	if err == nil {
		jsonAmazonS3BrowserModel, _ := json.Marshal(dst.AmazonS3BrowserModel)
		if string(jsonAmazonS3BrowserModel) == "{}" { // empty struct
			dst.AmazonS3BrowserModel = nil
		} else {
			match++
		}
	} else {
		dst.AmazonS3BrowserModel = nil
	}

	// try to unmarshal data into AmazonSnowballEdgeBrowserModel
	err = newStrictDecoder(data).Decode(&dst.AmazonSnowballEdgeBrowserModel)
	if err == nil {
		jsonAmazonSnowballEdgeBrowserModel, _ := json.Marshal(dst.AmazonSnowballEdgeBrowserModel)
		if string(jsonAmazonSnowballEdgeBrowserModel) == "{}" { // empty struct
			dst.AmazonSnowballEdgeBrowserModel = nil
		} else {
			match++
		}
	} else {
		dst.AmazonSnowballEdgeBrowserModel = nil
	}

	// try to unmarshal data into AzureBlobBrowserModel
	err = newStrictDecoder(data).Decode(&dst.AzureBlobBrowserModel)
	if err == nil {
		jsonAzureBlobBrowserModel, _ := json.Marshal(dst.AzureBlobBrowserModel)
		if string(jsonAzureBlobBrowserModel) == "{}" { // empty struct
			dst.AzureBlobBrowserModel = nil
		} else {
			match++
		}
	} else {
		dst.AzureBlobBrowserModel = nil
	}

	// try to unmarshal data into AzureComputeBrowserModel
	err = newStrictDecoder(data).Decode(&dst.AzureComputeBrowserModel)
	if err == nil {
		jsonAzureComputeBrowserModel, _ := json.Marshal(dst.AzureComputeBrowserModel)
		if string(jsonAzureComputeBrowserModel) == "{}" { // empty struct
			dst.AzureComputeBrowserModel = nil
		} else {
			match++
		}
	} else {
		dst.AzureComputeBrowserModel = nil
	}

	// try to unmarshal data into AzureDataBoxBrowserModel
	err = newStrictDecoder(data).Decode(&dst.AzureDataBoxBrowserModel)
	if err == nil {
		jsonAzureDataBoxBrowserModel, _ := json.Marshal(dst.AzureDataBoxBrowserModel)
		if string(jsonAzureDataBoxBrowserModel) == "{}" { // empty struct
			dst.AzureDataBoxBrowserModel = nil
		} else {
			match++
		}
	} else {
		dst.AzureDataBoxBrowserModel = nil
	}

	// try to unmarshal data into GoogleCloudStorageBrowserModel
	err = newStrictDecoder(data).Decode(&dst.GoogleCloudStorageBrowserModel)
	if err == nil {
		jsonGoogleCloudStorageBrowserModel, _ := json.Marshal(dst.GoogleCloudStorageBrowserModel)
		if string(jsonGoogleCloudStorageBrowserModel) == "{}" { // empty struct
			dst.GoogleCloudStorageBrowserModel = nil
		} else {
			match++
		}
	} else {
		dst.GoogleCloudStorageBrowserModel = nil
	}

	// try to unmarshal data into IBMCloudStorageBrowserModel
	err = newStrictDecoder(data).Decode(&dst.IBMCloudStorageBrowserModel)
	if err == nil {
		jsonIBMCloudStorageBrowserModel, _ := json.Marshal(dst.IBMCloudStorageBrowserModel)
		if string(jsonIBMCloudStorageBrowserModel) == "{}" { // empty struct
			dst.IBMCloudStorageBrowserModel = nil
		} else {
			match++
		}
	} else {
		dst.IBMCloudStorageBrowserModel = nil
	}

	// try to unmarshal data into S3CompatibleBrowserModel
	err = newStrictDecoder(data).Decode(&dst.S3CompatibleBrowserModel)
	if err == nil {
		jsonS3CompatibleBrowserModel, _ := json.Marshal(dst.S3CompatibleBrowserModel)
		if string(jsonS3CompatibleBrowserModel) == "{}" { // empty struct
			dst.S3CompatibleBrowserModel = nil
		} else {
			match++
		}
	} else {
		dst.S3CompatibleBrowserModel = nil
	}

	// try to unmarshal data into WasabiCloudStorageBrowserModel
	err = newStrictDecoder(data).Decode(&dst.WasabiCloudStorageBrowserModel)
	if err == nil {
		jsonWasabiCloudStorageBrowserModel, _ := json.Marshal(dst.WasabiCloudStorageBrowserModel)
		if string(jsonWasabiCloudStorageBrowserModel) == "{}" { // empty struct
			dst.WasabiCloudStorageBrowserModel = nil
		} else {
			match++
		}
	} else {
		dst.WasabiCloudStorageBrowserModel = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AmazonEC2BrowserModel = nil
		dst.AmazonS3BrowserModel = nil
		dst.AmazonSnowballEdgeBrowserModel = nil
		dst.AzureBlobBrowserModel = nil
		dst.AzureComputeBrowserModel = nil
		dst.AzureDataBoxBrowserModel = nil
		dst.GoogleCloudStorageBrowserModel = nil
		dst.IBMCloudStorageBrowserModel = nil
		dst.S3CompatibleBrowserModel = nil
		dst.WasabiCloudStorageBrowserModel = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CloudBrowserModel)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CloudBrowserModel)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CloudBrowserModel) MarshalJSON() ([]byte, error) {
	if src.AmazonEC2BrowserModel != nil {
		return json.Marshal(&src.AmazonEC2BrowserModel)
	}

	if src.AmazonS3BrowserModel != nil {
		return json.Marshal(&src.AmazonS3BrowserModel)
	}

	if src.AmazonSnowballEdgeBrowserModel != nil {
		return json.Marshal(&src.AmazonSnowballEdgeBrowserModel)
	}

	if src.AzureBlobBrowserModel != nil {
		return json.Marshal(&src.AzureBlobBrowserModel)
	}

	if src.AzureComputeBrowserModel != nil {
		return json.Marshal(&src.AzureComputeBrowserModel)
	}

	if src.AzureDataBoxBrowserModel != nil {
		return json.Marshal(&src.AzureDataBoxBrowserModel)
	}

	if src.GoogleCloudStorageBrowserModel != nil {
		return json.Marshal(&src.GoogleCloudStorageBrowserModel)
	}

	if src.IBMCloudStorageBrowserModel != nil {
		return json.Marshal(&src.IBMCloudStorageBrowserModel)
	}

	if src.S3CompatibleBrowserModel != nil {
		return json.Marshal(&src.S3CompatibleBrowserModel)
	}

	if src.WasabiCloudStorageBrowserModel != nil {
		return json.Marshal(&src.WasabiCloudStorageBrowserModel)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CloudBrowserModel) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AmazonEC2BrowserModel != nil {
		return obj.AmazonEC2BrowserModel
	}

	if obj.AmazonS3BrowserModel != nil {
		return obj.AmazonS3BrowserModel
	}

	if obj.AmazonSnowballEdgeBrowserModel != nil {
		return obj.AmazonSnowballEdgeBrowserModel
	}

	if obj.AzureBlobBrowserModel != nil {
		return obj.AzureBlobBrowserModel
	}

	if obj.AzureComputeBrowserModel != nil {
		return obj.AzureComputeBrowserModel
	}

	if obj.AzureDataBoxBrowserModel != nil {
		return obj.AzureDataBoxBrowserModel
	}

	if obj.GoogleCloudStorageBrowserModel != nil {
		return obj.GoogleCloudStorageBrowserModel
	}

	if obj.IBMCloudStorageBrowserModel != nil {
		return obj.IBMCloudStorageBrowserModel
	}

	if obj.S3CompatibleBrowserModel != nil {
		return obj.S3CompatibleBrowserModel
	}

	if obj.WasabiCloudStorageBrowserModel != nil {
		return obj.WasabiCloudStorageBrowserModel
	}

	// all schemas are nil
	return nil
}

type NullableCloudBrowserModel struct {
	value *CloudBrowserModel
	isSet bool
}

func (v NullableCloudBrowserModel) Get() *CloudBrowserModel {
	return v.value
}

func (v *NullableCloudBrowserModel) Set(val *CloudBrowserModel) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudBrowserModel) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudBrowserModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudBrowserModel(val *CloudBrowserModel) *NullableCloudBrowserModel {
	return &NullableCloudBrowserModel{value: val, isSet: true}
}

func (v NullableCloudBrowserModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudBrowserModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


