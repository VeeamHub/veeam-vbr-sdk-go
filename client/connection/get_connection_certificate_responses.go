// Code generated by go-swagger; DO NOT EDIT.

package connection

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/veeamhub/veeam-vbr-sdk-go/models"
)

// GetConnectionCertificateReader is a Reader for the GetConnectionCertificate structure.
type GetConnectionCertificateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetConnectionCertificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewGetConnectionCertificateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetConnectionCertificateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetConnectionCertificateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetConnectionCertificateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetConnectionCertificateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetConnectionCertificateCreated creates a GetConnectionCertificateCreated with default headers values
func NewGetConnectionCertificateCreated() *GetConnectionCertificateCreated {
	return &GetConnectionCertificateCreated{}
}

/* GetConnectionCertificateCreated describes a response with status code 201, with default header values.

OK
*/
type GetConnectionCertificateCreated struct {
	Payload *models.ConnectionCertificateModel
}

func (o *GetConnectionCertificateCreated) Error() string {
	return fmt.Sprintf("[POST /api/v1/connectionCertificate][%d] getConnectionCertificateCreated  %+v", 201, o.Payload)
}
func (o *GetConnectionCertificateCreated) GetPayload() *models.ConnectionCertificateModel {
	return o.Payload
}

func (o *GetConnectionCertificateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConnectionCertificateModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConnectionCertificateBadRequest creates a GetConnectionCertificateBadRequest with default headers values
func NewGetConnectionCertificateBadRequest() *GetConnectionCertificateBadRequest {
	return &GetConnectionCertificateBadRequest{}
}

/* GetConnectionCertificateBadRequest describes a response with status code 400, with default header values.

Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.
*/
type GetConnectionCertificateBadRequest struct {
	Payload *models.Error
}

func (o *GetConnectionCertificateBadRequest) Error() string {
	return fmt.Sprintf("[POST /api/v1/connectionCertificate][%d] getConnectionCertificateBadRequest  %+v", 400, o.Payload)
}
func (o *GetConnectionCertificateBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetConnectionCertificateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConnectionCertificateUnauthorized creates a GetConnectionCertificateUnauthorized with default headers values
func NewGetConnectionCertificateUnauthorized() *GetConnectionCertificateUnauthorized {
	return &GetConnectionCertificateUnauthorized{}
}

/* GetConnectionCertificateUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The authorization header has been expected but not found (or found but is expired).
*/
type GetConnectionCertificateUnauthorized struct {
	Payload *models.Error
}

func (o *GetConnectionCertificateUnauthorized) Error() string {
	return fmt.Sprintf("[POST /api/v1/connectionCertificate][%d] getConnectionCertificateUnauthorized  %+v", 401, o.Payload)
}
func (o *GetConnectionCertificateUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetConnectionCertificateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConnectionCertificateForbidden creates a GetConnectionCertificateForbidden with default headers values
func NewGetConnectionCertificateForbidden() *GetConnectionCertificateForbidden {
	return &GetConnectionCertificateForbidden{}
}

/* GetConnectionCertificateForbidden describes a response with status code 403, with default header values.

Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.
*/
type GetConnectionCertificateForbidden struct {
	Payload *models.Error
}

func (o *GetConnectionCertificateForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/connectionCertificate][%d] getConnectionCertificateForbidden  %+v", 403, o.Payload)
}
func (o *GetConnectionCertificateForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetConnectionCertificateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetConnectionCertificateInternalServerError creates a GetConnectionCertificateInternalServerError with default headers values
func NewGetConnectionCertificateInternalServerError() *GetConnectionCertificateInternalServerError {
	return &GetConnectionCertificateInternalServerError{}
}

/* GetConnectionCertificateInternalServerError describes a response with status code 500, with default header values.

Internal server error. The request has been received but could not be completed because of an internal error at the server side.
*/
type GetConnectionCertificateInternalServerError struct {
	Payload *models.Error
}

func (o *GetConnectionCertificateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /api/v1/connectionCertificate][%d] getConnectionCertificateInternalServerError  %+v", 500, o.Payload)
}
func (o *GetConnectionCertificateInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetConnectionCertificateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
