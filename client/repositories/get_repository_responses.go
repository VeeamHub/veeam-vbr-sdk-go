// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/veeamhub/veeam-vbr-sdk-go/models"
)

// GetRepositoryReader is a Reader for the GetRepository structure.
type GetRepositoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetRepositoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRepositoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRepositoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRepositoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetRepositoryOK creates a GetRepositoryOK with default headers values
func NewGetRepositoryOK() *GetRepositoryOK {
	return &GetRepositoryOK{}
}

/* GetRepositoryOK describes a response with status code 200, with default header values.

OK
*/
type GetRepositoryOK struct {
	Payload *models.RepositoryModel
}

func (o *GetRepositoryOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/backupInfrastructure/repositories/{id}][%d] getRepositoryOK  %+v", 200, o.Payload)
}
func (o *GetRepositoryOK) GetPayload() *models.RepositoryModel {
	return o.Payload
}

func (o *GetRepositoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RepositoryModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoryUnauthorized creates a GetRepositoryUnauthorized with default headers values
func NewGetRepositoryUnauthorized() *GetRepositoryUnauthorized {
	return &GetRepositoryUnauthorized{}
}

/* GetRepositoryUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The authorization header has been expected but not found (or found but is expired).
*/
type GetRepositoryUnauthorized struct {
	Payload *models.Error
}

func (o *GetRepositoryUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/backupInfrastructure/repositories/{id}][%d] getRepositoryUnauthorized  %+v", 401, o.Payload)
}
func (o *GetRepositoryUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoryForbidden creates a GetRepositoryForbidden with default headers values
func NewGetRepositoryForbidden() *GetRepositoryForbidden {
	return &GetRepositoryForbidden{}
}

/* GetRepositoryForbidden describes a response with status code 403, with default header values.

Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.
*/
type GetRepositoryForbidden struct {
	Payload *models.Error
}

func (o *GetRepositoryForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/backupInfrastructure/repositories/{id}][%d] getRepositoryForbidden  %+v", 403, o.Payload)
}
func (o *GetRepositoryForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoryNotFound creates a GetRepositoryNotFound with default headers values
func NewGetRepositoryNotFound() *GetRepositoryNotFound {
	return &GetRepositoryNotFound{}
}

/* GetRepositoryNotFound describes a response with status code 404, with default header values.

Not found. No object was found with the path parameter specified in the request.
*/
type GetRepositoryNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoryNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/backupInfrastructure/repositories/{id}][%d] getRepositoryNotFound  %+v", 404, o.Payload)
}
func (o *GetRepositoryNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoryInternalServerError creates a GetRepositoryInternalServerError with default headers values
func NewGetRepositoryInternalServerError() *GetRepositoryInternalServerError {
	return &GetRepositoryInternalServerError{}
}

/* GetRepositoryInternalServerError describes a response with status code 500, with default header values.

Internal server error. The request has been received but could not be completed because of an internal error at the server side.
*/
type GetRepositoryInternalServerError struct {
	Payload *models.Error
}

func (o *GetRepositoryInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/backupInfrastructure/repositories/{id}][%d] getRepositoryInternalServerError  %+v", 500, o.Payload)
}
func (o *GetRepositoryInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
