// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAllRepositoriesStatesParams creates a new GetAllRepositoriesStatesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAllRepositoriesStatesParams() *GetAllRepositoriesStatesParams {
	return &GetAllRepositoriesStatesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllRepositoriesStatesParamsWithTimeout creates a new GetAllRepositoriesStatesParams object
// with the ability to set a timeout on a request.
func NewGetAllRepositoriesStatesParamsWithTimeout(timeout time.Duration) *GetAllRepositoriesStatesParams {
	return &GetAllRepositoriesStatesParams{
		timeout: timeout,
	}
}

// NewGetAllRepositoriesStatesParamsWithContext creates a new GetAllRepositoriesStatesParams object
// with the ability to set a context for a request.
func NewGetAllRepositoriesStatesParamsWithContext(ctx context.Context) *GetAllRepositoriesStatesParams {
	return &GetAllRepositoriesStatesParams{
		Context: ctx,
	}
}

// NewGetAllRepositoriesStatesParamsWithHTTPClient creates a new GetAllRepositoriesStatesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAllRepositoriesStatesParamsWithHTTPClient(client *http.Client) *GetAllRepositoriesStatesParams {
	return &GetAllRepositoriesStatesParams{
		HTTPClient: client,
	}
}

/* GetAllRepositoriesStatesParams contains all the parameters to send to the API endpoint
   for the get all repositories states operation.

   Typically these are written to a http.Request.
*/
type GetAllRepositoriesStatesParams struct {

	/* CapacityFilter.

	   Filters repository states by repository capacity.

	   Format: double
	*/
	CapacityFilter *float64

	/* FreeSpaceFilter.

	   Filters repository states by repository free space.

	   Format: double
	*/
	FreeSpaceFilter *float64

	/* IDFilter.

	   Filters repository states by repository ID.

	   Format: uuid
	*/
	IDFilter *strfmt.UUID

	/* Limit.

	   Maximum number of repository states to return.

	   Format: int32
	*/
	Limit *int32

	/* NameFilter.

	   Filters repository states by the `nameFilter` pattern. The pattern can match any repository state parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end.
	*/
	NameFilter *string

	/* OrderAsc.

	   Sorts repository states in the ascending order by the `orderColumn` parameter.
	*/
	OrderAsc *bool

	/* OrderColumn.

	   Sorts repository states by one of the state parameters.
	*/
	OrderColumn *string

	/* Skip.

	   Number of repository states to skip.

	   Format: int32
	*/
	Skip *int32

	/* TypeFilter.

	   Filters repository states by repository type.
	*/
	TypeFilter *string

	/* UsedSpaceFilter.

	   Filters repository states by repository used space.

	   Format: double
	*/
	UsedSpaceFilter *float64

	/* XAPIVersion.

	     Version and revision of the client REST API. Must be in the following
	format: *\<version\>-\<revision\>*.


	     Default: "1.0-rev1"
	*/
	XAPIVersion string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get all repositories states params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllRepositoriesStatesParams) WithDefaults() *GetAllRepositoriesStatesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get all repositories states params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllRepositoriesStatesParams) SetDefaults() {
	var (
		xAPIVersionDefault = string("1.0-rev1")
	)

	val := GetAllRepositoriesStatesParams{
		XAPIVersion: xAPIVersionDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) WithTimeout(timeout time.Duration) *GetAllRepositoriesStatesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) WithContext(ctx context.Context) *GetAllRepositoriesStatesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) WithHTTPClient(client *http.Client) *GetAllRepositoriesStatesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCapacityFilter adds the capacityFilter to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) WithCapacityFilter(capacityFilter *float64) *GetAllRepositoriesStatesParams {
	o.SetCapacityFilter(capacityFilter)
	return o
}

// SetCapacityFilter adds the capacityFilter to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) SetCapacityFilter(capacityFilter *float64) {
	o.CapacityFilter = capacityFilter
}

// WithFreeSpaceFilter adds the freeSpaceFilter to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) WithFreeSpaceFilter(freeSpaceFilter *float64) *GetAllRepositoriesStatesParams {
	o.SetFreeSpaceFilter(freeSpaceFilter)
	return o
}

// SetFreeSpaceFilter adds the freeSpaceFilter to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) SetFreeSpaceFilter(freeSpaceFilter *float64) {
	o.FreeSpaceFilter = freeSpaceFilter
}

// WithIDFilter adds the iDFilter to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) WithIDFilter(iDFilter *strfmt.UUID) *GetAllRepositoriesStatesParams {
	o.SetIDFilter(iDFilter)
	return o
}

// SetIDFilter adds the idFilter to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) SetIDFilter(iDFilter *strfmt.UUID) {
	o.IDFilter = iDFilter
}

// WithLimit adds the limit to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) WithLimit(limit *int32) *GetAllRepositoriesStatesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithNameFilter adds the nameFilter to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) WithNameFilter(nameFilter *string) *GetAllRepositoriesStatesParams {
	o.SetNameFilter(nameFilter)
	return o
}

// SetNameFilter adds the nameFilter to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) SetNameFilter(nameFilter *string) {
	o.NameFilter = nameFilter
}

// WithOrderAsc adds the orderAsc to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) WithOrderAsc(orderAsc *bool) *GetAllRepositoriesStatesParams {
	o.SetOrderAsc(orderAsc)
	return o
}

// SetOrderAsc adds the orderAsc to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) SetOrderAsc(orderAsc *bool) {
	o.OrderAsc = orderAsc
}

// WithOrderColumn adds the orderColumn to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) WithOrderColumn(orderColumn *string) *GetAllRepositoriesStatesParams {
	o.SetOrderColumn(orderColumn)
	return o
}

// SetOrderColumn adds the orderColumn to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) SetOrderColumn(orderColumn *string) {
	o.OrderColumn = orderColumn
}

// WithSkip adds the skip to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) WithSkip(skip *int32) *GetAllRepositoriesStatesParams {
	o.SetSkip(skip)
	return o
}

// SetSkip adds the skip to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) SetSkip(skip *int32) {
	o.Skip = skip
}

// WithTypeFilter adds the typeFilter to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) WithTypeFilter(typeFilter *string) *GetAllRepositoriesStatesParams {
	o.SetTypeFilter(typeFilter)
	return o
}

// SetTypeFilter adds the typeFilter to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) SetTypeFilter(typeFilter *string) {
	o.TypeFilter = typeFilter
}

// WithUsedSpaceFilter adds the usedSpaceFilter to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) WithUsedSpaceFilter(usedSpaceFilter *float64) *GetAllRepositoriesStatesParams {
	o.SetUsedSpaceFilter(usedSpaceFilter)
	return o
}

// SetUsedSpaceFilter adds the usedSpaceFilter to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) SetUsedSpaceFilter(usedSpaceFilter *float64) {
	o.UsedSpaceFilter = usedSpaceFilter
}

// WithXAPIVersion adds the xAPIVersion to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) WithXAPIVersion(xAPIVersion string) *GetAllRepositoriesStatesParams {
	o.SetXAPIVersion(xAPIVersion)
	return o
}

// SetXAPIVersion adds the xApiVersion to the get all repositories states params
func (o *GetAllRepositoriesStatesParams) SetXAPIVersion(xAPIVersion string) {
	o.XAPIVersion = xAPIVersion
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllRepositoriesStatesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CapacityFilter != nil {

		// query param capacityFilter
		var qrCapacityFilter float64

		if o.CapacityFilter != nil {
			qrCapacityFilter = *o.CapacityFilter
		}
		qCapacityFilter := swag.FormatFloat64(qrCapacityFilter)
		if qCapacityFilter != "" {

			if err := r.SetQueryParam("capacityFilter", qCapacityFilter); err != nil {
				return err
			}
		}
	}

	if o.FreeSpaceFilter != nil {

		// query param freeSpaceFilter
		var qrFreeSpaceFilter float64

		if o.FreeSpaceFilter != nil {
			qrFreeSpaceFilter = *o.FreeSpaceFilter
		}
		qFreeSpaceFilter := swag.FormatFloat64(qrFreeSpaceFilter)
		if qFreeSpaceFilter != "" {

			if err := r.SetQueryParam("freeSpaceFilter", qFreeSpaceFilter); err != nil {
				return err
			}
		}
	}

	if o.IDFilter != nil {

		// query param idFilter
		var qrIDFilter strfmt.UUID

		if o.IDFilter != nil {
			qrIDFilter = *o.IDFilter
		}
		qIDFilter := qrIDFilter.String()
		if qIDFilter != "" {

			if err := r.SetQueryParam("idFilter", qIDFilter); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.NameFilter != nil {

		// query param nameFilter
		var qrNameFilter string

		if o.NameFilter != nil {
			qrNameFilter = *o.NameFilter
		}
		qNameFilter := qrNameFilter
		if qNameFilter != "" {

			if err := r.SetQueryParam("nameFilter", qNameFilter); err != nil {
				return err
			}
		}
	}

	if o.OrderAsc != nil {

		// query param orderAsc
		var qrOrderAsc bool

		if o.OrderAsc != nil {
			qrOrderAsc = *o.OrderAsc
		}
		qOrderAsc := swag.FormatBool(qrOrderAsc)
		if qOrderAsc != "" {

			if err := r.SetQueryParam("orderAsc", qOrderAsc); err != nil {
				return err
			}
		}
	}

	if o.OrderColumn != nil {

		// query param orderColumn
		var qrOrderColumn string

		if o.OrderColumn != nil {
			qrOrderColumn = *o.OrderColumn
		}
		qOrderColumn := qrOrderColumn
		if qOrderColumn != "" {

			if err := r.SetQueryParam("orderColumn", qOrderColumn); err != nil {
				return err
			}
		}
	}

	if o.Skip != nil {

		// query param skip
		var qrSkip int32

		if o.Skip != nil {
			qrSkip = *o.Skip
		}
		qSkip := swag.FormatInt32(qrSkip)
		if qSkip != "" {

			if err := r.SetQueryParam("skip", qSkip); err != nil {
				return err
			}
		}
	}

	if o.TypeFilter != nil {

		// query param typeFilter
		var qrTypeFilter string

		if o.TypeFilter != nil {
			qrTypeFilter = *o.TypeFilter
		}
		qTypeFilter := qrTypeFilter
		if qTypeFilter != "" {

			if err := r.SetQueryParam("typeFilter", qTypeFilter); err != nil {
				return err
			}
		}
	}

	if o.UsedSpaceFilter != nil {

		// query param usedSpaceFilter
		var qrUsedSpaceFilter float64

		if o.UsedSpaceFilter != nil {
			qrUsedSpaceFilter = *o.UsedSpaceFilter
		}
		qUsedSpaceFilter := swag.FormatFloat64(qrUsedSpaceFilter)
		if qUsedSpaceFilter != "" {

			if err := r.SetQueryParam("usedSpaceFilter", qUsedSpaceFilter); err != nil {
				return err
			}
		}
	}

	// header param x-api-version
	if err := r.SetHeaderParam("x-api-version", o.XAPIVersion); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
