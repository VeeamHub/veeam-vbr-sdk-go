// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new repositories API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for repositories API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRepository(params *CreateRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRepositoryCreated, error)

	DeleteRepository(params *DeleteRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRepositoryNoContent, error)

	DisableScaleOutExtentMaintenanceMode(params *DisableScaleOutExtentMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DisableScaleOutExtentMaintenanceModeCreated, error)

	EnableScaleOutExtentMaintenanceMode(params *EnableScaleOutExtentMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableScaleOutExtentMaintenanceModeCreated, error)

	GetAllRepositories(params *GetAllRepositoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllRepositoriesOK, error)

	GetAllRepositoriesStates(params *GetAllRepositoriesStatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllRepositoriesStatesOK, error)

	GetAllScaleOutRepositories(params *GetAllScaleOutRepositoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllScaleOutRepositoriesOK, error)

	GetRepository(params *GetRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRepositoryOK, error)

	GetScaleOutRepository(params *GetScaleOutRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScaleOutRepositoryOK, error)

	UpdateRepository(params *UpdateRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRepositoryCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateRepository adds repository

  The HTTP POST request to the `/api/v1/backupInfrastructure/repositories` path allows you to add a repository to the backup infrastructure.
*/
func (a *Client) CreateRepository(params *CreateRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateRepository",
		Method:             "POST",
		PathPattern:        "/api/v1/backupInfrastructure/repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRepository removes repository

  The HTTP DELETE request to the `/api/v1/backupInfrastructure/repositories/{id}` path allows you to remove a backup repository that has the specified `id` from the backup infrastructure.
*/
func (a *Client) DeleteRepository(params *DeleteRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteRepository",
		Method:             "DELETE",
		PathPattern:        "/api/v1/backupInfrastructure/repositories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DisableScaleOutExtentMaintenanceMode disables maintenance mode

  The HTTP POST request to the `/api/v1/backupInfrastructure/scaleOutRepositories/{id}/disableMaintenanceMode` path allows you to disable maintenance mode for a scale-out backup repository extent that has the specified `id`.
*/
func (a *Client) DisableScaleOutExtentMaintenanceMode(params *DisableScaleOutExtentMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DisableScaleOutExtentMaintenanceModeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisableScaleOutExtentMaintenanceModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DisableScaleOutExtentMaintenanceMode",
		Method:             "POST",
		PathPattern:        "/api/v1/backupInfrastructure/scaleOutRepositories/{id}/disableMaintenanceMode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DisableScaleOutExtentMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DisableScaleOutExtentMaintenanceModeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DisableScaleOutExtentMaintenanceMode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  EnableScaleOutExtentMaintenanceMode enables maintenance mode

  The HTTP POST request to the `/api/v1/backupInfrastructure/scaleOutRepositories/{id}/enableMaintenanceMode` path allows you to enable maintenance mode for a scale-out backup repository extent that has the specified `id`.
*/
func (a *Client) EnableScaleOutExtentMaintenanceMode(params *EnableScaleOutExtentMaintenanceModeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EnableScaleOutExtentMaintenanceModeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableScaleOutExtentMaintenanceModeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "EnableScaleOutExtentMaintenanceMode",
		Method:             "POST",
		PathPattern:        "/api/v1/backupInfrastructure/scaleOutRepositories/{id}/enableMaintenanceMode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EnableScaleOutExtentMaintenanceModeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnableScaleOutExtentMaintenanceModeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for EnableScaleOutExtentMaintenanceMode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllRepositories gets all repositories

  The HTTP GET request to the `/api/v1/backupInfrastructure/repositories` path allows you to get an array of all backup repositories that are added to the backup infrastructure.
*/
func (a *Client) GetAllRepositories(params *GetAllRepositoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllRepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllRepositoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllRepositories",
		Method:             "GET",
		PathPattern:        "/api/v1/backupInfrastructure/repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllRepositoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllRepositoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllRepositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllRepositoriesStates gets all repository states

  The HTTP GET request to the `/api/v1/backupInfrastructure/repositories/states` path allows you to get an array of all repository states. The states include repository location and brief statistics, such as repository capacity, free and used space.
*/
func (a *Client) GetAllRepositoriesStates(params *GetAllRepositoriesStatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllRepositoriesStatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllRepositoriesStatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllRepositoriesStates",
		Method:             "GET",
		PathPattern:        "/api/v1/backupInfrastructure/repositories/states",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllRepositoriesStatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllRepositoriesStatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllRepositoriesStates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAllScaleOutRepositories gets all scale out backup repositories

  The HTTP GET request to the `/api/v1/backupInfrastructure/scaleOutRepositories` path allows you to get an array of all scale-out backup repositories that are added to the backup infrastructure.
*/
func (a *Client) GetAllScaleOutRepositories(params *GetAllScaleOutRepositoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllScaleOutRepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllScaleOutRepositoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAllScaleOutRepositories",
		Method:             "GET",
		PathPattern:        "/api/v1/backupInfrastructure/scaleOutRepositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllScaleOutRepositoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllScaleOutRepositoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAllScaleOutRepositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRepository gets repository

  The HTTP GET request to the `/api/v1/backupInfrastructure/repositories/{id}` path allows you to get a backup repository that has the specified `id`.
*/
func (a *Client) GetRepository(params *GetRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRepository",
		Method:             "GET",
		PathPattern:        "/api/v1/backupInfrastructure/repositories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetScaleOutRepository gets scale out backup repository

  The HTTP GET request to the `/api/v1/backupInfrastructure/scaleOutRepositories/{id}` path allows you to get a scale-out backup repository that has the specified `id`.
*/
func (a *Client) GetScaleOutRepository(params *GetScaleOutRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetScaleOutRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScaleOutRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetScaleOutRepository",
		Method:             "GET",
		PathPattern:        "/api/v1/backupInfrastructure/scaleOutRepositories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetScaleOutRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetScaleOutRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetScaleOutRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRepository edits repository

  The HTTP PUT request to the `/api/v1/backupInfrastructure/repositories/{id}` path allows you to edit a backup repository that has the specified `id`.
*/
func (a *Client) UpdateRepository(params *UpdateRepositoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRepositoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateRepository",
		Method:             "PUT",
		PathPattern:        "/api/v1/backupInfrastructure/repositories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRepositoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
