// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/veeamhub/veeam-vbr-sdk-go/models"
)

// GetAllRepositoriesStatesReader is a Reader for the GetAllRepositoriesStates structure.
type GetAllRepositoriesStatesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllRepositoriesStatesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllRepositoriesStatesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllRepositoriesStatesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllRepositoriesStatesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllRepositoriesStatesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAllRepositoriesStatesOK creates a GetAllRepositoriesStatesOK with default headers values
func NewGetAllRepositoriesStatesOK() *GetAllRepositoriesStatesOK {
	return &GetAllRepositoriesStatesOK{}
}

/* GetAllRepositoriesStatesOK describes a response with status code 200, with default header values.

OK
*/
type GetAllRepositoriesStatesOK struct {
	Payload *models.RepositoryStatesResult
}

func (o *GetAllRepositoriesStatesOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/backupInfrastructure/repositories/states][%d] getAllRepositoriesStatesOK  %+v", 200, o.Payload)
}
func (o *GetAllRepositoriesStatesOK) GetPayload() *models.RepositoryStatesResult {
	return o.Payload
}

func (o *GetAllRepositoriesStatesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RepositoryStatesResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllRepositoriesStatesUnauthorized creates a GetAllRepositoriesStatesUnauthorized with default headers values
func NewGetAllRepositoriesStatesUnauthorized() *GetAllRepositoriesStatesUnauthorized {
	return &GetAllRepositoriesStatesUnauthorized{}
}

/* GetAllRepositoriesStatesUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The authorization header has been expected but not found (or found but is expired).
*/
type GetAllRepositoriesStatesUnauthorized struct {
	Payload *models.Error
}

func (o *GetAllRepositoriesStatesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/backupInfrastructure/repositories/states][%d] getAllRepositoriesStatesUnauthorized  %+v", 401, o.Payload)
}
func (o *GetAllRepositoriesStatesUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAllRepositoriesStatesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllRepositoriesStatesForbidden creates a GetAllRepositoriesStatesForbidden with default headers values
func NewGetAllRepositoriesStatesForbidden() *GetAllRepositoriesStatesForbidden {
	return &GetAllRepositoriesStatesForbidden{}
}

/* GetAllRepositoriesStatesForbidden describes a response with status code 403, with default header values.

Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.
*/
type GetAllRepositoriesStatesForbidden struct {
	Payload *models.Error
}

func (o *GetAllRepositoriesStatesForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/backupInfrastructure/repositories/states][%d] getAllRepositoriesStatesForbidden  %+v", 403, o.Payload)
}
func (o *GetAllRepositoriesStatesForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAllRepositoriesStatesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllRepositoriesStatesInternalServerError creates a GetAllRepositoriesStatesInternalServerError with default headers values
func NewGetAllRepositoriesStatesInternalServerError() *GetAllRepositoriesStatesInternalServerError {
	return &GetAllRepositoriesStatesInternalServerError{}
}

/* GetAllRepositoriesStatesInternalServerError describes a response with status code 500, with default header values.

Internal server error. The request has been received but could not be completed because of an internal error at the server side.
*/
type GetAllRepositoriesStatesInternalServerError struct {
	Payload *models.Error
}

func (o *GetAllRepositoriesStatesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/backupInfrastructure/repositories/states][%d] getAllRepositoriesStatesInternalServerError  %+v", 500, o.Payload)
}
func (o *GetAllRepositoriesStatesInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAllRepositoriesStatesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
