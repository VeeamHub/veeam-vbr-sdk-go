// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/veeamhub/veeam-vbr-sdk-go/models"
)

// GetAllRepositoriesReader is a Reader for the GetAllRepositories structure.
type GetAllRepositoriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllRepositoriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllRepositoriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAllRepositoriesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllRepositoriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllRepositoriesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAllRepositoriesOK creates a GetAllRepositoriesOK with default headers values
func NewGetAllRepositoriesOK() *GetAllRepositoriesOK {
	return &GetAllRepositoriesOK{}
}

/* GetAllRepositoriesOK describes a response with status code 200, with default header values.

OK
*/
type GetAllRepositoriesOK struct {
	Payload *models.RepositoriesResult
}

func (o *GetAllRepositoriesOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/backupInfrastructure/repositories][%d] getAllRepositoriesOK  %+v", 200, o.Payload)
}
func (o *GetAllRepositoriesOK) GetPayload() *models.RepositoriesResult {
	return o.Payload
}

func (o *GetAllRepositoriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RepositoriesResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllRepositoriesUnauthorized creates a GetAllRepositoriesUnauthorized with default headers values
func NewGetAllRepositoriesUnauthorized() *GetAllRepositoriesUnauthorized {
	return &GetAllRepositoriesUnauthorized{}
}

/* GetAllRepositoriesUnauthorized describes a response with status code 401, with default header values.

Unauthorized. The authorization header has been expected but not found (or found but is expired).
*/
type GetAllRepositoriesUnauthorized struct {
	Payload *models.Error
}

func (o *GetAllRepositoriesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/backupInfrastructure/repositories][%d] getAllRepositoriesUnauthorized  %+v", 401, o.Payload)
}
func (o *GetAllRepositoriesUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAllRepositoriesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllRepositoriesForbidden creates a GetAllRepositoriesForbidden with default headers values
func NewGetAllRepositoriesForbidden() *GetAllRepositoriesForbidden {
	return &GetAllRepositoriesForbidden{}
}

/* GetAllRepositoriesForbidden describes a response with status code 403, with default header values.

Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.
*/
type GetAllRepositoriesForbidden struct {
	Payload *models.Error
}

func (o *GetAllRepositoriesForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/backupInfrastructure/repositories][%d] getAllRepositoriesForbidden  %+v", 403, o.Payload)
}
func (o *GetAllRepositoriesForbidden) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAllRepositoriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllRepositoriesInternalServerError creates a GetAllRepositoriesInternalServerError with default headers values
func NewGetAllRepositoriesInternalServerError() *GetAllRepositoriesInternalServerError {
	return &GetAllRepositoriesInternalServerError{}
}

/* GetAllRepositoriesInternalServerError describes a response with status code 500, with default header values.

Internal server error. The request has been received but could not be completed because of an internal error at the server side.
*/
type GetAllRepositoriesInternalServerError struct {
	Payload *models.Error
}

func (o *GetAllRepositoriesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /api/v1/backupInfrastructure/repositories][%d] getAllRepositoriesInternalServerError  %+v", 500, o.Payload)
}
func (o *GetAllRepositoriesInternalServerError) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetAllRepositoriesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
