/*
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic. 
 *
 * API version: 1.0-rev2
 * Contact: support@veeam.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// RepositoryExportSpec struct for RepositoryExportSpec
type RepositoryExportSpec struct {
	// Array of backup repository IDs.
	Ids *[]string `json:"ids,omitempty"`
	// Array of backup repository types.
	Types *[]ERepositoryType `json:"types,omitempty"`
	// Array of repository names. Wildcard characters are supported.
	Names *[]string `json:"names,omitempty"`
}

// NewRepositoryExportSpec instantiates a new RepositoryExportSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryExportSpec() *RepositoryExportSpec {
	this := RepositoryExportSpec{}
	return &this
}

// NewRepositoryExportSpecWithDefaults instantiates a new RepositoryExportSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryExportSpecWithDefaults() *RepositoryExportSpec {
	this := RepositoryExportSpec{}
	return &this
}

// GetIds returns the Ids field value if set, zero value otherwise.
func (o *RepositoryExportSpec) GetIds() []string {
	if o == nil || o.Ids == nil {
		var ret []string
		return ret
	}
	return *o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryExportSpec) GetIdsOk() (*[]string, bool) {
	if o == nil || o.Ids == nil {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *RepositoryExportSpec) HasIds() bool {
	if o != nil && o.Ids != nil {
		return true
	}

	return false
}

// SetIds gets a reference to the given []string and assigns it to the Ids field.
func (o *RepositoryExportSpec) SetIds(v []string) {
	o.Ids = &v
}

// GetTypes returns the Types field value if set, zero value otherwise.
func (o *RepositoryExportSpec) GetTypes() []ERepositoryType {
	if o == nil || o.Types == nil {
		var ret []ERepositoryType
		return ret
	}
	return *o.Types
}

// GetTypesOk returns a tuple with the Types field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryExportSpec) GetTypesOk() (*[]ERepositoryType, bool) {
	if o == nil || o.Types == nil {
		return nil, false
	}
	return o.Types, true
}

// HasTypes returns a boolean if a field has been set.
func (o *RepositoryExportSpec) HasTypes() bool {
	if o != nil && o.Types != nil {
		return true
	}

	return false
}

// SetTypes gets a reference to the given []ERepositoryType and assigns it to the Types field.
func (o *RepositoryExportSpec) SetTypes(v []ERepositoryType) {
	o.Types = &v
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *RepositoryExportSpec) GetNames() []string {
	if o == nil || o.Names == nil {
		var ret []string
		return ret
	}
	return *o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryExportSpec) GetNamesOk() (*[]string, bool) {
	if o == nil || o.Names == nil {
		return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *RepositoryExportSpec) HasNames() bool {
	if o != nil && o.Names != nil {
		return true
	}

	return false
}

// SetNames gets a reference to the given []string and assigns it to the Names field.
func (o *RepositoryExportSpec) SetNames(v []string) {
	o.Names = &v
}

func (o RepositoryExportSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ids != nil {
		toSerialize["ids"] = o.Ids
	}
	if o.Types != nil {
		toSerialize["types"] = o.Types
	}
	if o.Names != nil {
		toSerialize["names"] = o.Names
	}
	return json.Marshal(toSerialize)
}

type NullableRepositoryExportSpec struct {
	value *RepositoryExportSpec
	isSet bool
}

func (v NullableRepositoryExportSpec) Get() *RepositoryExportSpec {
	return v.value
}

func (v *NullableRepositoryExportSpec) Set(val *RepositoryExportSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryExportSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryExportSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryExportSpec(val *RepositoryExportSpec) *NullableRepositoryExportSpec {
	return &NullableRepositoryExportSpec{value: val, isSet: true}
}

func (v NullableRepositoryExportSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryExportSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


