/*
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic. 
 *
 * API version: 1.0-rev1
 * Contact: support@veeam.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// GeneralOptionsModel struct for GeneralOptionsModel
type GeneralOptionsModel struct {
	EmailSettings *GeneralOptionsEmailNotificationsModel `json:"emailSettings,omitempty"`
	Notifications *GeneralOptionsNotificationsModel `json:"notifications,omitempty"`
}

// NewGeneralOptionsModel instantiates a new GeneralOptionsModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeneralOptionsModel() *GeneralOptionsModel {
	this := GeneralOptionsModel{}
	return &this
}

// NewGeneralOptionsModelWithDefaults instantiates a new GeneralOptionsModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeneralOptionsModelWithDefaults() *GeneralOptionsModel {
	this := GeneralOptionsModel{}
	return &this
}

// GetEmailSettings returns the EmailSettings field value if set, zero value otherwise.
func (o *GeneralOptionsModel) GetEmailSettings() GeneralOptionsEmailNotificationsModel {
	if o == nil || o.EmailSettings == nil {
		var ret GeneralOptionsEmailNotificationsModel
		return ret
	}
	return *o.EmailSettings
}

// GetEmailSettingsOk returns a tuple with the EmailSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralOptionsModel) GetEmailSettingsOk() (*GeneralOptionsEmailNotificationsModel, bool) {
	if o == nil || o.EmailSettings == nil {
		return nil, false
	}
	return o.EmailSettings, true
}

// HasEmailSettings returns a boolean if a field has been set.
func (o *GeneralOptionsModel) HasEmailSettings() bool {
	if o != nil && o.EmailSettings != nil {
		return true
	}

	return false
}

// SetEmailSettings gets a reference to the given GeneralOptionsEmailNotificationsModel and assigns it to the EmailSettings field.
func (o *GeneralOptionsModel) SetEmailSettings(v GeneralOptionsEmailNotificationsModel) {
	o.EmailSettings = &v
}

// GetNotifications returns the Notifications field value if set, zero value otherwise.
func (o *GeneralOptionsModel) GetNotifications() GeneralOptionsNotificationsModel {
	if o == nil || o.Notifications == nil {
		var ret GeneralOptionsNotificationsModel
		return ret
	}
	return *o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneralOptionsModel) GetNotificationsOk() (*GeneralOptionsNotificationsModel, bool) {
	if o == nil || o.Notifications == nil {
		return nil, false
	}
	return o.Notifications, true
}

// HasNotifications returns a boolean if a field has been set.
func (o *GeneralOptionsModel) HasNotifications() bool {
	if o != nil && o.Notifications != nil {
		return true
	}

	return false
}

// SetNotifications gets a reference to the given GeneralOptionsNotificationsModel and assigns it to the Notifications field.
func (o *GeneralOptionsModel) SetNotifications(v GeneralOptionsNotificationsModel) {
	o.Notifications = &v
}

func (o GeneralOptionsModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EmailSettings != nil {
		toSerialize["emailSettings"] = o.EmailSettings
	}
	if o.Notifications != nil {
		toSerialize["notifications"] = o.Notifications
	}
	return json.Marshal(toSerialize)
}

type NullableGeneralOptionsModel struct {
	value *GeneralOptionsModel
	isSet bool
}

func (v NullableGeneralOptionsModel) Get() *GeneralOptionsModel {
	return v.value
}

func (v *NullableGeneralOptionsModel) Set(val *GeneralOptionsModel) {
	v.value = val
	v.isSet = true
}

func (v NullableGeneralOptionsModel) IsSet() bool {
	return v.isSet
}

func (v *NullableGeneralOptionsModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeneralOptionsModel(val *GeneralOptionsModel) *NullableGeneralOptionsModel {
	return &NullableGeneralOptionsModel{value: val, isSet: true}
}

func (v NullableGeneralOptionsModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeneralOptionsModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


