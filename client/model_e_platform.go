/*
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic. 
 *
 * API version: 1.0-rev1
 * Contact: support@veeam.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// EPlatform the model 'EPlatform'
type EPlatform string

// List of EPlatform
const (
	EPLATFORM_VMWARE EPlatform = "Vmware"
	EPLATFORM_HYPER_V EPlatform = "HyperV"
	EPLATFORM_TEST EPlatform = "Test"
	EPLATFORM_VCD EPlatform = "Vcd"
	EPLATFORM_TAPE EPlatform = "Tape"
	EPLATFORM_END_POINT EPlatform = "EndPoint"
	EPLATFORM_LINUX_PHYSICAL EPlatform = "LinuxPhysical"
	EPLATFORM_CUSTOM_PLATFORM EPlatform = "CustomPlatform"
	EPLATFORM_CONF EPlatform = "Conf"
	EPLATFORM_NAS_BACKUP EPlatform = "NasBackup"
	EPLATFORM_EMULATED_VM_WARE EPlatform = "EmulatedVmWare"
	EPLATFORM_EXTENSION0 EPlatform = "Extension0"
	EPLATFORM_EXTENSION1 EPlatform = "Extension1"
	EPLATFORM_EXTENSION EPlatform = "Extension"
)

func (v *EPlatform) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EPlatform(value)
	for _, existing := range []EPlatform{ "Vmware", "HyperV", "Test", "Vcd", "Tape", "EndPoint", "LinuxPhysical", "CustomPlatform", "Conf", "NasBackup", "EmulatedVmWare", "Extension0", "Extension1", "Extension",   } {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EPlatform", value)
}

// Ptr returns reference to EPlatform value
func (v EPlatform) Ptr() *EPlatform {
	return &v
}

type NullableEPlatform struct {
	value *EPlatform
	isSet bool
}

func (v NullableEPlatform) Get() *EPlatform {
	return v.value
}

func (v *NullableEPlatform) Set(val *EPlatform) {
	v.value = val
	v.isSet = true
}

func (v NullableEPlatform) IsSet() bool {
	return v.isSet
}

func (v *NullableEPlatform) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEPlatform(val *EPlatform) *NullableEPlatform {
	return &NullableEPlatform{value: val, isSet: true}
}

func (v NullableEPlatform) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEPlatform) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

