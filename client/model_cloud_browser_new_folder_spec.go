/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// CloudBrowserNewFolderSpec struct for CloudBrowserNewFolderSpec
type CloudBrowserNewFolderSpec struct {
	// ID of a cloud credentials record requiered to connect to the object storage.
	CredentialsId string `json:"credentialsId"`
	ServiceType ECloudServiceType `json:"serviceType"`
	// Name of the new folder.
	NewFolderName string `json:"newFolderName"`
}

// NewCloudBrowserNewFolderSpec instantiates a new CloudBrowserNewFolderSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudBrowserNewFolderSpec(credentialsId string, serviceType ECloudServiceType, newFolderName string) *CloudBrowserNewFolderSpec {
	this := CloudBrowserNewFolderSpec{}
	this.CredentialsId = credentialsId
	this.ServiceType = serviceType
	this.NewFolderName = newFolderName
	return &this
}

// NewCloudBrowserNewFolderSpecWithDefaults instantiates a new CloudBrowserNewFolderSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudBrowserNewFolderSpecWithDefaults() *CloudBrowserNewFolderSpec {
	this := CloudBrowserNewFolderSpec{}
	return &this
}

// GetCredentialsId returns the CredentialsId field value
func (o *CloudBrowserNewFolderSpec) GetCredentialsId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CredentialsId
}

// GetCredentialsIdOk returns a tuple with the CredentialsId field value
// and a boolean to check if the value has been set.
func (o *CloudBrowserNewFolderSpec) GetCredentialsIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CredentialsId, true
}

// SetCredentialsId sets field value
func (o *CloudBrowserNewFolderSpec) SetCredentialsId(v string) {
	o.CredentialsId = v
}

// GetServiceType returns the ServiceType field value
func (o *CloudBrowserNewFolderSpec) GetServiceType() ECloudServiceType {
	if o == nil {
		var ret ECloudServiceType
		return ret
	}

	return o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value
// and a boolean to check if the value has been set.
func (o *CloudBrowserNewFolderSpec) GetServiceTypeOk() (*ECloudServiceType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ServiceType, true
}

// SetServiceType sets field value
func (o *CloudBrowserNewFolderSpec) SetServiceType(v ECloudServiceType) {
	o.ServiceType = v
}

// GetNewFolderName returns the NewFolderName field value
func (o *CloudBrowserNewFolderSpec) GetNewFolderName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewFolderName
}

// GetNewFolderNameOk returns a tuple with the NewFolderName field value
// and a boolean to check if the value has been set.
func (o *CloudBrowserNewFolderSpec) GetNewFolderNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.NewFolderName, true
}

// SetNewFolderName sets field value
func (o *CloudBrowserNewFolderSpec) SetNewFolderName(v string) {
	o.NewFolderName = v
}

func (o CloudBrowserNewFolderSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["credentialsId"] = o.CredentialsId
	}
	if true {
		toSerialize["serviceType"] = o.ServiceType
	}
	if true {
		toSerialize["newFolderName"] = o.NewFolderName
	}
	return json.Marshal(toSerialize)
}

type NullableCloudBrowserNewFolderSpec struct {
	value *CloudBrowserNewFolderSpec
	isSet bool
}

func (v NullableCloudBrowserNewFolderSpec) Get() *CloudBrowserNewFolderSpec {
	return v.value
}

func (v *NullableCloudBrowserNewFolderSpec) Set(val *CloudBrowserNewFolderSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudBrowserNewFolderSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudBrowserNewFolderSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudBrowserNewFolderSpec(val *CloudBrowserNewFolderSpec) *NullableCloudBrowserNewFolderSpec {
	return &NullableCloudBrowserNewFolderSpec{value: val, isSet: true}
}

func (v NullableCloudBrowserNewFolderSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudBrowserNewFolderSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


