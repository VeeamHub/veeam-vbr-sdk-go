/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// CloudBrowserNewFolderSpec - struct for CloudBrowserNewFolderSpec
type CloudBrowserNewFolderSpec struct {
	AmazonS3BrowserDestinationSpec *AmazonS3BrowserDestinationSpec
	AmazonSnowballEdgeBrowserDestinationSpec *AmazonSnowballEdgeBrowserDestinationSpec
	AzureBlobBrowserDestinationSpec *AzureBlobBrowserDestinationSpec
	AzureDataBoxBrowserDestinationSpec *AzureDataBoxBrowserDestinationSpec
	GoogleCloudStorageBrowserDestinationSpec *GoogleCloudStorageBrowserDestinationSpec
	IBMCloudStorageBrowserDestinationSpec *IBMCloudStorageBrowserDestinationSpec
	S3CompatibleBrowserDestinationSpec *S3CompatibleBrowserDestinationSpec
	WasabiCloudStorageBrowserDestinationSpec *WasabiCloudStorageBrowserDestinationSpec
}

// AmazonS3BrowserDestinationSpecAsCloudBrowserNewFolderSpec is a convenience function that returns AmazonS3BrowserDestinationSpec wrapped in CloudBrowserNewFolderSpec
func AmazonS3BrowserDestinationSpecAsCloudBrowserNewFolderSpec(v *AmazonS3BrowserDestinationSpec) CloudBrowserNewFolderSpec {
	return CloudBrowserNewFolderSpec{
		AmazonS3BrowserDestinationSpec: v,
	}
}

// AmazonSnowballEdgeBrowserDestinationSpecAsCloudBrowserNewFolderSpec is a convenience function that returns AmazonSnowballEdgeBrowserDestinationSpec wrapped in CloudBrowserNewFolderSpec
func AmazonSnowballEdgeBrowserDestinationSpecAsCloudBrowserNewFolderSpec(v *AmazonSnowballEdgeBrowserDestinationSpec) CloudBrowserNewFolderSpec {
	return CloudBrowserNewFolderSpec{
		AmazonSnowballEdgeBrowserDestinationSpec: v,
	}
}

// AzureBlobBrowserDestinationSpecAsCloudBrowserNewFolderSpec is a convenience function that returns AzureBlobBrowserDestinationSpec wrapped in CloudBrowserNewFolderSpec
func AzureBlobBrowserDestinationSpecAsCloudBrowserNewFolderSpec(v *AzureBlobBrowserDestinationSpec) CloudBrowserNewFolderSpec {
	return CloudBrowserNewFolderSpec{
		AzureBlobBrowserDestinationSpec: v,
	}
}

// AzureDataBoxBrowserDestinationSpecAsCloudBrowserNewFolderSpec is a convenience function that returns AzureDataBoxBrowserDestinationSpec wrapped in CloudBrowserNewFolderSpec
func AzureDataBoxBrowserDestinationSpecAsCloudBrowserNewFolderSpec(v *AzureDataBoxBrowserDestinationSpec) CloudBrowserNewFolderSpec {
	return CloudBrowserNewFolderSpec{
		AzureDataBoxBrowserDestinationSpec: v,
	}
}

// GoogleCloudStorageBrowserDestinationSpecAsCloudBrowserNewFolderSpec is a convenience function that returns GoogleCloudStorageBrowserDestinationSpec wrapped in CloudBrowserNewFolderSpec
func GoogleCloudStorageBrowserDestinationSpecAsCloudBrowserNewFolderSpec(v *GoogleCloudStorageBrowserDestinationSpec) CloudBrowserNewFolderSpec {
	return CloudBrowserNewFolderSpec{
		GoogleCloudStorageBrowserDestinationSpec: v,
	}
}

// IBMCloudStorageBrowserDestinationSpecAsCloudBrowserNewFolderSpec is a convenience function that returns IBMCloudStorageBrowserDestinationSpec wrapped in CloudBrowserNewFolderSpec
func IBMCloudStorageBrowserDestinationSpecAsCloudBrowserNewFolderSpec(v *IBMCloudStorageBrowserDestinationSpec) CloudBrowserNewFolderSpec {
	return CloudBrowserNewFolderSpec{
		IBMCloudStorageBrowserDestinationSpec: v,
	}
}

// S3CompatibleBrowserDestinationSpecAsCloudBrowserNewFolderSpec is a convenience function that returns S3CompatibleBrowserDestinationSpec wrapped in CloudBrowserNewFolderSpec
func S3CompatibleBrowserDestinationSpecAsCloudBrowserNewFolderSpec(v *S3CompatibleBrowserDestinationSpec) CloudBrowserNewFolderSpec {
	return CloudBrowserNewFolderSpec{
		S3CompatibleBrowserDestinationSpec: v,
	}
}

// WasabiCloudStorageBrowserDestinationSpecAsCloudBrowserNewFolderSpec is a convenience function that returns WasabiCloudStorageBrowserDestinationSpec wrapped in CloudBrowserNewFolderSpec
func WasabiCloudStorageBrowserDestinationSpecAsCloudBrowserNewFolderSpec(v *WasabiCloudStorageBrowserDestinationSpec) CloudBrowserNewFolderSpec {
	return CloudBrowserNewFolderSpec{
		WasabiCloudStorageBrowserDestinationSpec: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CloudBrowserNewFolderSpec) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AmazonS3BrowserDestinationSpec
	err = newStrictDecoder(data).Decode(&dst.AmazonS3BrowserDestinationSpec)
	if err == nil {
		jsonAmazonS3BrowserDestinationSpec, _ := json.Marshal(dst.AmazonS3BrowserDestinationSpec)
		if string(jsonAmazonS3BrowserDestinationSpec) == "{}" { // empty struct
			dst.AmazonS3BrowserDestinationSpec = nil
		} else {
			match++
		}
	} else {
		dst.AmazonS3BrowserDestinationSpec = nil
	}

	// try to unmarshal data into AmazonSnowballEdgeBrowserDestinationSpec
	err = newStrictDecoder(data).Decode(&dst.AmazonSnowballEdgeBrowserDestinationSpec)
	if err == nil {
		jsonAmazonSnowballEdgeBrowserDestinationSpec, _ := json.Marshal(dst.AmazonSnowballEdgeBrowserDestinationSpec)
		if string(jsonAmazonSnowballEdgeBrowserDestinationSpec) == "{}" { // empty struct
			dst.AmazonSnowballEdgeBrowserDestinationSpec = nil
		} else {
			match++
		}
	} else {
		dst.AmazonSnowballEdgeBrowserDestinationSpec = nil
	}

	// try to unmarshal data into AzureBlobBrowserDestinationSpec
	err = newStrictDecoder(data).Decode(&dst.AzureBlobBrowserDestinationSpec)
	if err == nil {
		jsonAzureBlobBrowserDestinationSpec, _ := json.Marshal(dst.AzureBlobBrowserDestinationSpec)
		if string(jsonAzureBlobBrowserDestinationSpec) == "{}" { // empty struct
			dst.AzureBlobBrowserDestinationSpec = nil
		} else {
			match++
		}
	} else {
		dst.AzureBlobBrowserDestinationSpec = nil
	}

	// try to unmarshal data into AzureDataBoxBrowserDestinationSpec
	err = newStrictDecoder(data).Decode(&dst.AzureDataBoxBrowserDestinationSpec)
	if err == nil {
		jsonAzureDataBoxBrowserDestinationSpec, _ := json.Marshal(dst.AzureDataBoxBrowserDestinationSpec)
		if string(jsonAzureDataBoxBrowserDestinationSpec) == "{}" { // empty struct
			dst.AzureDataBoxBrowserDestinationSpec = nil
		} else {
			match++
		}
	} else {
		dst.AzureDataBoxBrowserDestinationSpec = nil
	}

	// try to unmarshal data into GoogleCloudStorageBrowserDestinationSpec
	err = newStrictDecoder(data).Decode(&dst.GoogleCloudStorageBrowserDestinationSpec)
	if err == nil {
		jsonGoogleCloudStorageBrowserDestinationSpec, _ := json.Marshal(dst.GoogleCloudStorageBrowserDestinationSpec)
		if string(jsonGoogleCloudStorageBrowserDestinationSpec) == "{}" { // empty struct
			dst.GoogleCloudStorageBrowserDestinationSpec = nil
		} else {
			match++
		}
	} else {
		dst.GoogleCloudStorageBrowserDestinationSpec = nil
	}

	// try to unmarshal data into IBMCloudStorageBrowserDestinationSpec
	err = newStrictDecoder(data).Decode(&dst.IBMCloudStorageBrowserDestinationSpec)
	if err == nil {
		jsonIBMCloudStorageBrowserDestinationSpec, _ := json.Marshal(dst.IBMCloudStorageBrowserDestinationSpec)
		if string(jsonIBMCloudStorageBrowserDestinationSpec) == "{}" { // empty struct
			dst.IBMCloudStorageBrowserDestinationSpec = nil
		} else {
			match++
		}
	} else {
		dst.IBMCloudStorageBrowserDestinationSpec = nil
	}

	// try to unmarshal data into S3CompatibleBrowserDestinationSpec
	err = newStrictDecoder(data).Decode(&dst.S3CompatibleBrowserDestinationSpec)
	if err == nil {
		jsonS3CompatibleBrowserDestinationSpec, _ := json.Marshal(dst.S3CompatibleBrowserDestinationSpec)
		if string(jsonS3CompatibleBrowserDestinationSpec) == "{}" { // empty struct
			dst.S3CompatibleBrowserDestinationSpec = nil
		} else {
			match++
		}
	} else {
		dst.S3CompatibleBrowserDestinationSpec = nil
	}

	// try to unmarshal data into WasabiCloudStorageBrowserDestinationSpec
	err = newStrictDecoder(data).Decode(&dst.WasabiCloudStorageBrowserDestinationSpec)
	if err == nil {
		jsonWasabiCloudStorageBrowserDestinationSpec, _ := json.Marshal(dst.WasabiCloudStorageBrowserDestinationSpec)
		if string(jsonWasabiCloudStorageBrowserDestinationSpec) == "{}" { // empty struct
			dst.WasabiCloudStorageBrowserDestinationSpec = nil
		} else {
			match++
		}
	} else {
		dst.WasabiCloudStorageBrowserDestinationSpec = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AmazonS3BrowserDestinationSpec = nil
		dst.AmazonSnowballEdgeBrowserDestinationSpec = nil
		dst.AzureBlobBrowserDestinationSpec = nil
		dst.AzureDataBoxBrowserDestinationSpec = nil
		dst.GoogleCloudStorageBrowserDestinationSpec = nil
		dst.IBMCloudStorageBrowserDestinationSpec = nil
		dst.S3CompatibleBrowserDestinationSpec = nil
		dst.WasabiCloudStorageBrowserDestinationSpec = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CloudBrowserNewFolderSpec)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CloudBrowserNewFolderSpec)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CloudBrowserNewFolderSpec) MarshalJSON() ([]byte, error) {
	if src.AmazonS3BrowserDestinationSpec != nil {
		return json.Marshal(&src.AmazonS3BrowserDestinationSpec)
	}

	if src.AmazonSnowballEdgeBrowserDestinationSpec != nil {
		return json.Marshal(&src.AmazonSnowballEdgeBrowserDestinationSpec)
	}

	if src.AzureBlobBrowserDestinationSpec != nil {
		return json.Marshal(&src.AzureBlobBrowserDestinationSpec)
	}

	if src.AzureDataBoxBrowserDestinationSpec != nil {
		return json.Marshal(&src.AzureDataBoxBrowserDestinationSpec)
	}

	if src.GoogleCloudStorageBrowserDestinationSpec != nil {
		return json.Marshal(&src.GoogleCloudStorageBrowserDestinationSpec)
	}

	if src.IBMCloudStorageBrowserDestinationSpec != nil {
		return json.Marshal(&src.IBMCloudStorageBrowserDestinationSpec)
	}

	if src.S3CompatibleBrowserDestinationSpec != nil {
		return json.Marshal(&src.S3CompatibleBrowserDestinationSpec)
	}

	if src.WasabiCloudStorageBrowserDestinationSpec != nil {
		return json.Marshal(&src.WasabiCloudStorageBrowserDestinationSpec)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CloudBrowserNewFolderSpec) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AmazonS3BrowserDestinationSpec != nil {
		return obj.AmazonS3BrowserDestinationSpec
	}

	if obj.AmazonSnowballEdgeBrowserDestinationSpec != nil {
		return obj.AmazonSnowballEdgeBrowserDestinationSpec
	}

	if obj.AzureBlobBrowserDestinationSpec != nil {
		return obj.AzureBlobBrowserDestinationSpec
	}

	if obj.AzureDataBoxBrowserDestinationSpec != nil {
		return obj.AzureDataBoxBrowserDestinationSpec
	}

	if obj.GoogleCloudStorageBrowserDestinationSpec != nil {
		return obj.GoogleCloudStorageBrowserDestinationSpec
	}

	if obj.IBMCloudStorageBrowserDestinationSpec != nil {
		return obj.IBMCloudStorageBrowserDestinationSpec
	}

	if obj.S3CompatibleBrowserDestinationSpec != nil {
		return obj.S3CompatibleBrowserDestinationSpec
	}

	if obj.WasabiCloudStorageBrowserDestinationSpec != nil {
		return obj.WasabiCloudStorageBrowserDestinationSpec
	}

	// all schemas are nil
	return nil
}

type NullableCloudBrowserNewFolderSpec struct {
	value *CloudBrowserNewFolderSpec
	isSet bool
}

func (v NullableCloudBrowserNewFolderSpec) Get() *CloudBrowserNewFolderSpec {
	return v.value
}

func (v *NullableCloudBrowserNewFolderSpec) Set(val *CloudBrowserNewFolderSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudBrowserNewFolderSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudBrowserNewFolderSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudBrowserNewFolderSpec(val *CloudBrowserNewFolderSpec) *NullableCloudBrowserNewFolderSpec {
	return &NullableCloudBrowserNewFolderSpec{value: val, isSet: true}
}

func (v NullableCloudBrowserNewFolderSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudBrowserNewFolderSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


