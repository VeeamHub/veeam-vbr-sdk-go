/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"time"
)

// BackupsFilters struct for BackupsFilters
type BackupsFilters struct {
	Skip *int32 `json:"skip,omitempty"`
	Limit *int32 `json:"limit,omitempty"`
	OrderColumn *EBackupsFiltersOrderColumn `json:"orderColumn,omitempty"`
	OrderAsc *bool `json:"orderAsc,omitempty"`
	NameFilter *string `json:"nameFilter,omitempty"`
	CreatedAfterFilter *time.Time `json:"createdAfterFilter,omitempty"`
	CreatedBeforeFilter *time.Time `json:"createdBeforeFilter,omitempty"`
	PlatformIdFilter *string `json:"platformIdFilter,omitempty"`
	JobIdFilter *string `json:"jobIdFilter,omitempty"`
	PolicyTagFilter *string `json:"policyTagFilter,omitempty"`
}

// NewBackupsFilters instantiates a new BackupsFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupsFilters() *BackupsFilters {
	this := BackupsFilters{}
	return &this
}

// NewBackupsFiltersWithDefaults instantiates a new BackupsFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupsFiltersWithDefaults() *BackupsFilters {
	this := BackupsFilters{}
	return &this
}

// GetSkip returns the Skip field value if set, zero value otherwise.
func (o *BackupsFilters) GetSkip() int32 {
	if o == nil || isNil(o.Skip) {
		var ret int32
		return ret
	}
	return *o.Skip
}

// GetSkipOk returns a tuple with the Skip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupsFilters) GetSkipOk() (*int32, bool) {
	if o == nil || isNil(o.Skip) {
    return nil, false
	}
	return o.Skip, true
}

// HasSkip returns a boolean if a field has been set.
func (o *BackupsFilters) HasSkip() bool {
	if o != nil && !isNil(o.Skip) {
		return true
	}

	return false
}

// SetSkip gets a reference to the given int32 and assigns it to the Skip field.
func (o *BackupsFilters) SetSkip(v int32) {
	o.Skip = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *BackupsFilters) GetLimit() int32 {
	if o == nil || isNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupsFilters) GetLimitOk() (*int32, bool) {
	if o == nil || isNil(o.Limit) {
    return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *BackupsFilters) HasLimit() bool {
	if o != nil && !isNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *BackupsFilters) SetLimit(v int32) {
	o.Limit = &v
}

// GetOrderColumn returns the OrderColumn field value if set, zero value otherwise.
func (o *BackupsFilters) GetOrderColumn() EBackupsFiltersOrderColumn {
	if o == nil || isNil(o.OrderColumn) {
		var ret EBackupsFiltersOrderColumn
		return ret
	}
	return *o.OrderColumn
}

// GetOrderColumnOk returns a tuple with the OrderColumn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupsFilters) GetOrderColumnOk() (*EBackupsFiltersOrderColumn, bool) {
	if o == nil || isNil(o.OrderColumn) {
    return nil, false
	}
	return o.OrderColumn, true
}

// HasOrderColumn returns a boolean if a field has been set.
func (o *BackupsFilters) HasOrderColumn() bool {
	if o != nil && !isNil(o.OrderColumn) {
		return true
	}

	return false
}

// SetOrderColumn gets a reference to the given EBackupsFiltersOrderColumn and assigns it to the OrderColumn field.
func (o *BackupsFilters) SetOrderColumn(v EBackupsFiltersOrderColumn) {
	o.OrderColumn = &v
}

// GetOrderAsc returns the OrderAsc field value if set, zero value otherwise.
func (o *BackupsFilters) GetOrderAsc() bool {
	if o == nil || isNil(o.OrderAsc) {
		var ret bool
		return ret
	}
	return *o.OrderAsc
}

// GetOrderAscOk returns a tuple with the OrderAsc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupsFilters) GetOrderAscOk() (*bool, bool) {
	if o == nil || isNil(o.OrderAsc) {
    return nil, false
	}
	return o.OrderAsc, true
}

// HasOrderAsc returns a boolean if a field has been set.
func (o *BackupsFilters) HasOrderAsc() bool {
	if o != nil && !isNil(o.OrderAsc) {
		return true
	}

	return false
}

// SetOrderAsc gets a reference to the given bool and assigns it to the OrderAsc field.
func (o *BackupsFilters) SetOrderAsc(v bool) {
	o.OrderAsc = &v
}

// GetNameFilter returns the NameFilter field value if set, zero value otherwise.
func (o *BackupsFilters) GetNameFilter() string {
	if o == nil || isNil(o.NameFilter) {
		var ret string
		return ret
	}
	return *o.NameFilter
}

// GetNameFilterOk returns a tuple with the NameFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupsFilters) GetNameFilterOk() (*string, bool) {
	if o == nil || isNil(o.NameFilter) {
    return nil, false
	}
	return o.NameFilter, true
}

// HasNameFilter returns a boolean if a field has been set.
func (o *BackupsFilters) HasNameFilter() bool {
	if o != nil && !isNil(o.NameFilter) {
		return true
	}

	return false
}

// SetNameFilter gets a reference to the given string and assigns it to the NameFilter field.
func (o *BackupsFilters) SetNameFilter(v string) {
	o.NameFilter = &v
}

// GetCreatedAfterFilter returns the CreatedAfterFilter field value if set, zero value otherwise.
func (o *BackupsFilters) GetCreatedAfterFilter() time.Time {
	if o == nil || isNil(o.CreatedAfterFilter) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAfterFilter
}

// GetCreatedAfterFilterOk returns a tuple with the CreatedAfterFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupsFilters) GetCreatedAfterFilterOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedAfterFilter) {
    return nil, false
	}
	return o.CreatedAfterFilter, true
}

// HasCreatedAfterFilter returns a boolean if a field has been set.
func (o *BackupsFilters) HasCreatedAfterFilter() bool {
	if o != nil && !isNil(o.CreatedAfterFilter) {
		return true
	}

	return false
}

// SetCreatedAfterFilter gets a reference to the given time.Time and assigns it to the CreatedAfterFilter field.
func (o *BackupsFilters) SetCreatedAfterFilter(v time.Time) {
	o.CreatedAfterFilter = &v
}

// GetCreatedBeforeFilter returns the CreatedBeforeFilter field value if set, zero value otherwise.
func (o *BackupsFilters) GetCreatedBeforeFilter() time.Time {
	if o == nil || isNil(o.CreatedBeforeFilter) {
		var ret time.Time
		return ret
	}
	return *o.CreatedBeforeFilter
}

// GetCreatedBeforeFilterOk returns a tuple with the CreatedBeforeFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupsFilters) GetCreatedBeforeFilterOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedBeforeFilter) {
    return nil, false
	}
	return o.CreatedBeforeFilter, true
}

// HasCreatedBeforeFilter returns a boolean if a field has been set.
func (o *BackupsFilters) HasCreatedBeforeFilter() bool {
	if o != nil && !isNil(o.CreatedBeforeFilter) {
		return true
	}

	return false
}

// SetCreatedBeforeFilter gets a reference to the given time.Time and assigns it to the CreatedBeforeFilter field.
func (o *BackupsFilters) SetCreatedBeforeFilter(v time.Time) {
	o.CreatedBeforeFilter = &v
}

// GetPlatformIdFilter returns the PlatformIdFilter field value if set, zero value otherwise.
func (o *BackupsFilters) GetPlatformIdFilter() string {
	if o == nil || isNil(o.PlatformIdFilter) {
		var ret string
		return ret
	}
	return *o.PlatformIdFilter
}

// GetPlatformIdFilterOk returns a tuple with the PlatformIdFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupsFilters) GetPlatformIdFilterOk() (*string, bool) {
	if o == nil || isNil(o.PlatformIdFilter) {
    return nil, false
	}
	return o.PlatformIdFilter, true
}

// HasPlatformIdFilter returns a boolean if a field has been set.
func (o *BackupsFilters) HasPlatformIdFilter() bool {
	if o != nil && !isNil(o.PlatformIdFilter) {
		return true
	}

	return false
}

// SetPlatformIdFilter gets a reference to the given string and assigns it to the PlatformIdFilter field.
func (o *BackupsFilters) SetPlatformIdFilter(v string) {
	o.PlatformIdFilter = &v
}

// GetJobIdFilter returns the JobIdFilter field value if set, zero value otherwise.
func (o *BackupsFilters) GetJobIdFilter() string {
	if o == nil || isNil(o.JobIdFilter) {
		var ret string
		return ret
	}
	return *o.JobIdFilter
}

// GetJobIdFilterOk returns a tuple with the JobIdFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupsFilters) GetJobIdFilterOk() (*string, bool) {
	if o == nil || isNil(o.JobIdFilter) {
    return nil, false
	}
	return o.JobIdFilter, true
}

// HasJobIdFilter returns a boolean if a field has been set.
func (o *BackupsFilters) HasJobIdFilter() bool {
	if o != nil && !isNil(o.JobIdFilter) {
		return true
	}

	return false
}

// SetJobIdFilter gets a reference to the given string and assigns it to the JobIdFilter field.
func (o *BackupsFilters) SetJobIdFilter(v string) {
	o.JobIdFilter = &v
}

// GetPolicyTagFilter returns the PolicyTagFilter field value if set, zero value otherwise.
func (o *BackupsFilters) GetPolicyTagFilter() string {
	if o == nil || isNil(o.PolicyTagFilter) {
		var ret string
		return ret
	}
	return *o.PolicyTagFilter
}

// GetPolicyTagFilterOk returns a tuple with the PolicyTagFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupsFilters) GetPolicyTagFilterOk() (*string, bool) {
	if o == nil || isNil(o.PolicyTagFilter) {
    return nil, false
	}
	return o.PolicyTagFilter, true
}

// HasPolicyTagFilter returns a boolean if a field has been set.
func (o *BackupsFilters) HasPolicyTagFilter() bool {
	if o != nil && !isNil(o.PolicyTagFilter) {
		return true
	}

	return false
}

// SetPolicyTagFilter gets a reference to the given string and assigns it to the PolicyTagFilter field.
func (o *BackupsFilters) SetPolicyTagFilter(v string) {
	o.PolicyTagFilter = &v
}

func (o BackupsFilters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Skip) {
		toSerialize["skip"] = o.Skip
	}
	if !isNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !isNil(o.OrderColumn) {
		toSerialize["orderColumn"] = o.OrderColumn
	}
	if !isNil(o.OrderAsc) {
		toSerialize["orderAsc"] = o.OrderAsc
	}
	if !isNil(o.NameFilter) {
		toSerialize["nameFilter"] = o.NameFilter
	}
	if !isNil(o.CreatedAfterFilter) {
		toSerialize["createdAfterFilter"] = o.CreatedAfterFilter
	}
	if !isNil(o.CreatedBeforeFilter) {
		toSerialize["createdBeforeFilter"] = o.CreatedBeforeFilter
	}
	if !isNil(o.PlatformIdFilter) {
		toSerialize["platformIdFilter"] = o.PlatformIdFilter
	}
	if !isNil(o.JobIdFilter) {
		toSerialize["jobIdFilter"] = o.JobIdFilter
	}
	if !isNil(o.PolicyTagFilter) {
		toSerialize["policyTagFilter"] = o.PolicyTagFilter
	}
	return json.Marshal(toSerialize)
}

type NullableBackupsFilters struct {
	value *BackupsFilters
	isSet bool
}

func (v NullableBackupsFilters) Get() *BackupsFilters {
	return v.value
}

func (v *NullableBackupsFilters) Set(val *BackupsFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupsFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupsFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupsFilters(val *BackupsFilters) *NullableBackupsFilters {
	return &NullableBackupsFilters{value: val, isSet: true}
}

func (v NullableBackupsFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupsFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


