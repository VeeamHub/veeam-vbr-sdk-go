/*
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic. 
 *
 * API version: 1.0-rev1
 * Contact: support@veeam.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// TrafficRuleModel struct for TrafficRuleModel
type TrafficRuleModel struct {
	// ID of the rule.
	Id *string `json:"id,omitempty"`
	// Name of the rule.
	Name string `json:"name"`
	// Start IP address of the range for the backup infrastructure components on the source side.
	SourceIPStart string `json:"sourceIPStart"`
	// End IP address of the range for the backup infrastructure components on the source side.
	SourceIPEnd string `json:"sourceIPEnd"`
	// Start IP address of the range for the backup infrastructure components on the target side.
	TargetIPStart string `json:"targetIPStart"`
	// End IP address of the range for the backup infrastructure components on the target side.
	TargetIPEnd string `json:"targetIPEnd"`
	// If *true*, traffic encryption is enabled.
	EncryptionEnabled *bool `json:"encryptionEnabled,omitempty"`
	// If *true*, traffic throttling is enabled.
	ThrottlingEnabled *bool `json:"throttlingEnabled,omitempty"`
	ThrottlingUnit *ESpeedUnit `json:"throttlingUnit,omitempty"`
	// Maximum speed that must be used to transfer data from source to target.
	ThrottlingValue *int32 `json:"throttlingValue,omitempty"`
	// If *true*, throttling window during which the speed must be limited is enabled.
	ThrottlingWindowEnabled *bool `json:"throttlingWindowEnabled,omitempty"`
	ThrottlingWindowOptions *BackupWindowSettingModel `json:"throttlingWindowOptions,omitempty"`
}

// NewTrafficRuleModel instantiates a new TrafficRuleModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrafficRuleModel(name string, sourceIPStart string, sourceIPEnd string, targetIPStart string, targetIPEnd string) *TrafficRuleModel {
	this := TrafficRuleModel{}
	this.Name = name
	this.SourceIPStart = sourceIPStart
	this.SourceIPEnd = sourceIPEnd
	this.TargetIPStart = targetIPStart
	this.TargetIPEnd = targetIPEnd
	return &this
}

// NewTrafficRuleModelWithDefaults instantiates a new TrafficRuleModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrafficRuleModelWithDefaults() *TrafficRuleModel {
	this := TrafficRuleModel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TrafficRuleModel) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrafficRuleModel) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TrafficRuleModel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TrafficRuleModel) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *TrafficRuleModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TrafficRuleModel) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TrafficRuleModel) SetName(v string) {
	o.Name = v
}

// GetSourceIPStart returns the SourceIPStart field value
func (o *TrafficRuleModel) GetSourceIPStart() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceIPStart
}

// GetSourceIPStartOk returns a tuple with the SourceIPStart field value
// and a boolean to check if the value has been set.
func (o *TrafficRuleModel) GetSourceIPStartOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SourceIPStart, true
}

// SetSourceIPStart sets field value
func (o *TrafficRuleModel) SetSourceIPStart(v string) {
	o.SourceIPStart = v
}

// GetSourceIPEnd returns the SourceIPEnd field value
func (o *TrafficRuleModel) GetSourceIPEnd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceIPEnd
}

// GetSourceIPEndOk returns a tuple with the SourceIPEnd field value
// and a boolean to check if the value has been set.
func (o *TrafficRuleModel) GetSourceIPEndOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SourceIPEnd, true
}

// SetSourceIPEnd sets field value
func (o *TrafficRuleModel) SetSourceIPEnd(v string) {
	o.SourceIPEnd = v
}

// GetTargetIPStart returns the TargetIPStart field value
func (o *TrafficRuleModel) GetTargetIPStart() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetIPStart
}

// GetTargetIPStartOk returns a tuple with the TargetIPStart field value
// and a boolean to check if the value has been set.
func (o *TrafficRuleModel) GetTargetIPStartOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TargetIPStart, true
}

// SetTargetIPStart sets field value
func (o *TrafficRuleModel) SetTargetIPStart(v string) {
	o.TargetIPStart = v
}

// GetTargetIPEnd returns the TargetIPEnd field value
func (o *TrafficRuleModel) GetTargetIPEnd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetIPEnd
}

// GetTargetIPEndOk returns a tuple with the TargetIPEnd field value
// and a boolean to check if the value has been set.
func (o *TrafficRuleModel) GetTargetIPEndOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TargetIPEnd, true
}

// SetTargetIPEnd sets field value
func (o *TrafficRuleModel) SetTargetIPEnd(v string) {
	o.TargetIPEnd = v
}

// GetEncryptionEnabled returns the EncryptionEnabled field value if set, zero value otherwise.
func (o *TrafficRuleModel) GetEncryptionEnabled() bool {
	if o == nil || o.EncryptionEnabled == nil {
		var ret bool
		return ret
	}
	return *o.EncryptionEnabled
}

// GetEncryptionEnabledOk returns a tuple with the EncryptionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrafficRuleModel) GetEncryptionEnabledOk() (*bool, bool) {
	if o == nil || o.EncryptionEnabled == nil {
		return nil, false
	}
	return o.EncryptionEnabled, true
}

// HasEncryptionEnabled returns a boolean if a field has been set.
func (o *TrafficRuleModel) HasEncryptionEnabled() bool {
	if o != nil && o.EncryptionEnabled != nil {
		return true
	}

	return false
}

// SetEncryptionEnabled gets a reference to the given bool and assigns it to the EncryptionEnabled field.
func (o *TrafficRuleModel) SetEncryptionEnabled(v bool) {
	o.EncryptionEnabled = &v
}

// GetThrottlingEnabled returns the ThrottlingEnabled field value if set, zero value otherwise.
func (o *TrafficRuleModel) GetThrottlingEnabled() bool {
	if o == nil || o.ThrottlingEnabled == nil {
		var ret bool
		return ret
	}
	return *o.ThrottlingEnabled
}

// GetThrottlingEnabledOk returns a tuple with the ThrottlingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrafficRuleModel) GetThrottlingEnabledOk() (*bool, bool) {
	if o == nil || o.ThrottlingEnabled == nil {
		return nil, false
	}
	return o.ThrottlingEnabled, true
}

// HasThrottlingEnabled returns a boolean if a field has been set.
func (o *TrafficRuleModel) HasThrottlingEnabled() bool {
	if o != nil && o.ThrottlingEnabled != nil {
		return true
	}

	return false
}

// SetThrottlingEnabled gets a reference to the given bool and assigns it to the ThrottlingEnabled field.
func (o *TrafficRuleModel) SetThrottlingEnabled(v bool) {
	o.ThrottlingEnabled = &v
}

// GetThrottlingUnit returns the ThrottlingUnit field value if set, zero value otherwise.
func (o *TrafficRuleModel) GetThrottlingUnit() ESpeedUnit {
	if o == nil || o.ThrottlingUnit == nil {
		var ret ESpeedUnit
		return ret
	}
	return *o.ThrottlingUnit
}

// GetThrottlingUnitOk returns a tuple with the ThrottlingUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrafficRuleModel) GetThrottlingUnitOk() (*ESpeedUnit, bool) {
	if o == nil || o.ThrottlingUnit == nil {
		return nil, false
	}
	return o.ThrottlingUnit, true
}

// HasThrottlingUnit returns a boolean if a field has been set.
func (o *TrafficRuleModel) HasThrottlingUnit() bool {
	if o != nil && o.ThrottlingUnit != nil {
		return true
	}

	return false
}

// SetThrottlingUnit gets a reference to the given ESpeedUnit and assigns it to the ThrottlingUnit field.
func (o *TrafficRuleModel) SetThrottlingUnit(v ESpeedUnit) {
	o.ThrottlingUnit = &v
}

// GetThrottlingValue returns the ThrottlingValue field value if set, zero value otherwise.
func (o *TrafficRuleModel) GetThrottlingValue() int32 {
	if o == nil || o.ThrottlingValue == nil {
		var ret int32
		return ret
	}
	return *o.ThrottlingValue
}

// GetThrottlingValueOk returns a tuple with the ThrottlingValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrafficRuleModel) GetThrottlingValueOk() (*int32, bool) {
	if o == nil || o.ThrottlingValue == nil {
		return nil, false
	}
	return o.ThrottlingValue, true
}

// HasThrottlingValue returns a boolean if a field has been set.
func (o *TrafficRuleModel) HasThrottlingValue() bool {
	if o != nil && o.ThrottlingValue != nil {
		return true
	}

	return false
}

// SetThrottlingValue gets a reference to the given int32 and assigns it to the ThrottlingValue field.
func (o *TrafficRuleModel) SetThrottlingValue(v int32) {
	o.ThrottlingValue = &v
}

// GetThrottlingWindowEnabled returns the ThrottlingWindowEnabled field value if set, zero value otherwise.
func (o *TrafficRuleModel) GetThrottlingWindowEnabled() bool {
	if o == nil || o.ThrottlingWindowEnabled == nil {
		var ret bool
		return ret
	}
	return *o.ThrottlingWindowEnabled
}

// GetThrottlingWindowEnabledOk returns a tuple with the ThrottlingWindowEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrafficRuleModel) GetThrottlingWindowEnabledOk() (*bool, bool) {
	if o == nil || o.ThrottlingWindowEnabled == nil {
		return nil, false
	}
	return o.ThrottlingWindowEnabled, true
}

// HasThrottlingWindowEnabled returns a boolean if a field has been set.
func (o *TrafficRuleModel) HasThrottlingWindowEnabled() bool {
	if o != nil && o.ThrottlingWindowEnabled != nil {
		return true
	}

	return false
}

// SetThrottlingWindowEnabled gets a reference to the given bool and assigns it to the ThrottlingWindowEnabled field.
func (o *TrafficRuleModel) SetThrottlingWindowEnabled(v bool) {
	o.ThrottlingWindowEnabled = &v
}

// GetThrottlingWindowOptions returns the ThrottlingWindowOptions field value if set, zero value otherwise.
func (o *TrafficRuleModel) GetThrottlingWindowOptions() BackupWindowSettingModel {
	if o == nil || o.ThrottlingWindowOptions == nil {
		var ret BackupWindowSettingModel
		return ret
	}
	return *o.ThrottlingWindowOptions
}

// GetThrottlingWindowOptionsOk returns a tuple with the ThrottlingWindowOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrafficRuleModel) GetThrottlingWindowOptionsOk() (*BackupWindowSettingModel, bool) {
	if o == nil || o.ThrottlingWindowOptions == nil {
		return nil, false
	}
	return o.ThrottlingWindowOptions, true
}

// HasThrottlingWindowOptions returns a boolean if a field has been set.
func (o *TrafficRuleModel) HasThrottlingWindowOptions() bool {
	if o != nil && o.ThrottlingWindowOptions != nil {
		return true
	}

	return false
}

// SetThrottlingWindowOptions gets a reference to the given BackupWindowSettingModel and assigns it to the ThrottlingWindowOptions field.
func (o *TrafficRuleModel) SetThrottlingWindowOptions(v BackupWindowSettingModel) {
	o.ThrottlingWindowOptions = &v
}

func (o TrafficRuleModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["sourceIPStart"] = o.SourceIPStart
	}
	if true {
		toSerialize["sourceIPEnd"] = o.SourceIPEnd
	}
	if true {
		toSerialize["targetIPStart"] = o.TargetIPStart
	}
	if true {
		toSerialize["targetIPEnd"] = o.TargetIPEnd
	}
	if o.EncryptionEnabled != nil {
		toSerialize["encryptionEnabled"] = o.EncryptionEnabled
	}
	if o.ThrottlingEnabled != nil {
		toSerialize["throttlingEnabled"] = o.ThrottlingEnabled
	}
	if o.ThrottlingUnit != nil {
		toSerialize["throttlingUnit"] = o.ThrottlingUnit
	}
	if o.ThrottlingValue != nil {
		toSerialize["throttlingValue"] = o.ThrottlingValue
	}
	if o.ThrottlingWindowEnabled != nil {
		toSerialize["throttlingWindowEnabled"] = o.ThrottlingWindowEnabled
	}
	if o.ThrottlingWindowOptions != nil {
		toSerialize["throttlingWindowOptions"] = o.ThrottlingWindowOptions
	}
	return json.Marshal(toSerialize)
}

type NullableTrafficRuleModel struct {
	value *TrafficRuleModel
	isSet bool
}

func (v NullableTrafficRuleModel) Get() *TrafficRuleModel {
	return v.value
}

func (v *NullableTrafficRuleModel) Set(val *TrafficRuleModel) {
	v.value = val
	v.isSet = true
}

func (v NullableTrafficRuleModel) IsSet() bool {
	return v.isSet
}

func (v *NullableTrafficRuleModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrafficRuleModel(val *TrafficRuleModel) *NullableTrafficRuleModel {
	return &NullableTrafficRuleModel{value: val, isSet: true}
}

func (v NullableTrafficRuleModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrafficRuleModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


