/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// InstantViVMCustomizedRecoverySpec Instant Recovery to a new location or with different settings.
type InstantViVMCustomizedRecoverySpec struct {
	InstantViVMRecoverySpec
	Destination InstantViVMCustomizedRecoveryDestinationSpec `json:"destination"`
	Datastore InstantViVMCustomizedRecoveryDatastoreSpec `json:"datastore"`
	// If *true*, Veeam Backup & Replication overwrites the existing VM that has the same name.
	Overwrite *bool `json:"overwrite,omitempty"`
}

// NewInstantViVMCustomizedRecoverySpec instantiates a new InstantViVMCustomizedRecoverySpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstantViVMCustomizedRecoverySpec(destination InstantViVMCustomizedRecoveryDestinationSpec, datastore InstantViVMCustomizedRecoveryDatastoreSpec) *InstantViVMCustomizedRecoverySpec {
	this := InstantViVMCustomizedRecoverySpec{}
	this.Destination = destination
	this.Datastore = datastore
	return &this
}

// NewInstantViVMCustomizedRecoverySpecWithDefaults instantiates a new InstantViVMCustomizedRecoverySpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstantViVMCustomizedRecoverySpecWithDefaults() *InstantViVMCustomizedRecoverySpec {
	this := InstantViVMCustomizedRecoverySpec{}
	return &this
}

// GetDestination returns the Destination field value
func (o *InstantViVMCustomizedRecoverySpec) GetDestination() InstantViVMCustomizedRecoveryDestinationSpec {
	if o == nil {
		var ret InstantViVMCustomizedRecoveryDestinationSpec
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *InstantViVMCustomizedRecoverySpec) GetDestinationOk() (*InstantViVMCustomizedRecoveryDestinationSpec, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *InstantViVMCustomizedRecoverySpec) SetDestination(v InstantViVMCustomizedRecoveryDestinationSpec) {
	o.Destination = v
}

// GetDatastore returns the Datastore field value
func (o *InstantViVMCustomizedRecoverySpec) GetDatastore() InstantViVMCustomizedRecoveryDatastoreSpec {
	if o == nil {
		var ret InstantViVMCustomizedRecoveryDatastoreSpec
		return ret
	}

	return o.Datastore
}

// GetDatastoreOk returns a tuple with the Datastore field value
// and a boolean to check if the value has been set.
func (o *InstantViVMCustomizedRecoverySpec) GetDatastoreOk() (*InstantViVMCustomizedRecoveryDatastoreSpec, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Datastore, true
}

// SetDatastore sets field value
func (o *InstantViVMCustomizedRecoverySpec) SetDatastore(v InstantViVMCustomizedRecoveryDatastoreSpec) {
	o.Datastore = v
}

// GetOverwrite returns the Overwrite field value if set, zero value otherwise.
func (o *InstantViVMCustomizedRecoverySpec) GetOverwrite() bool {
	if o == nil || isNil(o.Overwrite) {
		var ret bool
		return ret
	}
	return *o.Overwrite
}

// GetOverwriteOk returns a tuple with the Overwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstantViVMCustomizedRecoverySpec) GetOverwriteOk() (*bool, bool) {
	if o == nil || isNil(o.Overwrite) {
    return nil, false
	}
	return o.Overwrite, true
}

// HasOverwrite returns a boolean if a field has been set.
func (o *InstantViVMCustomizedRecoverySpec) HasOverwrite() bool {
	if o != nil && !isNil(o.Overwrite) {
		return true
	}

	return false
}

// SetOverwrite gets a reference to the given bool and assigns it to the Overwrite field.
func (o *InstantViVMCustomizedRecoverySpec) SetOverwrite(v bool) {
	o.Overwrite = &v
}

func (o InstantViVMCustomizedRecoverySpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedInstantViVMRecoverySpec, errInstantViVMRecoverySpec := json.Marshal(o.InstantViVMRecoverySpec)
	if errInstantViVMRecoverySpec != nil {
		return []byte{}, errInstantViVMRecoverySpec
	}
	errInstantViVMRecoverySpec = json.Unmarshal([]byte(serializedInstantViVMRecoverySpec), &toSerialize)
	if errInstantViVMRecoverySpec != nil {
		return []byte{}, errInstantViVMRecoverySpec
	}
	if true {
		toSerialize["destination"] = o.Destination
	}
	if true {
		toSerialize["datastore"] = o.Datastore
	}
	if !isNil(o.Overwrite) {
		toSerialize["overwrite"] = o.Overwrite
	}
	return json.Marshal(toSerialize)
}

type NullableInstantViVMCustomizedRecoverySpec struct {
	value *InstantViVMCustomizedRecoverySpec
	isSet bool
}

func (v NullableInstantViVMCustomizedRecoverySpec) Get() *InstantViVMCustomizedRecoverySpec {
	return v.value
}

func (v *NullableInstantViVMCustomizedRecoverySpec) Set(val *InstantViVMCustomizedRecoverySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableInstantViVMCustomizedRecoverySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableInstantViVMCustomizedRecoverySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstantViVMCustomizedRecoverySpec(val *InstantViVMCustomizedRecoverySpec) *NullableInstantViVMCustomizedRecoverySpec {
	return &NullableInstantViVMCustomizedRecoverySpec{value: val, isSet: true}
}

func (v NullableInstantViVMCustomizedRecoverySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstantViVMCustomizedRecoverySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


