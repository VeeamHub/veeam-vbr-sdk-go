/*
 * Veeam Backup & Replication REST API
 *
 * This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br> Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Parameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic. 
 *
 * API version: 1.0-rev2
 * Contact: support@veeam.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// VmwareFcdWriteCacheSpec Write cache for recovered disks.
type VmwareFcdWriteCacheSpec struct {
	// If *true*, cache redirection is enabled. In this case, all changes made to the recovered disks while the Instant FCD Recovery is active are redirected to the specified `cacheDatastore` associated with the `storagePolicy`.
	RedirectIsEnabled bool `json:"redirectIsEnabled"`
	CacheDatastore *VmwareObjectModel `json:"cacheDatastore,omitempty"`
	StoragePolicy *VmwareObjectModel `json:"storagePolicy,omitempty"`
}

// NewVmwareFcdWriteCacheSpec instantiates a new VmwareFcdWriteCacheSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmwareFcdWriteCacheSpec(redirectIsEnabled bool, ) *VmwareFcdWriteCacheSpec {
	this := VmwareFcdWriteCacheSpec{}
	this.RedirectIsEnabled = redirectIsEnabled
	return &this
}

// NewVmwareFcdWriteCacheSpecWithDefaults instantiates a new VmwareFcdWriteCacheSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmwareFcdWriteCacheSpecWithDefaults() *VmwareFcdWriteCacheSpec {
	this := VmwareFcdWriteCacheSpec{}
	return &this
}

// GetRedirectIsEnabled returns the RedirectIsEnabled field value
func (o *VmwareFcdWriteCacheSpec) GetRedirectIsEnabled() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.RedirectIsEnabled
}

// GetRedirectIsEnabledOk returns a tuple with the RedirectIsEnabled field value
// and a boolean to check if the value has been set.
func (o *VmwareFcdWriteCacheSpec) GetRedirectIsEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RedirectIsEnabled, true
}

// SetRedirectIsEnabled sets field value
func (o *VmwareFcdWriteCacheSpec) SetRedirectIsEnabled(v bool) {
	o.RedirectIsEnabled = v
}

// GetCacheDatastore returns the CacheDatastore field value if set, zero value otherwise.
func (o *VmwareFcdWriteCacheSpec) GetCacheDatastore() VmwareObjectModel {
	if o == nil || o.CacheDatastore == nil {
		var ret VmwareObjectModel
		return ret
	}
	return *o.CacheDatastore
}

// GetCacheDatastoreOk returns a tuple with the CacheDatastore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareFcdWriteCacheSpec) GetCacheDatastoreOk() (*VmwareObjectModel, bool) {
	if o == nil || o.CacheDatastore == nil {
		return nil, false
	}
	return o.CacheDatastore, true
}

// HasCacheDatastore returns a boolean if a field has been set.
func (o *VmwareFcdWriteCacheSpec) HasCacheDatastore() bool {
	if o != nil && o.CacheDatastore != nil {
		return true
	}

	return false
}

// SetCacheDatastore gets a reference to the given VmwareObjectModel and assigns it to the CacheDatastore field.
func (o *VmwareFcdWriteCacheSpec) SetCacheDatastore(v VmwareObjectModel) {
	o.CacheDatastore = &v
}

// GetStoragePolicy returns the StoragePolicy field value if set, zero value otherwise.
func (o *VmwareFcdWriteCacheSpec) GetStoragePolicy() VmwareObjectModel {
	if o == nil || o.StoragePolicy == nil {
		var ret VmwareObjectModel
		return ret
	}
	return *o.StoragePolicy
}

// GetStoragePolicyOk returns a tuple with the StoragePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareFcdWriteCacheSpec) GetStoragePolicyOk() (*VmwareObjectModel, bool) {
	if o == nil || o.StoragePolicy == nil {
		return nil, false
	}
	return o.StoragePolicy, true
}

// HasStoragePolicy returns a boolean if a field has been set.
func (o *VmwareFcdWriteCacheSpec) HasStoragePolicy() bool {
	if o != nil && o.StoragePolicy != nil {
		return true
	}

	return false
}

// SetStoragePolicy gets a reference to the given VmwareObjectModel and assigns it to the StoragePolicy field.
func (o *VmwareFcdWriteCacheSpec) SetStoragePolicy(v VmwareObjectModel) {
	o.StoragePolicy = &v
}

func (o VmwareFcdWriteCacheSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["redirectIsEnabled"] = o.RedirectIsEnabled
	}
	if o.CacheDatastore != nil {
		toSerialize["cacheDatastore"] = o.CacheDatastore
	}
	if o.StoragePolicy != nil {
		toSerialize["storagePolicy"] = o.StoragePolicy
	}
	return json.Marshal(toSerialize)
}

type NullableVmwareFcdWriteCacheSpec struct {
	value *VmwareFcdWriteCacheSpec
	isSet bool
}

func (v NullableVmwareFcdWriteCacheSpec) Get() *VmwareFcdWriteCacheSpec {
	return v.value
}

func (v *NullableVmwareFcdWriteCacheSpec) Set(val *VmwareFcdWriteCacheSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableVmwareFcdWriteCacheSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableVmwareFcdWriteCacheSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmwareFcdWriteCacheSpec(val *VmwareFcdWriteCacheSpec) *NullableVmwareFcdWriteCacheSpec {
	return &NullableVmwareFcdWriteCacheSpec{value: val, isSet: true}
}

func (v NullableVmwareFcdWriteCacheSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmwareFcdWriteCacheSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


