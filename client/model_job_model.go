/*
Veeam Backup & Replication REST API

This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>Requests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br> Some request and response bodies refer to reusable schema objects that are defined in the `schemas` section of the REST API specification. Schemas, in turn, may inherit a part of their properties by referring to other schemas, and be polymorphic by referring to multiple alternate schemas.

API version: 1.1-rev0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// JobModel struct for JobModel
type JobModel struct {
	// ID of the job.
	Id string `json:"id"`
	// Name of the job.
	Name string `json:"name"`
	// Description of the job.
	Description string `json:"description"`
	Type EJobType `json:"type"`
	// If *true*, the job is disabled.
	IsDisabled bool `json:"isDisabled"`
}

// NewJobModel instantiates a new JobModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobModel(id string, name string, description string, type_ EJobType, isDisabled bool) *JobModel {
	this := JobModel{}
	this.Id = id
	this.Name = name
	this.Description = description
	this.Type = type_
	this.IsDisabled = isDisabled
	return &this
}

// NewJobModelWithDefaults instantiates a new JobModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobModelWithDefaults() *JobModel {
	this := JobModel{}
	return &this
}

// GetId returns the Id field value
func (o *JobModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *JobModel) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *JobModel) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *JobModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *JobModel) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *JobModel) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *JobModel) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *JobModel) GetDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *JobModel) SetDescription(v string) {
	o.Description = v
}

// GetType returns the Type field value
func (o *JobModel) GetType() EJobType {
	if o == nil {
		var ret EJobType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *JobModel) GetTypeOk() (*EJobType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *JobModel) SetType(v EJobType) {
	o.Type = v
}

// GetIsDisabled returns the IsDisabled field value
func (o *JobModel) GetIsDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDisabled
}

// GetIsDisabledOk returns a tuple with the IsDisabled field value
// and a boolean to check if the value has been set.
func (o *JobModel) GetIsDisabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsDisabled, true
}

// SetIsDisabled sets field value
func (o *JobModel) SetIsDisabled(v bool) {
	o.IsDisabled = v
}

func (o JobModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["isDisabled"] = o.IsDisabled
	}
	return json.Marshal(toSerialize)
}

type NullableJobModel struct {
	value *JobModel
	isSet bool
}

func (v NullableJobModel) Get() *JobModel {
	return v.value
}

func (v *NullableJobModel) Set(val *JobModel) {
	v.value = val
	v.isSet = true
}

func (v NullableJobModel) IsSet() bool {
	return v.isSet
}

func (v *NullableJobModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobModel(val *JobModel) *NullableJobModel {
	return &NullableJobModel{value: val, isSet: true}
}

func (v NullableJobModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


